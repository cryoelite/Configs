["~#datascript/DB",["^ ","~:schema",["^ ","~:ast/version",["^ "],"~:file/content",["^ "],"~:block/properties-text-values",["^ "],"~:block/alias",["^ ","~:db/valueType","~:db.type/ref","~:db/cardinality","~:db.cardinality/many"],"~:block/pre-block?",["^ "],"~:block/uuid",["^ ","~:db/unique","~:db.unique/identity"],"~:block/priority",["^ "],"~:block/properties",["^ "],"~:block/journal?",["^ "],"~:block/namespace",["^ ","^6","^7"],"~:block/updated-at",["^ "],"~:block/repeated?",["^ "],"~:db/type",["^ "],"~:file/handle",["^ "],"~:block/left",["^ ","^6","^7","~:db/index",true],"~:block/refs",["^ ","^6","^7","^8","^9"],"~:block/scheduled",["^ "],"~:block/properties-order",["^ "],"~:block/created-at",["^ "],"~:block/deadline",["^ "],"~:block/collapsed?",["^ ","^G",true],"~:block/journal-day",["^ "],"~:block/format",["^ "],"~:block/tags",["^ ","^6","^7","^8","^9"],"~:block/content",["^ "],"~:recent/pages",["^ "],"~:block/macros",["^ ","^6","^7","^8","^9"],"~:db/ident",["^ ","^<","^="],"~:block/path-refs",["^ ","^6","^7","^8","^9"],"~:block/parent",["^ ","^6","^7","^G",true],"~:block/type",["^ "],"~:block/page",["^ ","^6","^7","^G",true],"~:block/name",["^ ","^<","^="],"~:file/path",["^ ","^<","^="],"~:block/file",["^ ","^6","^7"],"~:block/marker",["^ "],"~:block/original-name",["^ ","^<","^="],"~:schema/version",["^ "]],"~:datoms",["~#list",[["~#datascript/Datom",[1,"^12",2,536870913]],["^15",[2,"^@",false,536870914]],["^15",[2,"^Y","card",536870913]],["^15",[2,"^11","card",536870913]],["^15",[2,"^;","~ua1dc1a13-d5f9-4528-bd1a-ca7a7c790f61",536870968]],["^15",[3,"^@",false,536870914]],["^15",[3,"^Y","canceled",536870914]],["^15",[3,"^11","CANCELED",536870914]],["^15",[3,"^;","~u620a6fb7-80c1-4f2a-9ad9-46e9bd5f348d",536870968]],["^15",[4,"^@",false,536870914]],["^15",[4,"^Y","todo",536870914]],["^15",[4,"^11","TODO",536870914]],["^15",[4,"^;","~u13e37d9a-f3b4-48c5-91b2-299036f959f8",536870968]],["^15",[5,"^@",false,536870914]],["^15",[5,"^Y","now",536870914]],["^15",[5,"^11","NOW",536870914]],["^15",[5,"^;","~u59fcc919-6ffa-465f-8dac-680390c6fb67",536870968]],["^15",[6,"^@",false,536870914]],["^15",[6,"^Y","later",536870914]],["^15",[6,"^11","LATER",536870914]],["^15",[6,"^;","~u10a14535-a60a-439c-848b-4f819a49f343",536870968]],["^15",[7,"^@",false,536870914]],["^15",[7,"^Y","done",536870914]],["^15",[7,"^11","DONE",536870914]],["^15",[7,"^;","~u631e5e6e-9ef1-41e2-996b-be790ae66b8c",536870968]],["^15",[8,"^@",false,536870914]],["^15",[8,"^Y","doing",536870914]],["^15",[8,"^11","DOING",536870914]],["^15",[8,"^;","~uaf146990-1517-495b-9e3f-bd110f5bde74",536870968]],["^15",[9,"^@",false,536870914]],["^15",[9,"^Y","in-progress",536870914]],["^15",[9,"^11","IN-PROGRESS",536870914]],["^15",[9,"^;","~udf962fa4-6681-417d-a530-215ae4e41a9b",536870968]],["^15",[10,"^@",false,536870914]],["^15",[10,"^Y","c",536870914]],["^15",[10,"^11","C",536870914]],["^15",[10,"^;","~u868b668c-7844-49b5-9d65-d74cf6c85fb4",536870968]],["^15",[11,"^@",false,536870914]],["^15",[11,"^Y","b",536870914]],["^15",[11,"^11","B",536870914]],["^15",[11,"^;","~u2444829f-9b2e-4817-9f45-5757c262855b",536870968]],["^15",[12,"^@",false,536870914]],["^15",[12,"^Y","contents",536870914]],["^15",[12,"^11","Contents",536870968]],["^15",[12,"^;","~u2d3475b8-681d-41f1-ae10-3738b955205b",536870968]],["^15",[13,"^@",false,536870914]],["^15",[13,"^Y","waiting",536870914]],["^15",[13,"^11","WAITING",536870914]],["^15",[13,"^;","~u2673678b-4b95-4bb4-9df7-abf02c17fe48",536870968]],["^15",[14,"^@",false,536870914]],["^15",[14,"^Y","favorites",536870914]],["^15",[14,"^11","Favorites",536870914]],["^15",[14,"^;","~uc9af8989-9210-483b-8b9d-e6ba811f9216",536870968]],["^15",[15,"^@",false,536870914]],["^15",[15,"^Y","a",536870914]],["^15",[15,"^11","A",536870914]],["^15",[15,"^;","~u1a9092f1-0bac-4514-ab39-5677f7fc8fd6",536870968]],["^15",[16,"^@",false,536870914]],["^15",[16,"^Y","cancelled",536870914]],["^15",[16,"^11","CANCELLED",536870914]],["^15",[16,"^;","~u671e15cc-e05d-45db-a310-bfc1ca3a7d45",536870968]],["^15",[17,"^@",false,536870914]],["^15",[17,"^Y","wait",536870914]],["^15",[17,"^11","WAIT",536870914]],["^15",[17,"^;","~uda90bcbb-aeb3-4f07-992d-ea1163186962",536870968]],["^15",[18,"^K",1700492150414,536870915]],["^15",[18,"^O","~:markdown",536870915]],["^15",[18,"^N",20231120,536870915]],["^15",[18,"^@",true,536870915]],["^15",[18,"^Y","nov 20th, 2023",536870915]],["^15",[18,"^11","Nov 20th, 2023",536870915]],["^15",[18,"^B",1700492150414,536870915]],["^15",[18,"^;","~u655b7376-6ad9-41ba-a39a-f12b8855fbcb",536870915]],["^15",[19,"^Q","",536870916]],["^15",[19,"^O","^16",536870916]],["^15",[19,"^N",20231120,536870916]],["^15",[19,"^@",true,536870916]],["^15",[19,"^F",18,536870916]],["^15",[19,"^X",18,536870916]],["^15",[19,"^V",18,536870916]],["^15",[19,"^U",18,536870917]],["^15",[19,"^?",["^ "],536870916]],["^15",[19,"^;","~u655b7376-418e-4eed-806d-6bff5e758871",536870916]],["^15",[20,"^3","- [[Emacs]]\n-",536870918]],["^15",[20,"~:file/created-at",1700492150471,536870918]],["^15",[20,"^Z","emacs/journals/2023_07_03.md",536870918]],["^15",[21,"^K",1700492150469,536870918]],["^15",[21,"^[",20,536870918]],["^15",[21,"^N",20230703,536870918]],["^15",[21,"^@",true,536870918]],["^15",[21,"^Y","jul 3rd, 2023",536870918]],["^15",[21,"^11","Jul 3rd, 2023",536870918]],["^15",[21,"^B",1700492150469,536870918]],["^15",[21,"^;","~u655b7376-e83b-4243-9a10-495aa3675777",536870918]],["^15",[22,"^K",1700492150468,536870918]],["^15",[22,"^[",1659,536870920]],["^15",[22,"^@",false,536870918]],["^15",[22,"^Y","emacs",536870918]],["^15",[22,"^11","Emacs",536870918]],["^15",[22,"^B",1700492150468,536870918]],["^15",[22,"^;","~u655b737c-0291-45cf-8ffe-ff3be7c4a087",536870920]],["^15",[23,"^Q","[[Emacs]]",536870918]],["^15",[23,"^O","^16",536870918]],["^15",[23,"^F",21,536870918]],["^15",[23,"^X",21,536870918]],["^15",[23,"^V",21,536870918]],["^15",[23,"^U",21,536870918]],["^15",[23,"^U",22,536870918]],["^15",[23,"^H",22,536870918]],["^15",[23,"^;","~u655b7376-cfe4-41db-b158-d201c016ea65",536870918]],["^15",[24,"^Q","",536870918]],["^15",[24,"^O","^16",536870918]],["^15",[24,"^F",23,536870918]],["^15",[24,"^X",21,536870918]],["^15",[24,"^V",21,536870918]],["^15",[24,"^U",21,536870918]],["^15",[24,"^;","~u655b7376-567f-47c5-ad9e-5709410b0fcc",536870918]],["^15",[25,"^3","- [[Unreal Engine]]",536870918]],["^15",[25,"^17",1700492150501,536870918]],["^15",[25,"^Z","Unreal/journals/2023_05_21.md",536870918]],["^15",[26,"^K",1700492150500,536870918]],["^15",[26,"^[",25,536870918]],["^15",[26,"^N",20230521,536870918]],["^15",[26,"^@",true,536870918]],["^15",[26,"^Y","may 21st, 2023",536870918]],["^15",[26,"^11","May 21st, 2023",536870918]],["^15",[26,"^B",1700492150500,536870918]],["^15",[26,"^;","~u655b7376-6de2-459d-9d7d-75ad82467b54",536870918]],["^15",[27,"^K",1700492150499,536870918]],["^15",[27,"^[",1638,536870920]],["^15",[27,"^@",false,536870918]],["^15",[27,"^Y","unreal engine",536870918]],["^15",[27,"^11","Unreal Engine",536870918]],["^15",[27,"^B",1700492150499,536870918]],["^15",[27,"^;","~u655b737c-5910-4ddc-843e-6ce210a30537",536870920]],["^15",[28,"^Q","[[Unreal Engine]]",536870918]],["^15",[28,"^O","^16",536870918]],["^15",[28,"^F",26,536870918]],["^15",[28,"^X",26,536870918]],["^15",[28,"^V",26,536870918]],["^15",[28,"^U",26,536870918]],["^15",[28,"^U",27,536870918]],["^15",[28,"^H",27,536870918]],["^15",[28,"^;","~u655b7376-5120-4450-b231-66396d21ea9e",536870918]],["^15",[29,"^3","-",536870918]],["^15",[29,"^17",1700492150526,536870918]],["^15",[29,"^Z","Rust/journals/2023_07_08.md",536870918]],["^15",[30,"^K",1700492150525,536870918]],["^15",[30,"^[",29,536870918]],["^15",[30,"^N",20230708,536870918]],["^15",[30,"^@",true,536870918]],["^15",[30,"^Y","jul 8th, 2023",536870918]],["^15",[30,"^11","Jul 8th, 2023",536870918]],["^15",[30,"^B",1700492150525,536870918]],["^15",[30,"^;","~u656462fd-8334-46a6-89cb-388f4c1f1637",536870944]],["^15",[31,"^Q","",536870918]],["^15",[31,"^O","^16",536870918]],["^15",[31,"^F",30,536870918]],["^15",[31,"^X",30,536870918]],["^15",[31,"^V",30,536870918]],["^15",[31,"^U",30,536870918]],["^15",[31,"^;","~u655b7376-4d75-49ea-a96e-da757c7d9932",536870918]],["^15",[32,"^3","- [[Machine Learning]]",536870918]],["^15",[32,"^17",1700492150549,536870918]],["^15",[32,"^Z","ML/journals/2023_07_01.md",536870918]],["^15",[33,"^K",1700492150548,536870918]],["^15",[33,"^[",32,536870918]],["^15",[33,"^N",20230701,536870918]],["^15",[33,"^@",true,536870918]],["^15",[33,"^Y","jul 1st, 2023",536870918]],["^15",[33,"^11","Jul 1st, 2023",536870918]],["^15",[33,"^B",1700492150548,536870918]],["^15",[33,"^;","~u655b7376-613d-40be-9461-22a0295a37a9",536870918]],["^15",[34,"^K",1700492150548,536870918]],["^15",[34,"^[",1045,536870919]],["^15",[34,"^@",false,536870918]],["^15",[34,"^Y","machine learning",536870918]],["^15",[34,"^11","Machine Learning",536870918]],["^15",[34,"^B",1700492150548,536870918]],["^15",[34,"^;","~u655b7379-2e7d-4c52-9df2-a87a212c2a79",536870919]],["^15",[35,"^Q","[[Machine Learning]]",536870918]],["^15",[35,"^O","^16",536870918]],["^15",[35,"^F",33,536870918]],["^15",[35,"^X",33,536870918]],["^15",[35,"^V",33,536870918]],["^15",[35,"^U",33,536870918]],["^15",[35,"^U",34,536870918]],["^15",[35,"^H",34,536870918]],["^15",[35,"^;","~u655b7376-5a6d-4981-86ec-a5d9cf2902e6",536870918]],["^15",[37,"^K",1700492150556,536870918]],["^15",[37,"^N",20231024,536870918]],["^15",[37,"^@",true,536870918]],["^15",[37,"^Y","oct 24th, 2023",536870918]],["^15",[37,"^11","Oct 24th, 2023",536870918]],["^15",[37,"^B",1700492150556,536870918]],["^15",[37,"^;","~u655b7376-759c-49cf-b207-027c750cbf40",536870918]],["^15",[40,"^K",1700492150564,536870918]],["^15",[40,"^N",20230728,536870918]],["^15",[40,"^@",true,536870918]],["^15",[40,"^Y","jul 28th, 2023",536870918]],["^15",[40,"^11","Jul 28th, 2023",536870918]],["^15",[40,"^B",1700492150564,536870918]],["^15",[40,"^;","~u655b7376-e5f5-466c-80e5-a6ad395e7d58",536870918]],["^15",[43,"^K",1700492150575,536870918]],["^15",[43,"^N",20230727,536870918]],["^15",[43,"^@",true,536870918]],["^15",[43,"^Y","jul 27th, 2023",536870918]],["^15",[43,"^11","Jul 27th, 2023",536870918]],["^15",[43,"^B",1700492150575,536870918]],["^15",[43,"^;","~u655b7376-e695-4c0c-92da-b581a178fe40",536870918]],["^15",[46,"^K",1700492150584,536870918]],["^15",[46,"^N",20230817,536870918]],["^15",[46,"^@",true,536870918]],["^15",[46,"^Y","aug 17th, 2023",536870918]],["^15",[46,"^11","Aug 17th, 2023",536870918]],["^15",[46,"^B",1700492150584,536870918]],["^15",[46,"^;","~u655b7376-8a69-40b6-8157-601410621821",536870918]],["^15",[49,"^K",1700492150599,536870918]],["^15",[49,"^N",20230816,536870918]],["^15",[49,"^@",true,536870918]],["^15",[49,"^Y","aug 16th, 2023",536870918]],["^15",[49,"^11","Aug 16th, 2023",536870918]],["^15",[49,"^B",1700492150599,536870918]],["^15",[49,"^;","~u655b7376-f401-480e-b470-1ed7a448a09a",536870918]],["^15",[60,"^K",1700492150623,536870918]],["^15",[60,"^N",20230707,536870918]],["^15",[60,"^@",true,536870918]],["^15",[60,"^Y","jul 7th, 2023",536870918]],["^15",[60,"^11","Jul 7th, 2023",536870918]],["^15",[60,"^B",1700492150623,536870918]],["^15",[60,"^;","~u655b7376-f207-4919-a70a-11d0312b8dbb",536870918]],["^15",[63,"^K",1700492150630,536870918]],["^15",[63,"^N",20230706,536870918]],["^15",[63,"^@",true,536870918]],["^15",[63,"^Y","jul 6th, 2023",536870918]],["^15",[63,"^11","Jul 6th, 2023",536870918]],["^15",[63,"^B",1700492150630,536870918]],["^15",[63,"^;","~u655b7376-6f8a-4e1e-9f16-57b0704e89d4",536870918]],["^15",[66,"^K",1700492150639,536870918]],["^15",[66,"^N",20230705,536870918]],["^15",[66,"^@",true,536870918]],["^15",[66,"^Y","jul 5th, 2023",536870918]],["^15",[66,"^11","Jul 5th, 2023",536870918]],["^15",[66,"^B",1700492150639,536870918]],["^15",[66,"^;","~u655b7376-22d2-45a3-a27e-ac8112c2bbda",536870918]],["^15",[70,"^K",1700492150650,536870918]],["^15",[70,"^N",20230704,536870918]],["^15",[70,"^@",true,536870918]],["^15",[70,"^Y","jul 4th, 2023",536870918]],["^15",[70,"^11","Jul 4th, 2023",536870918]],["^15",[70,"^B",1700492150650,536870918]],["^15",[70,"^;","~u655b7376-2d55-43e6-bd04-55f774a59dbe",536870918]],["^15",[71,"^K",1700492151436,536870918]],["^15",[71,"^@",false,536870918]],["^15",[71,"^Y","format",536870918]],["^15",[71,"^11","Format",536870918]],["^15",[71,"^B",1700492151436,536870918]],["^15",[71,"^;","~u655b7377-f06d-4db5-be14-c711360d2574",536870918]],["^15",[76,"^3","{:meta/version 1\n\n ;; Currently, we support either \"Markdown\" or \"Org\".\n ;; This can overwrite your global preference so that\n ;; maybe your personal preferred format is Org but you'd\n ;; need to use Markdown for some projects.\n ;; :preferred-format \"\"\n\n ;; Preferred workflow style.\n ;; Value is either \":now\" for NOW/LATER style,\n ;; or \":todo\" for TODO/DOING style.\n :preferred-workflow :now\n\n ;; The app will ignore those directories or files.\n ;; E.g. :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; When creating the new journal page, the app will use your template if there is one.\n ;; You only need to input your template name here.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for journal page title\n ;; Example:\n ;; :journal/page-title-format \"EEE, do MMM yyyy\"\n\n ;; Whether to enable hover on tooltip preview feature\n ;; Default is true, you can also toggle this via setting page\n :ui/enable-tooltip? true\n\n ;; Show brackets around page references\n ;; :ui/show-brackets? true\n\n ;; Enable showing the body of blocks when referencing them.\n :ui/show-full-blocks? false\n\n ;; Expand block references automatically when zoom-in\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamp\n :feature/enable-block-timestamps? false\n\n ;; Enable remove accents when searching.\n ;; After toggle this option, please remember to rebuild your search index by press (cmd+c cmd+s).\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards\n ;; :feature/enable-flashcards? true\n\n ;; Enable Whiteboards\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the built-in Scheduled tasks and deadlines query\n ;; :feature/disable-scheduled-and-deadline-query? true\n\n ;; Specify the number of days in the future to display in the\n ;; scheduled tasks and deadlines query, with a default value of 7 which\n ;; displays tasks for the next 7 days.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days\n ;; :scheduled/future-days 14\n\n ;; Specify the date on which the week starts.\n ;; Goes from 0 to 6 (Monday to Sunday), default to 6\n :start-of-week 6\n\n ;; Specify a custom CSS import\n ;; This option take precedence over your local `logseq/custom.css` file\n ;; You may find a list of awesome logseq themes here:\n ;; https://github.com/logseq/awesome-logseq#css-themes\n ;; Example:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom js import\n ;; This option take precedence over your local `logseq/custom.js` file\n ;; :custom-js-url \"\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"\"\n\n ;; Set Bullet indentation when exporting\n ;; default option: tab\n ;; Possible options for `:export/bullet-indentation` are\n ;; 1. `:eight-spaces` as eight spaces\n ;; 2. `:four-spaces` as four spaces\n ;; 3. `:two-spaces` as two spaces\n ;; :export/bullet-indentation :tab\n\n ;; When :all-pages-public? true, export repo would export all pages within that repo.\n ;; Regardless of whether you've set any page to public or not.\n ;; Example:\n ;; :publishing/all-pages-public? true\n\n ;; Specify default home page and sidebar status for Logseq\n ;; If not specified, Logseq default opens journals page on startup\n ;; value for `:page` is name of page\n ;; Possible options for `:sidebar` are\n ;; 1. `\"Contents\"` to open up `Contents` in sidebar by default\n ;; 2. `page name` to open up some page in sidebar\n ;; 3. Or multiple pages in an array [\"Contents\" \"Page A\" \"Page B\"]\n ;; If `:sidebar` is not set, sidebar will be hidden\n ;; Example:\n ;; 1. Setup page \"Changelog\" as home page and \"Contents\" in sidebar\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Setup page \"Jun 3rd, 2021\" as home page without sidebar\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Setup page \"home\" as home page with multiple pages in sidebar\n ;; :default-home {:page \"home\" :sidebar [\"page a\" \"page b\"]}\n\n ;; Tell logseq to use a specific folder in the repo as a default location for notes\n ;; if not specified, notes are stored in `pages` directory\n ;; :pages-directory \"your-directory\"\n\n ;; Tell logseq to use a specific folder in the repo as a default location for journals\n ;; if not specified, journals are stored in `journals` directory\n ;; :journals-directory \"your-directory\"\n\n ;; Set this to true will convert\n ;; `[[Grant Ideas]]` to `[[file:./grant_ideas.org][Grant Ideas]]` for org-mode\n ;; For more, see https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? true\n\n ;; Setup custom shortcuts under `:shortcuts` key\n ;; Syntax:\n ;; 1. `+` means keys pressing simultaneously. eg: `ctrl+shift+a`\n ;; 2. ` ` empty space between keys represents key chords. eg: `t s` means press `t` followed by `s`\n ;; 3. `mod` means `Ctrl` for Windows/Linux  and `Command` for Mac\n ;; 4. use `false` to disable particular shortcut\n ;; 5. you can define multiple bindings for one action, eg `[\"ctrl+j\" \"down\"]`\n ;; full list of configurable shortcuts are available below:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; By default, pressing `Enter` in the document mode will create a new line.\n ;; Set this to `true` so that it's the same behaviour as the usual outliner mode.\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n :block/content-max-length 25000\n\n ;; Whether to show command doc on hover\n :ui/show-command-doc? true\n\n ;; Whether to show empty bullets for non-document mode (the default mode)\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Pre-defined :result-transform function for use with advanced queries\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The app will show those queries in today's journal page,\n ;; the \"NOW\" query asks the tasks which need to be finished \"now\",\n ;; the \"NEXT\" query asks the future tasks.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add your own commands to slash menu to speedup.\n ;; E.g.\n ;; :commands\n ;; [\n ;; [\"js\" \"Javascript\"]\n ;; [\"md\" \"Markdown\"]\n ;; ]\n :commands\n []\n\n ;; By default, a block can only be collapsed if it has some children.\n ;; `:outliner/block-title-collapse-enabled? true` enables a block with a title\n ;; (multiple lines) can be collapsed too. For example:\n ;; - block title\n ;;   block content\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; For example:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; The default level to be opened for the linked references.\n ;; For example, if we have some example blocks like this:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, `b` will be collapsed.\n ;; If we set the level's value to 3, `b` will be opened and `c` will be collapsed.\n :ref/default-open-blocks-level 2\n\n :ref/linked-references-collapsed-threshold 50\n\n ;; Favorites to list on the left sidebar\n :favorites [\"Geometry\"]\n\n ;; any number between 0 and 1 (the greater it is the faster the changes of the next-interval of card reviews) (default 0.5)\n ;; :srs/learning-fraction 0.5\n\n ;; the initial interval after the first successful review of a card (default 4)\n ;; :srs/initial-interval 4\n\n ;; hide specific properties for blocks\n ;; E.g. :block-hidden-properties #{:created-at :updated-at}\n ;; :block-hidden-properties #{}\n\n ;; Enable all your properties to have corresponding pages\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; E.g.:property-pages/excludelist #{:duration :author}\n ;; :property-pages/excludelist\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; E.g. :property/separated-by-commas #{:alias :tags}\n ;; :property/separated-by-commas #{}\n\n ;; Properties that are ignored when parsing property values for references\n ;; :ignored-page-references-keywords #{:author :startup}\n\n ;; logbook setup\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo uploading setup\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality          80}\n\n ;; Mobile features options\n ;; Gestures\n ;; :mobile\n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; :editor/extra-codemirror-options {:keyMap \"emacs\" :lineWrapping true}\n\n ;; Enable logical outdenting\n ;; :editor/logical-outdenting? true\n\n ;; When both text and a file are in the clipboard, paste the file\n ;; :editor/preferred-pasting-file? true\n\n ;; Quick capture templates for receiving contents from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by received contents from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: url or assets path for media files stored in Logseq.\n ;; You can also reorder them, or even only use one or two of them in the template.\n ;; You can also insert or format any text in the template as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options\n ;; :quick-capture-options {:insert-today? false :redirect-page? false :default-page \"my page\"}\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; dwim (do what I mean) for Enter key when editing.\n ;; Context-awareness of Enter key makes editing more easily\n ; :dwim/settings {\n ;   :admonition&src?  true\n ;   :markup?          false\n ;   :block-ref?       true\n ;   :page-ref?        true\n ;   :properties?      true\n ;   :list?            true\n ; }\n\n ;; Decide the way to escape the special characters in the page title.\n ;; Warning:\n ;;   This is a dangerous operation. If you want to change the setting,\n ;;   should access the setting `Filename format` and follow the instructions.\n ;;   Or you have to rename all the affected files manually then re-index on all\n ;;   clients after the files are synced. Wrong handling may cause page titles\n ;;   containing special characters to be messy.\n ;; Available values:\n ;;   :file/name-format :triple-lowbar\n ;;     ;use triple underscore `___` for slash `/` in page title\n ;;     ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar\n :graph/settings {:journal? false}\n :journal/page-title-format \"dd-MM-yyyy\"\n\n ;; specify the format of the filename for journal files\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n }\n",536870918]],["^15",[76,"^17",1700492150654,536870918]],["^15",[76,"^Z","CP/logseq/config.edn",536870918]],["^15",[77,"^3","",536870918]],["^15",[77,"^17",1700492150656,536870918]],["^15",[77,"^Z","CP/logseq/custom.css",536870918]],["^15",[78,"^3","- [[Geometry]]\n- [[String]]",536870918]],["^15",[78,"^17",1700492150666,536870918]],["^15",[78,"^Z","CP/pages/contents.md",536870918]],["^15",[79,"^K",1700492151211,536870918]],["^15",[79,"^[",177,536870918]],["^15",[79,"^@",false,536870918]],["^15",[79,"^Y","geometry",536870918]],["^15",[79,"^11","Geometry",536870918]],["^15",[79,"^B",1700492151211,536870918]],["^15",[79,"^;","~u655b7377-08a2-4b66-bb6d-f4158742e503",536870918]],["^15",[80,"^5",1244,536870960]],["^15",[80,"^K",1700492152438,536870918]],["^15",[80,"^[",1738,536870960]],["^15",[80,"^@",false,536870918]],["^15",[80,"^Y","string",536870918]],["^15",[80,"^11","String",536870918]],["^15",[80,"^?",["^ ","~:alias",["~#set",["str"]]],536870960]],["^15",[80,"^4",["^ ","^18","str"],536870960]],["^15",[80,"^B",1700492152438,536870918]],["^15",[80,"^;","~u656462fe-79f3-47d1-935c-040cd4771cab",536870960]],["^15",[85,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage:\n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday)\n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;;  - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; Regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Define the default home page and sidebar status.\n ;; If unspecified, the journal page will be loaded on startup and the right sidebar will stay hidden.\n ;; The `:page` value represents the name of the page displayed at startup.\n ;; Available options for `:sidebar` are:\n ;; - \"Contents\" to display the Contents page in the right sidebar.\n ;; - A specific page name to display in the right sidebar.\n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"].\n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; Default value: \"whiteboards\"\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means\n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n ;; Default value: false\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?   true   ; Default value: true\n ;;  :builtin-pages?  false  ; Default value: false\n ;;  :excluded-pages? false  ; Default value: false\n ;;  :journal?        false} ; Default value: false\n\n ;; Favorites to list on the left sidebar\n :favorites [\"Git\"]\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: true\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile\n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false\n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false\n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Otherwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar}\n",536870918]],["^15",[85,"^17",1700492150694,536870918]],["^15",[85,"^Z","Git/logseq/config.edn",536870918]],["^15",[86,"^3","",536870918]],["^15",[86,"^17",1700492150698,536870918]],["^15",[86,"^Z","Git/logseq/custom.css",536870918]],["^15",[89,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage: \n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday) \n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;; - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Set the default home page and sidebar status.\n ;; Define the default home page and sidebar status. \n ;; If unspecified, Logseq will load the journal page by default on startup. \n ;; The `:page` value represents the name of the page displayed at startup. \n ;; Available options for `:sidebar` are: \n ;; - \"Contents\" to display the Contents page in the right sidebar. \n ;; - A specific page name to display in the right sidebar. \n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"]. \n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; If not specified, whiteboards will be stored in the 'whiteboards' subdirectory.\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means \n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?  true   ; Default value: true\n ;;  :builtin-pages? false  ; Default value: false\n ;;  :excluded-pages? false ; Default value: false\n ;;  :journal?       false} ; Default value: false\n\n ;; Favorites to list on the left sidebar\n :favorites [\"Contents\" \"ECMAScript\"]\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: false\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile \n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false \n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false \n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Othwerwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar\n :graph/settings {:builtin-pages? false, :journal? false}}\n\n\n;; Custom Config\n:custom-css-url \"@import url('https://logseq.catppuccin.com/ctp-latte.css');\"\n:custom-css-url \"@import url('https://logseq.catppuccin.com/ctp-frappe.css');\"\n:custom-css-url \"@import url('https://logseq.catppuccin.com/ctp-macchiato.css');\"\n:custom-css-url \"@import url('https://logseq.catppuccin.com/ctp-mocha.css');\"\n",536870918]],["^15",[89,"^17",1700492150727,536870918]],["^15",[89,"^Z","JS/logseq/config.edn",536870918]],["^15",[90,"^3","\n",536870918]],["^15",[90,"^17",1700492150740,536870918]],["^15",[90,"^Z","JS/logseq/custom.css",536870918]],["^15",[91,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage:\n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday)\n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;;  - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; Regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Define the default home page and sidebar status.\n ;; If unspecified, the journal page will be loaded on startup and the right sidebar will stay hidden.\n ;; The `:page` value represents the name of the page displayed at startup.\n ;; Available options for `:sidebar` are:\n ;; - \"Contents\" to display the Contents page in the right sidebar.\n ;; - A specific page name to display in the right sidebar.\n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"].\n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; Default value: \"whiteboards\"\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means\n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n ;; Default value: false\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?   true   ; Default value: true\n ;;  :builtin-pages?  false  ; Default value: false\n ;;  :excluded-pages? false  ; Default value: false\n ;;  :journal?        false} ; Default value: false\n\n ;; Favorites to list on the left sidebar\n :favorites []\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: true\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile\n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false\n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false\n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Otherwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar}\n",536870918]],["^15",[91,"^17",1700492150769,536870918]],["^15",[91,"^Z","ML/logseq/config.edn",536870918]],["^15",[92,"^3","",536870918]],["^15",[92,"^17",1700492150775,536870918]],["^15",[92,"^Z","ML/logseq/custom.css",536870918]],["^15",[93,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage:\n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday)\n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;;  - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; Regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Define the default home page and sidebar status.\n ;; If unspecified, the journal page will be loaded on startup and the right sidebar will stay hidden.\n ;; The `:page` value represents the name of the page displayed at startup.\n ;; Available options for `:sidebar` are:\n ;; - \"Contents\" to display the Contents page in the right sidebar.\n ;; - A specific page name to display in the right sidebar.\n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"].\n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; Default value: \"whiteboards\"\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means\n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n ;; Default value: false\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?   true   ; Default value: true\n ;;  :builtin-pages?  false  ; Default value: false\n ;;  :excluded-pages? false  ; Default value: false\n ;;  :journal?        false} ; Default value: false\n\n ;; Favorites to list on the left sidebar\n :favorites [\"Rust\" \"Contents\"]\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: true\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile\n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false\n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false\n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Otherwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar\n}\n",536870918]],["^15",[93,"^17",1700492150797,536870918]],["^15",[93,"^Z","Rust/logseq/config.edn",536870918]],["^15",[94,"^3",":theme\n{:custom-css\n\".block-content { margin-bottom: 20px; }\"}\n",536870918]],["^15",[94,"^17",1700492150804,536870918]],["^15",[94,"^Z","Rust/logseq/custom.css",536870918]],["^15",[95,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage: \n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday) \n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;; - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Set the default home page and sidebar status.\n ;; Define the default home page and sidebar status. \n ;; If unspecified, Logseq will load the journal page by default on startup. \n ;; The `:page` value represents the name of the page displayed at startup. \n ;; Available options for `:sidebar` are: \n ;; - \"Contents\" to display the Contents page in the right sidebar. \n ;; - A specific page name to display in the right sidebar. \n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"]. \n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; If not specified, whiteboards will be stored in the 'whiteboards' subdirectory.\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means \n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?  true   ; Default value: true\n ;;  :builtin-pages? false  ; Default value: false\n ;;  :excluded-pages? false ; Default value: false\n ;;  :journal?       false} ; Default value: false\n\n ;; Favorites to list on the left sidebar\n :favorites [\"Schematic\" \"Unreal Engine\"]\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: false\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile \n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false \n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false \n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Othwerwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar}\n",536870918]],["^15",[95,"^17",1700492150832,536870918]],["^15",[95,"^Z","Unreal/logseq/config.edn",536870918]],["^15",[96,"^3","",536870918]],["^15",[96,"^17",1700492150839,536870918]],["^15",[96,"^Z","Unreal/logseq/custom.css",536870918]],["^15",[99,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage:\n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday)\n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;;  - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; Regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Define the default home page and sidebar status.\n ;; If unspecified, the journal page will be loaded on startup and the right sidebar will stay hidden.\n ;; The `:page` value represents the name of the page displayed at startup.\n ;; Available options for `:sidebar` are:\n ;; - \"Contents\" to display the Contents page in the right sidebar.\n ;; - A specific page name to display in the right sidebar.\n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"].\n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; Default value: \"whiteboards\"\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means\n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n ;; Default value: false\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?   true   ; Default value: true\n ;;  :builtin-pages?  false  ; Default value: false\n ;;  :excluded-pages? false  ; Default value: false\n ;;  :journal?        false} ; Default value: false\n\n ;; Favorites to list on the left sidebar\n :favorites []\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: true\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile\n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false\n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false\n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Otherwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar}\n",536870918]],["^15",[99,"^17",1700492150893,536870918]],["^15",[99,"^Z","emacs/logseq/config.edn",536870918]],["^15",[100,"^3","",536870918]],["^15",[100,"^17",1700492150900,536870918]],["^15",[100,"^Z","emacs/logseq/custom.css",536870918]],["^15",[101,"^3","- [[CSES]]",536870918]],["^15",[101,"^17",1700492150926,536870918]],["^15",[101,"^Z","CP/pages/Algorithm.md",536870918]],["^15",[102,"^K",1700492151336,536870918]],["^15",[102,"^[",101,536870918]],["^15",[102,"^@",false,536870918]],["^15",[102,"^Y","algorithm",536870918]],["^15",[102,"^11","Algorithm",536870918]],["^15",[102,"^B",1700492151336,536870918]],["^15",[102,"^;","~u655b7377-103d-4a1a-938c-338f313a3176",536870918]],["^15",[103,"^K",1700492151059,536870918]],["^15",[103,"^[",109,536870918]],["^15",[103,"^@",false,536870918]],["^15",[103,"^Y","cses",536870918]],["^15",[103,"^11","CSES",536870918]],["^15",[103,"^B",1700492151059,536870918]],["^15",[103,"^;","~u655b7377-7977-4534-b4ce-ec98455ba0a0",536870918]],["^15",[104,"^Q","[[CSES]]",536870918]],["^15",[104,"^O","^16",536870918]],["^15",[104,"^F",102,536870918]],["^15",[104,"^X",102,536870918]],["^15",[104,"^V",102,536870918]],["^15",[104,"^U",102,536870918]],["^15",[104,"^U",103,536870918]],["^15",[104,"^H",103,536870918]],["^15",[104,"^;","~u655b7376-f31b-400a-804d-488c52d802ad",536870918]],["^15",[105,"^3","- Competitive Programmer's Handbook\n  Guide to Competitive Programming by Antti Laaksonen \n  2nd Edition\n-",536870918]],["^15",[105,"^17",1700492150935,536870918]],["^15",[105,"^Z","CP/pages/CPH.md",536870918]],["^15",[106,"^K",1700492151006,536870918]],["^15",[106,"^[",105,536870918]],["^15",[106,"^@",false,536870918]],["^15",[106,"^Y","cph",536870918]],["^15",[106,"^11","CPH",536870918]],["^15",[106,"^B",1700492151006,536870918]],["^15",[106,"^;","~u655b7377-a168-4c15-a770-ec64d7be9c1e",536870918]],["^15",[107,"^Q","Competitive Programmer's Handbook\nGuide to Competitive Programming by Antti Laaksonen \n2nd Edition",536870918]],["^15",[107,"^O","^16",536870918]],["^15",[107,"^F",106,536870918]],["^15",[107,"^X",106,536870918]],["^15",[107,"^V",106,536870918]],["^15",[107,"^U",106,536870918]],["^15",[107,"^;","~u655b7376-e359-491f-8d94-0c82945ef676",536870918]],["^15",[108,"^Q","",536870918]],["^15",[108,"^O","^16",536870918]],["^15",[108,"^F",107,536870918]],["^15",[108,"^X",106,536870918]],["^15",[108,"^V",106,536870918]],["^15",[108,"^U",106,536870918]],["^15",[108,"^;","~u655b7376-dd75-463b-819d-4212920f0ae1",536870918]],["^15",[109,"^3","- [[CSES_1068]]\n- [[CSES_1731]]\n-",536870918]],["^15",[109,"^17",1700492150946,536870918]],["^15",[109,"^Z","CP/pages/CSES.md",536870918]],["^15",[110,"^K",1700492150944,536870918]],["^15",[110,"^@",false,536870918]],["^15",[110,"^Y","cses_1068",536870918]],["^15",[110,"^11","CSES_1068",536870918]],["^15",[110,"^B",1700492150944,536870918]],["^15",[110,"^;","~u655b7376-b0de-4d0e-a41e-f76c719aaa67",536870918]],["^15",[111,"^K",1700492150965,536870918]],["^15",[111,"^[",115,536870918]],["^15",[111,"^@",false,536870918]],["^15",[111,"^Y","cses_1731",536870918]],["^15",[111,"^11","CSES_1731",536870918]],["^15",[111,"^B",1700492150965,536870918]],["^15",[111,"^;","~u655b7376-56ed-415d-8c00-5d9816251276",536870918]],["^15",[112,"^Q","[[CSES_1068]]",536870918]],["^15",[112,"^O","^16",536870918]],["^15",[112,"^F",103,536870918]],["^15",[112,"^X",103,536870918]],["^15",[112,"^V",103,536870918]],["^15",[112,"^U",103,536870918]],["^15",[112,"^U",110,536870918]],["^15",[112,"^H",110,536870918]],["^15",[112,"^;","~u655b7376-49fb-4ec7-bd4f-253ac81aa7bf",536870918]],["^15",[113,"^Q","[[CSES_1731]]",536870918]],["^15",[113,"^O","^16",536870918]],["^15",[113,"^F",112,536870918]],["^15",[113,"^X",103,536870918]],["^15",[113,"^V",103,536870918]],["^15",[113,"^U",103,536870918]],["^15",[113,"^U",111,536870918]],["^15",[113,"^H",111,536870918]],["^15",[113,"^;","~u655b7376-0ac7-424e-8409-a0c5b7aa9418",536870918]],["^15",[114,"^Q","",536870918]],["^15",[114,"^O","^16",536870918]],["^15",[114,"^F",113,536870918]],["^15",[114,"^X",103,536870918]],["^15",[114,"^V",103,536870918]],["^15",[114,"^U",103,536870918]],["^15",[114,"^;","~u655b7376-d7f3-4b8c-a728-ff83efedcde3",536870918]],["^15",[115,"^3","- 1731:\n  Uses [[Trie]] and ideas from [[Longest Common Subsequence]] Algorithm.\n  \n  To solve this problem, we can first build a trie from the given strings. Then for the main string ``s``, we use [[Dynamic Programming]] to look for all possible pairs. To do so, we start from the end of the main string ``L``, and pass the index ``x``, for each value of ``x``, we go from ``x`` to ``L`` in ``i``, and look if the given string ``s[i..L]`` exists in the Trie. [[TODO]]\n  \n  In C++,\n  ```cpp\n  \n  int testCases{1};\n  string s{};\n  int sz{};\n  int n{};\n  int A{};    // alphabet set/lexicon size\n  vvi trie{}; // we can use std::array too but the call-stack size is limited,\n              // rather use heap\n  vb eos{};   // end-of-string\n  int counter{};\n  vi dpTable{};\n  \n  void setup() {\n    getline(cin, s);\n    INPUT(n);\n    A = 26;\n    sz = cast(s.size());\n    trie = vvi(cBN, vi(A, 0));\n    eos = vb(cBN, false);\n    counter = 0;\n    dpTable = vi(sz + 1, 0);\n    string arg{};\n    cin.ignore(cN,'\\n');\n    while (n-- > 0) {\n      getline(cin, arg);\n      trie_insert(arg);\n    }\n  }\n   \n  void compute() {\n    dpTable[sz] = 1;\n    for (int i{sz - 1}; i >= 0; --i) {\n      dpTable[i] = search(i);\n    }\n  }\n  void trie_insert(string_view s) {\n    int size_s{cast(s.size())};\n    int next{};\n    for (int i{}; i < size_s; ++i) {\n      int &elem{trie[next][cast(s[i]%A)]};\n      if (!elem)\n        elem = ++counter;\n   \n      next = elem;\n    }\n    eos[next] = true;\n  }\n  int search(int x) {\n    int next{};\n    int ans{};\n    for (int i{x}; i < sz; ++i) {\n      int &elem{trie[next][cast(s[i]%A)]};\n      if (!elem)\n        return ans;\n      next = elem;\n      if (eos[next]) {\n        ans += dpTable[i + 1];\n        ans %= mod10_e9_7;\n      }\n    }\n    return ans;\n  }\n   \n  void output() { cout << dpTable[0] << \"\\n\"; }\n  \n  ```\n  \n  Using [[Default C++ Template]]\n-",536870918]],["^15",[115,"^17",1700492150966,536870918]],["^15",[115,"^Z","CP/pages/CSES_1731.md",536870918]],["^15",[116,"^K",1700492151337,536870918]],["^15",[116,"^@",false,536870918]],["^15",[116,"^Y","dynamic programming",536870918]],["^15",[116,"^11","Dynamic Programming",536870918]],["^15",[116,"^B",1700492151337,536870918]],["^15",[116,"^;","~u655b7377-d623-4d9b-bce7-b657f618906e",536870918]],["^15",[117,"^K",1700492151354,536870918]],["^15",[117,"^[",209,536870918]],["^15",[117,"^@",false,536870918]],["^15",[117,"^Y","longest common subsequence",536870918]],["^15",[117,"^11","Longest Common Subsequence",536870918]],["^15",[117,"^B",1700492151354,536870918]],["^15",[117,"^;","~u655b7377-8d03-456b-92c0-00a9d6602ce1",536870918]],["^15",[118,"^K",1700492151429,536870918]],["^15",[118,"^[",243,536870918]],["^15",[118,"^@",false,536870918]],["^15",[118,"^Y","trie",536870918]],["^15",[118,"^11","Trie",536870918]],["^15",[118,"^B",1700492151429,536870918]],["^15",[118,"^;","~u655b7377-4d67-4cb5-88ff-b913f50187eb",536870918]],["^15",[119,"^K",1700492151413,536870918]],["^15",[119,"^[",145,536870918]],["^15",[119,"^@",false,536870918]],["^15",[119,"^Y","default c++ template",536870918]],["^15",[119,"^11","Default C++ Template",536870918]],["^15",[119,"^B",1700492151413,536870918]],["^15",[119,"^;","~u655b7377-c383-4fef-b1f8-263ef4aae573",536870918]],["^15",[120,"^Q","1731:\nUses [[Trie]] and ideas from [[Longest Common Subsequence]] Algorithm.\n\nTo solve this problem, we can first build a trie from the given strings. Then for the main string ``s``, we use [[Dynamic Programming]] to look for all possible pairs. To do so, we start from the end of the main string ``L``, and pass the index ``x``, for each value of ``x``, we go from ``x`` to ``L`` in ``i``, and look if the given string ``s[i..L]`` exists in the Trie. [[TODO]]\n\nIn C++,\n```cpp\n\nint testCases{1};\nstring s{};\nint sz{};\nint n{};\nint A{};    // alphabet set/lexicon size\nvvi trie{}; // we can use std::array too but the call-stack size is limited,\n            // rather use heap\nvb eos{};   // end-of-string\nint counter{};\nvi dpTable{};\n\nvoid setup() {\n  getline(cin, s);\n  INPUT(n);\n  A = 26;\n  sz = cast(s.size());\n  trie = vvi(cBN, vi(A, 0));\n  eos = vb(cBN, false);\n  counter = 0;\n  dpTable = vi(sz + 1, 0);\n  string arg{};\n  cin.ignore(cN,'\\n');\n  while (n-- > 0) {\n    getline(cin, arg);\n    trie_insert(arg);\n  }\n}\n \nvoid compute() {\n  dpTable[sz] = 1;\n  for (int i{sz - 1}; i >= 0; --i) {\n    dpTable[i] = search(i);\n  }\n}\nvoid trie_insert(string_view s) {\n  int size_s{cast(s.size())};\n  int next{};\n  for (int i{}; i < size_s; ++i) {\n    int &elem{trie[next][cast(s[i]%A)]};\n    if (!elem)\n      elem = ++counter;\n \n    next = elem;\n  }\n  eos[next] = true;\n}\nint search(int x) {\n  int next{};\n  int ans{};\n  for (int i{x}; i < sz; ++i) {\n    int &elem{trie[next][cast(s[i]%A)]};\n    if (!elem)\n      return ans;\n    next = elem;\n    if (eos[next]) {\n      ans += dpTable[i + 1];\n      ans %= mod10_e9_7;\n    }\n  }\n  return ans;\n}\n \nvoid output() { cout << dpTable[0] << \"\\n\"; }\n\n```\n\nUsing [[Default C++ Template]]",536870918]],["^15",[120,"^O","^16",536870918]],["^15",[120,"^F",111,536870918]],["^15",[120,"^X",111,536870918]],["^15",[120,"^V",111,536870918]],["^15",[120,"^U",4,536870918]],["^15",[120,"^U",111,536870918]],["^15",[120,"^U",116,536870918]],["^15",[120,"^U",117,536870918]],["^15",[120,"^U",118,536870918]],["^15",[120,"^U",119,536870918]],["^15",[120,"^H",4,536870918]],["^15",[120,"^H",116,536870918]],["^15",[120,"^H",117,536870918]],["^15",[120,"^H",118,536870918]],["^15",[120,"^H",119,536870918]],["^15",[120,"^;","~u655b7376-f56b-4f69-9318-c1ef330018d6",536870918]],["^15",[121,"^Q","",536870918]],["^15",[121,"^O","^16",536870918]],["^15",[121,"^F",120,536870918]],["^15",[121,"^X",111,536870918]],["^15",[121,"^V",111,536870918]],["^15",[121,"^U",111,536870918]],["^15",[121,"^;","~u655b7376-c933-4a7a-82f9-5a8873e289ac",536870918]],["^15",[122,"^3","- In this problem, given a set of points in the 2D [[Cartesian Plane]], we are to find 2 points closest to each other where the distance is [[Euclidean Distance]]. \n  \n  LIke shown here\n  ![image.png](../assets/image_1686379346764_0.png){:height 222, :width 629}\n- To solve this problem the logic is like so, we go through the sorted points from left-to-right and keep track of minimum [[Euclidean Distance]] ``d`` between any 2 points. \n  If we have an ``MED``, i.e., ``d``, if there's any point with distance less than ``d`` with any other point then that pair is the closest pair, and we do so until we have processed all the points. We only check the distance with the points already processed, i.e., points on the left.\n  \n  To check if the E.D between any 2 points is the closest, we simply check it's co-ordinates, so if a point is at A $$(x_1, y_1)$$ and we have another point B $$(x_2, y_2)$$ , then for E.D of A to B to be smaller than B, the $$x_1 - x_2 $$ must be within the range $$[x, x+d]$$ (because we are only comparing \n   x_1 with points already processed on the left, this also means that x_1 will always be >= to x_2) and the abs($$y_2 - y_1 $$) must be within the range $$[y-d, y+d]$$.\n  \n  Remember, the E.D between any 2 points is given by $$\\text{Euclidean Distance} = \\sqrt{ (x_2 - x_1)^2 + (y_2-y_1)^2 }$$\n  \n  So in this image\n  ![image.png](../assets/image_1686381685021_0.png){:height 400, :width 400}\n  Say A is at the black point, we are using [[Integer]] co-ordinates, the distance d is given in red, then the green semi-box represents the range within which our points must be to be <= ``d``. The blue points are the only possible points within that range so B must be any of those points to be <= ``d``, there are fixed no. of points inside this box as if we only have Integer co-ordinates then it can be shown that there will be a constant number of points in a fixed region inside the d X d rectangle.\n- For our [[Algorithm]] we use the same idea,\n  \n  * First we sort the points based on their x-axes, and y-axes if x is the same. Unlike in [[Line Intersection]], the y-axis can be sorted in either asc/desc order.\n  ![image.png](../assets/image_1686380077516_0.png){:height 222, :width 225} \n  \n  * Next we create the MED, ``d`` initialized at Infinity and a [[C++ Set]] which will have the processed points in it sorted by their y-axes.\n  \n  * Next, we go through the sorted points in left-to-right iteration. \n  \n  * At each iteration, we check if the x axis of the points stored in the set exceed ``d``, if they do they are removed. \n  Now this is not the same as just plainly removing points if they exceed ``d``, we only consider the x axis here. This is based on the observation that the points farther than d on x axis are guaranteed to be farther than d for all points on the right, but the points farther than d on y axis can potentially be close on the x axis.\n  For ex.: \n  ![image.png](../assets/image_1686388114869_0.png){:height 255, :width 255} \n  Here, even though B and C are close on the y axis, they are much farther from A on the x axis. So if we reach C, and we get d from B and C then A will be removed as no point will ever be <=d to A when we sweep from left-to-right.\n  Similarly,\n  ![image.png](../assets/image_1686388251857_0.png){:height 255, :width 255}\n  Here, when we sweep from left-to-right, we can easily see that to consider point A from C, we mustn't remove A from the set based on its y axis.\n  \n  Hence, in both the cases we can see x axis as the determining factor for a point to have an ED <= d, i.e., if its greater than d on the x axis it will never be forming the closest pair. \n   \n  \n  * Now we simply need to iterate over the points with their y axes in the range $$[y-d, y+d]$$. In the processed points, we already have the guarantee that all points are within $$[x,x+d]$$x of the current point, so now we only need to go through the points whose y is within d as well. This is where creating the set on y axis helps, as the range y-d to y+d will be a continuous range as all points are sorted based on y axis.\n  \n  * In the iteration over the range, we check if the current d is less than the ED between current point in the iteration to the point from the set.\n  \n  * Lastly we insert this point in the set of processed points.\n  \n  In C++,\n  ```cpp\n   int dist(CI& a, CI b) {\n  \n          return ((a.R-b.R)*(a.R-b.R)) + ((a.I-b.I)*(a.I-b.I));\n  \n      }\n  \n   int d{INF};\n          std::set<pii> pp{}; //processed points\n          pp.insert(pii(totalSegs[0].I,totalSegs[0].R));\n  \n          for(int i{1}, j{0}; i<n ;++i) {\n              CI& current{totalSegs[i]};\n              int ed= ceil(sqrt(d)); //euclidean distance converted to int\n              while(j < i && current.R-totalSegs[j].R > ed){ //current.R or x axis will be always greater or equal to the points before\n                                                             //because of how we sorted totalSegs\n                  pp.erase({totalSegs[j].I,totalSegs[j].R});\n                  j++;\n              }\n  \n              auto itLB{pp.lower_bound({current.I - ed, 0})}; //iterator lower bound\n              auto itUB{pp.upper_bound({current.I + ed, 0})};\n              while(itLB != itUB)\n              {\n                  d= min(d, dist(current, {itLB->second,itLB->first}));\n                  itLB++;\n              }\n              pp.insert({current.I,current.R});\n          }\n  \n          output(d);\n  \n  ```\n  We use lower bound which gives the first point greater than the given point, upper bound which gives the last point lesser than the given point, dist() which gives the ED squared,  and j which is a simple optimization to only consider unprocessed (x axis removal) points on the x axis, so if for points 1,2,3 it did not trigger, but for point 4 it triggers then it must go from point 1 to 3, on the other hand if it triggered for point 1 and 2 then for point 4 it only needs to process point 3 as point 1 and 2 are already removed.  \n  \n  \n  \n  *\n- Alternate Algorithm: If we simply go through the points and only consider the last point to compare distance with, then we may miss out on cases where point 1 and 3 are closer than point 1 and 2 and point 2 and 3. Like shown here\n  ![image.png](../assets/image_1686380077516_0.png){:height 222, :width 225}\n  \n  An alternate algorithm that works is by simply going to each point and checking the distance against all other points. TC is $$\\text{O}\\lparen n^2 \\rparen$$\n  \n  Another alternate alg is using [[Divide And Conquer]] but it is trickier to implement.\n-\n- References: Page 246 of [[CPH]]\n  [Robin Visser's Note from University of Cape Town](https://saco-evaluator.org.za/presentations/2015%20Camp%203/Line%20Sweep%20Algorithms%20(Robin%20Visser).pdf)\n  [Codeforces Blog](https://codeforces.com/blog/entry/58747)\n-",536870918]],["^15",[122,"^17",1700492151007,536870918]],["^15",[122,"^Z","CP/pages/Closest Pair.md",536870918]],["^15",[123,"^5",179,536870918]],["^15",[123,"^K",1700492151272,536870918]],["^15",[123,"^@",false,536870918]],["^15",[123,"^Y","line intersection",536870918]],["^15",[123,"^11","Line Intersection",536870918]],["^15",[123,"^B",1700492151272,536870918]],["^15",[123,"^;","~u655b7377-a5ce-4615-9463-df4c4f95af57",536870918]],["^15",[124,"^K",1700492151005,536870918]],["^15",[124,"^@",false,536870918]],["^15",[124,"^Y","c++ set",536870918]],["^15",[124,"^11","C++ Set",536870918]],["^15",[124,"^B",1700492151005,536870918]],["^15",[124,"^;","~u655b7377-9724-4149-9c71-f34ec4c50317",536870918]],["^15",[125,"^K",1700492151005,536870918]],["^15",[125,"^@",false,536870918]],["^15",[125,"^Y","integer",536870918]],["^15",[125,"^11","Integer",536870918]],["^15",[125,"^B",1700492151005,536870918]],["^15",[125,"^;","~u655b7377-0c06-4601-9580-fb3c88a05326",536870918]],["^15",[126,"^K",1700492151006,536870918]],["^15",[126,"^@",false,536870918]],["^15",[126,"^Y","divide and conquer",536870918]],["^15",[126,"^11","Divide And Conquer",536870918]],["^15",[126,"^B",1700492151006,536870918]],["^15",[126,"^;","~u655b7377-f999-4436-9999-48d0bc1d31fe",536870918]],["^15",[127,"^K",1700492151213,536870918]],["^15",[127,"^[",122,536870918]],["^15",[127,"^@",false,536870918]],["^15",[127,"^Y","closest pair",536870918]],["^15",[127,"^11","Closest Pair",536870918]],["^15",[127,"^B",1700492151213,536870918]],["^15",[127,"^;","~u655b7377-d667-4f02-87e9-c55672550a10",536870918]],["^15",[128,"^K",1700492151005,536870918]],["^15",[128,"^@",false,536870918]],["^15",[128,"^Y","euclidean distance",536870918]],["^15",[128,"^11","Euclidean Distance",536870918]],["^15",[128,"^B",1700492151005,536870918]],["^15",[128,"^;","~u655b7377-6580-4d50-bf49-c8cb08b990b0",536870918]],["^15",[129,"^K",1700492151105,536870918]],["^15",[129,"^@",false,536870918]],["^15",[129,"^Y","cartesian plane",536870918]],["^15",[129,"^11","Cartesian Plane",536870918]],["^15",[129,"^B",1700492151105,536870918]],["^15",[129,"^;","~u655b7377-35c9-48ad-8fd0-044487ce6ef8",536870918]],["^15",[130,"^Q","In this problem, given a set of points in the 2D [[Cartesian Plane]], we are to find 2 points closest to each other where the distance is [[Euclidean Distance]]. \n\nLIke shown here\n![image.png](../assets/image_1686379346764_0.png){:height 222, :width 629}",536870918]],["^15",[130,"^O","^16",536870918]],["^15",[130,"^F",127,536870918]],["^15",[130,"^X",127,536870918]],["^15",[130,"^V",127,536870918]],["^15",[130,"^U",127,536870918]],["^15",[130,"^U",128,536870918]],["^15",[130,"^U",129,536870918]],["^15",[130,"^H",128,536870918]],["^15",[130,"^H",129,536870918]],["^15",[130,"^;","~u655b7377-fd57-4430-98d4-03669d510fd6",536870918]],["^15",[131,"^Q","To solve this problem the logic is like so, we go through the sorted points from left-to-right and keep track of minimum [[Euclidean Distance]] ``d`` between any 2 points. \nIf we have an ``MED``, i.e., ``d``, if there's any point with distance less than ``d`` with any other point then that pair is the closest pair, and we do so until we have processed all the points. We only check the distance with the points already processed, i.e., points on the left.\n\nTo check if the E.D between any 2 points is the closest, we simply check it's co-ordinates, so if a point is at A $$(x_1, y_1)$$ and we have another point B $$(x_2, y_2)$$ , then for E.D of A to B to be smaller than B, the $$x_1 - x_2 $$ must be within the range $$[x, x+d]$$ (because we are only comparing \n x_1 with points already processed on the left, this also means that x_1 will always be >= to x_2) and the abs($$y_2 - y_1 $$) must be within the range $$[y-d, y+d]$$.\n\nRemember, the E.D between any 2 points is given by $$\\text{Euclidean Distance} = \\sqrt{ (x_2 - x_1)^2 + (y_2-y_1)^2 }$$\n\nSo in this image\n![image.png](../assets/image_1686381685021_0.png){:height 400, :width 400}\nSay A is at the black point, we are using [[Integer]] co-ordinates, the distance d is given in red, then the green semi-box represents the range within which our points must be to be <= ``d``. The blue points are the only possible points within that range so B must be any of those points to be <= ``d``, there are fixed no. of points inside this box as if we only have Integer co-ordinates then it can be shown that there will be a constant number of points in a fixed region inside the d X d rectangle.",536870918]],["^15",[131,"^O","^16",536870918]],["^15",[131,"^F",130,536870918]],["^15",[131,"^X",127,536870918]],["^15",[131,"^V",127,536870918]],["^15",[131,"^U",125,536870918]],["^15",[131,"^U",127,536870918]],["^15",[131,"^U",128,536870918]],["^15",[131,"^H",125,536870918]],["^15",[131,"^H",128,536870918]],["^15",[131,"^;","~u655b7376-6c36-403a-a1b4-0357ed38c368",536870918]],["^15",[132,"^Q","For our [[Algorithm]] we use the same idea,\n\n* First we sort the points based on their x-axes, and y-axes if x is the same. Unlike in [[Line Intersection]], the y-axis can be sorted in either asc/desc order.\n![image.png](../assets/image_1686380077516_0.png){:height 222, :width 225} \n\n* Next we create the MED, ``d`` initialized at Infinity and a [[C++ Set]] which will have the processed points in it sorted by their y-axes.\n\n* Next, we go through the sorted points in left-to-right iteration. \n\n* At each iteration, we check if the x axis of the points stored in the set exceed ``d``, if they do they are removed. \nNow this is not the same as just plainly removing points if they exceed ``d``, we only consider the x axis here. This is based on the observation that the points farther than d on x axis are guaranteed to be farther than d for all points on the right, but the points farther than d on y axis can potentially be close on the x axis.\nFor ex.: \n![image.png](../assets/image_1686388114869_0.png){:height 255, :width 255} \nHere, even though B and C are close on the y axis, they are much farther from A on the x axis. So if we reach C, and we get d from B and C then A will be removed as no point will ever be <=d to A when we sweep from left-to-right.\nSimilarly,\n![image.png](../assets/image_1686388251857_0.png){:height 255, :width 255}\nHere, when we sweep from left-to-right, we can easily see that to consider point A from C, we mustn't remove A from the set based on its y axis.\n\nHence, in both the cases we can see x axis as the determining factor for a point to have an ED <= d, i.e., if its greater than d on the x axis it will never be forming the closest pair. \n \n\n* Now we simply need to iterate over the points with their y axes in the range $$[y-d, y+d]$$. In the processed points, we already have the guarantee that all points are within $$[x,x+d]$$x of the current point, so now we only need to go through the points whose y is within d as well. This is where creating the set on y axis helps, as the range y-d to y+d will be a continuous range as all points are sorted based on y axis.\n\n* In the iteration over the range, we check if the current d is less than the ED between current point in the iteration to the point from the set.\n\n* Lastly we insert this point in the set of processed points.\n\nIn C++,\n```cpp\n int dist(CI& a, CI b) {\n\n        return ((a.R-b.R)*(a.R-b.R)) + ((a.I-b.I)*(a.I-b.I));\n\n    }\n\n int d{INF};\n        std::set<pii> pp{}; //processed points\n        pp.insert(pii(totalSegs[0].I,totalSegs[0].R));\n\n        for(int i{1}, j{0}; i<n ;++i) {\n            CI& current{totalSegs[i]};\n            int ed= ceil(sqrt(d)); //euclidean distance converted to int\n            while(j < i && current.R-totalSegs[j].R > ed){ //current.R or x axis will be always greater or equal to the points before\n                                                           //because of how we sorted totalSegs\n                pp.erase({totalSegs[j].I,totalSegs[j].R});\n                j++;\n            }\n\n            auto itLB{pp.lower_bound({current.I - ed, 0})}; //iterator lower bound\n            auto itUB{pp.upper_bound({current.I + ed, 0})};\n            while(itLB != itUB)\n            {\n                d= min(d, dist(current, {itLB->second,itLB->first}));\n                itLB++;\n            }\n            pp.insert({current.I,current.R});\n        }\n\n        output(d);\n\n```\nWe use lower bound which gives the first point greater than the given point, upper bound which gives the last point lesser than the given point, dist() which gives the ED squared,  and j which is a simple optimization to only consider unprocessed (x axis removal) points on the x axis, so if for points 1,2,3 it did not trigger, but for point 4 it triggers then it must go from point 1 to 3, on the other hand if it triggered for point 1 and 2 then for point 4 it only needs to process point 3 as point 1 and 2 are already removed.  \n\n\n\n*",536870918]],["^15",[132,"^O","^16",536870918]],["^15",[132,"^F",131,536870918]],["^15",[132,"^X",127,536870918]],["^15",[132,"^V",127,536870918]],["^15",[132,"^U",102,536870918]],["^15",[132,"^U",123,536870918]],["^15",[132,"^U",124,536870918]],["^15",[132,"^U",127,536870918]],["^15",[132,"^H",102,536870918]],["^15",[132,"^H",123,536870918]],["^15",[132,"^H",124,536870918]],["^15",[132,"^;","~u655b7376-2f01-42b1-8352-de02bcaf1917",536870918]],["^15",[133,"^Q","Alternate Algorithm: If we simply go through the points and only consider the last point to compare distance with, then we may miss out on cases where point 1 and 3 are closer than point 1 and 2 and point 2 and 3. Like shown here\n![image.png](../assets/image_1686380077516_0.png){:height 222, :width 225}\n\nAn alternate algorithm that works is by simply going to each point and checking the distance against all other points. TC is $$\\text{O}\\lparen n^2 \\rparen$$\n\nAnother alternate alg is using [[Divide And Conquer]] but it is trickier to implement.",536870918]],["^15",[133,"^O","^16",536870918]],["^15",[133,"^F",132,536870918]],["^15",[133,"^X",127,536870918]],["^15",[133,"^V",127,536870918]],["^15",[133,"^U",126,536870918]],["^15",[133,"^U",127,536870918]],["^15",[133,"^H",126,536870918]],["^15",[133,"^;","~u655b7376-b71b-4c7d-9e8b-7e4c417c51cf",536870918]],["^15",[134,"^Q","",536870918]],["^15",[134,"^O","^16",536870918]],["^15",[134,"^F",133,536870918]],["^15",[134,"^X",127,536870918]],["^15",[134,"^V",127,536870918]],["^15",[134,"^U",127,536870918]],["^15",[134,"^;","~u655b7376-4c65-46ce-8798-6c44a8547e5c",536870918]],["^15",[135,"^Q","References: Page 246 of [[CPH]]\n[Robin Visser's Note from University of Cape Town](https://saco-evaluator.org.za/presentations/2015%20Camp%203/Line%20Sweep%20Algorithms%20(Robin%20Visser).pdf)\n[Codeforces Blog](https://codeforces.com/blog/entry/58747)",536870918]],["^15",[135,"^O","^16",536870918]],["^15",[135,"^F",134,536870918]],["^15",[135,"^X",127,536870918]],["^15",[135,"^V",127,536870918]],["^15",[135,"^U",106,536870918]],["^15",[135,"^U",127,536870918]],["^15",[135,"^H",106,536870918]],["^15",[135,"^;","~u655b7376-181e-4391-a486-47e546ed12c8",536870918]],["^15",[136,"^Q","",536870918]],["^15",[136,"^O","^16",536870918]],["^15",[136,"^F",135,536870918]],["^15",[136,"^X",127,536870918]],["^15",[136,"^V",127,536870918]],["^15",[136,"^U",127,536870918]],["^15",[136,"^;","~u655b7376-e43f-48d6-8c02-f1bff567f125",536870918]],["^15",[137,"^3","- A convex hull is the smallest convex [[Polygon]] (a convex polygon is a polygon where the boundaries of the polygon don't go inside) that contains all the points of a given [[Set]] of a [[Virtual Plane]] and none extra point, so it uses the points of the set itself to define the polygon's vertices.\n  \n  For ex.:\n  ![image.png](../assets/image_1688291618886_0.png)\n  is a convex polygon which contains all the points in the set of all points here\n- To compute the convex hull for a given set of points we can use Andrew's Algorithm which goes like so\n  \n  * First we sort all the points primarily on x-axis component and secondarily on y-axis component\n  * Next we are ready to construct 2 ``hulls``, the upper hull and the lower hull. A hull is simply an enclosure, so here we construct the upper half of the polygon and then the lower half of the polygon.\n  \n  So we get our starting point, which is the left-most point we insert it to both our hulls\n  * Now we can begin constructing the upper hull, to do so we simply go through the sorted points and make sure each subsequent point does not lie to the left of the previous 2 points, if it does, we remove the previous point and then check again. The idea is to have the upper hull as the outermost set of points.\n  For ex.:\n  ![image.png](../assets/image_1688292223497_0.png)\n  Here we can see that the 4th point causes the hull to turn left, so we remove the 3rd point and now our hull only turns right. \n  We follow this same logic and process all the points, and for each point check if the hull hasn't turned left, if it has we remove all points from the hull that cause it to go left. It is always the last point before the current point so we can do it in a simple loop.\n  \n  * Now we get our upper hull like so\n  ![image.png](../assets/image_1688292398658_0.png)\n  \n  * Then, we do the same for the lower hull with the only difference being that we check that the hull doesn't turn right. \n  This then generates a hull which has the same ending point and we make sure the starting point remains the same for both the hulls giving us our final convex polygon.\n  \n  In C++,\n  ```cpp\n  void setup() {\n  \n    INPUT(n);\n    points = vci(n, CI());\n    upperHull = vci();\n    lowerHull = vci();\n    for (int i{}, arg1{}, arg2{}; i < n; ++i) {\n  \n      INPUT(arg1, arg2);\n  \n      points[i] = CI({arg1, arg2});\n    }\n    sort(points.begin(), points.end(), comparator);\n  }\n  \n  // Andrew's Algorithm\n  void compute() {\n    std::function<bool(int)> check{\n        [](int res) { return res > 0; }}; // point is to the left\n  \n    upperHull.pb(points[0]);\n    lowerHull.pb(points[0]);\n  \n    int kUpper{solveHull(upperHull, check)};\n  \n    check = {[](int res) { return res < 0; }}; // point is to the right\n  \n    int kLower{solveHull(lowerHull, check)};\n  \n  }\n  \n  int solveHull(vci &results, std::function<bool(int)> &check) {\n    int k{1};\n  \n    for (int i{1}; i < n; ++i) {\n  \n      while (k >= 2 && check(dirn(results[k - 2], results[k - 1], points[i]))) {\n        results.pop_back();\n        --k;\n      }\n  \n      results.pb(points[i]);\n      ++k;\n    }\n  \n    return k;\n  }\n  bool comparator(CI &a, CI &b) { return (a.X == b.X) ? a.Y < b.Y : a.X < b.X; }\n  int dirn(CI &x, CI &y, CI &p) {\n    CI a{p - x};\n    CI b{p - y};\n    int res{cast((conj(a) * b).Y)};\n    return res;\n  }\n  ```\n  \n  Here ``solveHull`` is the main logic, which simply goes over the points and inserts them all. For each point we check if the hull hasn't turned in the wrong direction and if it does we remove the last point in the hull and check again until either there aren't enough points (excluding the starting point) or if the hull turns in the right direction at the last point for the current one.\n-",536870918]],["^15",[137,"^17",1700492151030,536870918]],["^15",[137,"^Z","CP/pages/Convex Hull.md",536870918]],["^15",[138,"^K",1700492151213,536870918]],["^15",[138,"^[",137,536870918]],["^15",[138,"^@",false,536870918]],["^15",[138,"^Y","convex hull",536870918]],["^15",[138,"^11","Convex Hull",536870918]],["^15",[138,"^B",1700492151213,536870918]],["^15",[138,"^;","~u655b7377-de9c-4329-8a5d-698753174147",536870918]],["^15",[139,"^K",1700492151296,536870918]],["^15",[139,"^@",false,536870918]],["^15",[139,"^Y","virtual plane",536870918]],["^15",[139,"^11","Virtual Plane",536870918]],["^15",[139,"^B",1700492151296,536870918]],["^15",[139,"^;","~u655b7377-ad21-4d11-987a-fea0abfdb2fb",536870918]],["^15",[140,"^K",1700492152310,536870918]],["^15",[140,"^[",948,536870919]],["^15",[140,"^@",false,536870918]],["^15",[140,"^Y","set",536870918]],["^15",[140,"^11","Set",536870918]],["^15",[140,"^B",1700492152310,536870918]],["^15",[140,"^;","~u655b7379-3828-4d28-924e-f31b4cfac6eb",536870919]],["^15",[141,"^K",1700492151029,536870918]],["^15",[141,"^@",false,536870918]],["^15",[141,"^Y","polygon",536870918]],["^15",[141,"^11","Polygon",536870918]],["^15",[141,"^B",1700492151029,536870918]],["^15",[141,"^;","~u655b7377-7edf-4e1c-afd9-331d6d241cde",536870918]],["^15",[142,"^Q","A convex hull is the smallest convex [[Polygon]] (a convex polygon is a polygon where the boundaries of the polygon don't go inside) that contains all the points of a given [[Set]] of a [[Virtual Plane]] and none extra point, so it uses the points of the set itself to define the polygon's vertices.\n\nFor ex.:\n![image.png](../assets/image_1688291618886_0.png)\nis a convex polygon which contains all the points in the set of all points here",536870918]],["^15",[142,"^O","^16",536870918]],["^15",[142,"^F",138,536870918]],["^15",[142,"^X",138,536870918]],["^15",[142,"^V",138,536870918]],["^15",[142,"^U",138,536870918]],["^15",[142,"^U",139,536870918]],["^15",[142,"^U",140,536870918]],["^15",[142,"^U",141,536870918]],["^15",[142,"^H",139,536870918]],["^15",[142,"^H",140,536870918]],["^15",[142,"^H",141,536870918]],["^15",[142,"^;","~u655b7377-a600-4ca6-97e0-6200e6501009",536870918]],["^15",[143,"^Q","To compute the convex hull for a given set of points we can use Andrew's Algorithm which goes like so\n\n* First we sort all the points primarily on x-axis component and secondarily on y-axis component\n* Next we are ready to construct 2 ``hulls``, the upper hull and the lower hull. A hull is simply an enclosure, so here we construct the upper half of the polygon and then the lower half of the polygon.\n\nSo we get our starting point, which is the left-most point we insert it to both our hulls\n* Now we can begin constructing the upper hull, to do so we simply go through the sorted points and make sure each subsequent point does not lie to the left of the previous 2 points, if it does, we remove the previous point and then check again. The idea is to have the upper hull as the outermost set of points.\nFor ex.:\n![image.png](../assets/image_1688292223497_0.png)\nHere we can see that the 4th point causes the hull to turn left, so we remove the 3rd point and now our hull only turns right. \nWe follow this same logic and process all the points, and for each point check if the hull hasn't turned left, if it has we remove all points from the hull that cause it to go left. It is always the last point before the current point so we can do it in a simple loop.\n\n* Now we get our upper hull like so\n![image.png](../assets/image_1688292398658_0.png)\n\n* Then, we do the same for the lower hull with the only difference being that we check that the hull doesn't turn right. \nThis then generates a hull which has the same ending point and we make sure the starting point remains the same for both the hulls giving us our final convex polygon.\n\nIn C++,\n```cpp\nvoid setup() {\n\n  INPUT(n);\n  points = vci(n, CI());\n  upperHull = vci();\n  lowerHull = vci();\n  for (int i{}, arg1{}, arg2{}; i < n; ++i) {\n\n    INPUT(arg1, arg2);\n\n    points[i] = CI({arg1, arg2});\n  }\n  sort(points.begin(), points.end(), comparator);\n}\n\n// Andrew's Algorithm\nvoid compute() {\n  std::function<bool(int)> check{\n      [](int res) { return res > 0; }}; // point is to the left\n\n  upperHull.pb(points[0]);\n  lowerHull.pb(points[0]);\n\n  int kUpper{solveHull(upperHull, check)};\n\n  check = {[](int res) { return res < 0; }}; // point is to the right\n\n  int kLower{solveHull(lowerHull, check)};\n\n}\n\nint solveHull(vci &results, std::function<bool(int)> &check) {\n  int k{1};\n\n  for (int i{1}; i < n; ++i) {\n\n    while (k >= 2 && check(dirn(results[k - 2], results[k - 1], points[i]))) {\n      results.pop_back();\n      --k;\n    }\n\n    results.pb(points[i]);\n    ++k;\n  }\n\n  return k;\n}\nbool comparator(CI &a, CI &b) { return (a.X == b.X) ? a.Y < b.Y : a.X < b.X; }\nint dirn(CI &x, CI &y, CI &p) {\n  CI a{p - x};\n  CI b{p - y};\n  int res{cast((conj(a) * b).Y)};\n  return res;\n}\n```\n\nHere ``solveHull`` is the main logic, which simply goes over the points and inserts them all. For each point we check if the hull hasn't turned in the wrong direction and if it does we remove the last point in the hull and check again until either there aren't enough points (excluding the starting point) or if the hull turns in the right direction at the last point for the current one.",536870918]],["^15",[143,"^O","^16",536870918]],["^15",[143,"^F",142,536870918]],["^15",[143,"^X",138,536870918]],["^15",[143,"^V",138,536870918]],["^15",[143,"^U",138,536870918]],["^15",[143,"^;","~u655b7377-3d8a-4665-8741-8c33cf6318df",536870918]],["^15",[144,"^Q","",536870918]],["^15",[144,"^O","^16",536870918]],["^15",[144,"^F",143,536870918]],["^15",[144,"^X",138,536870918]],["^15",[144,"^V",138,536870918]],["^15",[144,"^U",138,536870918]],["^15",[144,"^;","~u655b7377-73da-4961-8b0c-9ed2542a3040",536870918]],["^15",[145,"^3","- The template that can be to understand the rest of the code snippet.\n  Not kept updated, check the [[Git Repo]] for template named cpp files or latest commit to see latest changes.\n- Basic Structure\n  \n  3 Files in each Project directory,\n  ``Input.txt``: Defines the input\n  ``Output.txt``: Receives the output from ``stdout``.\n  ``<problem name>.cpp``: Compile this with [[Default Compilation Flow]] to execute it.\n- Template for [[CSES]] and general problems\n  ```cpp\n  //<problem link>\n  \n  #define LOCAL\n  \n  #pragma region Headers\n  \n  #ifdef LOCAL\n  #include \"../../Helpers/Easybench/Easybench.h\"\n  #include <algorithm>\n  #include <array>\n  #include <complex>\n  #include <functional>\n  #include <iostream>\n  #include <map>\n  #include <memory>\n  #include <queue>\n  #include <set>\n  #include <stack>\n  #include <stdio.h>\n  #include <string_view>\n  #include <tuple>\n  #include <unordered_map>\n  #include <unordered_set>\n  #include <vector>\n  #else\n  #include <bits/stdc++.h>\n  #endif // LOCAL\n  #pragma endregion\n  \n  #pragma region Defines\n  #define int long long\n  #define double long double\n  #define LOG(x) static_cast<int>(std::floor(std::log2(x)))\n  #define IOS                                                                    \\\n    std::ios_base::sync_with_stdio(false);                                       \\\n    std::cin.tie(0);                                                             \\\n    std::cout.tie(0);\n  template <typename... T> void INPUT(T &...args) { ((std::cin >> args), ...); }\n  template <typename... T> void OUTPUT(T &...args) {\n    ((std::cout << args << \" \"), ...);\n    std::cout << \"\\n\";\n  }\n  #define ARR_INPUT(arr, x)                                                      \\\n    for (int i{0}; i < x; ++i) {                                                 \\\n      int y;                                                                     \\\n      std::cin >> y;                                                             \\\n      arr.push_back(y);                                                          \\\n    }\n  #define cast(i) static_cast<int>(i)\n  #define intmax std::numeric_limits<int>::max()\n  #define intmin std::numeric_limits<int>::min()\n  #define revit std::reverse_iterator\n  #define pb push_back\n  #define sk std::stack\n  #define X real()\n  #define Y imag()\n  #define tiii std::tuple<int, int, int>\n  #define mmi std::make_move_iterator\n  #pragma endregion\n  \n  #pragma region Constants\n  constexpr int mod10{10000007};\n  constexpr int cN{200005}; // const N\n  constexpr int INF{std::numeric_limits<int>::max()};\n  constexpr int mINF{std::numeric_limits<int>::min()};\n  #pragma endregion\n  \n  #pragma region Usings\n  using usi = std::unordered_set<int>;\n  using umi = std::unordered_map<int, int>;\n  using vi = std::vector<int>;\n  using si = std::set<int>;\n  using sd = std::set<double>;\n  using vvi = std::vector<vi>;\n  using pivi = std::pair<int, vi>; // first is node's value and second is node's\n                                   // adjacent elements\n  using pii = std::pair<int, int>;\n  using vpii = std::vector<pii>; // edge list\n  using vtiii = std::vector<tiii>;\n  using vvtiii = std::vector<vtiii>; // adjacency list with adjacent node id, edge\n                                     // weight and an extra value.\n  using vpivi = std::vector<pivi>;\n  using vvpii =\n      std::vector<vpii>; // adjacency list with edge weights, the pii has first as\n                         // node id and second as the edge weight\n  using mii = std::map<int, int>;\n  using vmii = std::vector<mii>;\n  using vb = std::vector<bool>; // vector<bool> is a special explicit definition\n                                // of vector and behaves more like a bitset than a\n                                // vector, also it is faster than array<bool>\n                                // https://stackoverflow.com/a/55762317/13036358\n  using vvb = std::vector<vb>;\n  using ri = revit<vi::iterator>;\n  using ski = sk<int>;\n  using CD = std::complex<double>;\n  using CI = std::complex<int>; // DEPRECATED\n  using pqd = std::priority_queue<double>;\n  using pqi = std::priority_queue<int>;\n  using pqpii = std::priority_queue<pii>;\n  using vcd = std::vector<CD>;\n  using vci = std::vector<CI>;\n  using pcd = std::pair<CD, CD>;\n  using pci = std::pair<CI, CI>;\n  using vpcd = std::vector<pcd>;\n  using vpci = std::vector<pci>;\n  using vs = std::vector<std::string_view>;\n  #pragma endregion\n  \n  namespace Algorithm {\n  using namespace std;\n  \n  #pragma region Variables\n  int testCases{1};\n  int k{};\n  int c{};\n  int A{};    // alphabet set/lexicon size\n  vvi trie{}; // we can use std::array too but the call-stack size is limited,\n              // rather use heap\n  int result{};\n  vb eos{}; // end-of-string\n  int counter{};\n  \n  #pragma endregion\n  \n  void start();\n  void output(bool);\n  void compute();\n  void setup();\n  void commonSetupAndCleanInit();\n  void trie_insert(string_view);\n  bool search(string_view);\n  \n  void start() {\n    IOS;\n  #ifdef LOCAL\n  #ifdef freopen_s // windows\n    FILE *inpStream;\n    FILE *outStream;\n  \n    freopen_s(&inpStream, \"input.txt\", \"r\", stdin);\n    freopen_s(&outStream, \"output.txt\", \"w\", stdout);\n  #else // linux\n    freopen64(\"input.txt\", \"r\", stdin);\n    freopen64(\"output.txt\", \"w\", stdout);\n  #endif\n  \n  #endif\n    //    INPUT(testCases);\n    while (testCases-- > 0) {\n      commonSetupAndCleanInit();\n      setup();\n      compute();\n    }\n  }\n  \n  void setup() {\n    INPUT(k, A, c);\n    trie = vvi(cN, vi(A, 0));\n    eos = vb(cN, false);\n    counter = 0;\n    {\n      string arg{};\n      cin.ignore(intmax, '\\n');\n      for (int i{}; i < k; ++i) {\n        getline(cin, arg);\n        trie_insert(arg);\n      }\n    }\n  }\n  \n  // Trie\n  void compute() {\n    string arg{};\n    while (c-- > 0) {\n      getline(cin, arg);\n      output(search(arg));\n    }\n  }\n  \n  void trie_insert(string_view s) {\n    int sz{cast(s.size())};\n    int next{};\n  \n    for (int i{}; i < sz; ++i) {\n      int &elem{trie[next][cast(s[i] % A)]};\n      if (!elem)\n        elem = ++counter;\n  \n      next = elem;\n    }\n    eos[next] = true;\n  }\n  \n  bool search(string_view s) {\n    int sz{cast(s.size())};\n    int next{};\n    for (int i{}; i < sz; ++i) {\n      int &elem{trie[next][cast(s[i] % A)]};\n      if (!elem)\n        return false;\n  \n      next = elem;\n    }\n    return eos[next];\n  }\n  \n  void output(bool result) {\n    cout << boolalpha;\n    cout << result << \"\\n\";\n  }\n  \n  void commonSetupAndCleanInit() {}\n  \n  } // namespace Algorithm\n  \n  signed main() {\n  #ifdef LOCAL\n    EasyBench eb{};\n  #endif\n  \n    Algorithm::start();\n  \n  #ifdef LOCAL\n    eb.showresult();\n  #endif\n    return 0;\n  }\n  \n  ```\n- Template for Leetcode\n  ```cpp\n  // https://leetcode.com/problems/two-sum/description/\n  \n  #define LOCAL\n  \n  #pragma region Headers\n  \n  #ifdef LOCAL\n  #include \"../Helpers/Easybench/Easybench.h\"\n  #include <algorithm>\n  #include <array>\n  #include <complex>\n  #include <iostream>\n  #include <map>\n  #include <memory>\n  #include <queue>\n  #include <set>\n  #include <stack>\n  #include <stdio.h>\n  #include <string_view>\n  #include <tuple>\n  #include <unordered_set>\n  #include <vector>\n  #else\n  #include <bits/stdc++.h>\n  #endif // LOCAL\n  #pragma endregion\n  \n  #pragma region Defines\n  //#define int long long\n  //#define double long double\n  #define LOG(x) static_cast<int>(std::floor(std::log2(x)))\n  #define IOS                                                                    \\\n    std::ios_base::sync_with_stdio(false);                                       \\\n    std::cin.tie(0);                                                             \\\n    std::cout.tie(0);\n  template <typename... T> void INPUT(T &...args) { ((std::cin >> args), ...); }\n  template <typename... T> void OUTPUT(T &...args) {\n    ((std::cout << args << \" \"), ...);\n    std::cout << \"\\n\";\n  }\n  #define ARR_INPUT(arr, x)                                                      \\\n    for (int i{0}; i < x; ++i) {                                                 \\\n      int y;                                                                     \\\n      std::cin >> y;                                                             \\\n      arr.push_back(y);                                                          \\\n    }\n  #define cast(i) static_cast<int>(i)\n  #define intmax std::numeric_limits<int>::max()\n  #define intmin std::numeric_limits<int>::min()\n  #define revit std::reverse_iterator\n  #define pb push_back\n  #define sk std::stack\n  #define R real()\n  #define I imag()\n  #define tiii std::tuple<int, int, int>\n  #define mmi std::make_move_iterator\n  #pragma endregion\n  \n  #pragma region Constants\n  constexpr int mod10{10000007};\n  constexpr int cN{200005}; // const N\n  constexpr int INF{std::numeric_limits<int>::max()};\n  constexpr int mINF{std::numeric_limits<int>::min()};\n  #pragma endregion\n  \n  #pragma region Usings\n  using usi = std::unordered_set<int>;\n  using umi = std::unordered_map<int, int>;\n  using vi = std::vector<int>;\n  using si = std::set<int>;\n  using sd = std::set<double>;\n  using vvi = std::vector<vi>;\n  using pivi = std::pair<int, vi>; // first is node's value and second is node's\n                                   // adjacent elements\n  using pii = std::pair<int, int>;\n  using vpii = std::vector<pii>; // edge list\n  using vtiii = std::vector<tiii>;\n  using vvtiii = std::vector<vtiii>; // adjacency list with adjacent node id, edge\n                                     // weight and an extra value.\n  using vpivi = std::vector<pivi>;\n  using vvpii =\n      std::vector<vpii>; // adjacency list with edge weights, the pii has first as\n                         // node id and second as the edge weight\n  using mii = std::map<int, int>;\n  using vmii = std::vector<mii>;\n  using vb = std::vector<bool>; // vector<bool> is a special explicit definition\n                                // of vector and behaves more like a bitset than a\n                                // vector, also it is faster than array<bool>\n                                // https://stackoverflow.com/a/55762317/13036358\n  using vvb = std::vector<vb>;\n  using ri = revit<vi::iterator>;\n  using ski = sk<int>;\n  using CD = std::complex<double>;\n  using CI = std::complex<int>; // DEPRECATED\n  using pqd = std::priority_queue<double>;\n  using pqi = std::priority_queue<int>;\n  using pqpii = std::priority_queue<pii>;\n  using vcd = std::vector<CD>;\n  using vci = std::vector<CI>;\n  using pcd = std::pair<CD, CD>;\n  using pci = std::pair<CI, CI>;\n  using vpcd = std::vector<pcd>;\n  using vpci = std::vector<pci>;\n  using vs = std::vector<std::string_view>;\n  #pragma endregion\n  \n  namespace Algorithm {\n  using namespace std;\n  \n  #pragma region Variables\n  vi result{};\n  vi nums{};\n  int target{};\n  int n{};\n  umi ht{}; // hash table\n  #pragma endregion\n  \n  void start();\n  void output();\n  void localSetup();\n  void commonSetupAndCleanInit(); // needs to be cleaned up and setup, cleanup\n                                  // here because it resets results so must be\n                                  // done before other logic\n  \n  void nonLocalSetup();\n  \n  void localSetup() {\n    IOS;\n  #ifdef freopen_s // windows\n    FILE *inpStream;\n    FILE *outStream;\n  \n    freopen_s(&inpStream, \"input.txt\", \"r\", stdin);\n    freopen_s(&outStream, \"output.txt\", \"w\", stdout);\n  #else // linux\n    freopen64(\"input.txt\", \"r\", stdin);\n    freopen64(\"output.txt\", \"w\", stdout);\n  #endif\n    INPUT(n);\n    INPUT(target);\n    ARR_INPUT(nums, n);\n  }\n  \n  void commonSetupAndCleanInit() {\n    ht = umi();\n    result = vi();\n  }\n  \n  void nonLocalSetup() { n = cast(nums.size()); }\n  \n  void start() {\n    for (int i{}, elem{}; i < (n * 2); ++i) {\n      elem = nums[i % n];\n  \n      umi::iterator it{ht.find(target - elem)};\n      if (it != ht.end()) {\n        result.pb(i);\n        result.pb(it->second);\n        return;\n      } else {\n        ht.insert({elem, i});\n      }\n    }\n  }\n  \n  void output() {\n  \n    for (int elem : result) {\n      std::cout << elem << \" \";\n    }\n  \n    std::cout << std::endl;\n  }\n  \n  void cleanup() {\n  \n    result.clear();\n    ht.clear();\n    n = 0;\n    nums.clear();\n    target = 0;\n  }\n  \n  } // namespace Algorithm\n  \n  #define START                                                                  \\\n    Algorithm::nums = nums;                                                      \\\n    Algorithm::target = target;                                                  \\\n    Algorithm::commonSetupAndCleanInit();                                        \\\n    Algorithm::nonLocalSetup();                                                  \\\n    Algorithm::start();                                                          \\\n    Algorithm::output();                                                         \\\n    return Algorithm::result;\n  \n  namespace {\n  using namespace std;\n  class Solution {\n  public:\n    /// Local Test Method\n    void entrypoint() {\n      Algorithm::localSetup();\n      Algorithm::commonSetupAndCleanInit();\n      Algorithm::start();\n      Algorithm::output();\n    }\n  \n    /// LC calls this method\n    vector<int> twoSum(vector<int> &nums, int target) { START; }\n  };\n  } // namespace\n  \n  #ifdef LOCAL\n  signed main() {\n  \n    EasyBench eb{};\n  \n    Solution().entrypoint();\n  \n    eb.showresult();\n  \n    return 0;\n  }\n  #endif\n  \n  ```",536870918]],["^15",[145,"^17",1700492151059,536870918]],["^15",[145,"^Z","CP/pages/Default C++ Template.md",536870918]],["^15",[146,"^K",1700492151058,536870918]],["^15",[146,"^@",false,536870918]],["^15",[146,"^Y","git repo",536870918]],["^15",[146,"^11","Git Repo",536870918]],["^15",[146,"^B",1700492151058,536870918]],["^15",[146,"^;","~u655b7377-4a8f-434b-b7c5-c0ae74473bd0",536870918]],["^15",[147,"^K",1700492151059,536870918]],["^15",[147,"^@",false,536870918]],["^15",[147,"^Y","default compilation flow",536870918]],["^15",[147,"^11","Default Compilation Flow",536870918]],["^15",[147,"^B",1700492151059,536870918]],["^15",[147,"^;","~u655b7377-59ca-41bb-addf-c27dedb4bd0a",536870918]],["^15",[148,"^Q","The template that can be to understand the rest of the code snippet.\nNot kept updated, check the [[Git Repo]] for template named cpp files or latest commit to see latest changes.",536870918]],["^15",[148,"^O","^16",536870918]],["^15",[148,"^F",119,536870918]],["^15",[148,"^X",119,536870918]],["^15",[148,"^V",119,536870918]],["^15",[148,"^U",119,536870918]],["^15",[148,"^U",146,536870918]],["^15",[148,"^H",146,536870918]],["^15",[148,"^;","~u655b7377-cf7e-41fd-9f81-6618d4d2301d",536870918]],["^15",[149,"^Q","Basic Structure\n\n3 Files in each Project directory,\n``Input.txt``: Defines the input\n``Output.txt``: Receives the output from ``stdout``.\n``<problem name>.cpp``: Compile this with [[Default Compilation Flow]] to execute it.",536870918]],["^15",[149,"^O","^16",536870918]],["^15",[149,"^F",148,536870918]],["^15",[149,"^X",119,536870918]],["^15",[149,"^V",119,536870918]],["^15",[149,"^U",119,536870918]],["^15",[149,"^U",147,536870918]],["^15",[149,"^H",147,536870918]],["^15",[149,"^;","~u655b7377-32bc-4bd9-9d11-e296e7fa59c2",536870918]],["^15",[150,"^Q","Template for [[CSES]] and general problems\n```cpp\n//<problem link>\n\n#define LOCAL\n\n#pragma region Headers\n\n#ifdef LOCAL\n#include \"../../Helpers/Easybench/Easybench.h\"\n#include <algorithm>\n#include <array>\n#include <complex>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <memory>\n#include <queue>\n#include <set>\n#include <stack>\n#include <stdio.h>\n#include <string_view>\n#include <tuple>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n#else\n#include <bits/stdc++.h>\n#endif // LOCAL\n#pragma endregion\n\n#pragma region Defines\n#define int long long\n#define double long double\n#define LOG(x) static_cast<int>(std::floor(std::log2(x)))\n#define IOS                                                                    \\\n  std::ios_base::sync_with_stdio(false);                                       \\\n  std::cin.tie(0);                                                             \\\n  std::cout.tie(0);\ntemplate <typename... T> void INPUT(T &...args) { ((std::cin >> args), ...); }\ntemplate <typename... T> void OUTPUT(T &...args) {\n  ((std::cout << args << \" \"), ...);\n  std::cout << \"\\n\";\n}\n#define ARR_INPUT(arr, x)                                                      \\\n  for (int i{0}; i < x; ++i) {                                                 \\\n    int y;                                                                     \\\n    std::cin >> y;                                                             \\\n    arr.push_back(y);                                                          \\\n  }\n#define cast(i) static_cast<int>(i)\n#define intmax std::numeric_limits<int>::max()\n#define intmin std::numeric_limits<int>::min()\n#define revit std::reverse_iterator\n#define pb push_back\n#define sk std::stack\n#define X real()\n#define Y imag()\n#define tiii std::tuple<int, int, int>\n#define mmi std::make_move_iterator\n#pragma endregion\n\n#pragma region Constants\nconstexpr int mod10{10000007};\nconstexpr int cN{200005}; // const N\nconstexpr int INF{std::numeric_limits<int>::max()};\nconstexpr int mINF{std::numeric_limits<int>::min()};\n#pragma endregion\n\n#pragma region Usings\nusing usi = std::unordered_set<int>;\nusing umi = std::unordered_map<int, int>;\nusing vi = std::vector<int>;\nusing si = std::set<int>;\nusing sd = std::set<double>;\nusing vvi = std::vector<vi>;\nusing pivi = std::pair<int, vi>; // first is node's value and second is node's\n                                 // adjacent elements\nusing pii = std::pair<int, int>;\nusing vpii = std::vector<pii>; // edge list\nusing vtiii = std::vector<tiii>;\nusing vvtiii = std::vector<vtiii>; // adjacency list with adjacent node id, edge\n                                   // weight and an extra value.\nusing vpivi = std::vector<pivi>;\nusing vvpii =\n    std::vector<vpii>; // adjacency list with edge weights, the pii has first as\n                       // node id and second as the edge weight\nusing mii = std::map<int, int>;\nusing vmii = std::vector<mii>;\nusing vb = std::vector<bool>; // vector<bool> is a special explicit definition\n                              // of vector and behaves more like a bitset than a\n                              // vector, also it is faster than array<bool>\n                              // https://stackoverflow.com/a/55762317/13036358\nusing vvb = std::vector<vb>;\nusing ri = revit<vi::iterator>;\nusing ski = sk<int>;\nusing CD = std::complex<double>;\nusing CI = std::complex<int>; // DEPRECATED\nusing pqd = std::priority_queue<double>;\nusing pqi = std::priority_queue<int>;\nusing pqpii = std::priority_queue<pii>;\nusing vcd = std::vector<CD>;\nusing vci = std::vector<CI>;\nusing pcd = std::pair<CD, CD>;\nusing pci = std::pair<CI, CI>;\nusing vpcd = std::vector<pcd>;\nusing vpci = std::vector<pci>;\nusing vs = std::vector<std::string_view>;\n#pragma endregion\n\nnamespace Algorithm {\nusing namespace std;\n\n#pragma region Variables\nint testCases{1};\nint k{};\nint c{};\nint A{};    // alphabet set/lexicon size\nvvi trie{}; // we can use std::array too but the call-stack size is limited,\n            // rather use heap\nint result{};\nvb eos{}; // end-of-string\nint counter{};\n\n#pragma endregion\n\nvoid start();\nvoid output(bool);\nvoid compute();\nvoid setup();\nvoid commonSetupAndCleanInit();\nvoid trie_insert(string_view);\nbool search(string_view);\n\nvoid start() {\n  IOS;\n#ifdef LOCAL\n#ifdef freopen_s // windows\n  FILE *inpStream;\n  FILE *outStream;\n\n  freopen_s(&inpStream, \"input.txt\", \"r\", stdin);\n  freopen_s(&outStream, \"output.txt\", \"w\", stdout);\n#else // linux\n  freopen64(\"input.txt\", \"r\", stdin);\n  freopen64(\"output.txt\", \"w\", stdout);\n#endif\n\n#endif\n  //    INPUT(testCases);\n  while (testCases-- > 0) {\n    commonSetupAndCleanInit();\n    setup();\n    compute();\n  }\n}\n\nvoid setup() {\n  INPUT(k, A, c);\n  trie = vvi(cN, vi(A, 0));\n  eos = vb(cN, false);\n  counter = 0;\n  {\n    string arg{};\n    cin.ignore(intmax, '\\n');\n    for (int i{}; i < k; ++i) {\n      getline(cin, arg);\n      trie_insert(arg);\n    }\n  }\n}\n\n// Trie\nvoid compute() {\n  string arg{};\n  while (c-- > 0) {\n    getline(cin, arg);\n    output(search(arg));\n  }\n}\n\nvoid trie_insert(string_view s) {\n  int sz{cast(s.size())};\n  int next{};\n\n  for (int i{}; i < sz; ++i) {\n    int &elem{trie[next][cast(s[i] % A)]};\n    if (!elem)\n      elem = ++counter;\n\n    next = elem;\n  }\n  eos[next] = true;\n}\n\nbool search(string_view s) {\n  int sz{cast(s.size())};\n  int next{};\n  for (int i{}; i < sz; ++i) {\n    int &elem{trie[next][cast(s[i] % A)]};\n    if (!elem)\n      return false;\n\n    next = elem;\n  }\n  return eos[next];\n}\n\nvoid output(bool result) {\n  cout << boolalpha;\n  cout << result << \"\\n\";\n}\n\nvoid commonSetupAndCleanInit() {}\n\n} // namespace Algorithm\n\nsigned main() {\n#ifdef LOCAL\n  EasyBench eb{};\n#endif\n\n  Algorithm::start();\n\n#ifdef LOCAL\n  eb.showresult();\n#endif\n  return 0;\n}\n\n```",536870918]],["^15",[150,"^O","^16",536870918]],["^15",[150,"^F",149,536870918]],["^15",[150,"^X",119,536870918]],["^15",[150,"^V",119,536870918]],["^15",[150,"^U",103,536870918]],["^15",[150,"^U",119,536870918]],["^15",[150,"^H",103,536870918]],["^15",[150,"^;","~u655b7377-ee8c-4812-b5f7-863ae215227f",536870918]],["^15",[151,"^Q","Template for Leetcode\n```cpp\n// https://leetcode.com/problems/two-sum/description/\n\n#define LOCAL\n\n#pragma region Headers\n\n#ifdef LOCAL\n#include \"../Helpers/Easybench/Easybench.h\"\n#include <algorithm>\n#include <array>\n#include <complex>\n#include <iostream>\n#include <map>\n#include <memory>\n#include <queue>\n#include <set>\n#include <stack>\n#include <stdio.h>\n#include <string_view>\n#include <tuple>\n#include <unordered_set>\n#include <vector>\n#else\n#include <bits/stdc++.h>\n#endif // LOCAL\n#pragma endregion\n\n#pragma region Defines\n//#define int long long\n//#define double long double\n#define LOG(x) static_cast<int>(std::floor(std::log2(x)))\n#define IOS                                                                    \\\n  std::ios_base::sync_with_stdio(false);                                       \\\n  std::cin.tie(0);                                                             \\\n  std::cout.tie(0);\ntemplate <typename... T> void INPUT(T &...args) { ((std::cin >> args), ...); }\ntemplate <typename... T> void OUTPUT(T &...args) {\n  ((std::cout << args << \" \"), ...);\n  std::cout << \"\\n\";\n}\n#define ARR_INPUT(arr, x)                                                      \\\n  for (int i{0}; i < x; ++i) {                                                 \\\n    int y;                                                                     \\\n    std::cin >> y;                                                             \\\n    arr.push_back(y);                                                          \\\n  }\n#define cast(i) static_cast<int>(i)\n#define intmax std::numeric_limits<int>::max()\n#define intmin std::numeric_limits<int>::min()\n#define revit std::reverse_iterator\n#define pb push_back\n#define sk std::stack\n#define R real()\n#define I imag()\n#define tiii std::tuple<int, int, int>\n#define mmi std::make_move_iterator\n#pragma endregion\n\n#pragma region Constants\nconstexpr int mod10{10000007};\nconstexpr int cN{200005}; // const N\nconstexpr int INF{std::numeric_limits<int>::max()};\nconstexpr int mINF{std::numeric_limits<int>::min()};\n#pragma endregion\n\n#pragma region Usings\nusing usi = std::unordered_set<int>;\nusing umi = std::unordered_map<int, int>;\nusing vi = std::vector<int>;\nusing si = std::set<int>;\nusing sd = std::set<double>;\nusing vvi = std::vector<vi>;\nusing pivi = std::pair<int, vi>; // first is node's value and second is node's\n                                 // adjacent elements\nusing pii = std::pair<int, int>;\nusing vpii = std::vector<pii>; // edge list\nusing vtiii = std::vector<tiii>;\nusing vvtiii = std::vector<vtiii>; // adjacency list with adjacent node id, edge\n                                   // weight and an extra value.\nusing vpivi = std::vector<pivi>;\nusing vvpii =\n    std::vector<vpii>; // adjacency list with edge weights, the pii has first as\n                       // node id and second as the edge weight\nusing mii = std::map<int, int>;\nusing vmii = std::vector<mii>;\nusing vb = std::vector<bool>; // vector<bool> is a special explicit definition\n                              // of vector and behaves more like a bitset than a\n                              // vector, also it is faster than array<bool>\n                              // https://stackoverflow.com/a/55762317/13036358\nusing vvb = std::vector<vb>;\nusing ri = revit<vi::iterator>;\nusing ski = sk<int>;\nusing CD = std::complex<double>;\nusing CI = std::complex<int>; // DEPRECATED\nusing pqd = std::priority_queue<double>;\nusing pqi = std::priority_queue<int>;\nusing pqpii = std::priority_queue<pii>;\nusing vcd = std::vector<CD>;\nusing vci = std::vector<CI>;\nusing pcd = std::pair<CD, CD>;\nusing pci = std::pair<CI, CI>;\nusing vpcd = std::vector<pcd>;\nusing vpci = std::vector<pci>;\nusing vs = std::vector<std::string_view>;\n#pragma endregion\n\nnamespace Algorithm {\nusing namespace std;\n\n#pragma region Variables\nvi result{};\nvi nums{};\nint target{};\nint n{};\numi ht{}; // hash table\n#pragma endregion\n\nvoid start();\nvoid output();\nvoid localSetup();\nvoid commonSetupAndCleanInit(); // needs to be cleaned up and setup, cleanup\n                                // here because it resets results so must be\n                                // done before other logic\n\nvoid nonLocalSetup();\n\nvoid localSetup() {\n  IOS;\n#ifdef freopen_s // windows\n  FILE *inpStream;\n  FILE *outStream;\n\n  freopen_s(&inpStream, \"input.txt\", \"r\", stdin);\n  freopen_s(&outStream, \"output.txt\", \"w\", stdout);\n#else // linux\n  freopen64(\"input.txt\", \"r\", stdin);\n  freopen64(\"output.txt\", \"w\", stdout);\n#endif\n  INPUT(n);\n  INPUT(target);\n  ARR_INPUT(nums, n);\n}\n\nvoid commonSetupAndCleanInit() {\n  ht = umi();\n  result = vi();\n}\n\nvoid nonLocalSetup() { n = cast(nums.size()); }\n\nvoid start() {\n  for (int i{}, elem{}; i < (n * 2); ++i) {\n    elem = nums[i % n];\n\n    umi::iterator it{ht.find(target - elem)};\n    if (it != ht.end()) {\n      result.pb(i);\n      result.pb(it->second);\n      return;\n    } else {\n      ht.insert({elem, i});\n    }\n  }\n}\n\nvoid output() {\n\n  for (int elem : result) {\n    std::cout << elem << \" \";\n  }\n\n  std::cout << std::endl;\n}\n\nvoid cleanup() {\n\n  result.clear();\n  ht.clear();\n  n = 0;\n  nums.clear();\n  target = 0;\n}\n\n} // namespace Algorithm\n\n#define START                                                                  \\\n  Algorithm::nums = nums;                                                      \\\n  Algorithm::target = target;                                                  \\\n  Algorithm::commonSetupAndCleanInit();                                        \\\n  Algorithm::nonLocalSetup();                                                  \\\n  Algorithm::start();                                                          \\\n  Algorithm::output();                                                         \\\n  return Algorithm::result;\n\nnamespace {\nusing namespace std;\nclass Solution {\npublic:\n  /// Local Test Method\n  void entrypoint() {\n    Algorithm::localSetup();\n    Algorithm::commonSetupAndCleanInit();\n    Algorithm::start();\n    Algorithm::output();\n  }\n\n  /// LC calls this method\n  vector<int> twoSum(vector<int> &nums, int target) { START; }\n};\n} // namespace\n\n#ifdef LOCAL\nsigned main() {\n\n  EasyBench eb{};\n\n  Solution().entrypoint();\n\n  eb.showresult();\n\n  return 0;\n}\n#endif\n\n```",536870918]],["^15",[151,"^O","^16",536870918]],["^15",[151,"^F",150,536870918]],["^15",[151,"^X",119,536870918]],["^15",[151,"^V",119,536870918]],["^15",[151,"^U",119,536870918]],["^15",[151,"^;","~u655b7377-3328-4390-978b-5c20f084992a",536870918]],["^15",[152,"^3","-\n-",536870918]],["^15",[152,"^17",1700492151068,536870918]],["^15",[152,"^Z","CP/pages/Default Code Explanation Format.md",536870918]],["^15",[153,"^K",1700492151067,536870918]],["^15",[153,"^[",152,536870918]],["^15",[153,"^@",false,536870918]],["^15",[153,"^Y","default code explanation format",536870918]],["^15",[153,"^11","Default Code Explanation Format",536870918]],["^15",[153,"^B",1700492151067,536870918]],["^15",[153,"^;","~u655b7377-b80c-4d99-87b4-ff53175705d0",536870918]],["^15",[154,"^Q","",536870918]],["^15",[154,"^O","^16",536870918]],["^15",[154,"^F",153,536870918]],["^15",[154,"^X",153,536870918]],["^15",[154,"^V",153,536870918]],["^15",[154,"^U",153,536870918]],["^15",[154,"^;","~u655b7377-86f1-42b6-a191-859f27126380",536870918]],["^15",[155,"^Q","",536870918]],["^15",[155,"^O","^16",536870918]],["^15",[155,"^F",154,536870918]],["^15",[155,"^X",153,536870918]],["^15",[155,"^V",153,536870918]],["^15",[155,"^U",153,536870918]],["^15",[155,"^;","~u655b7377-a7cb-4443-bb7e-3793aab8e0d9",536870918]],["^15",[156,"^3","- It’s a mathematical statement that defines the relation between 2 algebraic\n  expressions. The relation can be <,>, = or their mix. We may also have\n  the inequality relation such as ax != bx, however then it may not necessarily\n  be true that f(ax) != f(bx), such as\n  $$-1 \\ne 1$$\n  is true\n  but\n  $$(-1)^2 \\ne (1)^2 \\\\\\\n  1 \\ne 1 $$\n  is false.\n- The equations theirselves are of diff. types such as [[Linear Equation]], [[Quadratic Equation]],\n  [[Cubic Equation]] etc.\n- Form of an eq.\n  ![image.png](../assets/image_1688144012925_0.png)\n- Degree of an equation \n  It is the highest exponent amongst all terms. For 2x+9 it is 1 as 1\n  is the highest power for a term. Same for $$2x+9^2$$, because $$9^2$$\n  can be directly solved giving us 81.\n  but\n  $$2x^2 +3y+2$$ when simplified remains the same, so here degree is 2 because the highest exponent is 2.\n- All equations can be represented in a [[Virtual Plane]], generally the [[Cartesian Plane]] is used but eqns with [[Complex Number]] or [[Vector]] use the [[Complex Plane]]. \n  \n  [[Function]]s for any point are defined by equations so\n  f(x) = 0\n  here the equation can be ``x*0=0``\n  and as we can see the function is defined by the equation ``x*0``. Now f can be easily\n  described by a single axis plane. We simply plot all the results of f(x).\n  \n  * Another eqn is\n    $$y = f(x)$$\n     where f can be ``2x+9``\n     Now here we have 2 [[Variable]]s, each variable represents the magnitude in its axis for a point which is why we use x and y as variables. But we can use other variables too, its just simpler\n  to get x and y directly and plot them. Here we have 2 variables so we get a 2 axes plane and for each value of x we get f(x) which is its y.\n  \n  * $$F=ma$$\n  force = mass\\*acceleration\n  Here we can use \n  y= x\\*z\n  And we can see there are 3 variables so it will require a 3-dimensional plane.\n- Zero of a [[Function]]\n  If $$f(c) = 0$$\n  then the [[Number]] ``c`` is called the zero of f.\n- Constant [[Function]]\n  If $$f(c)=b $$ \n  where c and b are constant [[Number]]s then the function is called\n  a constant function and its graph is a horizontal line with y-intercept with\n  (0,b).\n- Real solution\n  A solution to an equation is the ordered pair of points at which the\n  equations satisfies the relation.\n  More formally,\n  A solution is the [[Set]] of all possible values of a [[Variable]] which satisfy the equation. The solution\n  is a real solution if the set only accepts [[Real Number]]s.\n  For ex.:\n  $$2x+9=0$$\n  so for ``x=-4.5``\n  $$-9+9=0 \\\\\\ 0=0$$\n  so``-4.5``  is a solution to the equation 2x+9=0. Since it is a real number, it is a real solution.\n-",536870918]],["^15",[156,"^17",1700492151107,536870918]],["^15",[156,"^Z","CP/pages/Equation.md",536870918]],["^15",[157,"^K",1700492151296,536870918]],["^15",[157,"^[",156,536870918]],["^15",[157,"^@",false,536870918]],["^15",[157,"^Y","equation",536870918]],["^15",[157,"^11","Equation",536870918]],["^15",[157,"^B",1700492151296,536870918]],["^15",[157,"^;","~u655b7377-f2dd-46de-b201-3996b39e4a32",536870918]],["^15",[158,"^K",1700492151212,536870918]],["^15",[158,"^@",false,536870918]],["^15",[158,"^Y","complex number",536870918]],["^15",[158,"^11","Complex Number",536870918]],["^15",[158,"^B",1700492151212,536870918]],["^15",[158,"^;","~u655b7377-0002-4336-9491-b159191fcc70",536870918]],["^15",[159,"^K",1700492151101,536870918]],["^15",[159,"^@",false,536870918]],["^15",[159,"^Y","cubic equation",536870918]],["^15",[159,"^11","Cubic Equation",536870918]],["^15",[159,"^B",1700492151101,536870918]],["^15",[159,"^;","~u655b7377-0d02-4118-8532-87684a8d7c68",536870918]],["^15",[160,"^K",1700492151105,536870918]],["^15",[160,"^[",1546,536870920]],["^15",[160,"^@",false,536870918]],["^15",[160,"^Y","vector",536870918]],["^15",[160,"^11","Vector",536870918]],["^15",[160,"^B",1700492151105,536870918]],["^15",[160,"^;","~u656462fe-d61b-45c3-83b0-a6cd5bab446d",536870960]],["^15",[161,"^K",1700492151296,536870918]],["^15",[161,"^[",1537,536870920]],["^15",[161,"^@",false,536870918]],["^15",[161,"^Y","variable",536870918]],["^15",[161,"^11","Variable",536870918]],["^15",[161,"^B",1700492151296,536870918]],["^15",[161,"^;","~u656462fe-4819-453e-ad2c-c13ced63e1a7",536870958]],["^15",[162,"^K",1700492152348,536870918]],["^15",[162,"^[",1728,536870954]],["^15",[162,"^@",false,536870918]],["^15",[162,"^Y","number",536870918]],["^15",[162,"^11","Number",536870918]],["^15",[162,"^B",1700492152348,536870918]],["^15",[162,"^;","~u656462fe-57a8-44ef-bcdc-4ca131af4f18",536870954]],["^15",[163,"^K",1700492152439,536870918]],["^15",[163,"^[",1713,536870948]],["^15",[163,"^@",false,536870918]],["^15",[163,"^Y","function",536870918]],["^15",[163,"^11","Function",536870918]],["^15",[163,"^?",["^ ","~:filters","{\"generator function\" true}"],536870918]],["^15",[163,"^4",["^ ","^1:","{\"generator function\" true}"],536870918]],["^15",[163,"^B",1700492152439,536870918]],["^15",[163,"^;","~u656462fe-f387-4784-9084-519f6222aaa5",536870960]],["^15",[164,"^K",1700492151296,536870918]],["^15",[164,"^@",false,536870918]],["^15",[164,"^Y","real number",536870918]],["^15",[164,"^11","Real Number",536870918]],["^15",[164,"^B",1700492151296,536870918]],["^15",[164,"^;","~u655b7377-bcd9-42ed-93b7-73f71ce66910",536870918]],["^15",[165,"^K",1700492151104,536870918]],["^15",[165,"^@",false,536870918]],["^15",[165,"^Y","complex plane",536870918]],["^15",[165,"^11","Complex Plane",536870918]],["^15",[165,"^B",1700492151104,536870918]],["^15",[165,"^;","~u655b7377-0d6e-4f7c-a5b7-7a2e567bb322",536870918]],["^15",[166,"^K",1700492151102,536870918]],["^15",[166,"^@",false,536870918]],["^15",[166,"^Y","quadratic equation",536870918]],["^15",[166,"^11","Quadratic Equation",536870918]],["^15",[166,"^B",1700492151102,536870918]],["^15",[166,"^;","~u655b7377-385d-4d05-b8c1-c4563a1926c9",536870918]],["^15",[167,"^K",1700492151296,536870918]],["^15",[167,"^[",203,536870918]],["^15",[167,"^@",false,536870918]],["^15",[167,"^Y","linear equation",536870918]],["^15",[167,"^11","Linear Equation",536870918]],["^15",[167,"^B",1700492151296,536870918]],["^15",[167,"^;","~u655b7377-fa38-40e1-8af7-00352a36831f",536870918]],["^15",[168,"^Q","Degree of an equation \nIt is the highest exponent amongst all terms. For 2x+9 it is 1 as 1\nis the highest power for a term. Same for $$2x+9^2$$, because $$9^2$$\ncan be directly solved giving us 81.\nbut\n$$2x^2 +3y+2$$ when simplified remains the same, so here degree is 2 because the highest exponent is 2.",536870918]],["^15",[168,"^O","^16",536870918]],["^15",[168,"^F",176,536870918]],["^15",[168,"^X",157,536870918]],["^15",[168,"^V",157,536870918]],["^15",[168,"^U",157,536870918]],["^15",[168,"^;","~u655b7377-ecbd-47f2-8850-fafc10be1f80",536870918]],["^15",[169,"^Q","The equations theirselves are of diff. types such as [[Linear Equation]], [[Quadratic Equation]],\n[[Cubic Equation]] etc.",536870918]],["^15",[169,"^O","^16",536870918]],["^15",[169,"^F",174,536870918]],["^15",[169,"^X",157,536870918]],["^15",[169,"^V",157,536870918]],["^15",[169,"^U",157,536870918]],["^15",[169,"^U",159,536870918]],["^15",[169,"^U",166,536870918]],["^15",[169,"^U",167,536870918]],["^15",[169,"^H",159,536870918]],["^15",[169,"^H",166,536870918]],["^15",[169,"^H",167,536870918]],["^15",[169,"^;","~u655b7377-0154-49e6-a5e8-2f86cfd0e187",536870918]],["^15",[170,"^Q","All equations can be represented in a [[Virtual Plane]], generally the [[Cartesian Plane]] is used but eqns with [[Complex Number]] or [[Vector]] use the [[Complex Plane]]. \n\n[[Function]]s for any point are defined by equations so\nf(x) = 0\nhere the equation can be ``x*0=0``\nand as we can see the function is defined by the equation ``x*0``. Now f can be easily\ndescribed by a single axis plane. We simply plot all the results of f(x).\n\n* Another eqn is\n  $$y = f(x)$$\n   where f can be ``2x+9``\n   Now here we have 2 [[Variable]]s, each variable represents the magnitude in its axis for a point which is why we use x and y as variables. But we can use other variables too, its just simpler\nto get x and y directly and plot them. Here we have 2 variables so we get a 2 axes plane and for each value of x we get f(x) which is its y.\n\n* $$F=ma$$\nforce = mass\\*acceleration\nHere we can use \ny= x\\*z\nAnd we can see there are 3 variables so it will require a 3-dimensional plane.",536870918]],["^15",[170,"^O","^16",536870918]],["^15",[170,"^F",168,536870918]],["^15",[170,"^X",157,536870918]],["^15",[170,"^V",157,536870918]],["^15",[170,"^U",129,536870918]],["^15",[170,"^U",139,536870918]],["^15",[170,"^U",157,536870918]],["^15",[170,"^U",158,536870918]],["^15",[170,"^U",160,536870918]],["^15",[170,"^U",161,536870918]],["^15",[170,"^U",163,536870918]],["^15",[170,"^U",165,536870918]],["^15",[170,"^H",129,536870918]],["^15",[170,"^H",139,536870918]],["^15",[170,"^H",158,536870918]],["^15",[170,"^H",160,536870918]],["^15",[170,"^H",161,536870918]],["^15",[170,"^H",163,536870918]],["^15",[170,"^H",165,536870918]],["^15",[170,"^;","~u655b7377-81e4-4d16-a7cf-ee91753122a6",536870918]],["^15",[171,"^Q","",536870918]],["^15",[171,"^O","^16",536870918]],["^15",[171,"^F",173,536870918]],["^15",[171,"^X",157,536870918]],["^15",[171,"^V",157,536870918]],["^15",[171,"^U",157,536870918]],["^15",[171,"^;","~u655b7377-d39d-467c-afd3-60041ef111c3",536870918]],["^15",[172,"^Q","Zero of a [[Function]]\nIf $$f(c) = 0$$\nthen the [[Number]] ``c`` is called the zero of f.",536870918]],["^15",[172,"^O","^16",536870918]],["^15",[172,"^F",170,536870918]],["^15",[172,"^X",157,536870918]],["^15",[172,"^V",157,536870918]],["^15",[172,"^U",157,536870918]],["^15",[172,"^U",162,536870918]],["^15",[172,"^U",163,536870918]],["^15",[172,"^H",162,536870918]],["^15",[172,"^H",163,536870918]],["^15",[172,"^;","~u655b7377-24e8-45c7-8712-df3eb7793147",536870918]],["^15",[173,"^Q","Real solution\nA solution to an equation is the ordered pair of points at which the\nequations satisfies the relation.\nMore formally,\nA solution is the [[Set]] of all possible values of a [[Variable]] which satisfy the equation. The solution\nis a real solution if the set only accepts [[Real Number]]s.\nFor ex.:\n$$2x+9=0$$\nso for ``x=-4.5``\n$$-9+9=0 \\\\\\ 0=0$$\nso``-4.5``  is a solution to the equation 2x+9=0. Since it is a real number, it is a real solution.",536870918]],["^15",[173,"^O","^16",536870918]],["^15",[173,"^F",175,536870918]],["^15",[173,"^X",157,536870918]],["^15",[173,"^V",157,536870918]],["^15",[173,"^U",140,536870918]],["^15",[173,"^U",157,536870918]],["^15",[173,"^U",161,536870918]],["^15",[173,"^U",164,536870918]],["^15",[173,"^H",140,536870918]],["^15",[173,"^H",161,536870918]],["^15",[173,"^H",164,536870918]],["^15",[173,"^;","~u655b7377-8135-468a-ab03-75f09466c0a1",536870918]],["^15",[174,"^Q","It’s a mathematical statement that defines the relation between 2 algebraic\nexpressions. The relation can be <,>, = or their mix. We may also have\nthe inequality relation such as ax != bx, however then it may not necessarily\nbe true that f(ax) != f(bx), such as\n$$-1 \\ne 1$$\nis true\nbut\n$$(-1)^2 \\ne (1)^2 \\\\\\\n1 \\ne 1 $$\nis false.",536870918]],["^15",[174,"^O","^16",536870918]],["^15",[174,"^F",157,536870918]],["^15",[174,"^X",157,536870918]],["^15",[174,"^V",157,536870918]],["^15",[174,"^U",157,536870918]],["^15",[174,"^;","~u655b7377-cda3-44d9-be74-d0f91b795a71",536870918]],["^15",[175,"^Q","Constant [[Function]]\nIf $$f(c)=b $$ \nwhere c and b are constant [[Number]]s then the function is called\na constant function and its graph is a horizontal line with y-intercept with\n(0,b).",536870918]],["^15",[175,"^O","^16",536870918]],["^15",[175,"^F",172,536870918]],["^15",[175,"^X",157,536870918]],["^15",[175,"^V",157,536870918]],["^15",[175,"^U",157,536870918]],["^15",[175,"^U",162,536870918]],["^15",[175,"^U",163,536870918]],["^15",[175,"^H",162,536870918]],["^15",[175,"^H",163,536870918]],["^15",[175,"^;","~u655b7377-563d-4bd8-bd9e-0d18b62e8ab6",536870918]],["^15",[176,"^Q","Form of an eq.\n![image.png](../assets/image_1688144012925_0.png)",536870918]],["^15",[176,"^O","^16",536870918]],["^15",[176,"^F",169,536870918]],["^15",[176,"^X",157,536870918]],["^15",[176,"^V",157,536870918]],["^15",[176,"^U",157,536870918]],["^15",[176,"^;","~u655b7377-f0c0-4c99-bb07-9b1ab6a2f173",536870918]],["^15",[177,"^3","- We deal with geometric shapes here.\n- [[Complex Number]]: MSVC and GCC have a library <complex> that can be used to represent complex numbers.\n  Now CNs theirselves can use either floating or integer coordinates, so we can do\n  ```cpp\n  #define R real()\n  #define I imag()\n  \n  using CD = complex<long double>;\n  using CI = complex<long long>;\n  \n  and then define a CN with\n  CI c{ CI(4,2) };\n  cout << c.R << c.I << endl;\n  ```\n- CI is deprecated as of C++17, so CD is the only one we can use.\n- We can find |v| which is the +ve length of a vector v from origin to the point (x,y). Here y is the imaginary part and x is the real part. This is done using the abs(<CN>) function. \n  That is, \n  $$\\text{abs(<CN>)} = \\sqrt{x^2+y^2}$$\n  What is $$\\sqrt{x^2+y^2}$$ ?\n  \n  ![image.png](../assets/image_1683264291580_0.png)\n  \n  It is the distance from origin to the point x,y.\n  Since it can be floating, it is better to use CD.\n- We can also calculate distance between 2 points using abs(),\n  to do so say a and b are CD, then\n  ``double dist{ abs(b-a) }; ``\n  will return the distance between them.\n- Angle: We can get the angle \n  \n  ![image.png](../assets/image_1683264991101_0.png)\n  \n  alpha using the function arg(<CN>)\n  This angle has its base on the x axis (so at (x,0) it is 0) and increases counter clockwise. The angle is in radians, where r radians means 180*r/pi or 1 radian = pi/180 degrees.\n- Polar form: We can use polar(s,a) to construct a Complex Number which has length s and angle a (radian) from origin. Polar returns a CD/CI based on the input type.\n  Another use of polar is for vector rotation.\n  A CN can be represented as a vector, and this vector can be rotated by multiplying it with a vector with length 1 and angle a. \n  For ex.:\n  ```cpp\n  CD vec{CD(4,2)};\n  cout<<arg(vec); //0.463\n  vec*=polar(1.0,0.5);\n  cout<<arg(vec); //0.963\n  ```\n- [[Cross Product]]: For 2 vectors (CI/CD), a and b, the cross product is only defined for 3D. But if they are complex numbers then they can use [[Complex Number]] Multiplication and get a scalar value, this scalar value tells us the direction of b when its tail is placed at a’s tip. \n  If $$\\begin{aligned} a \\times b > 0 \\end{aligned}$$, b turns left\n  If $$\\begin{aligned} a \\times b = 0 \\end{aligned}$$, b turns 180 degrees or goes straight ahead\n  If $$\\begin{aligned} a \\times b < 0 \\end{aligned}$$, b turns right.\n  \n  ![image.png](../assets/image_1683265036139_0.png){:height 185, :width 597}\n  \n  $$ a \\times b = a_1*b_2 - a_2*b_1 $$ \n  (for 2D, vector cross product is the CN multiplication), it can be retrieved by\n  ``double result { (conj(a)*b).I };``\n  Here conj turns a’s imaginary part (or y axis) negative, as conjugate of a CN is simply the sign of its imaginary part flipped so we get (a_{1}, -a_{2}) and the CN multiplication of this with b is\n  a_{1}b_{2} - a_{2}b_{1}\n  Yes, C++ performs CN multiplication on multiplication of 2 CNs.\n  \n  This is also to say, that whilst Vector Cross Product isn’t defined for 2D, we can represent the 2D vectors as Complex Numbers and perform Complex Number Multiplication on them. This is not the same as a vector cross product as it doesn’t give a third vector which is perpendicular to both the vectors, nor is it the same as vector dot product which tells us about the projection of a vector onto another. Instead, it simply helps us understand the rotation of the second vector in 2D space.\n\t- Applications of CN multiplication/vector cross product (for 2D):\n\t  \n\t  * Testing point location: If we have 3 points, A, B and P and we wish to know if P is on the line passing through A and B, then we can do so\n\t  ``double R = (P - A) X (P - B)``\n\t  which returns a scalar value, \n\t  0 means P is on the line passing through A and B \n\t  \\>0 means P is on the left of the line\n\t  \\<0 means it is on the right.\n\t  \n\t  For ex.:\n\t  \n\t  ![image.png](../assets/image_1683265668634_0.png)\n\t   \n\t  Here A= (2,3), B= (9,3) and P = (5,3) and after computing R we get R = 0 which means P lies on the line passing through A and B.\n\t  \n\t  So, to use a 2D co-ordinate, we turn it to CN/Vector 2D then we perform the above CN Multiplication/cross product\n\t  like so\n\t        ```cpp\n\t        CD a{p-x};\n\t        CD b{p-y};\n\t        double result{(conj(a)*b).I};\n\t        ```\n\t  This identifies if for a point x and y, another point p falls on the line passing through them, or its left or right.\n\t  \n\t  ** Properties:\n\t  *** Even if P is ahead of AB, it will still give R as 0. This is also to say, we aren’t checking if P lies on the line between A and B, we are checking if P lies on the line that passes through A and B, so it can be that P occurs before A and B, between A and B and after A and B and in all cases R will be 0 as it is on the line that goes through them.\n\t  \n\t  * Intersection of lines: We can determine if 2 straight lines intersect or not.\n\t  Say we are given 4 points a, b, c and d and told there are 2 line segments, ad and cb.\n\t  Then there are 3 cases if 2 lines intersect,\n\t  \n\t  ** Case 1: The line segments are on the same line. In this case there are infinite points of one line intersecting with other wherever they overlap. We just test the given points with simple vector cross product and if they are all 0 then we test if any of the point lies between a line segment.\n\t  \n\t  ![image.png](../assets/image_1683266231798_0.png)\n\t  \n\t  \n\t  First we simply get the vector cross product of all of them with respect to any other 2 points and see if all of these cross products are 0. This tells us if all of them lie on the same line passing through them. If they don’t then that means Case 1 isn’t true as the lines don’t overlap.\n\t  \n\t  Now to check if they intersect, we sort them based on their x or y co-ordinate. This tells us if any point lies on the other line segment, we already know they are on the same line passing through them, and this confirms if a line segment overlaps the other.\n\t  \n\t  So in the above case we get all vector cross products as 0, then we sort the points on x axis and find out the order is a, c, b and d. Meaning at-least c falls between a and d and hence there is an intersect and an overlap.\n\t  \n\t  \n\t  ** Case 2: There is only 1 intersection point, and it is one of the vertices/given points. Here we get the vector cross products of the points of the one line segment’s vertices with respect to the other 2, then do it for the other one and if one of the points is on the line passing through the other line segments vertices then that means that point intersects with this line segment.\n\t  \n\t  For example:\n\t  \n\t  ![image.png](../assets/image_1683266308873_0.png)\n\t  \n\t  We find vector cross product of first c and d with respect to a and b then a and b with respect to c and d, here we find the vector cross product of c on the line a and b as 0 and some negative value for d. This means c lies on the line passing through a and b and hence we have an intersection point.\n\t  \n\t  ** Case 3: There is only 1 intersection point but it is neither of the vertices. In this case we take one line segment and get vector cross product for both its points with respect to the 2 points of the other line segment and then do the same for that line segment. Then, if for both line segments 1 point falls to the left of the other line segment and the other point falls to the right of the other line segment, then they intersect somewhere.\n\t  \n\t  For example:\n\t  \n\t  ![image.png](../assets/image_1683266342566_0.png)\n\t  \n\t  \n\t  Here, we get vector cross product of both c and d AND a and b with respect to a and b and c and d respectively. If they intersect somewhere, as we can see above, then vector cross product of a will be >0 and b will be <0, and the same will be true for c and d. If both these are true as here, then it means ab and cd intersect somewhere.\n\t  \n\t  In C++,\n\t  ```cpp\n\t      // 2D vector cross product aka Complex Number Multiplication\n\t      double crossProduct(CD &a, CD &b, CD &p)\n\t      {\n\t          CD temp1{p - a};\n\t          CD temp2{p - b};\n\t          double result{(conj(temp1) * temp2).I};\n\t  \n\t          return result;\n\t      }\n\t  \n\t      bool comparatorCD(CD &a, CD &b)\n\t      {\n\t          return (a.R == b.R) ? (a.I < b.I) : (a.R < b.R);\n\t      }\n\t      //checks if the point b is in middle on the cartesian plane with respect to the other args.\n\t      bool isMid(CD &a, CD &b, CD &c)\n\t      {\n\t          std::vector<CD> temp{a, b, c};\n\t          std::sort(temp.begin(), temp.end(), comparatorCD);\n\t  \n\t          return temp[1] == b;\n\t      }\n\t  \n\t      void start()\n\t      {\n\t          double resA1{crossProduct(b1, b2, a1)};\n\t  \n\t          double resA2{crossProduct(b1, b2, a2)};\n\t  \n\t          double resB1{crossProduct(a1, a2, b1)};\n\t  \n\t          double resB2{crossProduct(a1, a2, b2)};\n\t  \n\t          result = \"NO\";\n\t  \n\t          if (resB1 == 0 && isMid(a1, b1, a2))\n\t          {\n\t              result = \"YES\";\n\t          }\n\t          else if (resB2 == 0 && isMid(a1, b2, a2))\n\t          {\n\t              result = \"YES\";\n\t          }\n\t          else if (resA1 == 0 && isMid(b1, a1, b2))\n\t          {\n\t              result = \"YES\";\n\t          }\n\t          else if (resA2 == 0 && isMid(b1, a2, b2))\n\t          {\n\t              result = \"YES\";\n\t          }\n\t          if ((resA1 * resA2) < 0 && (resB1 * resB2) < 0) // case 3\n\t          {\n\t              result = \"YES\";\n\t          }\n\t  \n\t          output();\n\t      }\n\t  ```\n\t  The logic is pretty simple, first we test each point against the other line segment. This way we know where each point lies wrt the other line segment. Now if a point is in between the points of the other line segment and lies on the line then we have case 1 or case 2 fulfilled. Lastly if that is not true then we check for case 3  which requires both pairs of points to be on the opposite side of the other line segment. We can check this by simply multiplying the opposite resultant values, it will be -ve if exactly one of them is negative.\n\t  \n\t  * Distance from a point to a line: Using vector cross product we can calculate the distance from a point to a line. This is because we can calculate the area of a triangle using vector cross products using the formula\n\t  $$\\text {Area of a triangle} = \\frac {(\\left| (a-c) \\times (b-c) \\right|)}{2}$$\n\t  | | here means +ve value not vector magnitude because 2D vector cross product returns a scalar value.\n\t  Here a, b and c are 3 points or rather vertices of the triangle.\n\t  \n\t  Using this we can find out the height of the triangle, i.e., shortest distance from c to line passing through a and b using this formula\n\t  \n\t  $$ \\text d= \\frac {(a-c) \\times (b-c)}{(\\left| b – a \\right|)}$$\n\t  This is because for the area of a triangle we have 2 formulae, first is (½)*(|b-a|)*d, which gives the normal area of triangle and then (| (a-c) X (b-c) |) / 2, which is using the vector cross product. Here d is the height.\n\t  For example:\n\t  \n\t  ![image.png](../assets/image_1683266522901_0.png) \n\t  \n\t  In the above image, if we find d using the distance formula then that will give us the shortest distance from p to the line passing through S1 and S2.\n\t  \n\t  * Point in a polygon: We can test if a point is inside a polygon with a simple algorithm. We cast arbitrary number of rays in arbitrary directions from the point, if the rays intersect with any of the boundary of the polygon 0 or even number of times then the point is outside, otherwise it is inside.\n\t  \n\t  For example:\n\t  \n\t  ![image.png](../assets/image_1683266562064_0.png)\n\t  \n\t  \n\t  A naïve approach here would be checking if the ray of sufficient length making a line segment from a given point, say b, intersects with any of the line of the polygon, so we check line segment b to ray end against all line segments of the polygon (we can use case 3 of checking if a line intersects) and see how many lines the ray intersects\n\t  \n\t  In cpp,\n\t  ```cpp\n\t      //Raycasting Alg\n\t      void start()\n\t      {\n\t          CD extPoint{1e9+1,-1e9+1};//Any point on the outside.\n\t                                 //We can use this point to check if any line segment from this point\n\t                                 //to any other point intersects with the polygon and hence\n\t                                 //performing Ray casting.\n\t          bool isBoundary{false};\n\t          for(int i{}, countsPoint{}; i<m;++i, countsPoint=0) {\n\t              isBoundary=false;\n\t              for(int j{}; j<n;++j){\n\t                  CD& p1{points[i]};\n\t                  CD& p2{extPoint};\n\t  \n\t                  CD& pips1{pips[j]};\n\t                  CD& pips2{pips[(j+1)%n]};\n\t  \n\t                  double resPip1{crossProduct(p1, p2, pips1)};\n\t                  double resPip2{crossProduct(p1, p2, pips2)};\n\t                  double resP1{crossProduct(pips1, pips2,p1)};\n\t                  double resP2{crossProduct(pips1, pips2, p2)};\n\t  \n\t                  if(resP1==0 && isMid(pips1, p1,pips2))\n\t                  {\n\t                      isBoundary=true;\n\t                      break;\n\t                  }\n\t                  else if((resPip1*resPip2) < 0 && (resP1*resP2)<0){\n\t                      countsPoint++;\n\t                  }\n\t              }\n\t              if (isBoundary)\n\t              {\n\t                  results[i]=\"BOUNDARY\";\n\t              }\n\t              else if(countsPoint==0 || countsPoint % 2 == 0){\n\t                  results[i]=\"OUTSIDE\";\n\t              }\n\t              else {\n\t                  results[i]=\"INSIDE\";\n\t              }\n\t          }\n\t          output();\n\t      }\n\t  ```\n\t  where ``pips``(size n) are the vertices of the polygon and ``points``(size m) are the points to be tested if they are inside or outside. The logic is pretty simple, we set up an external point (which has to be guaranteed to be outside the polygon) and for each point to be tested, we create a line segment between the point and the external point and then test their line segment against all line segments of the polygon. The end result are 3 conditions, either the point lies on the boundary/in mid of any line segment of the polygon, or it is outside meaning the no. of line segments it intersects are either 0 or divisible by 2, or inside otherwise. \n\t  We need to check the ray against all line segments of the polygon because we don't know which line segments it intersects (unlike how we see visually).\n-\n- Area of a Polygon\n  There are 2 simple ways to calculate the area enclosed by a polygon, dividing a polygon into known shapes and summing the parts. Or using formulae such as shoelace formula, aka Gauss’ Area Formula, aka Surveyor’s Formula. \n  If the shape is a basic regular polygon such as a triangle or rectangle or trapezoid or etc., then using the normal area formula for that shape is faster than using shoelace but otherwise this is a faster and simpler calculation.\n  \n  The formula is\n  $$\\text{Area} = \\frac{1}{2} \\left|\\sum_{i=1}^{n-1} (x_iy_{i+1} - x_{i+1}y_i)\\right|$$\n  \n  or\n  \n  $$\\text{Area} = \\frac{1}{2} \\left|\\sum_{i=1}^{n-1} (p_i \\times p_{i+1})\\right|$$\n  \n  where p is a CN and this is a 2D vector cross product or CN multiplication.\n  p_{i} is any point (x_{i},y_{i}) and p_{i+1} is the point adjacent to it, we follow a direction, i.e., either right or left and then only go in that dirn.\n  For ex.:\n  \n  ![image.png](../assets/image_1683266699836_0.png) \n  \n  Here, p_{1} can be (2,4) then if we go right then p_{2} will be (5,5) and we only go this way for consequent points. Similarly, we can go left to (4,3) and all consequent points will be the next adjacent points.\n  This doesn’t just apply to the CN version but also the normal formula as well.\n  The idea of the formula is to simply compute the area for each trapezoid in the polygon, where the first side is the side of the polygon and the second side is the horizontal axis line at y=0 like so\n  \n  ![image.png](../assets/image_1683280650170_0.png) \n  \n  The area of each trapezoid here is \n  $$Area = (x_{i+1} - x_{i})*\\frac{(y_{i} + y_{i+1})}{2}$$\n  \n  In CPP,\n  ```cpp\n      void start()\n      {\n          double value{};\n          CD* next{nullptr};\n          for(int i{}; i<n;++i) {\n              next= &points[(i+1)%n];\n              value += ((points[i].R* (*next).I) - ((*next).R * points[i].I));\n          }\n  \n          result = static_cast<int>(abs(value)); //multiplying with 1/2 and 2, i.e. 1.\n          output();\n      }\n  \n  ```\n  Here we simply go through each point and its next point and sum this value then simply multiply the result with 1/2 as that's in the formula for each trapezium and multiply with 2 to cancel it out and ensure the integer remains an integer (1/2 of an integer can be double, but the inputs are strictly integer).\n- Pick’s Theorem \n  Tells us the area of a polygon is\n  $$\\text Area = a + \\frac{b}{2} - 1$$\n  where a are the integer points strictly inside the polygon and b are the integer points exactly on the boundary of the polygon. Integer co-ordinates are also known as lattice points.\n  For ex.:\n  ![image.png](../assets/image_1683281026895_0.png)\n   \n  \n  Here, a = 6 and b = 7.\n  So there are said to be 6 lattice points inside and 5 on the boundary.\n- Distance Functions\n  Defines the distance between any 2 points, there’s the standard Euclidean distance, which is the plain and straight distance to a point\n  $$\\text{Euclidean Distance} = \\sqrt{ (x_2 - x_1)^2 + (y_2-y_1)^2 }$$\n  \n  It uses Pythagoras’ theorem in a triangle to calculate the distance.\n  represented like so\n  ![image.png](../assets/image_1683282352124_0.png)\n  *There’s another type of distance metric known as a Manhattan Distance which uses a grid-like path, or rather the sum of the differences in each of the cartesian co-ordinates. \n  That is,\n  $$\\text {Manhattan Distance} = \\left | x_1 - x_2 \\right | + \\left | y_1- y_2 \\right |$$\n  \n  We basically summed the difference of the cartesian co-ordinates, this means we follow a grid-like path to the point and not a straight line like so\n  ![image.png](../assets/image_1683288296272_0.png)\n  \n  * Then there’s the Chessboard distance or the Chebyshev distance, which is the maximum of difference of either coordinates between 2 points.\n  $$\\text {Chebyshev Distance} = \\max ( \\left | x_1 - x_2 \\right |, \\left | y_1 - y_2 \\right | )$$\n  \n  It looks like so \n  ![image.png](../assets/image_1683288436752_0.png) \n  \n  The Chebyshev distance can be thought of as a King’s minimum number of moves to reach another block on a chessboard, as shown here\n  ![image.png](../assets/image_1683288446994_0.png)\n  \n  * Properties\n   ** 1 unit\n  \n  ![image.png](../assets/image_1683288515797_0.png)\n  \n  and with Chebyshev\n  \n  ![image.png](../assets/image_1683288525779_0.png)\n  \n  We can visually see why the Chebyshev is 1 for all green points, it’s because it doesn’t care about the diagonals, just the pure maximum of difference of either axes between any 2 points. Or we can say 1 unit of Chebyshev Distance is the distance travelled on x-axis, or y-axis or on both at the same time (diagonal) so (1,1) is still 1 Chebyshev Distance as we can use both or either of the axes to move.\n  \n  ** As we can see above, a Chebyshev distance can be converted to a Manhattan Distance if we rotate it by 45 degrees, and same for the other way around. This means,\n  \n  ``45 degree Rotated Chebyshev or Manhattan = Manhattan or Chebyshev respectively.``\n  \n  A simple way to rotate a Manhattan to a Chebyshev is,\n  for a point \n  ``p=(x,y)``\n  we transform it as \n  ``p’= (x+y , y-x)``\n  \n  This transforms a point by rotating it 45 degrees and scaling it.\n  \n  For ex.:\n  ![image.png](../assets/image_1683288664305_0.png)\n  \n  \n  We have to find the max. Manhattan Distance between any 2 points here\n  \n  It is BC here and the MD is 5 as we can see.\n  But we can also convert all points to use a CD by rotating all points by 45 degrees, like so\n  ![image.png](../assets/image_1683288686822_0.png)\n   \n  \n  Now for this graph the MD will be different but the CD will give us the MD for graph 1. \n  So for any 2 points in the rotated graph, \n  $$\\text {CD} = \\max ( \\left | x_{1’} - x_{2’}, y_{1’} - y_{2’} \\right|)$$\n  where x’ and y’ are the rotated points. and this CD is actually the MD for the normal graph.\n  \n  This has the benefit that now, we can look at each axis separately, so between any 2 points if their x or their y coordinate has maximum difference then they will give the max. MD.\n- Sweep-Line Algorithms\n  The idea with these algs is to represent a problem in the cartesian plane and its events as points in it. Then we process the events in the increasing order of their x or y co-ordinates.\n  \n  * [[Intersection Points]]\n  * [[Closest Pair]]\n-\n- [[Convex Hull]]",536870918]],["^15",[177,"^17",1700492151213,536870918]],["^15",[177,"^Z","CP/pages/Geometry.md",536870918]],["^15",[178,"^K",1700492151212,536870918]],["^15",[178,"^@",false,536870918]],["^15",[178,"^Y","cross product",536870918]],["^15",[178,"^11","Cross Product",536870918]],["^15",[178,"^B",1700492151212,536870918]],["^15",[178,"^;","~u655b7377-4701-4700-a1b5-cd6995b30949",536870918]],["^15",[179,"^5",123,536870918]],["^15",[179,"^K",1700492151272,536870918]],["^15",[179,"^[",196,536870918]],["^15",[179,"^@",false,536870918]],["^15",[179,"^Y","intersection points",536870918]],["^15",[179,"^11","Intersection Points",536870918]],["^15",[179,"^?",["^ ","^18",["^19",["Line Intersection"]]],536870918]],["^15",[179,"^4",["^ ","^18","Line Intersection"],536870918]],["^15",[179,"^B",1700492151272,536870918]],["^15",[179,"^;","~u655b7377-63d8-4574-88de-69ee4124becd",536870918]],["^15",[180,"^Q","[[Complex Number]]: MSVC and GCC have a library <complex> that can be used to represent complex numbers.\nNow CNs theirselves can use either floating or integer coordinates, so we can do\n```cpp\n#define R real()\n#define I imag()\n\nusing CD = complex<long double>;\nusing CI = complex<long long>;\n\nand then define a CN with\nCI c{ CI(4,2) };\ncout << c.R << c.I << endl;\n```",536870918]],["^15",[180,"^O","^16",536870918]],["^15",[180,"^F",183,536870918]],["^15",[180,"^X",79,536870918]],["^15",[180,"^V",79,536870918]],["^15",[180,"^U",79,536870918]],["^15",[180,"^U",158,536870918]],["^15",[180,"^H",158,536870918]],["^15",[180,"^;","~u655b7377-683c-4bbd-b84e-abb45ff80ca7",536870918]],["^15",[181,"^Q","Area of a Polygon\nThere are 2 simple ways to calculate the area enclosed by a polygon, dividing a polygon into known shapes and summing the parts. Or using formulae such as shoelace formula, aka Gauss’ Area Formula, aka Surveyor’s Formula. \nIf the shape is a basic regular polygon such as a triangle or rectangle or trapezoid or etc., then using the normal area formula for that shape is faster than using shoelace but otherwise this is a faster and simpler calculation.\n\nThe formula is\n$$\\text{Area} = \\frac{1}{2} \\left|\\sum_{i=1}^{n-1} (x_iy_{i+1} - x_{i+1}y_i)\\right|$$\n\nor\n\n$$\\text{Area} = \\frac{1}{2} \\left|\\sum_{i=1}^{n-1} (p_i \\times p_{i+1})\\right|$$\n\nwhere p is a CN and this is a 2D vector cross product or CN multiplication.\np_{i} is any point (x_{i},y_{i}) and p_{i+1} is the point adjacent to it, we follow a direction, i.e., either right or left and then only go in that dirn.\nFor ex.:\n\n![image.png](../assets/image_1683266699836_0.png) \n\nHere, p_{1} can be (2,4) then if we go right then p_{2} will be (5,5) and we only go this way for consequent points. Similarly, we can go left to (4,3) and all consequent points will be the next adjacent points.\nThis doesn’t just apply to the CN version but also the normal formula as well.\nThe idea of the formula is to simply compute the area for each trapezoid in the polygon, where the first side is the side of the polygon and the second side is the horizontal axis line at y=0 like so\n\n![image.png](../assets/image_1683280650170_0.png) \n\nThe area of each trapezoid here is \n$$Area = (x_{i+1} - x_{i})*\\frac{(y_{i} + y_{i+1})}{2}$$\n\nIn CPP,\n```cpp\n    void start()\n    {\n        double value{};\n        CD* next{nullptr};\n        for(int i{}; i<n;++i) {\n            next= &points[(i+1)%n];\n            value += ((points[i].R* (*next).I) - ((*next).R * points[i].I));\n        }\n\n        result = static_cast<int>(abs(value)); //multiplying with 1/2 and 2, i.e. 1.\n        output();\n    }\n\n```\nHere we simply go through each point and its next point and sum this value then simply multiply the result with 1/2 as that's in the formula for each trapezium and multiply with 2 to cancel it out and ensure the integer remains an integer (1/2 of an integer can be double, but the inputs are strictly integer).",536870918]],["^15",[181,"^O","^16",536870918]],["^15",[181,"^F",187,536870918]],["^15",[181,"^X",79,536870918]],["^15",[181,"^V",79,536870918]],["^15",[181,"^U",79,536870918]],["^15",[181,"^;","~u655b7377-eb3c-4b15-a2d5-1574c05a12c4",536870918]],["^15",[182,"^Q","Angle: We can get the angle \n\n![image.png](../assets/image_1683264991101_0.png)\n\nalpha using the function arg(<CN>)\nThis angle has its base on the x axis (so at (x,0) it is 0) and increases counter clockwise. The angle is in radians, where r radians means 180*r/pi or 1 radian = pi/180 degrees.",536870918]],["^15",[182,"^O","^16",536870918]],["^15",[182,"^F",188,536870918]],["^15",[182,"^X",79,536870918]],["^15",[182,"^V",79,536870918]],["^15",[182,"^U",79,536870918]],["^15",[182,"^;","~u655b7377-c777-4a55-a4c1-c799aa967226",536870918]],["^15",[183,"^Q","We deal with geometric shapes here.",536870918]],["^15",[183,"^O","^16",536870918]],["^15",[183,"^F",79,536870918]],["^15",[183,"^X",79,536870918]],["^15",[183,"^V",79,536870918]],["^15",[183,"^U",79,536870918]],["^15",[183,"^;","~u655b7377-e89c-4b87-bd8b-ad542854951f",536870918]],["^15",[184,"^Q","[[Cross Product]]: For 2 vectors (CI/CD), a and b, the cross product is only defined for 3D. But if they are complex numbers then they can use [[Complex Number]] Multiplication and get a scalar value, this scalar value tells us the direction of b when its tail is placed at a’s tip. \nIf $$\\begin{aligned} a \\times b > 0 \\end{aligned}$$, b turns left\nIf $$\\begin{aligned} a \\times b = 0 \\end{aligned}$$, b turns 180 degrees or goes straight ahead\nIf $$\\begin{aligned} a \\times b < 0 \\end{aligned}$$, b turns right.\n\n![image.png](../assets/image_1683265036139_0.png){:height 185, :width 597}\n\n$$ a \\times b = a_1*b_2 - a_2*b_1 $$ \n(for 2D, vector cross product is the CN multiplication), it can be retrieved by\n``double result { (conj(a)*b).I };``\nHere conj turns a’s imaginary part (or y axis) negative, as conjugate of a CN is simply the sign of its imaginary part flipped so we get (a_{1}, -a_{2}) and the CN multiplication of this with b is\na_{1}b_{2} - a_{2}b_{1}\nYes, C++ performs CN multiplication on multiplication of 2 CNs.\n\nThis is also to say, that whilst Vector Cross Product isn’t defined for 2D, we can represent the 2D vectors as Complex Numbers and perform Complex Number Multiplication on them. This is not the same as a vector cross product as it doesn’t give a third vector which is perpendicular to both the vectors, nor is it the same as vector dot product which tells us about the projection of a vector onto another. Instead, it simply helps us understand the rotation of the second vector in 2D space.",536870918]],["^15",[184,"^O","^16",536870918]],["^15",[184,"^F",195,536870918]],["^15",[184,"^X",79,536870918]],["^15",[184,"^V",79,536870918]],["^15",[184,"^U",79,536870918]],["^15",[184,"^U",158,536870918]],["^15",[184,"^U",178,536870918]],["^15",[184,"^H",158,536870918]],["^15",[184,"^H",178,536870918]],["^15",[184,"^;","~u655b7377-fae6-4ad6-8a1f-4a989c8c777a",536870918]],["^15",[185,"^Q","Pick’s Theorem \nTells us the area of a polygon is\n$$\\text Area = a + \\frac{b}{2} - 1$$\nwhere a are the integer points strictly inside the polygon and b are the integer points exactly on the boundary of the polygon. Integer co-ordinates are also known as lattice points.\nFor ex.:\n![image.png](../assets/image_1683281026895_0.png)\n \n\nHere, a = 6 and b = 7.\nSo there are said to be 6 lattice points inside and 5 on the boundary.",536870918]],["^15",[185,"^O","^16",536870918]],["^15",[185,"^F",181,536870918]],["^15",[185,"^X",79,536870918]],["^15",[185,"^V",79,536870918]],["^15",[185,"^U",79,536870918]],["^15",[185,"^;","~u655b7377-540a-49b5-878f-8cd88e767416",536870918]],["^15",[186,"^Q","[[Convex Hull]]",536870918]],["^15",[186,"^O","^16",536870918]],["^15",[186,"^F",191,536870918]],["^15",[186,"^X",79,536870918]],["^15",[186,"^V",79,536870918]],["^15",[186,"^U",79,536870918]],["^15",[186,"^U",138,536870918]],["^15",[186,"^H",138,536870918]],["^15",[186,"^;","~u655b7377-8f18-4f9b-b41a-ca5e3d742730",536870918]],["^15",[187,"^Q","",536870918]],["^15",[187,"^O","^16",536870918]],["^15",[187,"^F",184,536870918]],["^15",[187,"^X",79,536870918]],["^15",[187,"^V",79,536870918]],["^15",[187,"^U",79,536870918]],["^15",[187,"^;","~u655b7377-446a-4995-a226-fef5b37b1146",536870918]],["^15",[188,"^Q","We can also calculate distance between 2 points using abs(),\nto do so say a and b are CD, then\n``double dist{ abs(b-a) }; ``\nwill return the distance between them.",536870918]],["^15",[188,"^O","^16",536870918]],["^15",[188,"^F",190,536870918]],["^15",[188,"^X",79,536870918]],["^15",[188,"^V",79,536870918]],["^15",[188,"^U",79,536870918]],["^15",[188,"^;","~u655b7377-6ea2-40e6-a2c4-3b70246c7614",536870918]],["^15",[189,"^Q","Distance Functions\nDefines the distance between any 2 points, there’s the standard Euclidean distance, which is the plain and straight distance to a point\n$$\\text{Euclidean Distance} = \\sqrt{ (x_2 - x_1)^2 + (y_2-y_1)^2 }$$\n\nIt uses Pythagoras’ theorem in a triangle to calculate the distance.\nrepresented like so\n![image.png](../assets/image_1683282352124_0.png)\n*There’s another type of distance metric known as a Manhattan Distance which uses a grid-like path, or rather the sum of the differences in each of the cartesian co-ordinates. \nThat is,\n$$\\text {Manhattan Distance} = \\left | x_1 - x_2 \\right | + \\left | y_1- y_2 \\right |$$\n\nWe basically summed the difference of the cartesian co-ordinates, this means we follow a grid-like path to the point and not a straight line like so\n![image.png](../assets/image_1683288296272_0.png)\n\n* Then there’s the Chessboard distance or the Chebyshev distance, which is the maximum of difference of either coordinates between 2 points.\n$$\\text {Chebyshev Distance} = \\max ( \\left | x_1 - x_2 \\right |, \\left | y_1 - y_2 \\right | )$$\n\nIt looks like so \n![image.png](../assets/image_1683288436752_0.png) \n\nThe Chebyshev distance can be thought of as a King’s minimum number of moves to reach another block on a chessboard, as shown here\n![image.png](../assets/image_1683288446994_0.png)\n\n* Properties\n ** 1 unit\n\n![image.png](../assets/image_1683288515797_0.png)\n\nand with Chebyshev\n\n![image.png](../assets/image_1683288525779_0.png)\n\nWe can visually see why the Chebyshev is 1 for all green points, it’s because it doesn’t care about the diagonals, just the pure maximum of difference of either axes between any 2 points. Or we can say 1 unit of Chebyshev Distance is the distance travelled on x-axis, or y-axis or on both at the same time (diagonal) so (1,1) is still 1 Chebyshev Distance as we can use both or either of the axes to move.\n\n** As we can see above, a Chebyshev distance can be converted to a Manhattan Distance if we rotate it by 45 degrees, and same for the other way around. This means,\n\n``45 degree Rotated Chebyshev or Manhattan = Manhattan or Chebyshev respectively.``\n\nA simple way to rotate a Manhattan to a Chebyshev is,\nfor a point \n``p=(x,y)``\nwe transform it as \n``p’= (x+y , y-x)``\n\nThis transforms a point by rotating it 45 degrees and scaling it.\n\nFor ex.:\n![image.png](../assets/image_1683288664305_0.png)\n\n\nWe have to find the max. Manhattan Distance between any 2 points here\n\nIt is BC here and the MD is 5 as we can see.\nBut we can also convert all points to use a CD by rotating all points by 45 degrees, like so\n![image.png](../assets/image_1683288686822_0.png)\n \n\nNow for this graph the MD will be different but the CD will give us the MD for graph 1. \nSo for any 2 points in the rotated graph, \n$$\\text {CD} = \\max ( \\left | x_{1’} - x_{2’}, y_{1’} - y_{2’} \\right|)$$\nwhere x’ and y’ are the rotated points. and this CD is actually the MD for the normal graph.\n\nThis has the benefit that now, we can look at each axis separately, so between any 2 points if their x or their y coordinate has maximum difference then they will give the max. MD.",536870918]],["^15",[189,"^O","^16",536870918]],["^15",[189,"^F",185,536870918]],["^15",[189,"^X",79,536870918]],["^15",[189,"^V",79,536870918]],["^15",[189,"^U",79,536870918]],["^15",[189,"^;","~u655b7377-15a2-4d99-ad9f-83986d0f5bbc",536870918]],["^15",[190,"^Q","We can find |v| which is the +ve length of a vector v from origin to the point (x,y). Here y is the imaginary part and x is the real part. This is done using the abs(<CN>) function. \nThat is, \n$$\\text{abs(<CN>)} = \\sqrt{x^2+y^2}$$\nWhat is $$\\sqrt{x^2+y^2}$$ ?\n\n![image.png](../assets/image_1683264291580_0.png)\n\nIt is the distance from origin to the point x,y.\nSince it can be floating, it is better to use CD.",536870918]],["^15",[190,"^O","^16",536870918]],["^15",[190,"^F",192,536870918]],["^15",[190,"^X",79,536870918]],["^15",[190,"^V",79,536870918]],["^15",[190,"^U",79,536870918]],["^15",[190,"^;","~u655b7377-c93f-41fe-9092-4367907fdea9",536870918]],["^15",[191,"^Q","",536870918]],["^15",[191,"^O","^16",536870918]],["^15",[191,"^F",194,536870918]],["^15",[191,"^X",79,536870918]],["^15",[191,"^V",79,536870918]],["^15",[191,"^U",79,536870918]],["^15",[191,"^;","~u655b7377-280d-4894-ac62-9bda7055c741",536870918]],["^15",[192,"^Q","CI is deprecated as of C++17, so CD is the only one we can use.",536870918]],["^15",[192,"^O","^16",536870918]],["^15",[192,"^F",180,536870918]],["^15",[192,"^X",79,536870918]],["^15",[192,"^V",79,536870918]],["^15",[192,"^U",79,536870918]],["^15",[192,"^;","~u655b7377-cce4-4892-b273-4a9ba8307695",536870918]],["^15",[193,"^Q","Applications of CN multiplication/vector cross product (for 2D):\n\n* Testing point location: If we have 3 points, A, B and P and we wish to know if P is on the line passing through A and B, then we can do so\n``double R = (P - A) X (P - B)``\nwhich returns a scalar value, \n0 means P is on the line passing through A and B \n\\>0 means P is on the left of the line\n\\<0 means it is on the right.\n\nFor ex.:\n\n![image.png](../assets/image_1683265668634_0.png)\n \nHere A= (2,3), B= (9,3) and P = (5,3) and after computing R we get R = 0 which means P lies on the line passing through A and B.\n\nSo, to use a 2D co-ordinate, we turn it to CN/Vector 2D then we perform the above CN Multiplication/cross product\nlike so\n      ```cpp\n      CD a{p-x};\n      CD b{p-y};\n      double result{(conj(a)*b).I};\n      ```\nThis identifies if for a point x and y, another point p falls on the line passing through them, or its left or right.\n\n** Properties:\n*** Even if P is ahead of AB, it will still give R as 0. This is also to say, we aren’t checking if P lies on the line between A and B, we are checking if P lies on the line that passes through A and B, so it can be that P occurs before A and B, between A and B and after A and B and in all cases R will be 0 as it is on the line that goes through them.\n\n* Intersection of lines: We can determine if 2 straight lines intersect or not.\nSay we are given 4 points a, b, c and d and told there are 2 line segments, ad and cb.\nThen there are 3 cases if 2 lines intersect,\n\n** Case 1: The line segments are on the same line. In this case there are infinite points of one line intersecting with other wherever they overlap. We just test the given points with simple vector cross product and if they are all 0 then we test if any of the point lies between a line segment.\n\n![image.png](../assets/image_1683266231798_0.png)\n\n\nFirst we simply get the vector cross product of all of them with respect to any other 2 points and see if all of these cross products are 0. This tells us if all of them lie on the same line passing through them. If they don’t then that means Case 1 isn’t true as the lines don’t overlap.\n\nNow to check if they intersect, we sort them based on their x or y co-ordinate. This tells us if any point lies on the other line segment, we already know they are on the same line passing through them, and this confirms if a line segment overlaps the other.\n\nSo in the above case we get all vector cross products as 0, then we sort the points on x axis and find out the order is a, c, b and d. Meaning at-least c falls between a and d and hence there is an intersect and an overlap.\n\n\n** Case 2: There is only 1 intersection point, and it is one of the vertices/given points. Here we get the vector cross products of the points of the one line segment’s vertices with respect to the other 2, then do it for the other one and if one of the points is on the line passing through the other line segments vertices then that means that point intersects with this line segment.\n\nFor example:\n\n![image.png](../assets/image_1683266308873_0.png)\n\nWe find vector cross product of first c and d with respect to a and b then a and b with respect to c and d, here we find the vector cross product of c on the line a and b as 0 and some negative value for d. This means c lies on the line passing through a and b and hence we have an intersection point.\n\n** Case 3: There is only 1 intersection point but it is neither of the vertices. In this case we take one line segment and get vector cross product for both its points with respect to the 2 points of the other line segment and then do the same for that line segment. Then, if for both line segments 1 point falls to the left of the other line segment and the other point falls to the right of the other line segment, then they intersect somewhere.\n\nFor example:\n\n![image.png](../assets/image_1683266342566_0.png)\n\n\nHere, we get vector cross product of both c and d AND a and b with respect to a and b and c and d respectively. If they intersect somewhere, as we can see above, then vector cross product of a will be >0 and b will be <0, and the same will be true for c and d. If both these are true as here, then it means ab and cd intersect somewhere.\n\nIn C++,\n```cpp\n    // 2D vector cross product aka Complex Number Multiplication\n    double crossProduct(CD &a, CD &b, CD &p)\n    {\n        CD temp1{p - a};\n        CD temp2{p - b};\n        double result{(conj(temp1) * temp2).I};\n\n        return result;\n    }\n\n    bool comparatorCD(CD &a, CD &b)\n    {\n        return (a.R == b.R) ? (a.I < b.I) : (a.R < b.R);\n    }\n    //checks if the point b is in middle on the cartesian plane with respect to the other args.\n    bool isMid(CD &a, CD &b, CD &c)\n    {\n        std::vector<CD> temp{a, b, c};\n        std::sort(temp.begin(), temp.end(), comparatorCD);\n\n        return temp[1] == b;\n    }\n\n    void start()\n    {\n        double resA1{crossProduct(b1, b2, a1)};\n\n        double resA2{crossProduct(b1, b2, a2)};\n\n        double resB1{crossProduct(a1, a2, b1)};\n\n        double resB2{crossProduct(a1, a2, b2)};\n\n        result = \"NO\";\n\n        if (resB1 == 0 && isMid(a1, b1, a2))\n        {\n            result = \"YES\";\n        }\n        else if (resB2 == 0 && isMid(a1, b2, a2))\n        {\n            result = \"YES\";\n        }\n        else if (resA1 == 0 && isMid(b1, a1, b2))\n        {\n            result = \"YES\";\n        }\n        else if (resA2 == 0 && isMid(b1, a2, b2))\n        {\n            result = \"YES\";\n        }\n        if ((resA1 * resA2) < 0 && (resB1 * resB2) < 0) // case 3\n        {\n            result = \"YES\";\n        }\n\n        output();\n    }\n```\nThe logic is pretty simple, first we test each point against the other line segment. This way we know where each point lies wrt the other line segment. Now if a point is in between the points of the other line segment and lies on the line then we have case 1 or case 2 fulfilled. Lastly if that is not true then we check for case 3  which requires both pairs of points to be on the opposite side of the other line segment. We can check this by simply multiplying the opposite resultant values, it will be -ve if exactly one of them is negative.\n\n* Distance from a point to a line: Using vector cross product we can calculate the distance from a point to a line. This is because we can calculate the area of a triangle using vector cross products using the formula\n$$\\text {Area of a triangle} = \\frac {(\\left| (a-c) \\times (b-c) \\right|)}{2}$$\n| | here means +ve value not vector magnitude because 2D vector cross product returns a scalar value.\nHere a, b and c are 3 points or rather vertices of the triangle.\n\nUsing this we can find out the height of the triangle, i.e., shortest distance from c to line passing through a and b using this formula\n\n$$ \\text d= \\frac {(a-c) \\times (b-c)}{(\\left| b – a \\right|)}$$\nThis is because for the area of a triangle we have 2 formulae, first is (½)*(|b-a|)*d, which gives the normal area of triangle and then (| (a-c) X (b-c) |) / 2, which is using the vector cross product. Here d is the height.\nFor example:\n\n![image.png](../assets/image_1683266522901_0.png) \n\nIn the above image, if we find d using the distance formula then that will give us the shortest distance from p to the line passing through S1 and S2.\n\n* Point in a polygon: We can test if a point is inside a polygon with a simple algorithm. We cast arbitrary number of rays in arbitrary directions from the point, if the rays intersect with any of the boundary of the polygon 0 or even number of times then the point is outside, otherwise it is inside.\n\nFor example:\n\n![image.png](../assets/image_1683266562064_0.png)\n\n\nA naïve approach here would be checking if the ray of sufficient length making a line segment from a given point, say b, intersects with any of the line of the polygon, so we check line segment b to ray end against all line segments of the polygon (we can use case 3 of checking if a line intersects) and see how many lines the ray intersects\n\nIn cpp,\n```cpp\n    //Raycasting Alg\n    void start()\n    {\n        CD extPoint{1e9+1,-1e9+1};//Any point on the outside.\n                               //We can use this point to check if any line segment from this point\n                               //to any other point intersects with the polygon and hence\n                               //performing Ray casting.\n        bool isBoundary{false};\n        for(int i{}, countsPoint{}; i<m;++i, countsPoint=0) {\n            isBoundary=false;\n            for(int j{}; j<n;++j){\n                CD& p1{points[i]};\n                CD& p2{extPoint};\n\n                CD& pips1{pips[j]};\n                CD& pips2{pips[(j+1)%n]};\n\n                double resPip1{crossProduct(p1, p2, pips1)};\n                double resPip2{crossProduct(p1, p2, pips2)};\n                double resP1{crossProduct(pips1, pips2,p1)};\n                double resP2{crossProduct(pips1, pips2, p2)};\n\n                if(resP1==0 && isMid(pips1, p1,pips2))\n                {\n                    isBoundary=true;\n                    break;\n                }\n                else if((resPip1*resPip2) < 0 && (resP1*resP2)<0){\n                    countsPoint++;\n                }\n            }\n            if (isBoundary)\n            {\n                results[i]=\"BOUNDARY\";\n            }\n            else if(countsPoint==0 || countsPoint % 2 == 0){\n                results[i]=\"OUTSIDE\";\n            }\n            else {\n                results[i]=\"INSIDE\";\n            }\n        }\n        output();\n    }\n```\nwhere ``pips``(size n) are the vertices of the polygon and ``points``(size m) are the points to be tested if they are inside or outside. The logic is pretty simple, we set up an external point (which has to be guaranteed to be outside the polygon) and for each point to be tested, we create a line segment between the point and the external point and then test their line segment against all line segments of the polygon. The end result are 3 conditions, either the point lies on the boundary/in mid of any line segment of the polygon, or it is outside meaning the no. of line segments it intersects are either 0 or divisible by 2, or inside otherwise. \nWe need to check the ray against all line segments of the polygon because we don't know which line segments it intersects (unlike how we see visually).",536870918]],["^15",[193,"^O","^16",536870918]],["^15",[193,"^F",184,536870918]],["^15",[193,"^X",79,536870918]],["^15",[193,"^V",184,536870918]],["^15",[193,"^U",79,536870918]],["^15",[193,"^U",158,536870918]],["^15",[193,"^U",178,536870918]],["^15",[193,"^;","~u655b7377-ea3f-4088-9962-54d30b3937d2",536870918]],["^15",[194,"^Q","Sweep-Line Algorithms\nThe idea with these algs is to represent a problem in the cartesian plane and its events as points in it. Then we process the events in the increasing order of their x or y co-ordinates.\n\n* [[Intersection Points]]\n* [[Closest Pair]]",536870918]],["^15",[194,"^O","^16",536870918]],["^15",[194,"^F",189,536870918]],["^15",[194,"^X",79,536870918]],["^15",[194,"^V",79,536870918]],["^15",[194,"^U",79,536870918]],["^15",[194,"^U",127,536870918]],["^15",[194,"^U",179,536870918]],["^15",[194,"^H",127,536870918]],["^15",[194,"^H",179,536870918]],["^15",[194,"^;","~u655b7377-a409-4a96-8f54-9784c636fb05",536870918]],["^15",[195,"^Q","Polar form: We can use polar(s,a) to construct a Complex Number which has length s and angle a (radian) from origin. Polar returns a CD/CI based on the input type.\nAnother use of polar is for vector rotation.\nA CN can be represented as a vector, and this vector can be rotated by multiplying it with a vector with length 1 and angle a. \nFor ex.:\n```cpp\nCD vec{CD(4,2)};\ncout<<arg(vec); //0.463\nvec*=polar(1.0,0.5);\ncout<<arg(vec); //0.963\n```",536870918]],["^15",[195,"^O","^16",536870918]],["^15",[195,"^F",182,536870918]],["^15",[195,"^X",79,536870918]],["^15",[195,"^V",79,536870918]],["^15",[195,"^U",79,536870918]],["^15",[195,"^;","~u655b7377-38a5-4630-8aa9-8af5e0867ccb",536870918]],["^15",[196,"^3","alias:: Line Intersection\n\n- Suppose we have orthogonal line segments like so\n  ![image.png](../assets/image_1684566689683_0.png)\n  \n  As we can see, there are 3 intersection points.\n- There are 2 types of line intersection algs, orthogonal and general case ([Bowdoin.edu]( https://tildesites.bowdoin.edu/~ltoma/teaching/cs3250-CompGeom/spring17/Lectures/orthosegmintersect-6up.pdf)). The former is quite simpler as we can simply 'sweep' from left to right (Leftmost segment X axis) or top to bottom (Topmost segment Y axis) and count number of intersections.\n- In orthogonal line segment intersection, we focus on 3 events, \n  1. Horizontal LS begins\n  2. Horizontal LS ends\n  3. Vertical LS occurs. \n  The logic for this sweep line is simple, we start from the leftmost X axis point and then go rightwards  processing all 3 events on the X axis. \n  The starting point itself could belong to either a VLS or an HLS, now if we face event 1, we store the Y co-ordinate of the HLS in a data structure like a Set, if we face event 2 we search for the Y co-ordinate and remove it from our data structure and if we face event 3 we check for all the Y co-ordinates stored in our data structure within the range [VLS' start Y co-ordinate, VLS' end Y co-ordinate].\n  In C++,\n  ```cpp\n  enum SegType {\n   H, //Horizontal\n   V  //Vertical\n  };\n  int testCases{1};\n  int n{};\n  std::vector<std::pair<CD,SegType>> totalSegs; //\n  int result{};\n  si activeSegs{};\n  \n  namespace Algorithm\n  {\n      using namespace std;\n      void start();\n      void output();\n      bool comparator(pair<CD,SegType>& , pair<CD,SegType>& );\n  \n      void setup()\n      {\n          IOS;\n  #ifdef LOCAL\n          FILE *inpStream;\n          FILE *outStream;\n          freopen_s(&inpStream, \"input.txt\", \"r\", stdin);\n          freopen_s(&outStream, \"output.txt\", \"w\", stdout);\n  #endif\n          // INPUT(testCases);\n  \n          while (testCases-- > 0)\n          {\n              INPUT(n);\n              double arg1{};\n              double arg2{};\n              double arg3{};\n              double arg4{};\n  \n  \n              for (int i{}; i < n; ++i)\n              {\n                  SegType s{};\n                  INPUT(arg1, arg2, arg3, arg4);\n  \n                  if(arg1==arg3) { // Vertical Segment\n                      s=SegType{V};\n                  }\n                  else{\n                      s= SegType{H};\n                  }\n  \n  \n                  totalSegs.pb(pair(CD({arg1,arg2}), s));\n                  totalSegs.pb(pair(CD({arg3,arg4}), s));\n              }\n              sort(totalSegs.begin(), totalSegs.end(), comparator);\n              n*=2;\n              start();\n          }\n      }\n  \n      bool comparator(pair<CD,SegType>& a, pair<CD,SegType>& b ) {\n          return (a.first.R == b.first.R) ? a.first.I > b.first.I : a.first.R < b.first.R;\n      }\n  \n  \n     void start()\n      {\n          CD* firstV{nullptr};\n          CD* secondV{nullptr};\n          for(int i{0}; i< n; ++i) {\n              SegType& sType{totalSegs[i].second};\n              CD& point{totalSegs[i].first};\n  \n              if(sType == SegType{H}) {\n                  if(activeSegs.find(point.I)== activeSegs.end()) {\n                      activeSegs.insert(point.I);\n                  }\n                  else if(firstV != nullptr) {\n                      result++;\n                      activeSegs.erase(point.I);\n                  }\n                  else {\n                      activeSegs.erase(point.I);\n                  }\n              }\n              else {\n                  if(firstV == nullptr) {\n                      firstV=&point;\n                  }\n                  else{\n                  secondV=&point;\n  \n                  for(int elem: activeSegs){\n                      if(elem >= secondV->I && elem <= firstV->I) { //The way we sort enables us the assumption that the element that comes later in totalSegs has greater Y axis (I)\n                          result++;\n                      }\n                   }\n                  firstV=nullptr;\n                  secondV=nullptr;\n                  }\n              }\n              \n          }\n  \n          \n          output();\n      }\n  \n      void output()\n      {\n  \n          std::cout << result  << '\\n';\n  \n          std::cout << std::endl;\n      }\n  \n  \n  \n  }\n  ```\n  Here, the logic is pretty straight forward. If given n line segments \n  we\n  * Identify if it is a VLS or an HLS, it is VLS if the x axis of both points of the LS are same. Then store them. \n  * Sort all points based on X axis in ascending order, if X axis is same then sort based on Y axis (descending order). We do this to sweep from left to right, and if for any 2 points X is same like if it's the starting point of an HLS and a VLS is already being tracked, this ensures the point comes whilst the VLS is already being tracked so we don't miss processing the HLS within it.\n  So we store the points like so\n  ![image.png](../assets/image_1685786141621_0.png)\n  \n  * Then begins our main logic, we loop over all the sorted points. \n  * If the current point belongs to a VLS then we store it if we don't have a tracked VLS pair and wait for it's other point, the way we sorted ensures that we first get the higher Y axis point of the VLS then the lower one. Once we get both the points in our iteration, we simply search for all tracked LS' Y axis between the Y axis of this VLS and add it to our result.\n  \n  If the current point belongs to an HLS, we either store it if it isn't already stored, if it is stored then we see if we are on a VLS, if we are we add 1 to result and remove it and if we aren't then we simply remove the point indicating this HLS ended.\n-\n-",536870918]],["^15",[196,"^17",1700492151273,536870918]],["^15",[196,"^Z","CP/pages/Intersection Points.md",536870918]],["^15",[197,"^Q","alias:: Line Intersection\n\n",536870918]],["^15",[197,"^O","^16",536870918]],["^15",[197,"~:block/invalid-properties",["^19",[]],536870918]],["^15",[197,"^F",179,536870918]],["^15",[197,"^X",179,536870918]],["^15",[197,"^V",179,536870918]],["^15",[197,"^U",123,536870918]],["^15",[197,"^U",179,536870918]],["^15",[197,"^:",true,536870918]],["^15",[197,"^?",["^ ","^18",["^19",["Line Intersection"]]],536870918]],["^15",[197,"^J",["^18"],536870918]],["^15",[197,"^4",["^ ","^18","Line Intersection"],536870918]],["^15",[197,"^H",123,536870918]],["^15",[197,"^;","~u655b7377-4876-44eb-b485-6a199ee3fd19",536870918]],["^15",[198,"^Q","Suppose we have orthogonal line segments like so\n![image.png](../assets/image_1684566689683_0.png)\n\nAs we can see, there are 3 intersection points.",536870918]],["^15",[198,"^O","^16",536870918]],["^15",[198,"^F",197,536870918]],["^15",[198,"^X",179,536870918]],["^15",[198,"^V",179,536870918]],["^15",[198,"^U",179,536870918]],["^15",[198,"^;","~u655b7377-606b-4510-9998-ac663aaba923",536870918]],["^15",[199,"^Q","There are 2 types of line intersection algs, orthogonal and general case ([Bowdoin.edu]( https://tildesites.bowdoin.edu/~ltoma/teaching/cs3250-CompGeom/spring17/Lectures/orthosegmintersect-6up.pdf)). The former is quite simpler as we can simply 'sweep' from left to right (Leftmost segment X axis) or top to bottom (Topmost segment Y axis) and count number of intersections.",536870918]],["^15",[199,"^O","^16",536870918]],["^15",[199,"^F",198,536870918]],["^15",[199,"^X",179,536870918]],["^15",[199,"^V",179,536870918]],["^15",[199,"^U",179,536870918]],["^15",[199,"^;","~u655b7377-a894-433b-a8cf-048b376ee06c",536870918]],["^15",[200,"^Q","In orthogonal line segment intersection, we focus on 3 events, \n1. Horizontal LS begins\n2. Horizontal LS ends\n3. Vertical LS occurs. \nThe logic for this sweep line is simple, we start from the leftmost X axis point and then go rightwards  processing all 3 events on the X axis. \nThe starting point itself could belong to either a VLS or an HLS, now if we face event 1, we store the Y co-ordinate of the HLS in a data structure like a Set, if we face event 2 we search for the Y co-ordinate and remove it from our data structure and if we face event 3 we check for all the Y co-ordinates stored in our data structure within the range [VLS' start Y co-ordinate, VLS' end Y co-ordinate].\nIn C++,\n```cpp\nenum SegType {\n H, //Horizontal\n V  //Vertical\n};\nint testCases{1};\nint n{};\nstd::vector<std::pair<CD,SegType>> totalSegs; //\nint result{};\nsi activeSegs{};\n\nnamespace Algorithm\n{\n    using namespace std;\n    void start();\n    void output();\n    bool comparator(pair<CD,SegType>& , pair<CD,SegType>& );\n\n    void setup()\n    {\n        IOS;\n#ifdef LOCAL\n        FILE *inpStream;\n        FILE *outStream;\n        freopen_s(&inpStream, \"input.txt\", \"r\", stdin);\n        freopen_s(&outStream, \"output.txt\", \"w\", stdout);\n#endif\n        // INPUT(testCases);\n\n        while (testCases-- > 0)\n        {\n            INPUT(n);\n            double arg1{};\n            double arg2{};\n            double arg3{};\n            double arg4{};\n\n\n            for (int i{}; i < n; ++i)\n            {\n                SegType s{};\n                INPUT(arg1, arg2, arg3, arg4);\n\n                if(arg1==arg3) { // Vertical Segment\n                    s=SegType{V};\n                }\n                else{\n                    s= SegType{H};\n                }\n\n\n                totalSegs.pb(pair(CD({arg1,arg2}), s));\n                totalSegs.pb(pair(CD({arg3,arg4}), s));\n            }\n            sort(totalSegs.begin(), totalSegs.end(), comparator);\n            n*=2;\n            start();\n        }\n    }\n\n    bool comparator(pair<CD,SegType>& a, pair<CD,SegType>& b ) {\n        return (a.first.R == b.first.R) ? a.first.I > b.first.I : a.first.R < b.first.R;\n    }\n\n\n   void start()\n    {\n        CD* firstV{nullptr};\n        CD* secondV{nullptr};\n        for(int i{0}; i< n; ++i) {\n            SegType& sType{totalSegs[i].second};\n            CD& point{totalSegs[i].first};\n\n            if(sType == SegType{H}) {\n                if(activeSegs.find(point.I)== activeSegs.end()) {\n                    activeSegs.insert(point.I);\n                }\n                else if(firstV != nullptr) {\n                    result++;\n                    activeSegs.erase(point.I);\n                }\n                else {\n                    activeSegs.erase(point.I);\n                }\n            }\n            else {\n                if(firstV == nullptr) {\n                    firstV=&point;\n                }\n                else{\n                secondV=&point;\n\n                for(int elem: activeSegs){\n                    if(elem >= secondV->I && elem <= firstV->I) { //The way we sort enables us the assumption that the element that comes later in totalSegs has greater Y axis (I)\n                        result++;\n                    }\n                 }\n                firstV=nullptr;\n                secondV=nullptr;\n                }\n            }\n            \n        }\n\n        \n        output();\n    }\n\n    void output()\n    {\n\n        std::cout << result  << '\\n';\n\n        std::cout << std::endl;\n    }\n\n\n\n}\n```\nHere, the logic is pretty straight forward. If given n line segments \nwe\n* Identify if it is a VLS or an HLS, it is VLS if the x axis of both points of the LS are same. Then store them. \n* Sort all points based on X axis in ascending order, if X axis is same then sort based on Y axis (descending order). We do this to sweep from left to right, and if for any 2 points X is same like if it's the starting point of an HLS and a VLS is already being tracked, this ensures the point comes whilst the VLS is already being tracked so we don't miss processing the HLS within it.\nSo we store the points like so\n![image.png](../assets/image_1685786141621_0.png)\n\n* Then begins our main logic, we loop over all the sorted points. \n* If the current point belongs to a VLS then we store it if we don't have a tracked VLS pair and wait for it's other point, the way we sorted ensures that we first get the higher Y axis point of the VLS then the lower one. Once we get both the points in our iteration, we simply search for all tracked LS' Y axis between the Y axis of this VLS and add it to our result.\n\nIf the current point belongs to an HLS, we either store it if it isn't already stored, if it is stored then we see if we are on a VLS, if we are we add 1 to result and remove it and if we aren't then we simply remove the point indicating this HLS ended.",536870918]],["^15",[200,"^O","^16",536870918]],["^15",[200,"^F",199,536870918]],["^15",[200,"^X",179,536870918]],["^15",[200,"^V",179,536870918]],["^15",[200,"^U",179,536870918]],["^15",[200,"^;","~u655b7377-c65f-4742-9808-2afe25fa9db0",536870918]],["^15",[201,"^Q","",536870918]],["^15",[201,"^O","^16",536870918]],["^15",[201,"^F",200,536870918]],["^15",[201,"^X",179,536870918]],["^15",[201,"^V",179,536870918]],["^15",[201,"^U",179,536870918]],["^15",[201,"^;","~u655b7377-97d4-4937-be2a-793b630a0df1",536870918]],["^15",[202,"^Q","",536870918]],["^15",[202,"^O","^16",536870918]],["^15",[202,"^F",201,536870918]],["^15",[202,"^X",179,536870918]],["^15",[202,"^V",179,536870918]],["^15",[202,"^U",179,536870918]],["^15",[202,"^;","~u655b7377-c64f-42d8-91b6-646dd913ee03",536870918]],["^15",[203,"^3","- Degree 1 [[Equation]]. \n  Can be 1 [[Variable]] , like $$2x+9=0$$\n  Or 2 variable such as $$2x+9y=0$$\n  or 3 variable $$2x+9y+3z=0 $$ \n  and so on.\n- General form\n  $$f(x) = ax+b$$\n  where a and b are [[Real Number]]s and ``a!=0``\n- Intercept\n  If the [[Line]] of [[Function]] f on the [[Virtual Plane]] intersects the *x-axis* at (a,0) then (a,0) is an *x-intercept*. For *y-intercept* it should intersect at (0,b) and similarly for other dimensions.\n-",536870918]],["^15",[203,"^17",1700492151297,536870918]],["^15",[203,"^Z","CP/pages/Linear Equation.md",536870918]],["^15",[204,"^K",1700492151297,536870918]],["^15",[204,"^@",false,536870918]],["^15",[204,"^Y","line",536870918]],["^15",[204,"^11","Line",536870918]],["^15",[204,"^B",1700492151297,536870918]],["^15",[204,"^;","~u655b7377-bccf-4ca3-a310-5be6bc8e183d",536870918]],["^15",[205,"^Q","Degree 1 [[Equation]]. \nCan be 1 [[Variable]] , like $$2x+9=0$$\nOr 2 variable such as $$2x+9y=0$$\nor 3 variable $$2x+9y+3z=0 $$ \nand so on.",536870918]],["^15",[205,"^O","^16",536870918]],["^15",[205,"^F",167,536870918]],["^15",[205,"^X",167,536870918]],["^15",[205,"^V",167,536870918]],["^15",[205,"^U",157,536870918]],["^15",[205,"^U",161,536870918]],["^15",[205,"^U",167,536870918]],["^15",[205,"^H",157,536870918]],["^15",[205,"^H",161,536870918]],["^15",[205,"^;","~u655b7377-972a-4b3d-b3f5-1864109f76c0",536870918]],["^15",[206,"^Q","General form\n$$f(x) = ax+b$$\nwhere a and b are [[Real Number]]s and ``a!=0``",536870918]],["^15",[206,"^O","^16",536870918]],["^15",[206,"^F",205,536870918]],["^15",[206,"^X",167,536870918]],["^15",[206,"^V",167,536870918]],["^15",[206,"^U",164,536870918]],["^15",[206,"^U",167,536870918]],["^15",[206,"^H",164,536870918]],["^15",[206,"^;","~u655b7377-c030-43bc-a3c1-6ee7660bd7bf",536870918]],["^15",[207,"^Q","Intercept\nIf the [[Line]] of [[Function]] f on the [[Virtual Plane]] intersects the *x-axis* at (a,0) then (a,0) is an *x-intercept*. For *y-intercept* it should intersect at (0,b) and similarly for other dimensions.",536870918]],["^15",[207,"^O","^16",536870918]],["^15",[207,"^F",206,536870918]],["^15",[207,"^X",167,536870918]],["^15",[207,"^V",167,536870918]],["^15",[207,"^U",139,536870918]],["^15",[207,"^U",163,536870918]],["^15",[207,"^U",167,536870918]],["^15",[207,"^U",204,536870918]],["^15",[207,"^H",139,536870918]],["^15",[207,"^H",163,536870918]],["^15",[207,"^H",204,536870918]],["^15",[207,"^;","~u655b7377-2603-413b-8c07-8eb3e9c90932",536870918]],["^15",[208,"^Q","",536870918]],["^15",[208,"^O","^16",536870918]],["^15",[208,"^F",207,536870918]],["^15",[208,"^X",167,536870918]],["^15",[208,"^V",167,536870918]],["^15",[208,"^U",167,536870918]],["^15",[208,"^;","~u655b7377-c847-44dc-bab4-430e8579c215",536870918]],["^15",[209,"^3","- The ``LCS`` of any 2 [[String]]s is the longest [[Subsequence]] present in both strings.\n  For ex.:\n  In 2 strings, ``TOUR`` and ``OPERA``, the LCS is ``OR``.\n- 3 [[Algorithm]]s in decreasing order of growth are\n  * Normal Recursive Approach\n  * Memoized [[Recurse]]ive Approach\n  * [[Dynamic Programming]] + [[Iterative]] + [[Memoize]]d Approach\n- Normal [[Recurse]]ion\n  \n  In this approach we recursively ask if taking an element from a string or not taking it would yield a bigger common subsequence. We take an element if it matches with the currently tracked element of the other string, in this case the overall common subsequence size increases by 1.\n  \n  ![image.png](../assets/image_1691988397797_0.png) \n  As we can see, we start from the first character of both strings and compare them. If they are equal, they increase the LCS and we get LCS increased by 1.\n  Effectively, if 2 elements are equal, the problem then becomes finding the LCS of the remaining 2 strings and we can forget the elements that were equal.\n  ![image.png](../assets/image_1691988538490_0.png)\n  \n  But if the elements are not equal, then they can either contribute to the LCS, or not. \n  For example:\n  it is possible that an element from string 1 can be the same as an element at the end of string 2.\n  ![image.png](../assets/image_1691988714170_0.png)\n  Here, the ``C`` from string 1 is at the end of string 2. So it does contribute to the LCS.\n  \n  Hence we need to recursively find all possible combinations of subsequences of both strings and compare their culminated LCS'.\n  \n  In C++,\n  ```cpp\n  // Bottom up, (size1,size2), Normal Recursion based approach, TLE\n  int lcs(int i, int j) {\n    if (i < 0 || j < 0) {\n      return 0;\n    }\n  \n    if (s1[i] == s2[j]) {\n      return 1 + lcs(i - 1, j - 1);\n    } else {\n      return max(lcs(i, j - 1), lcs(i - 1, j));\n    }\n  }\n  \n  //called with lcs(s1.size()-1,s2.size()-1)\n  ```\n  \n  [[TC]] is $$\\text{0(}2^{n+m}\\text{)}$$\n  where ``n`` is size of string 1, and ``m`` is size of string 2.\n  [[SC]] is O(1) since our [[Algorithm]] takes no extra space.\n- [[Memoize]]d [[Recurse]]ive Approach\n  \n  In the normal approach, we can see that most of the branches are effectively repeating already traversed branches.\n  We can simply store the results and drop the [[TC]] at the cost of some [[SC]].\n  \n  In C++,\n  ```cpp\n  // Bottom up, Recursion+Memoized, (size1,size2), a bit slower growth in TC\n  int lcsMemoized(int i, int j) {\n    if (i < 0 || j < 0) {\n      return 0;\n    }\n  \n    if (memoTable[i][j] != -1) {\n      return memoTable[i][j];\n    }\n  \n    if (s1[i] == s2[j]) {\n      memoTable[i][j] = 1 + lcsMemoized(i - 1, j - 1);\n    } else {\n      memoTable[i][j] = max(lcsMemoized(i, j - 1), lcsMemoized(i - 1, j));\n    }\n    return memoTable[i][j];\n  }\n  //called with lcsmemoized(s1.size()-1,s2.size()-1)\n  ```\n  TC is same as normal approach in worst case, but in average and best case it is a lot better.\n  SC is $$O(n*m)$$\n- [[Dynamic Programming]] + [[Iterative]] + [[Memoize]]d Approach\n  \n  From the previous approaches, it can be observed that we depend on the solution to the previous subproblems (smaller strings to be compared). \n  So if we go from smaller strings to bigger strings, we can effectively forgo the recursion and linearly find the LCS from smaller strings to bigger ones.\n  To do so, we can visualize the 2 strings in a [[2D]] [[Matrix]].\n  \n  For ex.:\n  For ``TOUR`` and ``OPERA``\n  ![image.png](../assets/image_1691990912736_0.png) \n  \n  Now, we can find the LCS by going from top left to right bottom and looking at previous values and building upon them. \n  Each row's/column's character represents the max. subsequence size from empty string to that character.\n  For ex.:\n  If we take ``\"\"TO`` in row and ``\"\"OP`` in column, then the cell corresponding to them will hold the max. subsequence size, which is 1 in this case.\n  \n  Now, the [[Algorithm]] .\n  First we initialize all ``\"\"`` vs ``\"\"`` comparison values, these are always 0, because empty strings have no common subsequence with each other.\n  ![image.png](../assets/image_1691991058571_0.png)\n  \n  Now we compare subsequent cells for each row, for each cell, if the 2 current characters are inequal then we take max of the previous row same column, or previous column same row. In other words, we take the max of either the subsequence till the current string 1 character and the previous string 2 character, or the other way around.\n  \n  For ex.:\n  ![image.png](../assets/image_1691991382972_0.png)\n  Since ``T`` and ``O`` are inequal, we take max of ``\"\"`` and ``\"\"O`` vs. ``\"\"T`` and``\"\"`` .\n  This is exactly the same as the original algorithm, either we take the LCS size till current element of either string 1 or string 2, whichever is bigger.\n  \n  Now, if 2 characters that are equal, we do the same but add 1 to the max. This is because the current characters are increasing the LCS by 1.\n  \n  Finally, we get this matrix.\n  ![image.png](../assets/image_1691991789152_0.png)\n  \n  And the result is the last element.\n  \n  In C++,\n  ```cpp\n  // Top to Bottom, 1 indexed, DP + Iterative + Memoized, O(nm)\n  int lcsDP() {\n    for (int i{1}; i <= cast(s1.size()); ++i) {\n      for (int j{1}; j <= cast(s2.size()); ++j) {\n        dpTable[i][j] = s1[i - 1] == s2[j - 1]\n                            ? 1 + dpTable[i - 1][j - 1]\n                            : max(dpTable[i][j - 1], dpTable[i - 1][j]);\n      }\n    }\n    return dpTable[s1.size()][s2.size()];\n  }\n  //called with lcsDP()\n  ```\n  \n  [[TC]] is $$O(n*m)$$\n  [[SC]] is also $$O(n*m)$$\n- Reference: {{video https://www.youtube.com/watch?v=ASoaQq66foQ}}",536870918]],["^15",[209,"^17",1700492151337,536870918]],["^15",[209,"^Z","CP/pages/Longest Common Subsequence.md",536870918]],["^15",[210,"^K",1700492151336,536870918]],["^15",[210,"^@",false,536870918]],["^15",[210,"^Y","recurse",536870918]],["^15",[210,"^11","Recurse",536870918]],["^15",[210,"^B",1700492151336,536870918]],["^15",[210,"^;","~u655b7377-e36a-4320-94dc-ebd5ae181518",536870918]],["^15",[211,"^K",1700492151336,536870918]],["^15",[211,"^@",false,536870918]],["^15",[211,"^Y","matrix",536870918]],["^15",[211,"^11","Matrix",536870918]],["^15",[211,"^B",1700492151336,536870918]],["^15",[211,"^;","~u655b7377-e507-4682-bb91-9674382da545",536870918]],["^15",[212,"^K",1700492151412,536870918]],["^15",[212,"^@",false,536870918]],["^15",[212,"^Y","sc",536870918]],["^15",[212,"^11","SC",536870918]],["^15",[212,"^B",1700492151412,536870918]],["^15",[212,"^;","~u655b7377-c010-4c0e-93a2-aa3d88592490",536870918]],["^15",[213,"^K",1700492151364,536870918]],["^15",[213,"^[",238,536870918]],["^15",[213,"^@",false,536870918]],["^15",[213,"^Y","subsequence",536870918]],["^15",[213,"^11","Subsequence",536870918]],["^15",[213,"^B",1700492151364,536870918]],["^15",[213,"^;","~u655b7377-dda6-4eec-9918-35f66c0a81ec",536870918]],["^15",[214,"^K",1700492151337,536870918]],["^15",[214,"^@",false,536870918]],["^15",[214,"^Y","2d",536870918]],["^15",[214,"^11","2D",536870918]],["^15",[214,"^B",1700492151337,536870918]],["^15",[214,"^;","~u655b7377-951c-4e12-931c-d60af7a16359",536870918]],["^15",[215,"^K",1700492151412,536870918]],["^15",[215,"^@",false,536870918]],["^15",[215,"^Y","tc",536870918]],["^15",[215,"^11","TC",536870918]],["^15",[215,"^B",1700492151412,536870918]],["^15",[215,"^;","~u655b7377-45de-49e6-95c9-65db09aa099d",536870918]],["^15",[216,"^K",1700492151337,536870918]],["^15",[216,"^@",false,536870918]],["^15",[216,"^Y","memoize",536870918]],["^15",[216,"^11","Memoize",536870918]],["^15",[216,"^B",1700492151337,536870918]],["^15",[216,"^;","~u655b7377-b940-4dea-945b-c9288267052e",536870918]],["^15",[217,"^K",1700492151337,536870918]],["^15",[217,"^@",false,536870918]],["^15",[217,"^Y","iterative",536870918]],["^15",[217,"^11","Iterative",536870918]],["^15",[217,"^B",1700492151337,536870918]],["^15",[217,"^;","~u655b7377-db78-4b61-9b7a-c835dd728e17",536870918]],["^15",[218,"^Q","The ``LCS`` of any 2 [[String]]s is the longest [[Subsequence]] present in both strings.\nFor ex.:\nIn 2 strings, ``TOUR`` and ``OPERA``, the LCS is ``OR``.",536870918]],["^15",[218,"^O","^16",536870918]],["^15",[218,"^F",117,536870918]],["^15",[218,"^X",117,536870918]],["^15",[218,"^V",117,536870918]],["^15",[218,"^U",80,536870918]],["^15",[218,"^U",117,536870918]],["^15",[218,"^U",213,536870918]],["^15",[218,"^H",80,536870918]],["^15",[218,"^H",213,536870918]],["^15",[218,"^;","~u655b7377-8aae-47a9-86db-7799b9ba2e66",536870918]],["^15",[219,"^Q","3 [[Algorithm]]s in decreasing order of growth are\n* Normal Recursive Approach\n* Memoized [[Recurse]]ive Approach\n* [[Dynamic Programming]] + [[Iterative]] + [[Memoize]]d Approach",536870918]],["^15",[219,"^O","^16",536870918]],["^15",[219,"^F",218,536870918]],["^15",[219,"^X",117,536870918]],["^15",[219,"^V",117,536870918]],["^15",[219,"^U",102,536870918]],["^15",[219,"^U",116,536870918]],["^15",[219,"^U",117,536870918]],["^15",[219,"^U",210,536870918]],["^15",[219,"^U",216,536870918]],["^15",[219,"^U",217,536870918]],["^15",[219,"^H",102,536870918]],["^15",[219,"^H",116,536870918]],["^15",[219,"^H",210,536870918]],["^15",[219,"^H",216,536870918]],["^15",[219,"^H",217,536870918]],["^15",[219,"^;","~u655b7377-1569-416f-b1ec-4975edfa8840",536870918]],["^15",[220,"^Q","Normal [[Recurse]]ion\n\nIn this approach we recursively ask if taking an element from a string or not taking it would yield a bigger common subsequence. We take an element if it matches with the currently tracked element of the other string, in this case the overall common subsequence size increases by 1.\n\n![image.png](../assets/image_1691988397797_0.png) \nAs we can see, we start from the first character of both strings and compare them. If they are equal, they increase the LCS and we get LCS increased by 1.\nEffectively, if 2 elements are equal, the problem then becomes finding the LCS of the remaining 2 strings and we can forget the elements that were equal.\n![image.png](../assets/image_1691988538490_0.png)\n\nBut if the elements are not equal, then they can either contribute to the LCS, or not. \nFor example:\nit is possible that an element from string 1 can be the same as an element at the end of string 2.\n![image.png](../assets/image_1691988714170_0.png)\nHere, the ``C`` from string 1 is at the end of string 2. So it does contribute to the LCS.\n\nHence we need to recursively find all possible combinations of subsequences of both strings and compare their culminated LCS'.\n\nIn C++,\n```cpp\n// Bottom up, (size1,size2), Normal Recursion based approach, TLE\nint lcs(int i, int j) {\n  if (i < 0 || j < 0) {\n    return 0;\n  }\n\n  if (s1[i] == s2[j]) {\n    return 1 + lcs(i - 1, j - 1);\n  } else {\n    return max(lcs(i, j - 1), lcs(i - 1, j));\n  }\n}\n\n//called with lcs(s1.size()-1,s2.size()-1)\n```\n\n[[TC]] is $$\\text{0(}2^{n+m}\\text{)}$$\nwhere ``n`` is size of string 1, and ``m`` is size of string 2.\n[[SC]] is O(1) since our [[Algorithm]] takes no extra space.",536870918]],["^15",[220,"^O","^16",536870918]],["^15",[220,"^F",219,536870918]],["^15",[220,"^X",117,536870918]],["^15",[220,"^V",117,536870918]],["^15",[220,"^U",102,536870918]],["^15",[220,"^U",117,536870918]],["^15",[220,"^U",210,536870918]],["^15",[220,"^U",212,536870918]],["^15",[220,"^U",215,536870918]],["^15",[220,"^H",102,536870918]],["^15",[220,"^H",210,536870918]],["^15",[220,"^H",212,536870918]],["^15",[220,"^H",215,536870918]],["^15",[220,"^;","~u655b7377-67d8-4f07-bfd5-c1be5c985fbd",536870918]],["^15",[221,"^Q","[[Memoize]]d [[Recurse]]ive Approach\n\nIn the normal approach, we can see that most of the branches are effectively repeating already traversed branches.\nWe can simply store the results and drop the [[TC]] at the cost of some [[SC]].\n\nIn C++,\n```cpp\n// Bottom up, Recursion+Memoized, (size1,size2), a bit slower growth in TC\nint lcsMemoized(int i, int j) {\n  if (i < 0 || j < 0) {\n    return 0;\n  }\n\n  if (memoTable[i][j] != -1) {\n    return memoTable[i][j];\n  }\n\n  if (s1[i] == s2[j]) {\n    memoTable[i][j] = 1 + lcsMemoized(i - 1, j - 1);\n  } else {\n    memoTable[i][j] = max(lcsMemoized(i, j - 1), lcsMemoized(i - 1, j));\n  }\n  return memoTable[i][j];\n}\n//called with lcsmemoized(s1.size()-1,s2.size()-1)\n```\nTC is same as normal approach in worst case, but in average and best case it is a lot better.\nSC is $$O(n*m)$$",536870918]],["^15",[221,"^O","^16",536870918]],["^15",[221,"^F",220,536870918]],["^15",[221,"^X",117,536870918]],["^15",[221,"^V",117,536870918]],["^15",[221,"^U",117,536870918]],["^15",[221,"^U",210,536870918]],["^15",[221,"^U",212,536870918]],["^15",[221,"^U",215,536870918]],["^15",[221,"^U",216,536870918]],["^15",[221,"^H",210,536870918]],["^15",[221,"^H",212,536870918]],["^15",[221,"^H",215,536870918]],["^15",[221,"^H",216,536870918]],["^15",[221,"^;","~u655b7377-f684-462f-b52e-73e217e8340b",536870918]],["^15",[222,"^Q","[[Dynamic Programming]] + [[Iterative]] + [[Memoize]]d Approach\n\nFrom the previous approaches, it can be observed that we depend on the solution to the previous subproblems (smaller strings to be compared). \nSo if we go from smaller strings to bigger strings, we can effectively forgo the recursion and linearly find the LCS from smaller strings to bigger ones.\nTo do so, we can visualize the 2 strings in a [[2D]] [[Matrix]].\n\nFor ex.:\nFor ``TOUR`` and ``OPERA``\n![image.png](../assets/image_1691990912736_0.png) \n\nNow, we can find the LCS by going from top left to right bottom and looking at previous values and building upon them. \nEach row's/column's character represents the max. subsequence size from empty string to that character.\nFor ex.:\nIf we take ``\"\"TO`` in row and ``\"\"OP`` in column, then the cell corresponding to them will hold the max. subsequence size, which is 1 in this case.\n\nNow, the [[Algorithm]] .\nFirst we initialize all ``\"\"`` vs ``\"\"`` comparison values, these are always 0, because empty strings have no common subsequence with each other.\n![image.png](../assets/image_1691991058571_0.png)\n\nNow we compare subsequent cells for each row, for each cell, if the 2 current characters are inequal then we take max of the previous row same column, or previous column same row. In other words, we take the max of either the subsequence till the current string 1 character and the previous string 2 character, or the other way around.\n\nFor ex.:\n![image.png](../assets/image_1691991382972_0.png)\nSince ``T`` and ``O`` are inequal, we take max of ``\"\"`` and ``\"\"O`` vs. ``\"\"T`` and``\"\"`` .\nThis is exactly the same as the original algorithm, either we take the LCS size till current element of either string 1 or string 2, whichever is bigger.\n\nNow, if 2 characters that are equal, we do the same but add 1 to the max. This is because the current characters are increasing the LCS by 1.\n\nFinally, we get this matrix.\n![image.png](../assets/image_1691991789152_0.png)\n\nAnd the result is the last element.\n\nIn C++,\n```cpp\n// Top to Bottom, 1 indexed, DP + Iterative + Memoized, O(nm)\nint lcsDP() {\n  for (int i{1}; i <= cast(s1.size()); ++i) {\n    for (int j{1}; j <= cast(s2.size()); ++j) {\n      dpTable[i][j] = s1[i - 1] == s2[j - 1]\n                          ? 1 + dpTable[i - 1][j - 1]\n                          : max(dpTable[i][j - 1], dpTable[i - 1][j]);\n    }\n  }\n  return dpTable[s1.size()][s2.size()];\n}\n//called with lcsDP()\n```\n\n[[TC]] is $$O(n*m)$$\n[[SC]] is also $$O(n*m)$$",536870918]],["^15",[222,"^O","^16",536870918]],["^15",[222,"^F",221,536870918]],["^15",[222,"^X",117,536870918]],["^15",[222,"^V",117,536870918]],["^15",[222,"^U",102,536870918]],["^15",[222,"^U",116,536870918]],["^15",[222,"^U",117,536870918]],["^15",[222,"^U",211,536870918]],["^15",[222,"^U",212,536870918]],["^15",[222,"^U",214,536870918]],["^15",[222,"^U",215,536870918]],["^15",[222,"^U",216,536870918]],["^15",[222,"^U",217,536870918]],["^15",[222,"^H",102,536870918]],["^15",[222,"^H",116,536870918]],["^15",[222,"^H",211,536870918]],["^15",[222,"^H",212,536870918]],["^15",[222,"^H",214,536870918]],["^15",[222,"^H",215,536870918]],["^15",[222,"^H",216,536870918]],["^15",[222,"^H",217,536870918]],["^15",[222,"^;","~u655b7377-3b91-4c43-8ff7-c8a706131892",536870918]],["^15",[223,"^Q","Reference: {{video https://www.youtube.com/watch?v=ASoaQq66foQ}}",536870918]],["^15",[223,"^O","^16",536870918]],["^15",[223,"^F",222,536870918]],["^15",[223,"^S",224,536870918]],["^15",[223,"^X",117,536870918]],["^15",[223,"^V",117,536870918]],["^15",[223,"^U",117,536870918]],["^15",[223,"^;","~u655b7377-d79b-488b-a82f-f820fb503182",536870918]],["^15",[224,"^?",["^ ","~:logseq.macro-name","video","~:logseq.macro-arguments",["https://www.youtube.com/watch?v=ASoaQq66foQ"]],536870918]],["^15",[224,"^W","macro",536870918]],["^15",[224,"^T","video https://www.youtube.com/watch?v=ASoaQq66foQ",536870918]],["^15",[225,"^3","- String s of n characters with alphabets({a,b,....z}, i.e., [[Set]] of lower-case Latin characters) is an array from s[0],s[1]....s[n-1].\n- [[Substring]]\n- [[Subsequence]]\n- A ``prefix`` of a string s is any substring p formed from s that starts with the first character of s. For ex.:\n  ```\n  s= \"BYTE\"\n  p= {\"B\", \"BY\", \"BYT\", \"BYTE\"} //p can be any of the substring from this set.\n  ```\n- A ``suffix`` of a string s is any substring p formed from s that ends with the last character of s. For ex.:\n  ```\n  s= \"BYTE\"\n  p= {\"E\", \"TE\", \"YTE\", \"BYTE\"} //p can be any of the substring from this set.\n  ```\n- A ``border`` of a string s is any substring p formed from s that is both the prefix and the suffix of s. For ex.:\n  ```\n  s= \"ABCDAB\"\n  p = \"AB\"; //AB can be both prefix and suffix for s, hence it is a border.\n  ```\n- A ``rotation`` of a string s is another string r that can be created by repeatedly shifting the first character to the end of s.\n  For ex.:\n  ```\n  s= \"STAR\"\n  r= \"TARS\"; //then r can be ARST then RSTA and so on.\n  ```\n- [[Trie]]\n- [[Longest Common Subsequence]]\n-\n-",536870918]],["^15",[225,"^17",1700492151354,536870918]],["^15",[225,"^Z","CP/pages/String.md",536870918]],["^15",[226,"^K",1700492151372,536870918]],["^15",[226,"^[",241,536870918]],["^15",[226,"^@",false,536870918]],["^15",[226,"^Y","substring",536870918]],["^15",[226,"^11","Substring",536870918]],["^15",[226,"^B",1700492151372,536870918]],["^15",[226,"^;","~u655b7377-36d3-4aec-a4fe-9e8c7a129c93",536870918]],["^15",[236,"^Q","alias:: str\nNot really an alias, as String and str are different things but the term is used interchangeably.\n\n",536870960]],["^15",[236,"^O","^16",536870918]],["^15",[236,"^1;",["^19",[]],536870960]],["^15",[236,"^F",80,536870918]],["^15",[236,"^X",80,536870918]],["^15",[236,"^V",80,536870918]],["^15",[236,"^U",80,536870918]],["^15",[236,"^U",140,536870918]],["^15",[236,"^U",299,536870934]],["^15",[236,"^U",1244,536870960]],["^15",[236,"^:",true,536870960]],["^15",[236,"^?",["^ ","^18",["^19",["str"]]],536870960]],["^15",[236,"^J",["^18"],536870960]],["^15",[236,"^4",["^ ","^18","str"],536870960]],["^15",[236,"^H",1244,536870960]],["^15",[236,"^;","~u655b7377-bea2-4f83-b1b3-455fc87a9aee",536870918]],["^15",[238,"^3","- It's a [[String]]/[[Sequence]] formed from consecutive characters in a string (consecutive indices).\n  Every [[Substring]] is a subsequence, but the converse is false as a subsequence may not be formed from a continuous range of characters in the string but a substring must always cover a continuous index range. \n  For ex.:\n  ![image.png](../assets/image_1684390601372_0.png)",536870918]],["^15",[238,"^17",1700492151365,536870918]],["^15",[238,"^Z","CP/pages/Subsequence.md",536870918]],["^15",[239,"^K",1700492151364,536870918]],["^15",[239,"^@",false,536870918]],["^15",[239,"^Y","sequence",536870918]],["^15",[239,"^11","Sequence",536870918]],["^15",[239,"^B",1700492151364,536870918]],["^15",[239,"^;","~u655b7377-ff4c-4616-9301-2dc1a7d04fd0",536870918]],["^15",[240,"^Q","It's a [[String]]/[[Sequence]] formed from consecutive characters in a string (consecutive indices).\nEvery [[Substring]] is a subsequence, but the converse is false as a subsequence may not be formed from a continuous range of characters in the string but a substring must always cover a continuous index range. \nFor ex.:\n![image.png](../assets/image_1684390601372_0.png)",536870918]],["^15",[240,"^O","^16",536870918]],["^15",[240,"^F",213,536870918]],["^15",[240,"^X",213,536870918]],["^15",[240,"^V",213,536870918]],["^15",[240,"^U",80,536870918]],["^15",[240,"^U",213,536870918]],["^15",[240,"^U",226,536870918]],["^15",[240,"^U",239,536870918]],["^15",[240,"^H",80,536870918]],["^15",[240,"^H",226,536870918]],["^15",[240,"^H",239,536870918]],["^15",[240,"^;","~u655b7377-ea96-4420-a065-c55d5adba001",536870918]],["^15",[241,"^3","- A ``substring`` s[a...b] is a [[String]] formed from the characters from int index a to b in s. This covers a continuous index range in the string.",536870918]],["^15",[241,"^17",1700492151372,536870918]],["^15",[241,"^Z","CP/pages/Substring.md",536870918]],["^15",[242,"^Q","A ``substring`` s[a...b] is a [[String]] formed from the characters from int index a to b in s. This covers a continuous index range in the string.",536870918]],["^15",[242,"^O","^16",536870918]],["^15",[242,"^F",226,536870918]],["^15",[242,"^X",226,536870918]],["^15",[242,"^V",226,536870918]],["^15",[242,"^U",80,536870918]],["^15",[242,"^U",226,536870918]],["^15",[242,"^H",80,536870918]],["^15",[242,"^;","~u655b7377-cafc-4ed3-96f5-1db9ff3f4885",536870918]],["^15",[243,"^3","- aka prefix tree or digital tree.\n  This is a [[Rooted Tree]] data structure that allows for fast insert, delete and search operation on a [[Set]] of strings. Each character in a string is consecutively stored in the [[Tree]] as individual nodes and if 2 strings contain the same prefix characters, then the same chain of the graph is used. The node representing the end character of a string is marked to know what strings are stored in the trie.\n  For ex.:\n  ![image.png](../assets/image_1684410092705_0.png)\n  Here, the trie has the given strings stored and as we can see CAT and CATTLE share the same chain, the T and E is marked to denote that from the root, the chain C->A->T and C->A->T->T->L->E are the strings here.\n- To implement a trie\n  \n  * We can use a [[Linked List]] like [[Data Structure]] to store unique chains of letters separately and non-unique chains in existing chains.\n  * We can also use a simple 2-Dimensional [[C++ Array]] to represent chains. \n  \n  Implementing the 2nd one here, the 1st can be easily understood from it as well.\n  \n  ```cpp\n  void setup() {\n    INPUT(k, A, c);\n    trie = vvi(cN, vi(A, 0));\n    eos = vb(cN, false);\n    counter = 0;\n    {\n      string arg{};\n      cin.ignore(intmax, '\\n');\n      for (int i{}; i < k; ++i) {\n        getline(cin, arg);\n        trie_insert(arg);\n      }\n    }\n  }\n  \n  // Trie\n  void compute() {\n    string arg{};\n    while (c-- > 0) {\n      getline(cin, arg);\n      output(search(arg));\n    }\n  }\n  \n  void trie_insert(string_view s) {\n    int sz{cast(s.size())};\n    int next{};\n  \n    for (int i{}; i < sz; ++i) {\n      int &elem{trie[next][cast(s[i] % A)]};\n      if (!elem)\n        elem = ++counter;\n  \n      next = elem;\n    }\n    eos[next] = true;\n  }\n  \n  bool search(string_view s) {\n    int sz{cast(s.size())};\n    int next{};\n    for (int i{}; i < sz; ++i) {\n      int &elem{trie[next][cast(s[i] % A)]};\n      if (!elem)\n        return false;\n  \n      next = elem;\n    }\n    return eos[next];\n  }\n  ```\n  Using [[Default C++ Template]]\n  \n  The logic is quite simple.\n  We use 2 variables, ``eos`` and ``trie``. ``trie`` is a 2-D Array with size ``trie[N][A]`` where ``N`` is the total size of all input [[C++ String]]'s size and ``A`` is the alphabet size. In a string ``s`` we store each ``s[i]`` in ``trie[i]`` and then we use the ``s[i]%A`` position of the array ``trie[i]`` to store a value indicating where at which ``i`` in trie the next character of the string is, this value is named ``counter``. The reason we do this is because ``s[i]`` corresponds to ``trie[i]`` only when the same chain stored in ``trie[i]`` is followed. If it is not, we jump to the next ``trie[n]`` where no char has been stored. This is where the ``counter``'s value comes in handy. ``counter`` essentially keeps track of how many indices in ``trie`` have been used to allow a string to find the next empty index.\n  The ``eos`` variable helps in marking indices of ``trie`` where a string has come to an end. The guarantee here is that each unique string stored in the ``trie`` will have a unique end index, and it will be checked only when a search string expects an index to be an end index.\n  \n  For ex.:\n  For these 4 input strings\n  ```\n  car\n  cat\n  caid\n  bard\n  ```\n  \n  And these 2 strings to be searched in the trie\n  ```\n  card\n  cat\n  ```\n  \n  We store inputs like so, in the order they are given above,\n  ![image.png](../assets/image_1691133074322_0.png)\n  The ``eos`` will be true for 2,5,9.\n  \n  As can be seen from the code and from the image, if an index is already used, it indicates the letter is already stored, and each character stores the index of the next empty row, and except the diverging letter, all letters are stored on new rows. This guarantees, if an index is already used in a row, it means it's part of an existing chain, and if it is not then it is empty and hence our character is the diverging character which will show the next index where we can find the rest of the string. \n  \n  This allows search to be trivial as well. \n  So when we search for ``card``, we get ``c``, ``a`` and even ``r`` but when we look at ``d``, it is empty in the ``trie``, hence ``card`` isn't stored in the ``trie``.\n  \n  [[TC]] is O(n) for storage and O(n) for retrieval as well, but with a fixed constant time overhead of the fixed size of ``trie`` and ``eos``.  For [[SC]], Space is constant O(1) here, but it can also be dependent on the input size, in which case the constant time overhead for TC will be lower as well.",536870918]],["^15",[243,"^17",1700492151416,536870918]],["^15",[243,"^Z","CP/pages/Trie.md",536870918]],["^15",[244,"^K",1700492151414,536870918]],["^15",[244,"^@",false,536870918]],["^15",[244,"^Y","c++ array",536870918]],["^15",[244,"^11","C++ Array",536870918]],["^15",[244,"^B",1700492151414,536870918]],["^15",[244,"^;","~u655b7377-1281-4398-b22a-2d852545fa4b",536870918]],["^15",[245,"^K",1700492151412,536870918]],["^15",[245,"^@",false,536870918]],["^15",[245,"^Y","rooted tree",536870918]],["^15",[245,"^11","Rooted Tree",536870918]],["^15",[245,"^B",1700492151412,536870918]],["^15",[245,"^;","~u655b7377-3852-43a7-b562-a5909f13189b",536870918]],["^15",[246,"^K",1700492151415,536870918]],["^15",[246,"^@",false,536870918]],["^15",[246,"^Y","data structure",536870918]],["^15",[246,"^11","Data Structure",536870918]],["^15",[246,"^B",1700492151415,536870918]],["^15",[246,"^;","~u655b737a-4b7b-4290-8841-ebfd07cf09d1",536870919]],["^15",[247,"^K",1700492151411,536870918]],["^15",[247,"^@",false,536870918]],["^15",[247,"^Y","tree",536870918]],["^15",[247,"^11","Tree",536870918]],["^15",[247,"^B",1700492151411,536870918]],["^15",[247,"^;","~u655b7377-65ac-42c4-81aa-00c87ae6f5f1",536870918]],["^15",[248,"^K",1700492151413,536870918]],["^15",[248,"^@",false,536870918]],["^15",[248,"^Y","c++ string",536870918]],["^15",[248,"^11","C++ String",536870918]],["^15",[248,"^B",1700492151413,536870918]],["^15",[248,"^;","~u655b7377-b195-4894-ab42-2ab18fd709b2",536870918]],["^15",[249,"^K",1700492151416,536870918]],["^15",[249,"^@",false,536870918]],["^15",[249,"^Y","linked list",536870918]],["^15",[249,"^11","Linked List",536870918]],["^15",[249,"^B",1700492151416,536870918]],["^15",[249,"^;","~u655b7377-3860-4eed-bcfe-e5b6b86e3b46",536870918]],["^15",[250,"^Q","aka prefix tree or digital tree.\nThis is a [[Rooted Tree]] data structure that allows for fast insert, delete and search operation on a [[Set]] of strings. Each character in a string is consecutively stored in the [[Tree]] as individual nodes and if 2 strings contain the same prefix characters, then the same chain of the graph is used. The node representing the end character of a string is marked to know what strings are stored in the trie.\nFor ex.:\n![image.png](../assets/image_1684410092705_0.png)\nHere, the trie has the given strings stored and as we can see CAT and CATTLE share the same chain, the T and E is marked to denote that from the root, the chain C->A->T and C->A->T->T->L->E are the strings here.",536870918]],["^15",[250,"^O","^16",536870918]],["^15",[250,"^F",118,536870918]],["^15",[250,"^X",118,536870918]],["^15",[250,"^V",118,536870918]],["^15",[250,"^U",118,536870918]],["^15",[250,"^U",140,536870918]],["^15",[250,"^U",245,536870918]],["^15",[250,"^U",247,536870918]],["^15",[250,"^H",140,536870918]],["^15",[250,"^H",245,536870918]],["^15",[250,"^H",247,536870918]],["^15",[250,"^;","~u655b7377-919c-42c1-a95c-9547124f3f73",536870918]],["^15",[251,"^Q","To implement a trie\n\n* We can use a [[Linked List]] like [[Data Structure]] to store unique chains of letters separately and non-unique chains in existing chains.\n* We can also use a simple 2-Dimensional [[C++ Array]] to represent chains. \n\nImplementing the 2nd one here, the 1st can be easily understood from it as well.\n\n```cpp\nvoid setup() {\n  INPUT(k, A, c);\n  trie = vvi(cN, vi(A, 0));\n  eos = vb(cN, false);\n  counter = 0;\n  {\n    string arg{};\n    cin.ignore(intmax, '\\n');\n    for (int i{}; i < k; ++i) {\n      getline(cin, arg);\n      trie_insert(arg);\n    }\n  }\n}\n\n// Trie\nvoid compute() {\n  string arg{};\n  while (c-- > 0) {\n    getline(cin, arg);\n    output(search(arg));\n  }\n}\n\nvoid trie_insert(string_view s) {\n  int sz{cast(s.size())};\n  int next{};\n\n  for (int i{}; i < sz; ++i) {\n    int &elem{trie[next][cast(s[i] % A)]};\n    if (!elem)\n      elem = ++counter;\n\n    next = elem;\n  }\n  eos[next] = true;\n}\n\nbool search(string_view s) {\n  int sz{cast(s.size())};\n  int next{};\n  for (int i{}; i < sz; ++i) {\n    int &elem{trie[next][cast(s[i] % A)]};\n    if (!elem)\n      return false;\n\n    next = elem;\n  }\n  return eos[next];\n}\n```\nUsing [[Default C++ Template]]\n\nThe logic is quite simple.\nWe use 2 variables, ``eos`` and ``trie``. ``trie`` is a 2-D Array with size ``trie[N][A]`` where ``N`` is the total size of all input [[C++ String]]'s size and ``A`` is the alphabet size. In a string ``s`` we store each ``s[i]`` in ``trie[i]`` and then we use the ``s[i]%A`` position of the array ``trie[i]`` to store a value indicating where at which ``i`` in trie the next character of the string is, this value is named ``counter``. The reason we do this is because ``s[i]`` corresponds to ``trie[i]`` only when the same chain stored in ``trie[i]`` is followed. If it is not, we jump to the next ``trie[n]`` where no char has been stored. This is where the ``counter``'s value comes in handy. ``counter`` essentially keeps track of how many indices in ``trie`` have been used to allow a string to find the next empty index.\nThe ``eos`` variable helps in marking indices of ``trie`` where a string has come to an end. The guarantee here is that each unique string stored in the ``trie`` will have a unique end index, and it will be checked only when a search string expects an index to be an end index.\n\nFor ex.:\nFor these 4 input strings\n```\ncar\ncat\ncaid\nbard\n```\n\nAnd these 2 strings to be searched in the trie\n```\ncard\ncat\n```\n\nWe store inputs like so, in the order they are given above,\n![image.png](../assets/image_1691133074322_0.png)\nThe ``eos`` will be true for 2,5,9.\n\nAs can be seen from the code and from the image, if an index is already used, it indicates the letter is already stored, and each character stores the index of the next empty row, and except the diverging letter, all letters are stored on new rows. This guarantees, if an index is already used in a row, it means it's part of an existing chain, and if it is not then it is empty and hence our character is the diverging character which will show the next index where we can find the rest of the string. \n\nThis allows search to be trivial as well. \nSo when we search for ``card``, we get ``c``, ``a`` and even ``r`` but when we look at ``d``, it is empty in the ``trie``, hence ``card`` isn't stored in the ``trie``.\n\n[[TC]] is O(n) for storage and O(n) for retrieval as well, but with a fixed constant time overhead of the fixed size of ``trie`` and ``eos``.  For [[SC]], Space is constant O(1) here, but it can also be dependent on the input size, in which case the constant time overhead for TC will be lower as well.",536870918]],["^15",[251,"^O","^16",536870918]],["^15",[251,"^F",250,536870918]],["^15",[251,"^X",118,536870918]],["^15",[251,"^V",118,536870918]],["^15",[251,"^U",118,536870918]],["^15",[251,"^U",119,536870918]],["^15",[251,"^U",212,536870918]],["^15",[251,"^U",215,536870918]],["^15",[251,"^U",244,536870918]],["^15",[251,"^U",246,536870918]],["^15",[251,"^U",248,536870918]],["^15",[251,"^U",249,536870918]],["^15",[251,"^H",119,536870918]],["^15",[251,"^H",212,536870918]],["^15",[251,"^H",215,536870918]],["^15",[251,"^H",244,536870918]],["^15",[251,"^H",246,536870918]],["^15",[251,"^H",248,536870918]],["^15",[251,"^H",249,536870918]],["^15",[251,"^;","~u655b7377-f5b2-4025-80c5-7db00e5ca20e",536870918]],["^15",[252,"^3","alias:: GNU Policy Based Data Structures\n\n- G++/GCC has some optimized versions of important data structures like [[Trie]] implemented and ready to be used in the libraries inside #include ``<ext/pb_ds/...>`` where ... represents the appropriate structure name.\n  For ex.:\n  ```cpp \n  #include <ext/pb_ds/tree_policy.hpp>\n  ```\n- Read more: https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/ and also https://codeforces.com/blog/entry/11080\n-",536870918]],["^15",[252,"^17",1700492151429,536870918]],["^15",[252,"^Z","CP/pages/gnu_pbds.md",536870918]],["^15",[253,"^5",254,536870918]],["^15",[253,"^K",1700492151427,536870918]],["^15",[253,"^[",252,536870918]],["^15",[253,"^@",false,536870918]],["^15",[253,"^Y","gnu_pbds",536870918]],["^15",[253,"^11","gnu_pbds",536870918]],["^15",[253,"^?",["^ ","^18",["^19",["GNU Policy Based Data Structures"]]],536870918]],["^15",[253,"^4",["^ ","^18","GNU Policy Based Data Structures"],536870918]],["^15",[253,"^B",1700492151427,536870918]],["^15",[253,"^;","~u655b7377-f856-4941-97f8-e37f8cc4885f",536870918]],["^15",[254,"^5",253,536870918]],["^15",[254,"^K",1700492151427,536870918]],["^15",[254,"^@",false,536870918]],["^15",[254,"^Y","gnu policy based data structures",536870918]],["^15",[254,"^11","GNU Policy Based Data Structures",536870918]],["^15",[254,"^B",1700492151427,536870918]],["^15",[254,"^;","~u655b7377-a2fd-4414-a23f-8f7c6ea5ee71",536870918]],["^15",[255,"^K",1700492151429,536870918]],["^15",[255,"^@",false,536870918]],["^15",[255,"^Y","include",536870918]],["^15",[255,"^11","include",536870918]],["^15",[255,"^B",1700492151429,536870918]],["^15",[255,"^;","~u655b7377-134a-4331-92e2-21a65b3d5cea",536870918]],["^15",[256,"^Q","alias:: GNU Policy Based Data Structures\n\n",536870918]],["^15",[256,"^O","^16",536870918]],["^15",[256,"^1;",["^19",[]],536870918]],["^15",[256,"^F",253,536870918]],["^15",[256,"^X",253,536870918]],["^15",[256,"^V",253,536870918]],["^15",[256,"^U",253,536870918]],["^15",[256,"^U",254,536870918]],["^15",[256,"^:",true,536870918]],["^15",[256,"^?",["^ ","^18",["^19",["GNU Policy Based Data Structures"]]],536870918]],["^15",[256,"^J",["^18"],536870918]],["^15",[256,"^4",["^ ","^18","GNU Policy Based Data Structures"],536870918]],["^15",[256,"^H",254,536870918]],["^15",[256,"^;","~u655b7377-a1c0-4cfd-afa9-38ca1e722264",536870918]],["^15",[257,"^Q","G++/GCC has some optimized versions of important data structures like [[Trie]] implemented and ready to be used in the libraries inside #include ``<ext/pb_ds/...>`` where ... represents the appropriate structure name.\nFor ex.:\n```cpp \n#include <ext/pb_ds/tree_policy.hpp>\n```",536870918]],["^15",[257,"^O","^16",536870918]],["^15",[257,"^F",256,536870918]],["^15",[257,"^X",253,536870918]],["^15",[257,"^V",253,536870918]],["^15",[257,"^U",118,536870918]],["^15",[257,"^U",253,536870918]],["^15",[257,"^U",255,536870918]],["^15",[257,"^H",118,536870918]],["^15",[257,"^H",255,536870918]],["^15",[257,"^;","~u655b7377-22c7-4bdd-a99a-c3c723ba6f1b",536870918]],["^15",[258,"^Q","Read more: https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/ and also https://codeforces.com/blog/entry/11080",536870918]],["^15",[258,"^O","^16",536870918]],["^15",[258,"^F",257,536870918]],["^15",[258,"^X",253,536870918]],["^15",[258,"^V",253,536870918]],["^15",[258,"^U",253,536870918]],["^15",[258,"^;","~u655b7377-b725-4551-ac12-d6c69f3e58c8",536870918]],["^15",[259,"^Q","",536870918]],["^15",[259,"^O","^16",536870918]],["^15",[259,"^F",258,536870918]],["^15",[259,"^X",253,536870918]],["^15",[259,"^V",253,536870918]],["^15",[259,"^U",253,536870918]],["^15",[259,"^;","~u655b7377-4b53-4715-89f8-b229ab6562ad",536870918]],["^15",[263,"^3","- A branch is simply a pointer to a [[Commit]].\n  Commits chain up to form a [[Commit History]], so the branch history is just the commit history for the commit pointed to by the branch.\n- Creating a new branch\n  \n  ```bash\n  git branch mybranch\n  ```\n  creates a new branch ``myBranch`` at the commit the [[HEAD]] is pointing to.\n- Branch forcing\n  Forcibly moves a branch pointer to point to a given [[Commit]] or if given a branch, then its latest commit.\n  Syntax:\n  ``git branch -f <branchName> <commit/branchName>`` \n  \n  For ex.:\n  For this [[Commit History]],\n  ![image.png](../assets/image_1693120775086_0.png)\n  \n  ```bash\n  git branch -f main C2\n  ```\n  will move branch ``main`` to ``C2``.\n-",536870918]],["^15",[263,"^17",1700492151452,536870918]],["^15",[263,"^Z","Git/pages/Branch.md",536870918]],["^15",[264,"^K",1700492151471,536870918]],["^15",[264,"^[",263,536870918]],["^15",[264,"^@",false,536870918]],["^15",[264,"^Y","branch",536870918]],["^15",[264,"^11","Branch",536870918]],["^15",[264,"^B",1700492151471,536870918]],["^15",[264,"^;","~u655b7377-c5a2-4ed6-ba07-121154fd7bb6",536870918]],["^15",[265,"^K",1700492151452,536870918]],["^15",[265,"^@",false,536870918]],["^15",[265,"^Y","commit history",536870918]],["^15",[265,"^11","Commit History",536870918]],["^15",[265,"^B",1700492151452,536870918]],["^15",[265,"^;","~u655b7377-19b7-4223-a52c-aa9c3a01226b",536870918]],["^15",[266,"^K",1700492151483,536870918]],["^15",[266,"^[",272,536870918]],["^15",[266,"^@",false,536870918]],["^15",[266,"^Y","commit",536870918]],["^15",[266,"^11","Commit",536870918]],["^15",[266,"^B",1700492151483,536870918]],["^15",[266,"^;","~u655b7377-5803-44ce-9742-b43b9d1af9ed",536870918]],["^15",[267,"^K",1700492151471,536870918]],["^15",[267,"^@",false,536870918]],["^15",[267,"^Y","head",536870918]],["^15",[267,"^11","HEAD",536870918]],["^15",[267,"^B",1700492151471,536870918]],["^15",[267,"^;","~u655b7377-947e-4331-931e-4ed05f274d2b",536870918]],["^15",[268,"^Q","A branch is simply a pointer to a [[Commit]].\nCommits chain up to form a [[Commit History]], so the branch history is just the commit history for the commit pointed to by the branch.",536870918]],["^15",[268,"^O","^16",536870918]],["^15",[268,"^F",264,536870918]],["^15",[268,"^X",264,536870918]],["^15",[268,"^V",264,536870918]],["^15",[268,"^U",264,536870918]],["^15",[268,"^U",265,536870918]],["^15",[268,"^U",266,536870918]],["^15",[268,"^H",265,536870918]],["^15",[268,"^H",266,536870918]],["^15",[268,"^;","~u655b7377-38da-40b9-a3fb-00f45be433bc",536870918]],["^15",[269,"^Q","Creating a new branch\n\n```bash\ngit branch mybranch\n```\ncreates a new branch ``myBranch`` at the commit the [[HEAD]] is pointing to.",536870918]],["^15",[269,"^O","^16",536870918]],["^15",[269,"^F",268,536870918]],["^15",[269,"^X",264,536870918]],["^15",[269,"^V",264,536870918]],["^15",[269,"^U",264,536870918]],["^15",[269,"^U",267,536870918]],["^15",[269,"^H",267,536870918]],["^15",[269,"^;","~u655b7377-1c36-4cee-9d22-beacd29fe939",536870918]],["^15",[270,"^Q","Branch forcing\nForcibly moves a branch pointer to point to a given [[Commit]] or if given a branch, then its latest commit.\nSyntax:\n``git branch -f <branchName> <commit/branchName>`` \n\nFor ex.:\nFor this [[Commit History]],\n![image.png](../assets/image_1693120775086_0.png)\n\n```bash\ngit branch -f main C2\n```\nwill move branch ``main`` to ``C2``.",536870918]],["^15",[270,"^O","^16",536870918]],["^15",[270,"^F",269,536870918]],["^15",[270,"^X",264,536870918]],["^15",[270,"^V",264,536870918]],["^15",[270,"^U",264,536870918]],["^15",[270,"^U",265,536870918]],["^15",[270,"^U",266,536870918]],["^15",[270,"^H",265,536870918]],["^15",[270,"^H",266,536870918]],["^15",[270,"^;","~u655b7377-b239-4b0d-bbd9-60765c03bc7b",536870918]],["^15",[271,"^Q","",536870918]],["^15",[271,"^O","^16",536870918]],["^15",[271,"^F",270,536870918]],["^15",[271,"^X",264,536870918]],["^15",[271,"^V",264,536870918]],["^15",[271,"^U",264,536870918]],["^15",[271,"^;","~u655b7377-9bb7-4679-9c62-d0bcc67cb805",536870918]],["^15",[272,"^3","- A commit is a snapshot of all the tracked files, it basically contains the delta (change) made on the files from the previous commit. This way the commits are light. These commits are stored in a history.\n  \n  A sample git repo’s history looks like so\n  ![image.png](../assets/image_1693120229151_0.png)\n  \n  Here the local [[Branch]] ``main`` is on ``C2`` commit which is the child of ``C1`` which is the child of ``C0``.\n  ``C0``, ``C1`` and ``C2`` are the the commit hashes, they are automatically generated.\n  \n  ```bash\n  git commit -m Yo \n  ```\n  \n  will commit another commit with message ``Yo`` to local [[Branch]] main, which is at ``C2`` right now, so maybe the next hash will be ``C3`` and it will be the child of ``C2``.\n- Amend\n  \n  ```bash\n  git commit --amend\n  ```\n  \n  Creates a new commit and puts it below the parent of current [[HEAD]] then makes [[HEAD]] point to it thereby replacing the old commit in the [[Commit Graph]].\n  In other words,  ``amend`` _edits_ or rather, _replaces_ the current commit with a slightly modified commit.\n  \n  For ex.:\n  ![image.png](../assets/image_1693120468817_0.png)\n  In this commit chain, if [[HEAD]] is at ``newImage`` [[Branch]] and we do\n  ```bash\n  git commit --amend\n  ```\n  Then it creates this graph\n  ![image.png](../assets/image_1693120505720_0.png)\n-",536870918]],["^15",[272,"^17",1700492151472,536870918]],["^15",[272,"^Z","Git/pages/Commit.md",536870918]],["^15",[273,"^K",1700492151472,536870918]],["^15",[273,"^@",false,536870918]],["^15",[273,"^Y","commit graph",536870918]],["^15",[273,"^11","Commit Graph",536870918]],["^15",[273,"^B",1700492151472,536870918]],["^15",[273,"^;","~u655b7377-35a1-43c3-9aa5-0272a5a5d412",536870918]],["^15",[274,"^Q","A commit is a snapshot of all the tracked files, it basically contains the delta (change) made on the files from the previous commit. This way the commits are light. These commits are stored in a history.\n\nA sample git repo’s history looks like so\n![image.png](../assets/image_1693120229151_0.png)\n\nHere the local [[Branch]] ``main`` is on ``C2`` commit which is the child of ``C1`` which is the child of ``C0``.\n``C0``, ``C1`` and ``C2`` are the the commit hashes, they are automatically generated.\n\n```bash\ngit commit -m Yo \n```\n\nwill commit another commit with message ``Yo`` to local [[Branch]] main, which is at ``C2`` right now, so maybe the next hash will be ``C3`` and it will be the child of ``C2``.",536870918]],["^15",[274,"^O","^16",536870918]],["^15",[274,"^F",266,536870918]],["^15",[274,"^X",266,536870918]],["^15",[274,"^V",266,536870918]],["^15",[274,"^U",264,536870918]],["^15",[274,"^U",266,536870918]],["^15",[274,"^H",264,536870918]],["^15",[274,"^;","~u655b7377-cd69-4cb5-bf27-6caeed7a09c5",536870918]],["^15",[275,"^Q","Amend\n\n```bash\ngit commit --amend\n```\n\nCreates a new commit and puts it below the parent of current [[HEAD]] then makes [[HEAD]] point to it thereby replacing the old commit in the [[Commit Graph]].\nIn other words,  ``amend`` _edits_ or rather, _replaces_ the current commit with a slightly modified commit.\n\nFor ex.:\n![image.png](../assets/image_1693120468817_0.png)\nIn this commit chain, if [[HEAD]] is at ``newImage`` [[Branch]] and we do\n```bash\ngit commit --amend\n```\nThen it creates this graph\n![image.png](../assets/image_1693120505720_0.png)",536870918]],["^15",[275,"^O","^16",536870918]],["^15",[275,"^F",274,536870918]],["^15",[275,"^X",266,536870918]],["^15",[275,"^V",266,536870918]],["^15",[275,"^U",264,536870918]],["^15",[275,"^U",266,536870918]],["^15",[275,"^U",267,536870918]],["^15",[275,"^U",273,536870918]],["^15",[275,"^H",264,536870918]],["^15",[275,"^H",267,536870918]],["^15",[275,"^H",273,536870918]],["^15",[275,"^;","~u655b7377-5ad4-496f-a3a9-ef938f069663",536870918]],["^15",[276,"^Q","",536870918]],["^15",[276,"^O","^16",536870918]],["^15",[276,"^F",275,536870918]],["^15",[276,"^X",266,536870918]],["^15",[276,"^V",266,536870918]],["^15",[276,"^U",266,536870918]],["^15",[276,"^;","~u655b7377-fd86-4c47-8e45-5c8b18ea2546",536870918]],["^15",[277,"^3","- Git is a *FOSS* Distributed Version Control System. It basically tracks changes in files and stores those changes and the files in a [[Remote Repository]]. \n  Famous repositories are [Github](www.github.com), [Gitlab](www.gitlab.com) etc.\n- [[Commit]]",536870918]],["^15",[277,"^17",1700492151483,536870918]],["^15",[277,"^Z","Git/pages/Git.md",536870918]],["^15",[278,"^K",1700492151483,536870918]],["^15",[278,"^[",277,536870918]],["^15",[278,"^@",false,536870918]],["^15",[278,"^Y","git",536870918]],["^15",[278,"^11","Git",536870918]],["^15",[278,"^B",1700492151483,536870918]],["^15",[278,"^;","~u655b7377-6d3c-4ea3-9c3d-dce0270cf129",536870918]],["^15",[279,"^K",1700492151483,536870918]],["^15",[279,"^@",false,536870918]],["^15",[279,"^Y","remote repository",536870918]],["^15",[279,"^11","Remote Repository",536870918]],["^15",[279,"^B",1700492151483,536870918]],["^15",[279,"^;","~u655b7377-1e5d-4dfe-be21-3f1cfd59dd10",536870918]],["^15",[280,"^Q","Git is a *FOSS* Distributed Version Control System. It basically tracks changes in files and stores those changes and the files in a [[Remote Repository]]. \nFamous repositories are [Github](www.github.com), [Gitlab](www.gitlab.com) etc.",536870918]],["^15",[280,"^O","^16",536870918]],["^15",[280,"^F",278,536870918]],["^15",[280,"^X",278,536870918]],["^15",[280,"^V",278,536870918]],["^15",[280,"^U",278,536870918]],["^15",[280,"^U",279,536870918]],["^15",[280,"^H",279,536870918]],["^15",[280,"^;","~u655b7377-926b-4b36-9f8d-525c35f3b4a0",536870918]],["^15",[281,"^Q","[[Commit]]",536870918]],["^15",[281,"^O","^16",536870918]],["^15",[281,"^F",280,536870918]],["^15",[281,"^X",278,536870918]],["^15",[281,"^V",278,536870918]],["^15",[281,"^U",266,536870918]],["^15",[281,"^U",278,536870918]],["^15",[281,"^H",266,536870918]],["^15",[281,"^;","~u655b7377-4f7e-4b0a-ad70-ac1fd3943906",536870918]],["^15",[282,"^3","- This [[HTML]] tag allows importing JS code into the HTML document, which is how the page can then execute the code.\n- ``defer`` script\n  [[Defer]]rs the script loading.\n  The script is loaded in the background and the rest of the [[HTML]] document doesn't wait for it. Then when the DOM is built and ready, just before the ``DOMContentLoaded`` [[Browser Event]], the deferred scripts are executed. The event waits for these scripts to finish loading and executing and then finally triggers.\n  \n  That is, the order of loading and execution is\n  [[HTML]] Document is loaded\n  DOM is loaded\n  Deferred Scripts are loaded parallely to each other, but executed in their relative order on the Document.\n  ``DOMContentLoaded`` event is triggered\n  \n  For ex.:\n  ```html\n  <script defer src=\"https://javascript.info/article/script-async-defer/long.js\"></script>\n  ```\n  This attribute is only valid on external scripts.\n- ``Async`` script\n  If a script tag uses this attribute then its execution is independent from the rest of the [[HTML]] page , it can even be loaded and executed before the page is fully loaded. \n  \n  The script must be independent of the rest of the scripts and the page.\n  \n  This only works for external scripts, meaning scripts that are imported from an src attribute\n  or if the script is a [[Module]]. In the latter case, if the script imports other modules then it waits until they are loaded so if they are not async then it is basically [[Defer]]red.\n  For ex.:\n  ```html\n  <script async type=\"module\">\n    import {counter} from './analytics.js';\n  \n    counter.count();\n  </script>\n  ```\n  This inline script is ran as soon as ``./analytics.js`` is ready.\n  \n  So async is like the defer attribute but the ``DOMContentLoaded`` event is independent to it as well. \n  \n  Dynamically added scripts (scripts that are added to the [[DOM]] from the JS) behave like async and defer by default.\n-\n- ``nomodule``\n  Older [[Browser]]s that  don't understand ``type= module`` for [[<script>]] ignore the script, but they accept this attribute and so they execute the script. Modern browsers ignore this script.\n  For ex.:\n  ```html\n  <script type=\"module\">\n  //ignored by old browsers\n  </script>\n  <script nomodule>\n  //ignored by new browsers\n  </script>\n  \n  ```\n- ``crossorigin``\n  This attribute is necessary for cross-origin access/[[CORS]], that is when the external script being loaded is on another domain.",536870918]],["^15",[282,"^17",1700492151507,536870918]],["^15",[282,"^Z","JS/pages/%3Cscript%3E.md",536870918]],["^15",[283,"^K",1700492152349,536870918]],["^15",[283,"^[",282,536870918]],["^15",[283,"^@",false,536870918]],["^15",[283,"^Y","<script>",536870918]],["^15",[283,"^11","<script>",536870918]],["^15",[283,"^B",1700492152349,536870918]],["^15",[283,"^;","~u655b7379-b93f-4de7-9177-e6b42d52fdbb",536870919]],["^15",[284,"^5",753,536870919]],["^15",[284,"^K",1700492152258,536870918]],["^15",[284,"^[",752,536870919]],["^15",[284,"^@",false,536870918]],["^15",[284,"^Y","html",536870918]],["^15",[284,"^11","HTML",536870918]],["^15",[284,"^?",["^ ","^18",["^19",["Hyper Text Markup Language"]]],536870919]],["^15",[284,"^4",["^ ","^18","Hyper Text Markup Language"],536870919]],["^15",[284,"^B",1700492152258,536870918]],["^15",[284,"^;","~u655b7379-f45e-48a3-899b-b6a43a62ec17",536870919]],["^15",[285,"^K",1700492152349,536870918]],["^15",[285,"^[",399,536870918]],["^15",[285,"^@",false,536870918]],["^15",[285,"^Y","browser event",536870918]],["^15",[285,"^11","Browser Event",536870918]],["^15",[285,"^B",1700492152349,536870918]],["^15",[285,"^;","~u655b7379-606f-41d4-b01b-74825d40ddab",536870919]],["^15",[286,"^K",1700492151504,536870918]],["^15",[286,"^@",false,536870918]],["^15",[286,"^Y","defer",536870918]],["^15",[286,"^11","Defer",536870918]],["^15",[286,"^B",1700492151504,536870918]],["^15",[286,"^;","~u655b7379-bfe0-4c8d-b394-c2ad250d2c27",536870919]],["^15",[287,"^K",1700492151615,536870918]],["^15",[287,"^[",1723,536870952]],["^15",[287,"^@",false,536870918]],["^15",[287,"^Y","module",536870918]],["^15",[287,"^11","Module",536870918]],["^15",[287,"^B",1700492151615,536870918]],["^15",[287,"^;","~u656462fe-a44f-49ae-b458-6bc5ab9a7665",536870956]],["^15",[288,"^5",537,536870918]],["^15",[288,"^K",1700492152317,536870918]],["^15",[288,"^[",536,536870918]],["^15",[288,"^@",false,536870918]],["^15",[288,"^Y","dom",536870918]],["^15",[288,"^11","DOM",536870918]],["^15",[288,"^?",["^ ","^18",["^19",["Document Object Model"]]],536870918]],["^15",[288,"^4",["^ ","^18","Document Object Model"],536870918]],["^15",[288,"^B",1700492152317,536870918]],["^15",[288,"^;","~u655b7379-f0e0-441d-b42a-0976bf4d5e4d",536870919]],["^15",[289,"^K",1700492152360,536870918]],["^15",[289,"^[",421,536870918]],["^15",[289,"^@",false,536870918]],["^15",[289,"^Y","browser",536870918]],["^15",[289,"^11","Browser",536870918]],["^15",[289,"^B",1700492152360,536870918]],["^15",[289,"^;","~u655b7379-5815-4a7b-a8b8-908c87c850e0",536870919]],["^15",[290,"^K",1700492151785,536870918]],["^15",[290,"^[",427,536870918]],["^15",[290,"^@",false,536870918]],["^15",[290,"^Y","cors",536870918]],["^15",[290,"^11","CORS",536870918]],["^15",[290,"^B",1700492151785,536870918]],["^15",[290,"^;","~u655b7379-9e14-42a8-a507-022ab89fd3c6",536870919]],["^15",[291,"^Q","This [[HTML]] tag allows importing JS code into the HTML document, which is how the page can then execute the code.",536870918]],["^15",[291,"^O","^16",536870918]],["^15",[291,"^F",283,536870918]],["^15",[291,"^X",283,536870918]],["^15",[291,"^V",283,536870918]],["^15",[291,"^U",283,536870918]],["^15",[291,"^U",284,536870918]],["^15",[291,"^H",284,536870918]],["^15",[291,"^;","~u655b7377-3362-4fd8-b177-f91c40b82cb8",536870918]],["^15",[292,"^Q","~``defer`` script\n[[Defer]]rs the script loading.\nThe script is loaded in the background and the rest of the [[HTML]] document doesn't wait for it. Then when the DOM is built and ready, just before the ``DOMContentLoaded`` [[Browser Event]], the deferred scripts are executed. The event waits for these scripts to finish loading and executing and then finally triggers.\n\nThat is, the order of loading and execution is\n[[HTML]] Document is loaded\nDOM is loaded\nDeferred Scripts are loaded parallely to each other, but executed in their relative order on the Document.\n``DOMContentLoaded`` event is triggered\n\nFor ex.:\n```html\n<script defer src=\"https://javascript.info/article/script-async-defer/long.js\"></script>\n```\nThis attribute is only valid on external scripts.",536870918]],["^15",[292,"^O","^16",536870918]],["^15",[292,"^F",291,536870918]],["^15",[292,"^X",283,536870918]],["^15",[292,"^V",283,536870918]],["^15",[292,"^U",283,536870918]],["^15",[292,"^U",284,536870918]],["^15",[292,"^U",285,536870918]],["^15",[292,"^U",286,536870918]],["^15",[292,"^H",284,536870918]],["^15",[292,"^H",285,536870918]],["^15",[292,"^H",286,536870918]],["^15",[292,"^;","~u655b7377-6828-4ffb-87be-d8d290486df6",536870918]],["^15",[293,"^Q","~``Async`` script\nIf a script tag uses this attribute then its execution is independent from the rest of the [[HTML]] page , it can even be loaded and executed before the page is fully loaded. \n\nThe script must be independent of the rest of the scripts and the page.\n\nThis only works for external scripts, meaning scripts that are imported from an src attribute\nor if the script is a [[Module]]. In the latter case, if the script imports other modules then it waits until they are loaded so if they are not async then it is basically [[Defer]]red.\nFor ex.:\n```html\n<script async type=\"module\">\n  import {counter} from './analytics.js';\n\n  counter.count();\n</script>\n```\nThis inline script is ran as soon as ``./analytics.js`` is ready.\n\nSo async is like the defer attribute but the ``DOMContentLoaded`` event is independent to it as well. \n\nDynamically added scripts (scripts that are added to the [[DOM]] from the JS) behave like async and defer by default.",536870918]],["^15",[293,"^O","^16",536870918]],["^15",[293,"^F",292,536870918]],["^15",[293,"^X",283,536870918]],["^15",[293,"^V",283,536870918]],["^15",[293,"^U",283,536870918]],["^15",[293,"^U",284,536870918]],["^15",[293,"^U",286,536870918]],["^15",[293,"^U",287,536870918]],["^15",[293,"^U",288,536870918]],["^15",[293,"^H",284,536870918]],["^15",[293,"^H",286,536870918]],["^15",[293,"^H",287,536870918]],["^15",[293,"^H",288,536870918]],["^15",[293,"^;","~u655b7377-0230-40c4-95f9-65e11accf237",536870918]],["^15",[294,"^Q","",536870918]],["^15",[294,"^O","^16",536870918]],["^15",[294,"^F",293,536870918]],["^15",[294,"^X",283,536870918]],["^15",[294,"^V",283,536870918]],["^15",[294,"^U",283,536870918]],["^15",[294,"^;","~u655b7377-5e7e-4d47-a04e-911db11a10ef",536870918]],["^15",[295,"^Q","~``nomodule``\nOlder [[Browser]]s that  don't understand ``type= module`` for [[<script>]] ignore the script, but they accept this attribute and so they execute the script. Modern browsers ignore this script.\nFor ex.:\n```html\n<script type=\"module\">\n//ignored by old browsers\n</script>\n<script nomodule>\n//ignored by new browsers\n</script>\n\n```",536870918]],["^15",[295,"^O","^16",536870918]],["^15",[295,"^F",294,536870918]],["^15",[295,"^X",283,536870918]],["^15",[295,"^V",283,536870918]],["^15",[295,"^U",283,536870918]],["^15",[295,"^U",289,536870918]],["^15",[295,"^H",283,536870918]],["^15",[295,"^H",289,536870918]],["^15",[295,"^;","~u655b7377-318d-4fcb-b4f7-4afbff01ca37",536870918]],["^15",[296,"^Q","~``crossorigin``\nThis attribute is necessary for cross-origin access/[[CORS]], that is when the external script being loaded is on another domain.",536870918]],["^15",[296,"^O","^16",536870918]],["^15",[296,"^F",295,536870918]],["^15",[296,"^X",283,536870918]],["^15",[296,"^V",283,536870918]],["^15",[296,"^U",283,536870918]],["^15",[296,"^U",290,536870918]],["^15",[296,"^H",290,536870918]],["^15",[296,"^;","~u655b7377-3f06-4012-8af8-556a5ff94bfd",536870918]],["^15",[297,"^3","- This is a special data structure in JS.\n  ```js\n  let x = new Array();\n  let y= []; \n  ```\n  are the 2 syntaxes to create an Array.\n  \n  It is still just an [[Object]], just quite optimized by the JS engine.\n- 0-indexed.\n- Access is the same with ``<array obj>[<int>]`` as in [[C++]], but it doesn't support going from the end using negative int value. The ``.at(<int>)`` method is the same as ``[ ]`` but also supports indexing from the right end.\n- For size we have ``.length``.\n  However, it doesn't give the actual count of the values in the array, just the max. index + 1.\n  For ex.:\n  ```js\n  let fruits = [];\n  fruits[123] = \"Apple\";\n  \n  fruits.length; // 124\n  ```\n  using Array as an Object we have broken ``length`` here.\n  \n  Similarly, we can modify the length property directly and that works as well.\n- Arrays in JS are not homogenous, so they can hold values of any type and any element can be any type, even [[Object]]s\n- Stack/Queue like methods\n  ``.push(<val>)``: Push an element to the end of an array\n  ``.pop()``: Get an element from the end of an array and remove it\n  ``.shift()``: Get an element from the front and remove it\n  ``.unshift(<val>)``: Push an element to the front.\n  \n  Yes shift and unshift have a TC of O(n).\n- Unlike an [[Object]], Arrays are special as the engine performs various optimizations with this Object such as storing all elements in contiguous memory locations.\n- Arrays can still be used like an [[Object]], however it is unadvised to do so as it breaks various optimizations on them.\n- for..of [[Loop]] works with Array. We can use for..in too but it is not optimized for looping over arrays and also visits internal properties of the array Object. Arrays implement [[Iterable]]s so they work directly with for..of.\n  \n  ``.forEach(<func>(item,index,array)`` \n  For each element of the array, call the [[Function]] and pass it the given 3 items.\n  For ex.:\n  ```js\n  let x =[1,2];\n  x.forEach(alert); //passes each element to alert.\n  ```\n  This is also to say, Functions in JS can be passed around like so and JS automatically passes them the arguments.\n- Multi-dimensional arrays work in JS like normal.\n- ``.toString()`` returns a string with comma-separated list of elements.\n  For ex.:\n  ```js\n  alert([1,2] + 1); // \"1,21\"\n  ```\n- Delete an element:\n  We can use ``delete arr[2];`` and it deletes the element but this is an [[Object]] way of deletion and is hence unrecommended, also it doesn't modify the length of the array and if we access the element we get [[undefined]].\n  \n  Alternatively, we can use ``.splice(<start>, <deleteCount>);``\n  Removes from given index to given number of elements and shifts the rest of the array. It also accepts negative index.\n  For ex.:\n  ```js\n  let arr = [\"1\",\"2\",\"3\"];\n  arr.splice(1,1);\n  console.log(arr); //prints 1,3\n  ```\n- We can also use ``.splice()`` to insert elements at a given index.\n  For ex.:\n  ```js\n  let arr = [\"1\",\"2\",\"3\"];\n  arr.splice(1,0, \"a\", 3);\n  console.log(arr); //prints 1,2,3,a,3\n  ```\n- ``.slice(<optional start>, <optional end>)`` returns an array from an array from start (inclusive) to end (exclusive).\n- Concatenation\n  ``.concat(<arg1>,<arg2>...)`` adds given element to the array. If the arg is an array, or more specifically is an [[Object]] with a [[Symbol]] property Symbol.isConcatSpreadable with value ``true`` then all the elements/values from K:V pairs added to the array except some special ones like ``length``.\n  For ex.:\n  ```js\n  let x =[1,2];\n  x.concat(2,4); //ok, makes x 1,2,2,4\n  x.concat([2,3]); //1,2,2,4,2,3\n  \n  let y= {\n   0: \"yo\",\n   1: \"noo\",\n   [Symbol.isConcatSpreadable]: true,\n   length: 2,\n  };\n  \n  x.concat(y); //ok, 1,2,2,4,2,3,\"yo\", \"noo\"\n  ```\n- Searching an element:\n  The usual ``.indexOf()/.lastIndexOf()/.includes()/.find()/.findIndex()/.findLastIndex()/.filter()`` etc.\n- ``.map(<func>(item,index,array))`` Returns an array after applying the given function to the item and getting its return value.\n  \n  Also passes ``this`` to the func.\n- ``.reverse()`` to modify the array and reverse its elements.\n- ``.join(<optional str>)`` Joins an array and returns a [[String]] with the optional string used to specify where each element was joined.\n- ``.sort(<optional func>(a,b))`` modify an array by sorting all elements. Optional func is custom comparator.\n- ``.reduce(<func>(accumulatedValue, item, index, array), <optional initial value>)`` to reduce an array.\n  Similarly we have ``.reduceRight(...)`` which goes from right end to the left end.\n  Also passes ``this`` to the func.\n- [[typeOf]] doesn't work with arrays, it returns ``Object``. \n  We use ``Array.isArray(<obj>)`` instead.\n- ``Array.from(<obj>, <optional mapping function>(item), <this arg>)`` Takes an object and returns an Array Object from it. it takes the value of every key in the Object except a few special properties such as ``length``, also making it an [[Iterable]] in the process. The custom mapping function takes each value and can process it and return a new value.\n- Since an Array is built on an [[Object]], a variable comparing one Array to another variable compares the reference and not the individual elements.",536870918]],["^15",[297,"^17",1700492151543,536870918]],["^15",[297,"^Z","JS/pages/Array.md",536870918]],["^15",[298,"^K",1700492152311,536870918]],["^15",[298,"^[",1029,536870919]],["^15",[298,"^@",false,536870918]],["^15",[298,"^Y","typeof",536870918]],["^15",[298,"^11","typeOf",536870918]],["^15",[298,"^B",1700492152311,536870918]],["^15",[298,"^;","~u655b7379-10d1-4fa4-91bd-5dc93421d586",536870919]],["^15",[299,"^K",1700492152439,536870918]],["^15",[299,"^[",858,536870919]],["^15",[299,"^@",false,536870918]],["^15",[299,"^Y","object",536870918]],["^15",[299,"^11","Object",536870918]],["^15",[299,"^B",1700492152439,536870918]],["^15",[299,"^;","~u656462fd-c924-4477-9b96-60848a2db0c4",536870934]],["^15",[300,"^K",1700492152311,536870918]],["^15",[300,"^[",1716,536870950]],["^15",[300,"^@",false,536870918]],["^15",[300,"^Y","loop",536870918]],["^15",[300,"^11","Loop",536870918]],["^15",[300,"^B",1700492152311,536870918]],["^15",[300,"^;","~u656462fe-09ce-4c3d-9963-a7d49b9a90b7",536870950]],["^15",[301,"^K",1700492152348,536870918]],["^15",[301,"^@",false,536870918]],["^15",[301,"^Y","c++",536870918]],["^15",[301,"^11","C++",536870918]],["^15",[301,"^B",1700492152348,536870918]],["^15",[301,"^;","~u655b7379-c9c7-4c61-b344-691e4651d593",536870919]],["^15",[302,"^K",1700492152308,536870918]],["^15",[302,"^[",960,536870919]],["^15",[302,"^@",false,536870918]],["^15",[302,"^Y","symbol",536870918]],["^15",[302,"^11","Symbol",536870918]],["^15",[302,"^B",1700492152308,536870918]],["^15",[302,"^;","~u655b7379-fbf8-4d6d-80c3-7b49e51ddbeb",536870919]],["^15",[303,"^K",1700492152435,536870918]],["^15",[303,"^[",1033,536870919]],["^15",[303,"^@",false,536870918]],["^15",[303,"^Y","undefined",536870918]],["^15",[303,"^11","undefined",536870918]],["^15",[303,"^B",1700492152435,536870918]],["^15",[303,"^;","~u655b7379-bb9c-4495-a79e-610e66af22cf",536870919]],["^15",[304,"^K",1700492152439,536870918]],["^15",[304,"^[",767,536870919]],["^15",[304,"^@",false,536870918]],["^15",[304,"^Y","iterable",536870918]],["^15",[304,"^11","Iterable",536870918]],["^15",[304,"^B",1700492152439,536870918]],["^15",[304,"^;","~u656462fe-07ef-4ddb-b424-16d6f3a3f879",536870950]],["^15",[305,"^K",1700492152436,536870918]],["^15",[305,"^[",1692,536870940]],["^15",[305,"^@",false,536870918]],["^15",[305,"^Y","array",536870918]],["^15",[305,"^11","Array",536870918]],["^15",[305,"^B",1700492152436,536870918]],["^15",[305,"^;","~u656462fd-2cd9-470d-b3e0-f4f210d65e3d",536870946]],["^15",[323,"^Q","Fixed-size, single-type & immutable\nSyntax is ``<let/const> <mutability>: [<type>; <size n>]= [<elem1>, ..., <elem n>]``\nFor ex.:\n```rust\nlet arr: [i32;3]= [1,2,3];\nlet x= arr[0]; //to access\n```\nThe type and size can be omitted, and it is inferred.",536870940]],["^15",[323,"^O","^16",536870918]],["^15",[323,"^F",305,536870918]],["^15",[323,"^X",305,536870918]],["^15",[323,"^V",305,536870918]],["^15",[323,"^U",299,536870918]],["^15",[323,"^U",305,536870918]],["^15",[323,"^;","~u655b7377-3c2f-4d40-8fae-8302f0aaedf9",536870918]],["^15",[330,"^3","- This [[Class]] provides access to a fixed contiguous <given length bytes> area in the memory for storing raw binary data directly. It has nothing to do with [[Array]]. \n  \n  To create an ArrayBuffer, we can use ``new ArrayBuffer(<size>)``, this reserves a fixed given no. of bytes in the memory and fills the region with 0s.\n- To modify data in an ArrayBuffer, we need to define how to parse the given byte array\n  \n  ![image.png](../assets/image_1688103104914_0.png)\n  These classes are called ``View`` Classes or ``TypedArray``s ([spec](https://tc39.github.io/ecma262/#sec-typedarray-objects)).\n  \n  These are the classes that can get/set the Arraybuffer's contents, like ``UInt8Array`` reads each byte individually as a [[Number]] (the name says, read 8 bits as an unsigned int).\n  \n  Each index in the ArrayBuffer is a byte, so the possible values are $$2^8$$ as a byte has 8 bits, so 0 to 255. If we assign any value greater than the allowed value for an index, it wraps around.\n  \n  For ex.:\n  \n  ```js\n  let buffer= new ArrayBuffer(16);\n  let view= new UInt8Array(buffer);\n  console.log(view.length); //prints 16, for 16 locations to store stuff\n  console.log(view.byteLength); //the total size in bytes\n  view[0]=2;\n  \n  for(let num of view){\n   console.log(num); //prints 2 then prints 0, 15 times\n  }\n  ```\n  * These are the TypedArrays\n  ``Uint8Array``, ``Uint16Array``, ``Uint32Array`` \n  ``Uint8ClampedArray`` : Doesn't wrap around but clamps, i.e., if value >255, it stores 255, similarly any value <0 stores 0.\n  ``Int8Array``, ``Int16Array``, ``Int32Array``\n  ``Float32Array``, ``Float64Array``\n  \n  \n  * There's 5 variants of the TypedArray's arguments\n  ```js\n  new TypedArray(buffer, [byteOffset], [length]); //where \"TypedArray\" can be any of Int8Array,UInt8Array etc.\n  new TypedArray(object); //the object can be an Array too like new Int8Array([0,1,2,5]);\n  new TypedArray(typedArray);\n  new TypedArray(length);\n  new TypedArray();\n  ```\n  There's no class called TypedArray, this is just a term for the View classes.\n  This is also to say, a TypedArray can create a buffer if it doesn't already exist and then provide access over it.\n  \n  * TypedArrays are just views over the ArrayBuffer, they can't delete a region or add new memory (nor can ArrayBuffer) etc.\n  They can do other things like map, reduce, find etc.\n  \n  * DataView\n  This is a bit more flexible View over the ArrayBuffer, hence called an ``Untyped view``.\n  We can create an Object with ``new DataView(buffer, [byteOffset], [byteLength])`` where the buffer has to be created and assigned explicitly.\n  \n  For ex.:\n  ```js\n  \n  let buffer = new Uint8Array([255, 255, 255, 255]).buffer;\n  \n  let dataView = new DataView(buffer);\n  \n  console.log( dataView.getUint8(0) ); // 255\n  \n  console.log( dataView.getUint16(0) ); // 65535 (biggest 16-bit unsigned int)\n  ```\n-\n-",536870918]],["^15",[330,"^17",1700492151561,536870918]],["^15",[330,"^Z","JS/pages/ArrayBuffer.md",536870918]],["^15",[331,"^K",1700492152317,536870918]],["^15",[331,"^[",330,536870918]],["^15",[331,"^@",false,536870918]],["^15",[331,"^Y","arraybuffer",536870918]],["^15",[331,"^11","ArrayBuffer",536870918]],["^15",[331,"^B",1700492152317,536870918]],["^15",[331,"^;","~u655b7378-4431-41a6-8270-acae1d122086",536870918]],["^15",[332,"^K",1700492152435,536870918]],["^15",[332,"^[",454,536870918]],["^15",[332,"^@",false,536870918]],["^15",[332,"^Y","class",536870918]],["^15",[332,"^11","Class",536870918]],["^15",[332,"^B",1700492152435,536870918]],["^15",[332,"^;","~u655b7379-f084-4115-88a4-23b73f785689",536870919]],["^15",[333,"^Q","This [[Class]] provides access to a fixed contiguous <given length bytes> area in the memory for storing raw binary data directly. It has nothing to do with [[Array]]. \n\nTo create an ArrayBuffer, we can use ``new ArrayBuffer(<size>)``, this reserves a fixed given no. of bytes in the memory and fills the region with 0s.",536870918]],["^15",[333,"^O","^16",536870918]],["^15",[333,"^F",331,536870918]],["^15",[333,"^X",331,536870918]],["^15",[333,"^V",331,536870918]],["^15",[333,"^U",305,536870918]],["^15",[333,"^U",331,536870918]],["^15",[333,"^U",332,536870918]],["^15",[333,"^H",305,536870918]],["^15",[333,"^H",332,536870918]],["^15",[333,"^;","~u655b7377-c72a-4cb5-a21d-0f90a9faae7f",536870918]],["^15",[334,"^Q","To modify data in an ArrayBuffer, we need to define how to parse the given byte array\n\n![image.png](../assets/image_1688103104914_0.png)\nThese classes are called ``View`` Classes or ``TypedArray``s ([spec](https://tc39.github.io/ecma262/#sec-typedarray-objects)).\n\nThese are the classes that can get/set the Arraybuffer's contents, like ``UInt8Array`` reads each byte individually as a [[Number]] (the name says, read 8 bits as an unsigned int).\n\nEach index in the ArrayBuffer is a byte, so the possible values are $$2^8$$ as a byte has 8 bits, so 0 to 255. If we assign any value greater than the allowed value for an index, it wraps around.\n\nFor ex.:\n\n```js\nlet buffer= new ArrayBuffer(16);\nlet view= new UInt8Array(buffer);\nconsole.log(view.length); //prints 16, for 16 locations to store stuff\nconsole.log(view.byteLength); //the total size in bytes\nview[0]=2;\n\nfor(let num of view){\n console.log(num); //prints 2 then prints 0, 15 times\n}\n```\n* These are the TypedArrays\n``Uint8Array``, ``Uint16Array``, ``Uint32Array`` \n``Uint8ClampedArray`` : Doesn't wrap around but clamps, i.e., if value >255, it stores 255, similarly any value <0 stores 0.\n``Int8Array``, ``Int16Array``, ``Int32Array``\n``Float32Array``, ``Float64Array``\n\n\n* There's 5 variants of the TypedArray's arguments\n```js\nnew TypedArray(buffer, [byteOffset], [length]); //where \"TypedArray\" can be any of Int8Array,UInt8Array etc.\nnew TypedArray(object); //the object can be an Array too like new Int8Array([0,1,2,5]);\nnew TypedArray(typedArray);\nnew TypedArray(length);\nnew TypedArray();\n```\nThere's no class called TypedArray, this is just a term for the View classes.\nThis is also to say, a TypedArray can create a buffer if it doesn't already exist and then provide access over it.\n\n* TypedArrays are just views over the ArrayBuffer, they can't delete a region or add new memory (nor can ArrayBuffer) etc.\nThey can do other things like map, reduce, find etc.\n\n* DataView\nThis is a bit more flexible View over the ArrayBuffer, hence called an ``Untyped view``.\nWe can create an Object with ``new DataView(buffer, [byteOffset], [byteLength])`` where the buffer has to be created and assigned explicitly.\n\nFor ex.:\n```js\n\nlet buffer = new Uint8Array([255, 255, 255, 255]).buffer;\n\nlet dataView = new DataView(buffer);\n\nconsole.log( dataView.getUint8(0) ); // 255\n\nconsole.log( dataView.getUint16(0) ); // 65535 (biggest 16-bit unsigned int)\n```",536870918]],["^15",[334,"^O","^16",536870918]],["^15",[334,"^F",333,536870918]],["^15",[334,"^X",331,536870918]],["^15",[334,"^V",331,536870918]],["^15",[334,"^U",162,536870918]],["^15",[334,"^U",331,536870918]],["^15",[334,"^H",162,536870918]],["^15",[334,"^;","~u655b7377-86e7-4a3f-8d11-9c1644bb6f2d",536870918]],["^15",[335,"^Q","",536870918]],["^15",[335,"^O","^16",536870918]],["^15",[335,"^F",334,536870918]],["^15",[335,"^X",331,536870918]],["^15",[335,"^V",331,536870918]],["^15",[335,"^U",331,536870918]],["^15",[335,"^;","~u655b7377-0d6c-4655-ae98-4041b344bc6f",536870918]],["^15",[336,"^Q","",536870918]],["^15",[336,"^O","^16",536870918]],["^15",[336,"^F",335,536870918]],["^15",[336,"^X",331,536870918]],["^15",[336,"^V",331,536870918]],["^15",[336,"^U",331,536870918]],["^15",[336,"^;","~u655b7377-ed82-4d96-a0ea-2172692201a8",536870918]],["^15",[337,"^3","alias:: Async\n\n- JS supports async, albeit weakly. This is because JS is a single-threaded language. That is, all JS code in a script can only ever execute on a single thread. Various [[Optimization]]s to the execution and how [[V8]] works ensure the execution remains smooth but it remains on a single thread per process. \n  Node introduces the concept of [[Web Worker]]s which do multi-threading but that is done by spawning other processes, each process has an overhead associated with it, and a thread, this thread is then monitored by a main thread in another process and that is how multi-threading is achieved but true multi-threading is there in JS (or it is, idk yet).\n- ``Callbacks``\n  Normal [[Function]]s that are passed to other functions and are then executed from these functions when they are finished processing whatever they had. \n  This approach is simple enough but it leads to a huge bloat named ``Callback Hell`` as we can have multiple levels of nesting with these and if they also include something like [[Error]] Handling, it adds complexity.\n- ``Promise``\n  JS natively supports promises, these are like so\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // executor (the producing code, \"singer\")\n  });\n  ```\n  The function passed to the Promise is called the ``executor`` and it accepts 2 callback [[Function]]s, ``resolve(value)`` and ``reject(error)``, both of these are implicitly passed by the ``Promise`` [[Class]]. However, executor has to call these with the result, if it was a success the ``resolve(...)`` should be called and for an error, ``reject(...)``. \n  \n  The executor is ran automatically by the Promise.\n  ![image.png](../assets/image_1686945239138_0.png)\n  For ex.:\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    resolve(\"done\");\n  \n    reject(new Error(\"…\")); // ignored\n    setTimeout(() => resolve(\"…\")); // ignored\n  });\n  ```\n  \n  \n  * The Promise is ran automatically so it has 3 states, \n   ``Pending``\n  ``Successful``\n  ``Failed``\n  and the success or failure is determined by which callback was called by us, either resolve or reject.\n  However, the state can only change once after Pending, so if the executor calls ``resolve(...)`` then the Promise's state is successful and it can't change, even if we call ``reject(...)`` later. However, it will process the rest of the body, it just won't be able to change the state.\n  \n  The result obtained after the executor's execution is the value passed to either the ``resolve(...)`` or ``reject(...)``. Both the result and state are internal properties of the Promise [[Object]].\n  \n  * An executor can call ``..reject(...)`` in 2 ways, either explicitly or it is called implicitly if there's an uncaught [[Error]] in the executor.\n  Similarly, ``return`` also implicitly uses ``.resolve(...)``.\n  \n  * Producer and Consumer\n  The Promise Object is an interface between a producer, which is the executor which produces some result and the consumer is a function that reads this produced value.\n  To consume a promise, we use ``.then(<func1>,<func2>)``, ``.catch(err)``, ``.finally()`` on the Promise' object. These 3 methods are known as ``Promise Handlers``.\n  For ex.:\n  ```js\n  let promise= new Promise(...);\n  promise.then(\n  function(result) {},\n  function(rejectedValue){},\n  ); //And they do as they are named.\n  \n  promise.catch(\n  function(err) { },\n  );\n  \n  promise.finally(\n  function() {\n  ...\n  }\n  );\n  ```\n  For ``.then(...)``, if the state was successful then the first callback is called, otherwise the second. Both are optional.\n  ``.catch(<func>)`` is a shorthand for ``.then(null, <func>)``.\n  ``.finally(<func>)`` is ran despite the state and it is a [[monad]], i.e., it returns the same object back allowing us to passthrough the promise events.\n  For ex.:\n  ```js\n  new Promise(...)\n  .finally(() => {})\n  .then(result=> console.log(result)\n  );\n  ```\n  Here after the Promise is finished, ``.finally(...)`` is ran then ``.then(...)`` is ran.\n  \n  We don't need multiple ``.catch(...)``, or in other words, ``.then(null, rejects)``. if we have a single ``.catch`` in a promise chain, then it's ``reject`` method is used and the error is considered handled. If there are multiple ``.catch`` then the nearest one is used and then the rest of the chain continues.\n  For ex.:\n  ```js\n  new Promise(...)\n  .then(...) //then's without a reject handler\n  .then(...)  //assume this one has an error\n  .then(...) //assume it doesnt have a reject handler too\n  .catch(...) //will be triggered\n  .then(...) //will be executed normally, i.e., the catch didn't halt the chain.\n  ```\n  But the key point is, there must always be a ``reject`` handler at the end using either ``.then`` or ``.catch``, errors that are unhandled crash the whole script in JS and raise an ``unhandledrejection`` [[Browser Event]] in the [[Browser]].\n    \n  \n  * We can have a Promise executed immediately too, such are Promises that have no async code inside them.\n  For ex.:\n  ```js\n  let promise = new Promise(resolve => resolve(\"done!\"));\n  ```\n  Handlers attached to a resolved promise are executed immediately.\n  \n  * Thenable\n  The Promise Constructor and ``.then(<func1>, <func2>)`` handler return a ``Thenable``, this is an Object that also has a ``.then(<func1>, <func2>)``, which also returns a Thenable and so on. The logic is, we can chain these Thenables to process events one after another modularly. \n  It looks like so\n  \n  ```js\n  class X {\n   constructor(value) {\n   this.value= value\n   }\n   then(resolve,reject) {\n    try {\n      return X(resolve(value))\n     } catch(err) {\n      return X(reject(value))\n    }\n   }\n  }\n  \n  let x= new X(2);\n  x.then(\n  function(result) { return 4;}, //result gets 2\n  function(rejectedValue) { } //same\n  ).then(\n   function(result) { return 5;}, //result gets 4 after previous then is finished processing\n   function(rejectedValue) { } //same\n  );\n  //and so on\n  ```\n  The flow looks like so\n  ![image.png](../assets/image_1687009322810_0.png)\n  \n  This is kind of how ``Thenable`` returned by a promise works too, a big difference is that the thenable returned by a Promise is actually just the Promise class itself, this is why its called ``Promise Chain``. \n  Note: Chaining thenables is not the same as assigning multiple ``.then``'s to an object. \n  Each would finish and not recieve value from its predecessor but only the main object,\n  for ex.:\n  ```js\n  ...\n  x.then(..);\n  x.then(...);\n  ```\n  would have a flow like so\n  ![image.png](../assets/image_1687009526218_0.png)\n  \n  Ofc, since thenables just return whatever their callbacks return but wrapped in a Thenable, this means we can return anything, even another Promise which also returns a Thenable\n  For ex.:\n  ```js\n  let x = new Promise(...)\n  .then((result)=> new Promise(...))\n  .then(...);\n  ```\n  works. And works like expected, until the first promise is resolved the first ``.then(...)`` isn't executed and the same for the second one.\n  Kind of like so\n  ![image.png](../assets/image_1687009984701_0.png)\n- Promise API\n  Provides other features to work with Promises.\n  ``Promise.all(<iterable>)``: Takes an [[Iterable]] of executors and processes them all concurrently, when all the executors are finished, then the handlers are executed. Can accept raw values, Promises and normal functions. When any one of the executors fail or reject, all other executors are halted and the rejection passed to the handlers. The value to the resolve handler is also an iterable, of results.\n  ``Promise.allSettled(<iterable>)``: Same as ``.all()``, except doesn't halt and lets all executors finish then passes an [[Object]] to the handlers with results where each result Object is\n  *`{status:\"fulfilled\", value:result}` for successful responses,\n  *`{status:\"rejected\", reason:error}` for errors.\n  Yes, this means, reject isn't called after ``.allSettled()``\n  ``Promise.race(<iterable>)``: Waits as long as the first executor finishes, then immediately halts all others and passes the result to handlers.\n  ``Promise.any(<iterable>)``: Similar to race, but waits as long as an executor with success state is finished. If all executors fail, then an ``AggregateError`` Object is returned with a list of errors.\n  ``Promise.resolve(<func>)`` and ``Promise.reject(<func>)``: Returns a Promise with its state already set at success or failure despite whatever the passed callback function does.\n  \n  Promisification\n  We can turn normal functions into Promises, this is called Promisification and is helpful when when want to turn sync code async.\n  Other than manually writing helper functions that do so, we have [es6-promisify](https://github.com/digitaldesignlabs/es6-promisify) and ``util.promisify`` in Node.\n-\n- Async/Await\n  Using the [[Operator]] ``async`` on a [[Function]] turns its body into an executor of a Promise.\n  The await [[Operator]] is used on a Promise and pauses the execution until the Promise is finished, yes since this pauses the execution, or in other words, suspends the function, it can't be used in the macrotask [[Message Queue]] directly and can only be used inside Promises (or async functions). Then after the Promise is finished, it's returned value is returned by await.\n  For ex.:\n  ```js\n  async function noo() {\n   return 2;\n  }\n  async function yo() { \n   let x = await noo(); //pauses yo until Promise function noo() is finished, then puts 2 in x.\n   return 1; \n  } \n  //is the same as\n  /*\n  new Promise(function(resolve,reject){\n     let x = await noo();\n     resolve(1);\n  });\n  */\n  \n  yo(); // Puts yo() in the microtask queue\n  let x = await noo(); //also works if this script is a Module\n  ```\n  We can ``await`` in the top-level [[Scope]] of [[Module]]s.\n  \n  * async can also be used with methods.\n  * If the Promise being awaited fails with an error or reject, then await rethrows the [[Error]].\n  But since it can only be used in Promises itself, we can ``catch`` it quite easily.\n  For ex.\n  ```js\n  async function yo() {\n    throw new Error();\n  }\n  async function no() {\n    let x = await yo();\n  }\n  no().catch((er)=>{...}) ; //since no() returns a Promise itself, we can use the Thenable of Promise to handle the error.\n  ```\n  We can use a simple ``try{...} catch{...}`` above an await too.\n-",536870918]],["^15",[337,"^17",1700492151615,536870918]],["^15",[337,"^Z","JS/pages/Asynchronous.md",536870918]],["^15",[338,"^K",1700492151614,536870918]],["^15",[338,"^@",false,536870918]],["^15",[338,"^Y","monad",536870918]],["^15",[338,"^11","monad",536870918]],["^15",[338,"^B",1700492151614,536870918]],["^15",[338,"^;","~u655b7377-b9a9-4ad2-89ee-42ec962b6cc8",536870918]],["^15",[339,"^K",1700492152437,536870918]],["^15",[339,"^[",1733,536870956]],["^15",[339,"^@",false,536870918]],["^15",[339,"^Y","operator",536870918]],["^15",[339,"^11","Operator",536870918]],["^15",[339,"^B",1700492152437,536870918]],["^15",[339,"^;","~u656462fe-4e0a-485e-83c1-1a0143141c79",536870960]],["^15",[340,"^5",658,536870918]],["^15",[340,"^K",1700492152347,536870918]],["^15",[340,"^[",1704,536870946]],["^15",[340,"^@",false,536870918]],["^15",[340,"^Y","error",536870918]],["^15",[340,"^11","Error",536870918]],["^15",[340,"^?",["^ ","^18",["^19",["Exception"]]],536870918]],["^15",[340,"^4",["^ ","^18","Exception"],536870918]],["^15",[340,"^B",1700492152347,536870918]],["^15",[340,"^;","~u656462fd-9735-4e5f-8be9-9fcba3bb07b5",536870946]],["^15",[341,"^5",346,536870918]],["^15",[341,"^K",1700492152171,536870918]],["^15",[341,"^@",false,536870918]],["^15",[341,"^Y","async",536870918]],["^15",[341,"^11","Async",536870918]],["^15",[341,"^B",1700492152171,536870918]],["^15",[341,"^;","~u655b7378-a88b-471d-a170-d68dec67a5fb",536870919]],["^15",[342,"^K",1700492151612,536870918]],["^15",[342,"^[",986,536870919]],["^15",[342,"^@",false,536870918]],["^15",[342,"^Y","web worker",536870918]],["^15",[342,"^11","Web Worker",536870918]],["^15",[342,"^B",1700492151612,536870918]],["^15",[342,"^;","~u655b7379-7469-4996-97d9-2c655412f295",536870919]],["^15",[343,"^K",1700492152315,536870918]],["^15",[343,"^[",804,536870919]],["^15",[343,"^@",false,536870918]],["^15",[343,"^Y","message queue",536870918]],["^15",[343,"^11","Message Queue",536870918]],["^15",[343,"^B",1700492152315,536870918]],["^15",[343,"^;","~u655b7379-29d3-4a18-8989-c793e7edfa9a",536870919]],["^15",[344,"^K",1700492151613,536870918]],["^15",[344,"^@",false,536870918]],["^15",[344,"^Y","v8",536870918]],["^15",[344,"^11","V8",536870918]],["^15",[344,"^B",1700492151613,536870918]],["^15",[344,"^;","~u655b7377-2bc2-47a9-a60b-e9dbe7d9d88c",536870918]],["^15",[345,"^K",1700492152438,536870918]],["^15",[345,"^[",1735,536870958]],["^15",[345,"^@",false,536870918]],["^15",[345,"^Y","scope",536870918]],["^15",[345,"^11","Scope",536870918]],["^15",[345,"^B",1700492152438,536870918]],["^15",[345,"^;","~u656462fe-f656-4027-8596-2963c2d74222",536870958]],["^15",[346,"^5",341,536870918]],["^15",[346,"^K",1700492152314,536870918]],["^15",[346,"^[",337,536870918]],["^15",[346,"^@",false,536870918]],["^15",[346,"^Y","asynchronous",536870918]],["^15",[346,"^11","Asynchronous",536870918]],["^15",[346,"^?",["^ ","^18",["^19",["Async"]]],536870918]],["^15",[346,"^4",["^ ","^18","Async"],536870918]],["^15",[346,"^B",1700492152314,536870918]],["^15",[346,"^;","~u655b7379-28ca-4d43-9da3-8dbf042e2164",536870919]],["^15",[347,"^K",1700492151613,536870918]],["^15",[347,"^@",false,536870918]],["^15",[347,"^Y","optimization",536870918]],["^15",[347,"^11","Optimization",536870918]],["^15",[347,"^B",1700492151613,536870918]],["^15",[347,"^;","~u655b7379-b68f-484d-91ca-92f7415ad33d",536870919]],["^15",[348,"^Q","alias:: Async\n\n",536870918]],["^15",[348,"^O","^16",536870918]],["^15",[348,"^1;",["^19",[]],536870918]],["^15",[348,"^F",346,536870918]],["^15",[348,"^X",346,536870918]],["^15",[348,"^V",346,536870918]],["^15",[348,"^U",341,536870918]],["^15",[348,"^U",346,536870918]],["^15",[348,"^:",true,536870918]],["^15",[348,"^?",["^ ","^18",["^19",["Async"]]],536870918]],["^15",[348,"^J",["^18"],536870918]],["^15",[348,"^4",["^ ","^18","Async"],536870918]],["^15",[348,"^H",341,536870918]],["^15",[348,"^;","~u655b7377-dbb9-4091-8a4d-3b1361b0b291",536870918]],["^15",[349,"^Q","JS supports async, albeit weakly. This is because JS is a single-threaded language. That is, all JS code in a script can only ever execute on a single thread. Various [[Optimization]]s to the execution and how [[V8]] works ensure the execution remains smooth but it remains on a single thread per process. \nNode introduces the concept of [[Web Worker]]s which do multi-threading but that is done by spawning other processes, each process has an overhead associated with it, and a thread, this thread is then monitored by a main thread in another process and that is how multi-threading is achieved but true multi-threading is there in JS (or it is, idk yet).",536870918]],["^15",[349,"^O","^16",536870918]],["^15",[349,"^F",348,536870918]],["^15",[349,"^X",346,536870918]],["^15",[349,"^V",346,536870918]],["^15",[349,"^U",342,536870918]],["^15",[349,"^U",344,536870918]],["^15",[349,"^U",346,536870918]],["^15",[349,"^U",347,536870918]],["^15",[349,"^H",342,536870918]],["^15",[349,"^H",344,536870918]],["^15",[349,"^H",347,536870918]],["^15",[349,"^;","~u655b7377-de10-44bc-9656-260c7504b444",536870918]],["^15",[350,"^Q","~``Callbacks``\nNormal [[Function]]s that are passed to other functions and are then executed from these functions when they are finished processing whatever they had. \nThis approach is simple enough but it leads to a huge bloat named ``Callback Hell`` as we can have multiple levels of nesting with these and if they also include something like [[Error]] Handling, it adds complexity.",536870918]],["^15",[350,"^O","^16",536870918]],["^15",[350,"^F",349,536870918]],["^15",[350,"^X",346,536870918]],["^15",[350,"^V",346,536870918]],["^15",[350,"^U",163,536870918]],["^15",[350,"^U",340,536870918]],["^15",[350,"^U",346,536870918]],["^15",[350,"^H",163,536870918]],["^15",[350,"^H",340,536870918]],["^15",[350,"^;","~u655b7377-4512-4a09-aabc-ed6c981341e7",536870918]],["^15",[351,"^Q","~``Promise``\nJS natively supports promises, these are like so\n```js\nlet promise = new Promise(function(resolve, reject) {\n  // executor (the producing code, \"singer\")\n});\n```\nThe function passed to the Promise is called the ``executor`` and it accepts 2 callback [[Function]]s, ``resolve(value)`` and ``reject(error)``, both of these are implicitly passed by the ``Promise`` [[Class]]. However, executor has to call these with the result, if it was a success the ``resolve(...)`` should be called and for an error, ``reject(...)``. \n\nThe executor is ran automatically by the Promise.\n![image.png](../assets/image_1686945239138_0.png)\nFor ex.:\n```js\nlet promise = new Promise(function(resolve, reject) {\n  resolve(\"done\");\n\n  reject(new Error(\"…\")); // ignored\n  setTimeout(() => resolve(\"…\")); // ignored\n});\n```\n\n\n* The Promise is ran automatically so it has 3 states, \n ``Pending``\n``Successful``\n``Failed``\nand the success or failure is determined by which callback was called by us, either resolve or reject.\nHowever, the state can only change once after Pending, so if the executor calls ``resolve(...)`` then the Promise's state is successful and it can't change, even if we call ``reject(...)`` later. However, it will process the rest of the body, it just won't be able to change the state.\n\nThe result obtained after the executor's execution is the value passed to either the ``resolve(...)`` or ``reject(...)``. Both the result and state are internal properties of the Promise [[Object]].\n\n* An executor can call ``..reject(...)`` in 2 ways, either explicitly or it is called implicitly if there's an uncaught [[Error]] in the executor.\nSimilarly, ``return`` also implicitly uses ``.resolve(...)``.\n\n* Producer and Consumer\nThe Promise Object is an interface between a producer, which is the executor which produces some result and the consumer is a function that reads this produced value.\nTo consume a promise, we use ``.then(<func1>,<func2>)``, ``.catch(err)``, ``.finally()`` on the Promise' object. These 3 methods are known as ``Promise Handlers``.\nFor ex.:\n```js\nlet promise= new Promise(...);\npromise.then(\nfunction(result) {},\nfunction(rejectedValue){},\n); //And they do as they are named.\n\npromise.catch(\nfunction(err) { },\n);\n\npromise.finally(\nfunction() {\n...\n}\n);\n```\nFor ``.then(...)``, if the state was successful then the first callback is called, otherwise the second. Both are optional.\n``.catch(<func>)`` is a shorthand for ``.then(null, <func>)``.\n``.finally(<func>)`` is ran despite the state and it is a [[monad]], i.e., it returns the same object back allowing us to passthrough the promise events.\nFor ex.:\n```js\nnew Promise(...)\n.finally(() => {})\n.then(result=> console.log(result)\n);\n```\nHere after the Promise is finished, ``.finally(...)`` is ran then ``.then(...)`` is ran.\n\nWe don't need multiple ``.catch(...)``, or in other words, ``.then(null, rejects)``. if we have a single ``.catch`` in a promise chain, then it's ``reject`` method is used and the error is considered handled. If there are multiple ``.catch`` then the nearest one is used and then the rest of the chain continues.\nFor ex.:\n```js\nnew Promise(...)\n.then(...) //then's without a reject handler\n.then(...)  //assume this one has an error\n.then(...) //assume it doesnt have a reject handler too\n.catch(...) //will be triggered\n.then(...) //will be executed normally, i.e., the catch didn't halt the chain.\n```\nBut the key point is, there must always be a ``reject`` handler at the end using either ``.then`` or ``.catch``, errors that are unhandled crash the whole script in JS and raise an ``unhandledrejection`` [[Browser Event]] in the [[Browser]].\n  \n\n* We can have a Promise executed immediately too, such are Promises that have no async code inside them.\nFor ex.:\n```js\nlet promise = new Promise(resolve => resolve(\"done!\"));\n```\nHandlers attached to a resolved promise are executed immediately.\n\n* Thenable\nThe Promise Constructor and ``.then(<func1>, <func2>)`` handler return a ``Thenable``, this is an Object that also has a ``.then(<func1>, <func2>)``, which also returns a Thenable and so on. The logic is, we can chain these Thenables to process events one after another modularly. \nIt looks like so\n\n```js\nclass X {\n constructor(value) {\n this.value= value\n }\n then(resolve,reject) {\n  try {\n    return X(resolve(value))\n   } catch(err) {\n    return X(reject(value))\n  }\n }\n}\n\nlet x= new X(2);\nx.then(\nfunction(result) { return 4;}, //result gets 2\nfunction(rejectedValue) { } //same\n).then(\n function(result) { return 5;}, //result gets 4 after previous then is finished processing\n function(rejectedValue) { } //same\n);\n//and so on\n```\nThe flow looks like so\n![image.png](../assets/image_1687009322810_0.png)\n\nThis is kind of how ``Thenable`` returned by a promise works too, a big difference is that the thenable returned by a Promise is actually just the Promise class itself, this is why its called ``Promise Chain``. \nNote: Chaining thenables is not the same as assigning multiple ``.then``'s to an object. \nEach would finish and not recieve value from its predecessor but only the main object,\nfor ex.:\n```js\n...\nx.then(..);\nx.then(...);\n```\nwould have a flow like so\n![image.png](../assets/image_1687009526218_0.png)\n\nOfc, since thenables just return whatever their callbacks return but wrapped in a Thenable, this means we can return anything, even another Promise which also returns a Thenable\nFor ex.:\n```js\nlet x = new Promise(...)\n.then((result)=> new Promise(...))\n.then(...);\n```\nworks. And works like expected, until the first promise is resolved the first ``.then(...)`` isn't executed and the same for the second one.\nKind of like so\n![image.png](../assets/image_1687009984701_0.png)",536870918]],["^15",[351,"^O","^16",536870918]],["^15",[351,"^F",350,536870918]],["^15",[351,"^X",346,536870918]],["^15",[351,"^V",346,536870918]],["^15",[351,"^U",163,536870918]],["^15",[351,"^U",285,536870918]],["^15",[351,"^U",289,536870918]],["^15",[351,"^U",299,536870918]],["^15",[351,"^U",332,536870918]],["^15",[351,"^U",338,536870918]],["^15",[351,"^U",340,536870918]],["^15",[351,"^U",346,536870918]],["^15",[351,"^H",163,536870918]],["^15",[351,"^H",285,536870918]],["^15",[351,"^H",289,536870918]],["^15",[351,"^H",299,536870918]],["^15",[351,"^H",332,536870918]],["^15",[351,"^H",338,536870918]],["^15",[351,"^H",340,536870918]],["^15",[351,"^;","~u655b7377-f3aa-4b56-9794-41914d632d03",536870918]],["^15",[352,"^Q","Promise API\nProvides other features to work with Promises.\n``Promise.all(<iterable>)``: Takes an [[Iterable]] of executors and processes them all concurrently, when all the executors are finished, then the handlers are executed. Can accept raw values, Promises and normal functions. When any one of the executors fail or reject, all other executors are halted and the rejection passed to the handlers. The value to the resolve handler is also an iterable, of results.\n``Promise.allSettled(<iterable>)``: Same as ``.all()``, except doesn't halt and lets all executors finish then passes an [[Object]] to the handlers with results where each result Object is\n*`{status:\"fulfilled\", value:result}` for successful responses,\n*`{status:\"rejected\", reason:error}` for errors.\nYes, this means, reject isn't called after ``.allSettled()``\n``Promise.race(<iterable>)``: Waits as long as the first executor finishes, then immediately halts all others and passes the result to handlers.\n``Promise.any(<iterable>)``: Similar to race, but waits as long as an executor with success state is finished. If all executors fail, then an ``AggregateError`` Object is returned with a list of errors.\n``Promise.resolve(<func>)`` and ``Promise.reject(<func>)``: Returns a Promise with its state already set at success or failure despite whatever the passed callback function does.\n\nPromisification\nWe can turn normal functions into Promises, this is called Promisification and is helpful when when want to turn sync code async.\nOther than manually writing helper functions that do so, we have [es6-promisify](https://github.com/digitaldesignlabs/es6-promisify) and ``util.promisify`` in Node.",536870918]],["^15",[352,"^O","^16",536870918]],["^15",[352,"^F",351,536870918]],["^15",[352,"^X",346,536870918]],["^15",[352,"^V",346,536870918]],["^15",[352,"^U",299,536870918]],["^15",[352,"^U",304,536870918]],["^15",[352,"^U",346,536870918]],["^15",[352,"^H",299,536870918]],["^15",[352,"^H",304,536870918]],["^15",[352,"^;","~u655b7377-274d-4cce-8511-3ae28ba7446a",536870918]],["^15",[353,"^Q","",536870918]],["^15",[353,"^O","^16",536870918]],["^15",[353,"^F",352,536870918]],["^15",[353,"^X",346,536870918]],["^15",[353,"^V",346,536870918]],["^15",[353,"^U",346,536870918]],["^15",[353,"^;","~u655b7377-2cc8-4f16-ab1e-65b5821282af",536870918]],["^15",[354,"^Q","Async/Await\nUsing the [[Operator]] ``async`` on a [[Function]] turns its body into an executor of a Promise.\nThe await [[Operator]] is used on a Promise and pauses the execution until the Promise is finished, yes since this pauses the execution, or in other words, suspends the function, it can't be used in the macrotask [[Message Queue]] directly and can only be used inside Promises (or async functions). Then after the Promise is finished, it's returned value is returned by await.\nFor ex.:\n```js\nasync function noo() {\n return 2;\n}\nasync function yo() { \n let x = await noo(); //pauses yo until Promise function noo() is finished, then puts 2 in x.\n return 1; \n} \n//is the same as\n/*\nnew Promise(function(resolve,reject){\n   let x = await noo();\n   resolve(1);\n});\n*/\n\nyo(); // Puts yo() in the microtask queue\nlet x = await noo(); //also works if this script is a Module\n```\nWe can ``await`` in the top-level [[Scope]] of [[Module]]s.\n\n* async can also be used with methods.\n* If the Promise being awaited fails with an error or reject, then await rethrows the [[Error]].\nBut since it can only be used in Promises itself, we can ``catch`` it quite easily.\nFor ex.\n```js\nasync function yo() {\n  throw new Error();\n}\nasync function no() {\n  let x = await yo();\n}\nno().catch((er)=>{...}) ; //since no() returns a Promise itself, we can use the Thenable of Promise to handle the error.\n```\nWe can use a simple ``try{...} catch{...}`` above an await too.",536870918]],["^15",[354,"^O","^16",536870918]],["^15",[354,"^F",353,536870918]],["^15",[354,"^X",346,536870918]],["^15",[354,"^V",346,536870918]],["^15",[354,"^U",163,536870918]],["^15",[354,"^U",287,536870918]],["^15",[354,"^U",339,536870918]],["^15",[354,"^U",340,536870918]],["^15",[354,"^U",343,536870918]],["^15",[354,"^U",345,536870918]],["^15",[354,"^U",346,536870918]],["^15",[354,"^H",163,536870918]],["^15",[354,"^H",287,536870918]],["^15",[354,"^H",339,536870918]],["^15",[354,"^H",340,536870918]],["^15",[354,"^H",343,536870918]],["^15",[354,"^H",345,536870918]],["^15",[354,"^;","~u655b7377-c18b-4300-b32a-a2e0184182ed",536870918]],["^15",[355,"^Q","",536870918]],["^15",[355,"^O","^16",536870918]],["^15",[355,"^F",354,536870918]],["^15",[355,"^X",346,536870918]],["^15",[355,"^V",346,536870918]],["^15",[355,"^U",346,536870918]],["^15",[355,"^;","~u655b7377-cd08-448c-ba79-e488aba4dd44",536870918]],["^15",[356,"^3","- [Babel](https://babeljs.io/)\n-",536870918]],["^15",[356,"^17",1700492151621,536870918]],["^15",[356,"^Z","JS/pages/Babel.md",536870918]],["^15",[357,"^K",1700492151620,536870918]],["^15",[357,"^[",356,536870918]],["^15",[357,"^@",false,536870918]],["^15",[357,"^Y","babel",536870918]],["^15",[357,"^11","Babel",536870918]],["^15",[357,"^B",1700492151620,536870918]],["^15",[357,"^;","~u655b7379-a75b-4649-b72f-add78b7c1cdb",536870919]],["^15",[358,"^Q","[Babel](https://babeljs.io/)",536870918]],["^15",[358,"^O","^16",536870918]],["^15",[358,"^F",357,536870918]],["^15",[358,"^X",357,536870918]],["^15",[358,"^V",357,536870918]],["^15",[358,"^U",357,536870918]],["^15",[358,"^;","~u655b7377-1258-46f4-b3bd-c7c6354054b3",536870918]],["^15",[359,"^Q","",536870918]],["^15",[359,"^O","^16",536870918]],["^15",[359,"^F",358,536870918]],["^15",[359,"^X",357,536870918]],["^15",[359,"^V",357,536870918]],["^15",[359,"^U",357,536870918]],["^15",[359,"^;","~u655b7377-79bb-4bf0-9b80-6d9808552216",536870918]],["^15",[360,"^3","- [[Object]] wrapper for primitive type ``bigint``\n  For ex.:\n  ```js\n  let x = 234n; //BigInt\n  let y= BigInt(5); //also ok\n  ```\n- Unary [[Operator]] ``+`` is not supported on bigints.\n- For comparisons, BigInts and [[Number]]s can be compared and work as expected. Same with [[Boolean]]s as a BigInt of ``0`` is false, rest are true.\n- [[Polyfill]]ing BigInts is tricky as BigInts return BigInts on division/addition/etc. \n  So it is recommended to use [JSBI](https://github.com/GoogleChromeLabs/jsbi) if we need to polyfill as JSBI uses explicit methods for BigInt ops.",536870918]],["^15",[360,"^17",1700492151633,536870918]],["^15",[360,"^Z","JS/pages/BigInt.md",536870918]],["^15",[361,"^K",1700492152308,536870918]],["^15",[361,"^[",360,536870918]],["^15",[361,"^@",false,536870918]],["^15",[361,"^Y","bigint",536870918]],["^15",[361,"^11","BigInt",536870918]],["^15",[361,"^B",1700492152308,536870918]],["^15",[361,"^;","~u655b7379-7ee8-4925-8aca-e08790fb1a5a",536870919]],["^15",[362,"^K",1700492152308,536870918]],["^15",[362,"^[",368,536870918]],["^15",[362,"^@",false,536870918]],["^15",[362,"^Y","boolean",536870918]],["^15",[362,"^11","Boolean",536870918]],["^15",[362,"^B",1700492152308,536870918]],["^15",[362,"^;","~u655b7379-4703-4e8c-9c10-3a6f7ce7a618",536870919]],["^15",[363,"^K",1700492152313,536870918]],["^15",[363,"^[",915,536870919]],["^15",[363,"^@",false,536870918]],["^15",[363,"^Y","polyfill",536870918]],["^15",[363,"^11","Polyfill",536870918]],["^15",[363,"^B",1700492152313,536870918]],["^15",[363,"^;","~u655b7379-256e-4be7-984b-53adab3cc446",536870919]],["^15",[364,"^Q","[[Object]] wrapper for primitive type ``bigint``\nFor ex.:\n```js\nlet x = 234n; //BigInt\nlet y= BigInt(5); //also ok\n```",536870918]],["^15",[364,"^O","^16",536870918]],["^15",[364,"^F",361,536870918]],["^15",[364,"^X",361,536870918]],["^15",[364,"^V",361,536870918]],["^15",[364,"^U",299,536870918]],["^15",[364,"^U",361,536870918]],["^15",[364,"^H",299,536870918]],["^15",[364,"^;","~u655b7377-64aa-4555-b62c-40eac0692d13",536870918]],["^15",[365,"^Q","Unary [[Operator]] ``+`` is not supported on bigints.",536870918]],["^15",[365,"^O","^16",536870918]],["^15",[365,"^F",364,536870918]],["^15",[365,"^X",361,536870918]],["^15",[365,"^V",361,536870918]],["^15",[365,"^U",339,536870918]],["^15",[365,"^U",361,536870918]],["^15",[365,"^H",339,536870918]],["^15",[365,"^;","~u655b7377-9587-472e-9ea2-62d7d1ce4159",536870918]],["^15",[366,"^Q","For comparisons, BigInts and [[Number]]s can be compared and work as expected. Same with [[Boolean]]s as a BigInt of ``0`` is false, rest are true.",536870918]],["^15",[366,"^O","^16",536870918]],["^15",[366,"^F",365,536870918]],["^15",[366,"^X",361,536870918]],["^15",[366,"^V",361,536870918]],["^15",[366,"^U",162,536870918]],["^15",[366,"^U",361,536870918]],["^15",[366,"^U",362,536870918]],["^15",[366,"^H",162,536870918]],["^15",[366,"^H",362,536870918]],["^15",[366,"^;","~u655b7377-29af-493e-9370-abd2be8b6409",536870918]],["^15",[367,"^Q","[[Polyfill]]ing BigInts is tricky as BigInts return BigInts on division/addition/etc. \nSo it is recommended to use [JSBI](https://github.com/GoogleChromeLabs/jsbi) if we need to polyfill as JSBI uses explicit methods for BigInt ops.",536870918]],["^15",[367,"^O","^16",536870918]],["^15",[367,"^F",366,536870918]],["^15",[367,"^X",361,536870918]],["^15",[367,"^V",361,536870918]],["^15",[367,"^U",361,536870918]],["^15",[367,"^U",363,536870918]],["^15",[367,"^H",363,536870918]],["^15",[367,"^;","~u655b7377-a480-40df-8812-ffa7932ca5d8",536870918]],["^15",[368,"^3","- [[Object]] wrapper for primitive type ``boolean``\n- The usual, ``true`` and ``false`` from expressions or raw values.\n  For ex.:\n  ```js\n  let x = true;  \n  x = 4<2; //stores false\n  ```\n-\n-",536870918]],["^15",[368,"^17",1700492151641,536870918]],["^15",[368,"^Z","JS/pages/Boolean.md",536870918]],["^15",[369,"^Q","[[Object]] wrapper for primitive type ``boolean``",536870918]],["^15",[369,"^O","^16",536870918]],["^15",[369,"^F",362,536870918]],["^15",[369,"^X",362,536870918]],["^15",[369,"^V",362,536870918]],["^15",[369,"^U",299,536870918]],["^15",[369,"^U",362,536870918]],["^15",[369,"^H",299,536870918]],["^15",[369,"^;","~u655b7377-5d32-4bfc-9f6d-ec735bf5429e",536870918]],["^15",[370,"^Q","The usual, ``true`` and ``false`` from expressions or raw values.\nFor ex.:\n```js\nlet x = true;  \nx = 4<2; //stores false\n```",536870918]],["^15",[370,"^O","^16",536870918]],["^15",[370,"^F",369,536870918]],["^15",[370,"^X",362,536870918]],["^15",[370,"^V",362,536870918]],["^15",[370,"^U",362,536870918]],["^15",[370,"^;","~u655b7377-c5fa-4e45-bb2b-42f307d66913",536870918]],["^15",[371,"^Q","",536870918]],["^15",[371,"^O","^16",536870918]],["^15",[371,"^F",370,536870918]],["^15",[371,"^X",362,536870918]],["^15",[371,"^V",362,536870918]],["^15",[371,"^U",362,536870918]],["^15",[371,"^;","~u655b7377-5a9a-46f5-88a3-e933227f7336",536870918]],["^15",[372,"^Q","",536870918]],["^15",[372,"^O","^16",536870918]],["^15",[372,"^F",371,536870918]],["^15",[372,"^X",362,536870918]],["^15",[372,"^V",362,536870918]],["^15",[372,"^U",362,536870918]],["^15",[372,"^;","~u655b7377-fc95-46c2-b42d-6d31b0d6bdfd",536870918]],["^15",[373,"^3","- Popup\n  ``window.open(\"<url>\", \"<name>\", <params Object>)`` uses [[window]] Object to do so. \n  The params Object can take properties like window's position, height, width etc. Check [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) for specs. \n  \n  * They are blocked automatically by the browser if they are not called from a user-initiated event's handler.\n  \n  * The method returns a [[window]] Object, this refers to the window Object of the opened popup and we can access its [[DOM]] through here, but this access is only possible for [[Same Origin]] windows. \n  \n  * Similarly, it is possible for the popup site to access its popup opener window using ``window.opener`` which returns a reference to the window Object of the opener, given [[Same Origin]].\n  \n  * In the popup window or the opener we can close the popup window with ``<popup window Object>.close()``. This method is available otherwise as well to [[window]] but browsers ignore it unless the popup window is being closed.\n  \n  * There are other methods of the window Object that work (sometimes only) on popups, moving and resizing the popup window using popup window's Object works only for popups\n  There's ``.moveTo/By(x,y)``, ``.resizeTo/By(x,y)`` and even the ``resize`` [[Browser Event]] on the window Object to track these.  \n  \n  Scrolling works on any [[window]] Object\n  There's the ``.scrollTo/by(x,y)``, ``scrollIntoView(<optional Boolean shouldbetop>)`` and even a ``scroll`` Event on the window. \n  \n  * The focus and blur [[Browser Event]]s work on the window Object too, and we can do ``<popup window Object>.focus()`` and ``.blur()`` to manually do so as well. Though browsers may ignore these calls to prevent focus loop.\n- Cross-Window Messaging\n  The sender window sends a message using ``postMessage(<data Object>, \"<target url>\")`` method ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)). The data Object is serialized but for compatibility with IE, it must be a string.\n  \n  Then if the target url matches a window, the window receives a ``message`` [[Browser Event]] event which has 3 properties \n  ``data``, ``origin`` and ``source``.\n-\n-",536870918]],["^15",[373,"^17",1700492151659,536870918]],["^15",[373,"^Z","JS/pages/Brower.md",536870918]],["^15",[374,"^K",1700492152065,536870918]],["^15",[374,"^[",373,536870918]],["^15",[374,"^@",false,536870918]],["^15",[374,"^Y","brower",536870918]],["^15",[374,"^11","Brower",536870918]],["^15",[374,"^B",1700492152065,536870918]],["^15",[374,"^;","~u655b7379-b9dc-43c5-9f0c-29973837b977",536870919]],["^15",[375,"^K",1700492152348,536870918]],["^15",[375,"^[",1041,536870919]],["^15",[375,"^@",false,536870918]],["^15",[375,"^Y","window",536870918]],["^15",[375,"^11","window",536870918]],["^15",[375,"^B",1700492152348,536870918]],["^15",[375,"^;","~u655b7379-e50d-4ab8-a870-71347b1a96aa",536870919]],["^15",[376,"^5",930,536870919]],["^15",[376,"^K",1700492151658,536870918]],["^15",[376,"^[",929,536870919]],["^15",[376,"^@",false,536870918]],["^15",[376,"^Y","same origin",536870918]],["^15",[376,"^11","Same Origin",536870918]],["^15",[376,"^?",["^ ","^18",["^19",["Same Site Policy"]]],536870919]],["^15",[376,"^4",["^ ","^18","Same Site Policy"],536870919]],["^15",[376,"^B",1700492151658,536870918]],["^15",[376,"^;","~u655b7379-7af0-4e27-ab34-2ccfb7ebb07b",536870919]],["^15",[377,"^Q","Popup\n``window.open(\"<url>\", \"<name>\", <params Object>)`` uses [[window]] Object to do so. \nThe params Object can take properties like window's position, height, width etc. Check [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) for specs. \n\n* They are blocked automatically by the browser if they are not called from a user-initiated event's handler.\n\n* The method returns a [[window]] Object, this refers to the window Object of the opened popup and we can access its [[DOM]] through here, but this access is only possible for [[Same Origin]] windows. \n\n* Similarly, it is possible for the popup site to access its popup opener window using ``window.opener`` which returns a reference to the window Object of the opener, given [[Same Origin]].\n\n* In the popup window or the opener we can close the popup window with ``<popup window Object>.close()``. This method is available otherwise as well to [[window]] but browsers ignore it unless the popup window is being closed.\n\n* There are other methods of the window Object that work (sometimes only) on popups, moving and resizing the popup window using popup window's Object works only for popups\nThere's ``.moveTo/By(x,y)``, ``.resizeTo/By(x,y)`` and even the ``resize`` [[Browser Event]] on the window Object to track these.  \n\nScrolling works on any [[window]] Object\nThere's the ``.scrollTo/by(x,y)``, ``scrollIntoView(<optional Boolean shouldbetop>)`` and even a ``scroll`` Event on the window. \n\n* The focus and blur [[Browser Event]]s work on the window Object too, and we can do ``<popup window Object>.focus()`` and ``.blur()`` to manually do so as well. Though browsers may ignore these calls to prevent focus loop.",536870918]],["^15",[377,"^O","^16",536870918]],["^15",[377,"^F",374,536870918]],["^15",[377,"^X",374,536870918]],["^15",[377,"^V",374,536870918]],["^15",[377,"^U",285,536870918]],["^15",[377,"^U",288,536870918]],["^15",[377,"^U",374,536870918]],["^15",[377,"^U",375,536870918]],["^15",[377,"^U",376,536870918]],["^15",[377,"^H",285,536870918]],["^15",[377,"^H",288,536870918]],["^15",[377,"^H",375,536870918]],["^15",[377,"^H",376,536870918]],["^15",[377,"^;","~u655b7377-4bf2-4c97-9332-8f3cdec9870a",536870918]],["^15",[378,"^Q","Cross-Window Messaging\nThe sender window sends a message using ``postMessage(<data Object>, \"<target url>\")`` method ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)). The data Object is serialized but for compatibility with IE, it must be a string.\n\nThen if the target url matches a window, the window receives a ``message`` [[Browser Event]] event which has 3 properties \n``data``, ``origin`` and ``source``.",536870918]],["^15",[378,"^O","^16",536870918]],["^15",[378,"^F",377,536870918]],["^15",[378,"^X",374,536870918]],["^15",[378,"^V",374,536870918]],["^15",[378,"^U",285,536870918]],["^15",[378,"^U",374,536870918]],["^15",[378,"^H",285,536870918]],["^15",[378,"^;","~u655b7377-3f88-4c49-b115-558285cd06a8",536870918]],["^15",[379,"^Q","",536870918]],["^15",[379,"^O","^16",536870918]],["^15",[379,"^F",378,536870918]],["^15",[379,"^X",374,536870918]],["^15",[379,"^V",374,536870918]],["^15",[379,"^U",374,536870918]],["^15",[379,"^;","~u655b7377-f72b-4e83-9720-6cd8569eda9a",536870918]],["^15",[380,"^Q","",536870918]],["^15",[380,"^O","^16",536870918]],["^15",[380,"^F",379,536870918]],["^15",[380,"^X",374,536870918]],["^15",[380,"^V",374,536870918]],["^15",[380,"^U",374,536870918]],["^15",[380,"^;","~u655b7377-18bb-4fb9-bee9-466c621d74c5",536870918]],["^15",[381,"^3","- The main event types are: [Event Interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event) and then each type defines events that use the interface/blueprint of the type.\n- ``click``\n  When an element receives a left click.\n- ``contextmenu``\n  When an element receives a right click.\n- Mouse Events\n  Events that are of the ``MouseEvent`` [[Class]], they map all the common mouse actions such as ``click``, ``dblclick``, ``mousedown``, ``mouseover`` (when a mouse comes over an element), ``mouseout`` (when a mouse leaves an element) etc.\n  \n  All events triggered by mouse and are instance of ``MouseEvent`` have a ``.button`` property which is a [[Number]] as in this table\n  ![image.png](../assets/image_1687928322388_0.png)\n  Similarly, there's a deprecated ``.which`` property.\n  \n  There's also a ``.buttons`` property which is a bitmask of all the mouse buttons pressed at the time of event.\n  \n  * Modifier Keys:\n  If any one or more of the modifier key is pressed, a property with its same name is true.\n  Modifier Keys are\n  ``altKey``,``shiftKey``, ``ctrlKey`` and ``metaKey`` (Cmd on Mac).\n  \n  * Touch\n  Common Touch actions are automatically translated by [[Brower]]s to ``MouseEvent``, like single tap on an element is a ``click`` and long hold is a ``contextmenu``. But they also trigger Touch Events and Pointer Events. \n  \n  * Coordinates\n  MouseEvent class also has pageX/pageY and clientX/clientY [[DOM]] property to denote the cursor position at the time of the event.\n  \n  * Drag and Drop\n  ``dragstart`` and ``dragend`` for when a mouse holds left click over an element and drags it around.\n-\n- ``copy``\n  This event is triggered whenever user tries copying an element.\n- Pointer Event\n  This Class encompasses both Touch and Mouse Events. It is recommended to use this when a standard behavior is expected. Class is ``PointerEvent``.\n  It has properties like \n  ``pointerId``: Unique [[Browser]] generated Id per pointer, useful in multi touch screens.\n  ``pointerType``: A [[String]] from \"pen\", \"mouse\" or \"touch\"\n  ``isPrimary``: Boolean, true if the left click or the first finger has triggered the event\n  ``width`` and ``height``: The size of the touch, for mouse it is always 1.\n  ``pressure``\n  ``tangentialPressure``\n  ``tiltX/Y`` and ``twist``\n  \n  Mapping Pointer Events to Mouse Events\n  ![image.png](../assets/image_1687970654284_0.png)\n  \n  ``pointercancel`` is triggered when a pointer interaction is ongoing and it is abruptly disturbed, such as when the device orientation changes, or the pointer hardware was disabled etc.\n  \n  * Pointer Capturing\n  We can bind a pointer to a [[DOM]] node, this is done using ``<node>.setPointerCapture(<pointerId>)`` and now any pointer event where the pointer has this pointerId, anywhere, targets its events to this node. This capturing also triggers an event, ``gotpointercapture``.\n  This binding can be removed with ``<node>.releasePointerCapture(<pointerId>)``, or automatically if the node is removed or ``pointerup`` or ``pointercancel`` event is triggered. And this releasing also triggers an event, ``lostpointercapture``.\n- Keyboard Events\n  They use the ``KeyboardEvent`` class and common events that use it are, ``keydown``, ``keyup`` etc.\n  \n  Instances of this class have 2 important properties, ``.key`` and ``.code``. ``.key`` is a string that contains the exact character that initiated the event.\n  So for ``z`` it is ``\"z\"``, for ``Shit+z`` which is ``Z`` it is ``\"Z\"`` and so on. It will correctly represent languages and their characters.\n  The ``.code`` is a case-insensitive mapping code for the key, no matter the language or case, if the position of the key is the same as given here in [specs](https://www.w3.org/TR/uievents-code/#keyboard-sections) it will be the same as shown in the image. \n  ![image.png](../assets/image_1688000882369_0.png)\n  \n  For alphabets it is ``Key<char>``, for digits it is ``Digit<digit>`` and for special keys it is the name itself like ``\"Enter\"`` etc. \n  For ex.: \n  ``z`` will be ``\"KeyZ\"``, ``Z`` will be ``\"KeyZ\"`` and so on.\n  However, the ``.code`` is always distinct for a different place on the keyboard, so ``Shift`` will be ``\"Shift\"`` in ``.key`` despite being right or left ``Shift`` whereas ``\"ShiftLeft\"`` or ``\"ShiftRight\"`` will the value in .``code``\n  \n  * ``.repeat``: Boolean, if the key was held down and repeatedly triggered the ``keydown`` event, then this Boolean becomes true.\n  \n  * Preventing Default [[Browser Event]] handler on ``keydown`` handlers is able to stop most of the automatic actions such as ``Ctrl+s`` to save etc. but the [[Browser]] won't stop ``Alt+F4`` and other system keys.\n  \n  * Legacy properties like ``keypress``, ``keycode``, ``charCode``, ``which`` also exist but they are deprecated.\n  \n  * The ``Fn`` key has no mapping in the browser, the browser can simply not catch ``Fn``.\n- ``scroll``\n  Event is triggered when scroll is initiated. As we know from [[DOM]], we can use ``<event Object>.preventDefault()`` or ``<event Object>.preventImmediateDefault()`` to prevent scrolling but we can also do the same through Keyboard or Mouse Events to prevent the scroll.\n- ``focus`` and ``blur``\n  The ``focus`` event is triggered when an element receives the user's focus (the user clicks on it or presses ``Tab`` key) and the ``blur`` event when it loses the focus.\n  \n  We can use [[DOM]] methods to do the same as well with ``<node>.focus()`` and ``<node>.blur()``.\n  The [[HTML]] attribute ``autofocus`` gets the focus on an element whenever the Document loads.\n  \n  * ``blur`` is triggered after the focus is lost, so we can't prevent its default to prevent focus loss.\n  \n  * Focus/Blur generally only works by default on [[HTML Element]]s that take some input/interaction but elements like ``div``, ``p`` etc. are unfocusable hence these events are never triggered for them.\n  \n  * The ``tabindex=\"<number value>\"`` HTML attribute allows any element to be focusable and its value defines its priority and focusability.\n  If ``tabindex`` ==  \"-1\", then it is only focusable by manual focus.\n  If ``tabindex`` ==  \"0\", then it is focusable and doesn't alter focus priority.\n  If ``tabindex`` >= \"1\", the lower the value, the higher the priority, and then pressing ``Tab`` would switch to the next same or lower priority element, so if there are 2 elements, one has value of \"1\" and other has \"2\" then if we press ``Tab`` the focus will jump to the \"1\" and then if we do it again it will switch to \"2\" and so on. \n  After the higher priority elements have got and lost focus, the elements with \"0\" are focused.\n  \n  We can set the same attribute using the [[DOM]]'s ``<node>.tabIndex`` property.\n  \n  * Focus/blur don't Bubble up, but they do go down in the capturing phase. \n  There's also ``focusin`` and ``focusout`` which do bubble and capture down but their handlers must be assigned with ``<node>.addEventListener(...)``.\n- ``change``\n  This event is triggered when an element has finished changing. Like after an ``input`` [[HTML Element]] loses focus.\n- ``input``\n  This event is triggered every time after a value is modified by the user. It is triggered after the modification so preventing default doesn't work.\n- ``cut``/``copy``/``paste``\n  Triggered when their actions occur. We can prevent default to abort the intended action.\n  These events can only be user-initiated and are of ``ClipboardEvent`` class.\n  \n  These events have ``<event Object>.clipboardData`` which has the clipboard data but only in the context of the browser, and we can use ``.getData(\"text/plain\")`` to get its data in plain-text. More details in the [spec](https://www.w3.org/TR/clipboard-apis/#clipboard-event-interfaces).\n- Resource elements have ``load`` and ``error`` events\n  ``load`` is triggered after the resource has been successfully loaded, and ``error`` otherwise.\n-",536870918]],["^15",[381,"^17",1700492151705,536870918]],["^15",[381,"^Z","JS/pages/Browser Event List.md",536870918]],["^15",[382,"^K",1700492151765,536870918]],["^15",[382,"^[",381,536870918]],["^15",[382,"^@",false,536870918]],["^15",[382,"^Y","browser event list",536870918]],["^15",[382,"^11","Browser Event List",536870918]],["^15",[382,"^B",1700492151765,536870918]],["^15",[382,"^;","~u655b7377-b5fe-4e14-a1d5-e90cb2357edc",536870918]],["^15",[383,"^K",1700492152172,536870918]],["^15",[383,"^[",743,536870919]],["^15",[383,"^@",false,536870918]],["^15",[383,"^Y","html element",536870918]],["^15",[383,"^11","HTML Element",536870918]],["^15",[383,"^B",1700492152172,536870918]],["^15",[383,"^;","~u655b7379-c66b-4df0-9d9c-1036bcdc62c4",536870919]],["^15",[384,"^Q","Mouse Events\nEvents that are of the ``MouseEvent`` [[Class]], they map all the common mouse actions such as ``click``, ``dblclick``, ``mousedown``, ``mouseover`` (when a mouse comes over an element), ``mouseout`` (when a mouse leaves an element) etc.\n\nAll events triggered by mouse and are instance of ``MouseEvent`` have a ``.button`` property which is a [[Number]] as in this table\n![image.png](../assets/image_1687928322388_0.png)\nSimilarly, there's a deprecated ``.which`` property.\n\nThere's also a ``.buttons`` property which is a bitmask of all the mouse buttons pressed at the time of event.\n\n* Modifier Keys:\nIf any one or more of the modifier key is pressed, a property with its same name is true.\nModifier Keys are\n``altKey``,``shiftKey``, ``ctrlKey`` and ``metaKey`` (Cmd on Mac).\n\n* Touch\nCommon Touch actions are automatically translated by [[Brower]]s to ``MouseEvent``, like single tap on an element is a ``click`` and long hold is a ``contextmenu``. But they also trigger Touch Events and Pointer Events. \n\n* Coordinates\nMouseEvent class also has pageX/pageY and clientX/clientY [[DOM]] property to denote the cursor position at the time of the event.\n\n* Drag and Drop\n``dragstart`` and ``dragend`` for when a mouse holds left click over an element and drags it around.",536870918]],["^15",[384,"^O","^16",536870918]],["^15",[384,"^F",393,536870918]],["^15",[384,"^X",382,536870918]],["^15",[384,"^V",382,536870918]],["^15",[384,"^U",162,536870918]],["^15",[384,"^U",288,536870918]],["^15",[384,"^U",332,536870918]],["^15",[384,"^U",374,536870918]],["^15",[384,"^U",382,536870918]],["^15",[384,"^H",162,536870918]],["^15",[384,"^H",288,536870918]],["^15",[384,"^H",332,536870918]],["^15",[384,"^H",374,536870918]],["^15",[384,"^;","~u655b7377-4dc2-476a-b0ab-1cf17d6a4f92",536870918]],["^15",[385,"^Q","",536870918]],["^15",[385,"^O","^16",536870918]],["^15",[385,"^F",384,536870918]],["^15",[385,"^X",382,536870918]],["^15",[385,"^V",382,536870918]],["^15",[385,"^U",382,536870918]],["^15",[385,"^;","~u655b7377-deef-4b13-b626-6cd931cdb270",536870918]],["^15",[386,"^Q","~``focus`` and ``blur``\nThe ``focus`` event is triggered when an element receives the user's focus (the user clicks on it or presses ``Tab`` key) and the ``blur`` event when it loses the focus.\n\nWe can use [[DOM]] methods to do the same as well with ``<node>.focus()`` and ``<node>.blur()``.\nThe [[HTML]] attribute ``autofocus`` gets the focus on an element whenever the Document loads.\n\n* ``blur`` is triggered after the focus is lost, so we can't prevent its default to prevent focus loss.\n\n* Focus/Blur generally only works by default on [[HTML Element]]s that take some input/interaction but elements like ``div``, ``p`` etc. are unfocusable hence these events are never triggered for them.\n\n* The ``tabindex=\"<number value>\"`` HTML attribute allows any element to be focusable and its value defines its priority and focusability.\nIf ``tabindex`` ==  \"-1\", then it is only focusable by manual focus.\nIf ``tabindex`` ==  \"0\", then it is focusable and doesn't alter focus priority.\nIf ``tabindex`` >= \"1\", the lower the value, the higher the priority, and then pressing ``Tab`` would switch to the next same or lower priority element, so if there are 2 elements, one has value of \"1\" and other has \"2\" then if we press ``Tab`` the focus will jump to the \"1\" and then if we do it again it will switch to \"2\" and so on. \nAfter the higher priority elements have got and lost focus, the elements with \"0\" are focused.\n\nWe can set the same attribute using the [[DOM]]'s ``<node>.tabIndex`` property.\n\n* Focus/blur don't Bubble up, but they do go down in the capturing phase. \nThere's also ``focusin`` and ``focusout`` which do bubble and capture down but their handlers must be assigned with ``<node>.addEventListener(...)``.",536870918]],["^15",[386,"^O","^16",536870918]],["^15",[386,"^F",387,536870918]],["^15",[386,"^X",382,536870918]],["^15",[386,"^V",382,536870918]],["^15",[386,"^U",284,536870918]],["^15",[386,"^U",288,536870918]],["^15",[386,"^U",382,536870918]],["^15",[386,"^U",383,536870918]],["^15",[386,"^H",284,536870918]],["^15",[386,"^H",288,536870918]],["^15",[386,"^H",383,536870918]],["^15",[386,"^;","~u655b7377-6537-4a0b-894e-b4275f6d0931",536870918]],["^15",[387,"^Q","~``scroll``\nEvent is triggered when scroll is initiated. As we know from [[DOM]], we can use ``<event Object>.preventDefault()`` or ``<event Object>.preventImmediateDefault()`` to prevent scrolling but we can also do the same through Keyboard or Mouse Events to prevent the scroll.",536870918]],["^15",[387,"^O","^16",536870918]],["^15",[387,"^F",396,536870918]],["^15",[387,"^X",382,536870918]],["^15",[387,"^V",382,536870918]],["^15",[387,"^U",288,536870918]],["^15",[387,"^U",382,536870918]],["^15",[387,"^H",288,536870918]],["^15",[387,"^;","~u655b7377-0249-48ec-8c07-b945ed9d89a2",536870918]],["^15",[388,"^Q","Pointer Event\nThis Class encompasses both Touch and Mouse Events. It is recommended to use this when a standard behavior is expected. Class is ``PointerEvent``.\nIt has properties like \n``pointerId``: Unique [[Browser]] generated Id per pointer, useful in multi touch screens.\n``pointerType``: A [[String]] from \"pen\", \"mouse\" or \"touch\"\n``isPrimary``: Boolean, true if the left click or the first finger has triggered the event\n``width`` and ``height``: The size of the touch, for mouse it is always 1.\n``pressure``\n``tangentialPressure``\n``tiltX/Y`` and ``twist``\n\nMapping Pointer Events to Mouse Events\n![image.png](../assets/image_1687970654284_0.png)\n\n``pointercancel`` is triggered when a pointer interaction is ongoing and it is abruptly disturbed, such as when the device orientation changes, or the pointer hardware was disabled etc.\n\n* Pointer Capturing\nWe can bind a pointer to a [[DOM]] node, this is done using ``<node>.setPointerCapture(<pointerId>)`` and now any pointer event where the pointer has this pointerId, anywhere, targets its events to this node. This capturing also triggers an event, ``gotpointercapture``.\nThis binding can be removed with ``<node>.releasePointerCapture(<pointerId>)``, or automatically if the node is removed or ``pointerup`` or ``pointercancel`` event is triggered. And this releasing also triggers an event, ``lostpointercapture``.",536870918]],["^15",[388,"^O","^16",536870918]],["^15",[388,"^F",394,536870918]],["^15",[388,"^X",382,536870918]],["^15",[388,"^V",382,536870918]],["^15",[388,"^U",80,536870918]],["^15",[388,"^U",288,536870918]],["^15",[388,"^U",289,536870918]],["^15",[388,"^U",382,536870918]],["^15",[388,"^H",80,536870918]],["^15",[388,"^H",288,536870918]],["^15",[388,"^H",289,536870918]],["^15",[388,"^;","~u655b7377-72c1-43e2-a4df-4d929e1bc8d6",536870918]],["^15",[389,"^Q","~``input``\nThis event is triggered every time after a value is modified by the user. It is triggered after the modification so preventing default doesn't work.",536870918]],["^15",[389,"^O","^16",536870918]],["^15",[389,"^F",392,536870918]],["^15",[389,"^X",382,536870918]],["^15",[389,"^V",382,536870918]],["^15",[389,"^U",382,536870918]],["^15",[389,"^;","~u655b7377-6e2c-494f-bc75-2d6891ce3f12",536870918]],["^15",[390,"^Q","~``click``\nWhen an element receives a left click.",536870918]],["^15",[390,"^O","^16",536870918]],["^15",[390,"^F",391,536870918]],["^15",[390,"^X",382,536870918]],["^15",[390,"^V",382,536870918]],["^15",[390,"^U",382,536870918]],["^15",[390,"^;","~u655b7377-b05e-460c-9b9e-6654b48f7770",536870918]],["^15",[391,"^Q","The main event types are: [Event Interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event) and then each type defines events that use the interface/blueprint of the type.",536870918]],["^15",[391,"^O","^16",536870918]],["^15",[391,"^F",382,536870918]],["^15",[391,"^X",382,536870918]],["^15",[391,"^V",382,536870918]],["^15",[391,"^U",382,536870918]],["^15",[391,"^;","~u655b7377-0c29-4143-9739-d64316f07194",536870918]],["^15",[392,"^Q","~``change``\nThis event is triggered when an element has finished changing. Like after an ``input`` [[HTML Element]] loses focus.",536870918]],["^15",[392,"^O","^16",536870918]],["^15",[392,"^F",386,536870918]],["^15",[392,"^X",382,536870918]],["^15",[392,"^V",382,536870918]],["^15",[392,"^U",382,536870918]],["^15",[392,"^U",383,536870918]],["^15",[392,"^H",383,536870918]],["^15",[392,"^;","~u655b7377-81e1-434f-a0ab-9fed319961cf",536870918]],["^15",[393,"^Q","~``contextmenu``\nWhen an element receives a right click.",536870918]],["^15",[393,"^O","^16",536870918]],["^15",[393,"^F",390,536870918]],["^15",[393,"^X",382,536870918]],["^15",[393,"^V",382,536870918]],["^15",[393,"^U",382,536870918]],["^15",[393,"^;","~u655b7377-4969-4336-bcf9-25661e725ae8",536870918]],["^15",[394,"^Q","~``copy``\nThis event is triggered whenever user tries copying an element.",536870918]],["^15",[394,"^O","^16",536870918]],["^15",[394,"^F",385,536870918]],["^15",[394,"^X",382,536870918]],["^15",[394,"^V",382,536870918]],["^15",[394,"^U",382,536870918]],["^15",[394,"^;","~u655b7377-7ab7-4d6e-a2e1-4f2e2ede8b94",536870918]],["^15",[395,"^Q","Resource elements have ``load`` and ``error`` events\n``load`` is triggered after the resource has been successfully loaded, and ``error`` otherwise.",536870918]],["^15",[395,"^O","^16",536870918]],["^15",[395,"^F",398,536870918]],["^15",[395,"^X",382,536870918]],["^15",[395,"^V",382,536870918]],["^15",[395,"^U",382,536870918]],["^15",[395,"^;","~u655b7377-09a1-41f4-a1e3-d7a849066ad6",536870918]],["^15",[396,"^Q","Keyboard Events\nThey use the ``KeyboardEvent`` class and common events that use it are, ``keydown``, ``keyup`` etc.\n\nInstances of this class have 2 important properties, ``.key`` and ``.code``. ``.key`` is a string that contains the exact character that initiated the event.\nSo for ``z`` it is ``\"z\"``, for ``Shit+z`` which is ``Z`` it is ``\"Z\"`` and so on. It will correctly represent languages and their characters.\nThe ``.code`` is a case-insensitive mapping code for the key, no matter the language or case, if the position of the key is the same as given here in [specs](https://www.w3.org/TR/uievents-code/#keyboard-sections) it will be the same as shown in the image. \n![image.png](../assets/image_1688000882369_0.png)\n\nFor alphabets it is ``Key<char>``, for digits it is ``Digit<digit>`` and for special keys it is the name itself like ``\"Enter\"`` etc. \nFor ex.: \n``z`` will be ``\"KeyZ\"``, ``Z`` will be ``\"KeyZ\"`` and so on.\nHowever, the ``.code`` is always distinct for a different place on the keyboard, so ``Shift`` will be ``\"Shift\"`` in ``.key`` despite being right or left ``Shift`` whereas ``\"ShiftLeft\"`` or ``\"ShiftRight\"`` will the value in .``code``\n\n* ``.repeat``: Boolean, if the key was held down and repeatedly triggered the ``keydown`` event, then this Boolean becomes true.\n\n* Preventing Default [[Browser Event]] handler on ``keydown`` handlers is able to stop most of the automatic actions such as ``Ctrl+s`` to save etc. but the [[Browser]] won't stop ``Alt+F4`` and other system keys.\n\n* Legacy properties like ``keypress``, ``keycode``, ``charCode``, ``which`` also exist but they are deprecated.\n\n* The ``Fn`` key has no mapping in the browser, the browser can simply not catch ``Fn``.",536870918]],["^15",[396,"^O","^16",536870918]],["^15",[396,"^F",388,536870918]],["^15",[396,"^X",382,536870918]],["^15",[396,"^V",382,536870918]],["^15",[396,"^U",285,536870918]],["^15",[396,"^U",289,536870918]],["^15",[396,"^U",382,536870918]],["^15",[396,"^H",285,536870918]],["^15",[396,"^H",289,536870918]],["^15",[396,"^;","~u655b7377-4dce-4fee-a8fa-930fb6950d8d",536870918]],["^15",[397,"^Q","",536870918]],["^15",[397,"^O","^16",536870918]],["^15",[397,"^F",395,536870918]],["^15",[397,"^X",382,536870918]],["^15",[397,"^V",382,536870918]],["^15",[397,"^U",382,536870918]],["^15",[397,"^;","~u655b7377-c730-4dd3-874a-9bf99b67a5d0",536870918]],["^15",[398,"^Q","~``cut``/``copy``/``paste``\nTriggered when their actions occur. We can prevent default to abort the intended action.\nThese events can only be user-initiated and are of ``ClipboardEvent`` class.\n\nThese events have ``<event Object>.clipboardData`` which has the clipboard data but only in the context of the browser, and we can use ``.getData(\"text/plain\")`` to get its data in plain-text. More details in the [spec](https://www.w3.org/TR/clipboard-apis/#clipboard-event-interfaces).",536870918]],["^15",[398,"^O","^16",536870918]],["^15",[398,"^F",389,536870918]],["^15",[398,"^X",382,536870918]],["^15",[398,"^V",382,536870918]],["^15",[398,"^U",382,536870918]],["^15",[398,"^;","~u655b7377-4b15-4eb2-92b7-82b91c7ef83d",536870918]],["^15",[399,"^3","- An event is a signal and most things in [[Browser]]s generate events. There are events generated by [[DOM]] nodes, [[CSS]] property changes such as changes in CSS [[Animation]]s, mouse events generated by the browser itself etc.\n  \n  We can assign ``handlers`` to all events, these are [[ECMAScript]] [[Function]]s which are executed whenever an event is triggered.\n- [[Browser Event List]]\n- Assigning event handlers\n  There can only be a single event handler for any event. \n  \n  We can assign an event handler to an [[HTML Element]] directly using the ``on<eventname>=<func>()`` attribute which is a common attribute.\n  \n  For ex.:\n  ```html\n  <input value=\"Click me\" onclick=\"alert('Click!')\" type=\"button\">\n  <!-- or -->\n  <input id=\"x\" value=\"Click me\" onclick=\"yo()\" type=\"button\">\n  \n  <script>\n  function yo() {}\n  </script>\n  ```\n  The HTML attribute copies the body of the value of an event handler to a method and then calls that method instead. So, \n  ``onclick=yo()``\n  becomes\n  ```js\n  x.onclick=function(event) {\n  yo();\n  }\n  ```\n  The ``event`` Object is always passed, this is why we can use it directly in the attribute's value too.\n  \n  Similarly we can assign using [[DOM]] by using any ``node``'s ``on<event name>`` property.\n  ```js\n  let elem=...;\n  elem.onclick= function(){};\n  \n  elem.onclick= null; //to unassign an event handler\n  \n  function yo(){}\n  \n  elem.onclick=yo; //works, notice the lack of ()\n  ```\n  If the HTML attribute assigns an event handler, then it is available in the DOM.\n  We can't assign event handlers using ``<node>.setAttribute(...)``.\n  \n  * Whilst a single event can only have a single event handler, we can have handlers that call multiple handlers, this is already implemented with ``<node>.addEventListener(\"<event name>\", <handler func or Object>, <optional options>)`` and ``<node>.removeEventListener(\"<event name>\", <handler func or Object>, <optional options>)``\n  For ex.:\n  ```js\n  let elem=...;\n  function yo(){}\n  elem.addEventListener(\"click\",yo);\n  elem.removeEventListener(\"click\",yo); //ok\n  ```\n  The ``.removeEventListener(...)`` must be called with the exact same args to work. And since there's no way to read all the assigned handlers for a node, if we assign an anonymous [[Function]], it will never be removed.\n  \n  The optional options is an [[Object]] that can have these properties\n  ``once``: Boolean value, removes listener after a single trigger.\n  ``capture``: Boolean, the phase of the event where this listener will be triggered. If default/false, the handler is executed on the bubbling phase otherwise the capturing phase.\n  ``passive``: Boolean, if true, it denotes that the handler wouldn't call ``<event Object>.preventDefault()``.\n  \n  The ``passive`` property is an optimization that allows browsers to not anticipate a ``preventDefault()`` call from an event handler, thereby optimizing the event flow.\n  \n  Some events can only be assigned handlers through these methods, such as ``DOMContentLoaded``. Furthermore, it is advised to use these methods to add/remove handlers from the ``document`` DOM Object directly.\n  \n  The handler can be an [[Object]] too, in which case the object's ``handleEvent(event)`` is called.\n  \n  These methods guarantee the order of execution from the order of declaration given the handlers are assigned for the same phase. \n  For ex.:\n  ```js\n  elem.addEventListener(\"click\", e => alert(1)); // guaranteed to trigger first\n  elem.addEventListener(\"click\", e => alert(2));\n  ```\n- Event handler's [[this]], except for arrow [[Function]]s, is always assigned the [[DOM]] node.\n- Events propagate in [[Brower]]s\n  That is, they flow into other elements.\n  [DOM Events](https://www.w3.org/TR/DOM-Level-3-Events/) describe there to be 3 ``phases`` of event propagation\n  * Bubbling Phase: The event flows upward, from the most nested element to the least nested element.\n  * Capturing Phase: The event flows downward, from the least nested to the most nested element at which the event occurred.\n  * Target Phase: The event is at the element\n  Like so\n  \n  ![image.png](../assets/image_1687860745168_0.png)\n  Here the ``td`` element is the recipient of the event.\n  \n  As we can see, every event propagates in both directions.\n  \n  By default, event handlers only handle events bubbling up.\n  By setting the ``capture`` [[Boolean]] to true for the ``<node>.addEventListener(...)`` we can switch to the capturing phase instead.\n  \n  * We can call ``<event Object>.stopPropagation()`` to stop the bubbling and capturing at the current element.\n  If there are multiple handlers on the event in this element, they are still ran. We can call ``<event Object>.stopImmediatePropagation()`` to stop propagation and prevent any other handler to be executed. \n  However it is recommended to only stop bubbling/capturing if explicitly required as there are obvious behaviors.\n- Bubbling\n  When an event occurs on any [[HTML Element]], it triggers the most nested element's handler then the event bubbles up and triggers the parent element's handler and so on. \n  \n  For ex.:\n  ```html\n  <form onclick=\"alert('form')\">FORM\n    <div onclick=\"alert('div')\">DIV\n      <p onclick=\"alert('p')\">P</p>\n    </div>\n  </form>\n  ```\n  Here if we click ``P``, we would first get ``P`` then ``div`` then ``form``.\n  Like so\n  ![image.png](../assets/image_1687857846296_0.png)\n  \n  Almost all events bubble, some events like ``focus`` don't. However, the amount of bubbling is variable, some events reach all the way from elements to ``html`` to ``document`` then to [[window]], but others stop at ``html`` and so on.\n- The ``event`` [[Object]]\n  This event is passed to all event handlers and has some properties on it set to better describe the events.\n  Common properties are\n  ``.type``: The event name\n  ``.currentTarget``: The [[HTML Element]] or [[DOM]] node that handled the event.\n  ``.target``: This is a [[DOM]] node where the event occurred, this allows us to see if an event bubbled up or originated at the current node. \n  In an event handler, [[this]] is the DOM node at which the handler is ran, and now we know ``.target`` has the node where the event occurred so we can compare these 2 to check where the event occurred.\n- The bubbling/capturing allows us to assign a single event handler on the ``document``, then check if the event occurred on a specific [[HTML Element]] by either checking their ``id`` or ``tagName`` or custom attribute and then execute some functionality for them centrally without assigning an event handler for each element separately.\n- Event handlers can return values but they are generally ignored.\n- Browser Default Actions\n  Browsers perform some default actions like navigating to url on click of ``a`` [[HTML Element]].\n  We can prevent these in 2 ways:\n  Assigning custom handler to the event and doing ``<event Object>.preventDefault()``.\n  Assigning handler using ``on<event>`` either through [[DOM]] or [[HTML]] attribute and returning ``false``.\n  For ex.:\n  ```js\n  menu.onclick = function(event) {\n    if (event.target.nodeName != 'A') return;\n  \n    let href = event.target.getAttribute('href');\n    alert( href );\n  \n    return false; // prevent browser action (don't go to the URL)\n  };\n  ```\n  \n  * Default Action event propagation is different from normal bubbling/capturing. The former only triggers the browser inbuilt event handlers, the latter triggers both. \n  ``.preventDefault()`` only stops default action event propagation. \n  The other event handlers can use ``<event Object>.defaultPrevented()`` to get a bool is true if the default event propagation was prevented.\n- Some events flow into other events, such as ``mousedown`` event also triggers ``focus`` event. These are also part of browser default actions, so if we do ``<event>.preventDefault()``, these don't occur.\n- Custom Events\n  We can generate custom events as well as trigger predefined events using [[ECMAScript]].\n  \n  To create a custom event we use the ``Event`` Class. It has the args ``let event = new Event(\"<type>\", <optional options Object>);``\n  * ``type``: The name/type of the event, can be a predefined event, like \"click\" or custom.\n  * Options: An [[Object]] that can have these properties\n  ``bubbles``: Boolean, if true the event bubbles.\n  ``cancellable``: Boolean, if true then the default action event may be prevented.\n  Both are false by default.\n  \n  Then, to fire an event on an [[HTML Element]], we use ``<node>.dispatchEvent(<event Object>)`` from the [[DOM]].\n  \n  For ex.:\n  ```html\n  <button id=\"elem\" onclick=\"alert('Click!');\">Autoclick</button>\n  \n  <script>\n    let event = new Event(\"click\");\n    elem.dispatchEvent(event); //works\n  </script>\n  ```\n  Here the ``click`` event is triggered on ``\"elem\"`` and it doesn't bubble up. \n  \n  * ``<event Object>.isTrusted`` is a property for event Objects and is false for custom triggered events.\n  \n  * The ``Event`` class is the most base class for all event types. There are more specialized [event interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event) which we can use for more specialized event types. Such as ``new MouseEvent(...)`` would generate a mouse event. \n  \n  * There's also ``CustomEvent`` [[Class]] which is meant specifically for custom events. It is the same as the base ``Event`` class, but has 1 change and that is that its ``Options`` Object also recognizes an additional property ``detail`` which can have any type of value and is passed with the event.\n  Technically, we can add custom properties to the normal Event and they will be passed around as well but using this class is recommended for truly custom events.\n- Events in the [[Message Queue]]\n  Events are synchronous, so if ``click`` event occurs and then immediately after it ``contextmenu`` occurs then the latter is queued up so the handlers for the ``click`` event will be called first then the ``contextmenu`` handlers.\n  The only exception is when an event handler itself triggers another event, then the event is not queued up and its handlers are processed immediately. \n  We can use [[Scheduling]] to trigger an event from an event and have it processed afterwards.\n- Monitor Events\n  We can monitor events fired on any element using ``monitorEvents(<node>)`` [[Function]]. It returns an [[Object]] with every event triggered on the node with the event details, it basically returns the event Object itself like an observer on every event triggered on it.\n  \n  If we use it in the Chrome [[Debugging]] Console, it will print the event Object on a node each time the node receives an event.\n  For ex.:\n  ```js\n  monitorEvents($0)\n  ```\n  in the debug console would work as expected.\n-",536870918]],["^15",[399,"^17",1700492151767,536870918]],["^15",[399,"^Z","JS/pages/Browser Event.md",536870918]],["^15",[400,"^K",1700492152437,536870918]],["^15",[400,"^[",1024,536870919]],["^15",[400,"^@",false,536870918]],["^15",[400,"^Y","this",536870918]],["^15",[400,"^11","this",536870918]],["^15",[400,"^B",1700492152437,536870918]],["^15",[400,"^;","~u655b7379-6da4-40c1-850d-ac7fcd8ab719",536870919]],["^15",[401,"^5",607,536870918]],["^15",[401,"^K",1700492152436,536870918]],["^15",[401,"^[",595,536870918]],["^15",[401,"^@",false,536870918]],["^15",[401,"^Y","ecmascript",536870918]],["^15",[401,"^11","ECMAScript",536870918]],["^15",[401,"^?",["^ ","^18",["^19",["JavaScript"]]],536870918]],["^15",[401,"^4",["^ ","^18","JavaScript"],536870918]],["^15",[401,"^B",1700492152436,536870918]],["^15",[401,"^;","~u656462fc-c4de-451b-85ad-49204edfa780",536870932]],["^15",[402,"^5",441,536870918]],["^15",[402,"^K",1700492152171,536870918]],["^15",[402,"^[",440,536870918]],["^15",[402,"^@",false,536870918]],["^15",[402,"^Y","css",536870918]],["^15",[402,"^11","CSS",536870918]],["^15",[402,"^?",["^ ","^18",["^19",["Cascading Style Sheets"]]],536870918]],["^15",[402,"^4",["^ ","^18","Cascading Style Sheets"],536870918]],["^15",[402,"^B",1700492152171,536870918]],["^15",[402,"^;","~u655b7378-2d42-4122-b819-3397fec5378e",536870919]],["^15",[403,"^K",1700492152314,536870918]],["^15",[403,"^[",939,536870919]],["^15",[403,"^@",false,536870918]],["^15",[403,"^Y","scheduling",536870918]],["^15",[403,"^11","Scheduling",536870918]],["^15",[403,"^B",1700492152314,536870918]],["^15",[403,"^;","~u655b7379-0140-4606-a508-a9e64057387f",536870919]],["^15",[404,"^K",1700492151764,536870918]],["^15",[404,"^[",1594,536870920]],["^15",[404,"^@",false,536870918]],["^15",[404,"^Y","animation",536870918]],["^15",[404,"^11","Animation",536870918]],["^15",[404,"^B",1700492151764,536870918]],["^15",[404,"^;","~u655b737c-91b7-404c-b80c-7b9c716fdc68",536870920]],["^15",[405,"^K",1700492152258,536870918]],["^15",[405,"^[",570,536870918]],["^15",[405,"^@",false,536870918]],["^15",[405,"^Y","debugging",536870918]],["^15",[405,"^11","Debugging",536870918]],["^15",[405,"^B",1700492152258,536870918]],["^15",[405,"^;","~u655b7378-ed71-4de0-9381-35208f807a9c",536870918]],["^15",[406,"^Q","The bubbling/capturing allows us to assign a single event handler on the ``document``, then check if the event occurred on a specific [[HTML Element]] by either checking their ``id`` or ``tagName`` or custom attribute and then execute some functionality for them centrally without assigning an event handler for each element separately.",536870918]],["^15",[406,"^O","^16",536870918]],["^15",[406,"^F",415,536870918]],["^15",[406,"^X",285,536870918]],["^15",[406,"^V",285,536870918]],["^15",[406,"^U",285,536870918]],["^15",[406,"^U",383,536870918]],["^15",[406,"^H",383,536870918]],["^15",[406,"^;","~u655b7377-d761-4202-bbe6-78e763c7527f",536870918]],["^15",[407,"^Q","[[Browser Event List]]",536870918]],["^15",[407,"^O","^16",536870918]],["^15",[407,"^F",412,536870918]],["^15",[407,"^X",285,536870918]],["^15",[407,"^V",285,536870918]],["^15",[407,"^U",285,536870918]],["^15",[407,"^U",382,536870918]],["^15",[407,"^H",382,536870918]],["^15",[407,"^;","~u655b7377-eb36-4f54-a4d1-be8f0c048c1d",536870918]],["^15",[408,"^Q","Assigning event handlers\nThere can only be a single event handler for any event. \n\nWe can assign an event handler to an [[HTML Element]] directly using the ``on<eventname>=<func>()`` attribute which is a common attribute.\n\nFor ex.:\n```html\n<input value=\"Click me\" onclick=\"alert('Click!')\" type=\"button\">\n<!-- or -->\n<input id=\"x\" value=\"Click me\" onclick=\"yo()\" type=\"button\">\n\n<script>\nfunction yo() {}\n</script>\n```\nThe HTML attribute copies the body of the value of an event handler to a method and then calls that method instead. So, \n``onclick=yo()``\nbecomes\n```js\nx.onclick=function(event) {\nyo();\n}\n```\nThe ``event`` Object is always passed, this is why we can use it directly in the attribute's value too.\n\nSimilarly we can assign using [[DOM]] by using any ``node``'s ``on<event name>`` property.\n```js\nlet elem=...;\nelem.onclick= function(){};\n\nelem.onclick= null; //to unassign an event handler\n\nfunction yo(){}\n\nelem.onclick=yo; //works, notice the lack of ()\n```\nIf the HTML attribute assigns an event handler, then it is available in the DOM.\nWe can't assign event handlers using ``<node>.setAttribute(...)``.\n\n* Whilst a single event can only have a single event handler, we can have handlers that call multiple handlers, this is already implemented with ``<node>.addEventListener(\"<event name>\", <handler func or Object>, <optional options>)`` and ``<node>.removeEventListener(\"<event name>\", <handler func or Object>, <optional options>)``\nFor ex.:\n```js\nlet elem=...;\nfunction yo(){}\nelem.addEventListener(\"click\",yo);\nelem.removeEventListener(\"click\",yo); //ok\n```\nThe ``.removeEventListener(...)`` must be called with the exact same args to work. And since there's no way to read all the assigned handlers for a node, if we assign an anonymous [[Function]], it will never be removed.\n\nThe optional options is an [[Object]] that can have these properties\n``once``: Boolean value, removes listener after a single trigger.\n``capture``: Boolean, the phase of the event where this listener will be triggered. If default/false, the handler is executed on the bubbling phase otherwise the capturing phase.\n``passive``: Boolean, if true, it denotes that the handler wouldn't call ``<event Object>.preventDefault()``.\n\nThe ``passive`` property is an optimization that allows browsers to not anticipate a ``preventDefault()`` call from an event handler, thereby optimizing the event flow.\n\nSome events can only be assigned handlers through these methods, such as ``DOMContentLoaded``. Furthermore, it is advised to use these methods to add/remove handlers from the ``document`` DOM Object directly.\n\nThe handler can be an [[Object]] too, in which case the object's ``handleEvent(event)`` is called.\n\nThese methods guarantee the order of execution from the order of declaration given the handlers are assigned for the same phase. \nFor ex.:\n```js\nelem.addEventListener(\"click\", e => alert(1)); // guaranteed to trigger first\nelem.addEventListener(\"click\", e => alert(2));\n```",536870918]],["^15",[408,"^O","^16",536870918]],["^15",[408,"^F",407,536870918]],["^15",[408,"^X",285,536870918]],["^15",[408,"^V",285,536870918]],["^15",[408,"^U",163,536870918]],["^15",[408,"^U",285,536870918]],["^15",[408,"^U",288,536870918]],["^15",[408,"^U",299,536870918]],["^15",[408,"^U",383,536870918]],["^15",[408,"^H",163,536870918]],["^15",[408,"^H",288,536870918]],["^15",[408,"^H",299,536870918]],["^15",[408,"^H",383,536870918]],["^15",[408,"^;","~u655b7377-3985-4e74-b0f3-e4e8a1dd3191",536870918]],["^15",[409,"^Q","Event handlers can return values but they are generally ignored.",536870918]],["^15",[409,"^O","^16",536870918]],["^15",[409,"^F",406,536870918]],["^15",[409,"^X",285,536870918]],["^15",[409,"^V",285,536870918]],["^15",[409,"^U",285,536870918]],["^15",[409,"^;","~u655b7377-74d0-40d1-b4ef-57065e9f8d27",536870918]],["^15",[410,"^Q","Browser Default Actions\nBrowsers perform some default actions like navigating to url on click of ``a`` [[HTML Element]].\nWe can prevent these in 2 ways:\nAssigning custom handler to the event and doing ``<event Object>.preventDefault()``.\nAssigning handler using ``on<event>`` either through [[DOM]] or [[HTML]] attribute and returning ``false``.\nFor ex.:\n```js\nmenu.onclick = function(event) {\n  if (event.target.nodeName != 'A') return;\n\n  let href = event.target.getAttribute('href');\n  alert( href );\n\n  return false; // prevent browser action (don't go to the URL)\n};\n```\n\n* Default Action event propagation is different from normal bubbling/capturing. The former only triggers the browser inbuilt event handlers, the latter triggers both. \n``.preventDefault()`` only stops default action event propagation. \nThe other event handlers can use ``<event Object>.defaultPrevented()`` to get a bool is true if the default event propagation was prevented.",536870918]],["^15",[410,"^O","^16",536870918]],["^15",[410,"^F",409,536870918]],["^15",[410,"^X",285,536870918]],["^15",[410,"^V",285,536870918]],["^15",[410,"^U",284,536870918]],["^15",[410,"^U",285,536870918]],["^15",[410,"^U",288,536870918]],["^15",[410,"^U",383,536870918]],["^15",[410,"^H",284,536870918]],["^15",[410,"^H",288,536870918]],["^15",[410,"^H",383,536870918]],["^15",[410,"^;","~u655b7377-50fa-4ea5-b9f7-73e2a2f8df1a",536870918]],["^15",[411,"^Q","Custom Events\nWe can generate custom events as well as trigger predefined events using [[ECMAScript]].\n\nTo create a custom event we use the ``Event`` Class. It has the args ``let event = new Event(\"<type>\", <optional options Object>);``\n* ``type``: The name/type of the event, can be a predefined event, like \"click\" or custom.\n* Options: An [[Object]] that can have these properties\n``bubbles``: Boolean, if true the event bubbles.\n``cancellable``: Boolean, if true then the default action event may be prevented.\nBoth are false by default.\n\nThen, to fire an event on an [[HTML Element]], we use ``<node>.dispatchEvent(<event Object>)`` from the [[DOM]].\n\nFor ex.:\n```html\n<button id=\"elem\" onclick=\"alert('Click!');\">Autoclick</button>\n\n<script>\n  let event = new Event(\"click\");\n  elem.dispatchEvent(event); //works\n</script>\n```\nHere the ``click`` event is triggered on ``\"elem\"`` and it doesn't bubble up. \n\n* ``<event Object>.isTrusted`` is a property for event Objects and is false for custom triggered events.\n\n* The ``Event`` class is the most base class for all event types. There are more specialized [event interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event) which we can use for more specialized event types. Such as ``new MouseEvent(...)`` would generate a mouse event. \n\n* There's also ``CustomEvent`` [[Class]] which is meant specifically for custom events. It is the same as the base ``Event`` class, but has 1 change and that is that its ``Options`` Object also recognizes an additional property ``detail`` which can have any type of value and is passed with the event.\nTechnically, we can add custom properties to the normal Event and they will be passed around as well but using this class is recommended for truly custom events.",536870918]],["^15",[411,"^O","^16",536870918]],["^15",[411,"^F",420,536870918]],["^15",[411,"^X",285,536870918]],["^15",[411,"^V",285,536870918]],["^15",[411,"^U",285,536870918]],["^15",[411,"^U",288,536870918]],["^15",[411,"^U",299,536870918]],["^15",[411,"^U",332,536870918]],["^15",[411,"^U",383,536870918]],["^15",[411,"^U",401,536870918]],["^15",[411,"^H",288,536870918]],["^15",[411,"^H",299,536870918]],["^15",[411,"^H",332,536870918]],["^15",[411,"^H",383,536870918]],["^15",[411,"^H",401,536870918]],["^15",[411,"^;","~u655b7377-27e1-47d6-84a7-ac3152c43a1b",536870918]],["^15",[412,"^Q","An event is a signal and most things in [[Browser]]s generate events. There are events generated by [[DOM]] nodes, [[CSS]] property changes such as changes in CSS [[Animation]]s, mouse events generated by the browser itself etc.\n\nWe can assign ``handlers`` to all events, these are [[ECMAScript]] [[Function]]s which are executed whenever an event is triggered.",536870918]],["^15",[412,"^O","^16",536870918]],["^15",[412,"^F",285,536870918]],["^15",[412,"^X",285,536870918]],["^15",[412,"^V",285,536870918]],["^15",[412,"^U",163,536870918]],["^15",[412,"^U",285,536870918]],["^15",[412,"^U",288,536870918]],["^15",[412,"^U",289,536870918]],["^15",[412,"^U",401,536870918]],["^15",[412,"^U",402,536870918]],["^15",[412,"^U",404,536870918]],["^15",[412,"^H",163,536870918]],["^15",[412,"^H",288,536870918]],["^15",[412,"^H",289,536870918]],["^15",[412,"^H",401,536870918]],["^15",[412,"^H",402,536870918]],["^15",[412,"^H",404,536870918]],["^15",[412,"^;","~u655b7377-9c5f-4104-825f-a5910cc62a5f",536870918]],["^15",[413,"^Q","Events in the [[Message Queue]]\nEvents are synchronous, so if ``click`` event occurs and then immediately after it ``contextmenu`` occurs then the latter is queued up so the handlers for the ``click`` event will be called first then the ``contextmenu`` handlers.\nThe only exception is when an event handler itself triggers another event, then the event is not queued up and its handlers are processed immediately. \nWe can use [[Scheduling]] to trigger an event from an event and have it processed afterwards.",536870918]],["^15",[413,"^O","^16",536870918]],["^15",[413,"^F",411,536870918]],["^15",[413,"^X",285,536870918]],["^15",[413,"^V",285,536870918]],["^15",[413,"^U",285,536870918]],["^15",[413,"^U",343,536870918]],["^15",[413,"^U",403,536870918]],["^15",[413,"^H",343,536870918]],["^15",[413,"^H",403,536870918]],["^15",[413,"^;","~u655b7377-eee8-4af3-a643-327041896ab9",536870918]],["^15",[414,"^Q","Event handler's [[this]], except for arrow [[Function]]s, is always assigned the [[DOM]] node.",536870918]],["^15",[414,"^O","^16",536870918]],["^15",[414,"^F",408,536870918]],["^15",[414,"^X",285,536870918]],["^15",[414,"^V",285,536870918]],["^15",[414,"^U",163,536870918]],["^15",[414,"^U",285,536870918]],["^15",[414,"^U",288,536870918]],["^15",[414,"^U",400,536870918]],["^15",[414,"^H",163,536870918]],["^15",[414,"^H",288,536870918]],["^15",[414,"^H",400,536870918]],["^15",[414,"^;","~u655b7377-4de0-441d-bd7d-7cf7a9afd2cd",536870918]],["^15",[415,"^Q","The ``event`` [[Object]]\nThis event is passed to all event handlers and has some properties on it set to better describe the events.\nCommon properties are\n``.type``: The event name\n``.currentTarget``: The [[HTML Element]] or [[DOM]] node that handled the event.\n``.target``: This is a [[DOM]] node where the event occurred, this allows us to see if an event bubbled up or originated at the current node. \nIn an event handler, [[this]] is the DOM node at which the handler is ran, and now we know ``.target`` has the node where the event occurred so we can compare these 2 to check where the event occurred.",536870918]],["^15",[415,"^O","^16",536870918]],["^15",[415,"^F",416,536870918]],["^15",[415,"^X",285,536870918]],["^15",[415,"^V",285,536870918]],["^15",[415,"^U",285,536870918]],["^15",[415,"^U",288,536870918]],["^15",[415,"^U",299,536870918]],["^15",[415,"^U",383,536870918]],["^15",[415,"^U",400,536870918]],["^15",[415,"^H",288,536870918]],["^15",[415,"^H",299,536870918]],["^15",[415,"^H",383,536870918]],["^15",[415,"^H",400,536870918]],["^15",[415,"^;","~u655b7377-3ba6-4658-9484-7313134aaca5",536870918]],["^15",[416,"^Q","Bubbling\nWhen an event occurs on any [[HTML Element]], it triggers the most nested element's handler then the event bubbles up and triggers the parent element's handler and so on. \n\nFor ex.:\n```html\n<form onclick=\"alert('form')\">FORM\n  <div onclick=\"alert('div')\">DIV\n    <p onclick=\"alert('p')\">P</p>\n  </div>\n</form>\n```\nHere if we click ``P``, we would first get ``P`` then ``div`` then ``form``.\nLike so\n![image.png](../assets/image_1687857846296_0.png)\n\nAlmost all events bubble, some events like ``focus`` don't. However, the amount of bubbling is variable, some events reach all the way from elements to ``html`` to ``document`` then to [[window]], but others stop at ``html`` and so on.",536870918]],["^15",[416,"^O","^16",536870918]],["^15",[416,"^F",417,536870918]],["^15",[416,"^X",285,536870918]],["^15",[416,"^V",285,536870918]],["^15",[416,"^U",285,536870918]],["^15",[416,"^U",375,536870918]],["^15",[416,"^U",383,536870918]],["^15",[416,"^H",375,536870918]],["^15",[416,"^H",383,536870918]],["^15",[416,"^;","~u655b7377-a603-4245-b9cc-68d0f5f1be78",536870918]],["^15",[417,"^Q","Events propagate in [[Brower]]s\nThat is, they flow into other elements.\n[DOM Events](https://www.w3.org/TR/DOM-Level-3-Events/) describe there to be 3 ``phases`` of event propagation\n* Bubbling Phase: The event flows upward, from the most nested element to the least nested element.\n* Capturing Phase: The event flows downward, from the least nested to the most nested element at which the event occurred.\n* Target Phase: The event is at the element\nLike so\n\n![image.png](../assets/image_1687860745168_0.png)\nHere the ``td`` element is the recipient of the event.\n\nAs we can see, every event propagates in both directions.\n\nBy default, event handlers only handle events bubbling up.\nBy setting the ``capture`` [[Boolean]] to true for the ``<node>.addEventListener(...)`` we can switch to the capturing phase instead.\n\n* We can call ``<event Object>.stopPropagation()`` to stop the bubbling and capturing at the current element.\nIf there are multiple handlers on the event in this element, they are still ran. We can call ``<event Object>.stopImmediatePropagation()`` to stop propagation and prevent any other handler to be executed. \nHowever it is recommended to only stop bubbling/capturing if explicitly required as there are obvious behaviors.",536870918]],["^15",[417,"^O","^16",536870918]],["^15",[417,"^F",414,536870918]],["^15",[417,"^X",285,536870918]],["^15",[417,"^V",285,536870918]],["^15",[417,"^U",285,536870918]],["^15",[417,"^U",362,536870918]],["^15",[417,"^U",374,536870918]],["^15",[417,"^H",362,536870918]],["^15",[417,"^H",374,536870918]],["^15",[417,"^;","~u655b7377-95da-4f91-bc07-3327d4a9a713",536870918]],["^15",[418,"^Q","",536870918]],["^15",[418,"^O","^16",536870918]],["^15",[418,"^F",419,536870918]],["^15",[418,"^X",285,536870918]],["^15",[418,"^V",285,536870918]],["^15",[418,"^U",285,536870918]],["^15",[418,"^;","~u655b7377-b1c3-4601-80a3-3e8305c8c89e",536870918]],["^15",[419,"^Q","Monitor Events\nWe can monitor events fired on any element using ``monitorEvents(<node>)`` [[Function]]. It returns an [[Object]] with every event triggered on the node with the event details, it basically returns the event Object itself like an observer on every event triggered on it.\n\nIf we use it in the Chrome [[Debugging]] Console, it will print the event Object on a node each time the node receives an event.\nFor ex.:\n```js\nmonitorEvents($0)\n```\nin the debug console would work as expected.",536870918]],["^15",[419,"^O","^16",536870918]],["^15",[419,"^F",413,536870918]],["^15",[419,"^X",285,536870918]],["^15",[419,"^V",285,536870918]],["^15",[419,"^U",163,536870918]],["^15",[419,"^U",285,536870918]],["^15",[419,"^U",299,536870918]],["^15",[419,"^U",405,536870918]],["^15",[419,"^H",163,536870918]],["^15",[419,"^H",299,536870918]],["^15",[419,"^H",405,536870918]],["^15",[419,"^;","~u655b7377-132c-4ba5-936a-e410467d17a2",536870918]],["^15",[420,"^Q","Some events flow into other events, such as ``mousedown`` event also triggers ``focus`` event. These are also part of browser default actions, so if we do ``<event>.preventDefault()``, these don't occur.",536870918]],["^15",[420,"^O","^16",536870918]],["^15",[420,"^F",410,536870918]],["^15",[420,"^X",285,536870918]],["^15",[420,"^V",285,536870918]],["^15",[420,"^U",285,536870918]],["^15",[420,"^;","~u655b7377-8db4-48ef-9f8b-38050d4568ce",536870918]],["^15",[421,"^3","- Browsers don't just support [[HTML]] but they also support [[XML]]. If a text document is in XML then that can be parsed by browsers too. \n  Yes the [[DOM]] works for XML based pages too.\n  \n  The XML mode is enabled if the Browser recieves an [[HTTP]] ``response`` with [[HTTP Header]] ``Content-Type: application/xml+xhtml``.\n-",536870918]],["^15",[421,"^17",1700492151776,536870918]],["^15",[421,"^Z","JS/pages/Browser.md",536870918]],["^15",[422,"^K",1700492151774,536870918]],["^15",[422,"^@",false,536870918]],["^15",[422,"^Y","http header",536870918]],["^15",[422,"^11","HTTP Header",536870918]],["^15",[422,"^B",1700492151774,536870918]],["^15",[422,"^;","~u655b7377-bd0e-4b40-a2d5-32202549b365",536870918]],["^15",[423,"^K",1700492151785,536870918]],["^15",[423,"^@",false,536870918]],["^15",[423,"^Y","http",536870918]],["^15",[423,"^11","HTTP",536870918]],["^15",[423,"^B",1700492151785,536870918]],["^15",[423,"^;","~u655b7377-c60b-4e06-8eba-85a592e22eed",536870918]],["^15",[424,"^K",1700492152169,536870918]],["^15",[424,"^@",false,536870918]],["^15",[424,"^Y","xml",536870918]],["^15",[424,"^11","XML",536870918]],["^15",[424,"^B",1700492152169,536870918]],["^15",[424,"^;","~u655b7378-8304-4ef8-b157-38bd80f9e06b",536870918]],["^15",[425,"^Q","Browsers don't just support [[HTML]] but they also support [[XML]]. If a text document is in XML then that can be parsed by browsers too. \nYes the [[DOM]] works for XML based pages too.\n\nThe XML mode is enabled if the Browser recieves an [[HTTP]] ``response`` with [[HTTP Header]] ``Content-Type: application/xml+xhtml``.",536870918]],["^15",[425,"^O","^16",536870918]],["^15",[425,"^F",289,536870918]],["^15",[425,"^X",289,536870918]],["^15",[425,"^V",289,536870918]],["^15",[425,"^U",284,536870918]],["^15",[425,"^U",288,536870918]],["^15",[425,"^U",289,536870918]],["^15",[425,"^U",422,536870918]],["^15",[425,"^U",423,536870918]],["^15",[425,"^U",424,536870918]],["^15",[425,"^H",284,536870918]],["^15",[425,"^H",288,536870918]],["^15",[425,"^H",422,536870918]],["^15",[425,"^H",423,536870918]],["^15",[425,"^H",424,536870918]],["^15",[425,"^;","~u655b7377-356b-4df5-95c2-e497e5cbcc08",536870918]],["^15",[426,"^Q","",536870918]],["^15",[426,"^O","^16",536870918]],["^15",[426,"^F",425,536870918]],["^15",[426,"^X",289,536870918]],["^15",[426,"^V",289,536870918]],["^15",[426,"^U",289,536870918]],["^15",[426,"^;","~u655b7377-1b5f-4aa7-be96-10878a9b413d",536870918]],["^15",[427,"^3","- There are 2 requirements for CORS loaded resources to be allowed loading in our own [[HTML]] document by the [[Brower]]\n  \n  The resource/ [[HTML Element]] must have the ``crossorigin=\"<value>\"`` attribute\n  If the value to this attribute is \"anonymous\" and the server responds to our [[HTTP]] request with a response with header ``Access-Control-Allow-Origin`` with value \"\\*\" then it is allowed.\n  \n  If the value to this attribute is \"use-credentials\" and the server responds with ``Access-Control-Allow-Origin`` with value \"*\" or \"<our domain name>\" as well as ``Access-Control-Allow-Credentials`` with value \"true\" then it is allowed.",536870918]],["^15",[427,"^17",1700492151786,536870918]],["^15",[427,"^Z","JS/pages/CORS.md",536870918]],["^15",[428,"^Q","There are 2 requirements for CORS loaded resources to be allowed loading in our own [[HTML]] document by the [[Brower]]\n\nThe resource/ [[HTML Element]] must have the ``crossorigin=\"<value>\"`` attribute\nIf the value to this attribute is \"anonymous\" and the server responds to our [[HTTP]] request with a response with header ``Access-Control-Allow-Origin`` with value \"\\*\" then it is allowed.\n\nIf the value to this attribute is \"use-credentials\" and the server responds with ``Access-Control-Allow-Origin`` with value \"*\" or \"<our domain name>\" as well as ``Access-Control-Allow-Credentials`` with value \"true\" then it is allowed.",536870918]],["^15",[428,"^O","^16",536870918]],["^15",[428,"^F",290,536870918]],["^15",[428,"^X",290,536870918]],["^15",[428,"^V",290,536870918]],["^15",[428,"^U",284,536870918]],["^15",[428,"^U",290,536870918]],["^15",[428,"^U",374,536870918]],["^15",[428,"^U",383,536870918]],["^15",[428,"^U",423,536870918]],["^15",[428,"^H",284,536870918]],["^15",[428,"^H",374,536870918]],["^15",[428,"^H",383,536870918]],["^15",[428,"^H",423,536870918]],["^15",[428,"^;","~u655b7377-4b32-4e14-b012-5110f4936042",536870918]],["^15",[429,"^3","- As defined in [CSS Properties List MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference)\n  [[CSS]]\n- Shorthand\n  Some CSS Properties are shorthand for accessing multiple properties.\n  For ex.: \n  ``padding`` is a shorthand for ``padding-top``, ``padding-right``, ``padding-bottom`` and ``padding-left``. \n  So a value like ``padding: 20px 30px 50px 40px`` assigns value to all 4 of these properties.\n- ``padding``\n  Sets the padding.\n  For ex.:\n  ```css\n    padding: 0 20px 20px 20px;\n  ```\n  Defines padding in TRBL. \n  Can specify 1 (all sides), 2 (top and bottom take first, left and right take second), 3(TRB) or 4(TRBL) values.\n  \n  More details: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding#syntax)\n- ``margin``\n  Same as padding but defines the margins.\n  These properties can also take a value of ``auto`` which divides the remaining space on the axis equally.\n  For ex.:\n  ```css\n    margin: 0 auto;\n  ```\n  Gives 0 margin to top and bottom and then equally divides left and right space for the element.\n  This ``centers`` the element horizontally.\n- ``border``\n  Defines the size, line style and color of the [border](https://developer.mozilla.org/en-US/docs/Web/CSS/display).\n  For ex.:\n  ```css\n  border: 5px solid black;\n  ```\n  Sets the border line width as 5px, line style as solid and border line color as black.\n- ``display``\n  A box in CSS around any [[HTML Element]] is treated as either ``inline`` or ``block`` [Flow Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout).\n  Inline basically means it is treated as it is a part of an ongoing text, like the word ``yo`` is inline in this paragraph. So text and other content simply wraps around in the text direction of an inline element.\n  \n  Block elements are those that are treated as Blocks, much like how this paragraph and the previous one are their own ``Blocks``.\n  \n  These are the outer display types, there's also the inner display types. We can set both for a given using this property. [display](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\n  For ex.:\n  ```css\n  display: block; /*Sets the outer display type to block.*/\n  display: flex; /* Sets the inner display type to flex. */\n  display: inline-flex; /* Sets both*/\n  ```\n  The inner display types define how the children are laid out, it can be either flow, grid or flex (creating a flexbox).\n  \n  For ex.:\n  ```css\n  img {\n    display: block;\n    margin: 0 auto;\n  }\n  ```\n  ``centers`` an img block, img is an inline element and this turns it into a block.\n- Positioning\n  CSS can define where and how an element is positioned on the page. This is done using the [position](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property which defines the type of position, a value from \n  ``fixed``: Fixed to the viewport. So no space is created for the element in the Document and then offset by LTRB. Can be thought of as fixed from the current window's top left.\n  ``static``: Positioning according to the flow of the document, so if its ``display is ``inline/block then it applies normally. LTRB doesn't affect it.\n  ``relative``: Like static, then it is offset by LTRB but without moving other elements.\n  ``sticky``: Kind of like fixed but fixed to the nearest scrolling element.\n  ``absolute``: Like fixed but fixed to the nearest element with the ``position`` property set and then affected by LTRB. \n  \n  This property is combined with any or all of the properties ``left``, ``top``, ``right`` and ``bottom`` (LTRB) to finally determine the actual position of the [[HTML Element]].\n  For ex.:\n  ```css\n  position: relative;\n  top: 40px; \n  left: 40px;\n  ```\n- FlexBox\n  [Reference](https://www.theodinproject.com/lessons/foundations-growing-and-shrinking)\n  \n  A relatively new way of arranging [[HTML Element]]s.\n  By having the value ``flex`` for the ``display`` css property, we make an HTML element a *Flex Container*. And it's children are called *Flex Item*s. FlexBox is a way of defining both these.\n  This is a container element, meaning this HTML element can have multiple direct children.\n  \n  This is an incredibly flexible container that can automatically resize itself based on its children, then it automatically resizes its children to fit with each other and it can also adjust the children's children.\n  \n  For ex.:\n  For this HTML\n  ```html\n  <div class=\"flex-container\">\n    <div class=\"one\"></div>\n    <div class=\"two\"></div>\n    <div class=\"three\"></div>\n  </div>\n  ```\n  If we style the elements like so\n  ```css\n  .flex-container {\n     display: flex; \n  }\n  \n  /* this selector selects all divs inside of .flex-container */\n  .flex-container div {\n    background: peachpuff;\n    border: 4px solid brown;\n    height: 100px;\n     flex: 1; \n  }\n  ```\n  Then we get this\n  ![image.png](../assets/image_1692600346035_0.png)\n  \n  And if we remove the ``display:flex`` we would get\n  ![image.png](../assets/image_1692600380882_0.png)\n  where it's using the whole space of the viewport to lay out the elements.\n  \n  \n  * The Flex Container: The element that uses the ``flex`` property is called a Flex Container, and its children are called flex items.\n  ![image.png](../assets/image_1692600501827_0.png)\n  \n  The children theirselves can be flex containers and the parent flex container and adjust their flex items too.\n  ![image.png](../assets/image_1692600535073_0.png)\n  \n  By just using FlexBox, we can create all sorts of layouts.\n  ![image.png](../assets/image_1692600562264_0.png)\n  \n  \n  * ``flex`` Property: \n  This is a shorthand CSS property for ``flex-grow``, ``flex-shrink`` and ``flex-basis`` respectively. These are defined on flex items to adjust them.\n  \n  ``flex-grow``: This defines the growth, or in other words in the size of an item in proportion to other flex items.\n  By default the ``flex-grow`` is 1. So if an item gets a ``flex-grow`` of 2, it will be larger than the other items. \n  For ex.:\n  ![image.png](../assets/image_1692601081462_0.png)\n  \n  ``flex-shrink``: This defines the shrinkness factor, which is also 1 by default. It is applied to the flex items when the size of the flex container is smaller than the sum of sizes of the flex items. Higher values of ``flex-shrink`` shrink a flex item more than the others.\n  \n  ``flex-basis``: Default is 0%. Defines the percentage of the flex items' ``width`` property to be added to the grow or shrink factor. That is, if the basis is ``0%`` then the flex items' width is ignored and the flex item grows or shrinks at the same rate as the other flex items, but if it is say ``5%``, then ``5%`` of the item's ``width`` is added to the shrinkness or growth factor and hence it grows or shrinks faster than other flex elements. There's another value, ``auto`` for it.\n  \n  \n  The ``flex`` shorthand property can be given some values to get predefined values for all 3. \n  ``flex: auto``: is equivalent to ``flex: 1 1 auto``\n  ``flex: 1``: is equivalent to ``flex: 1 1 0``\n  \n  * ``flex-direction``: Can be ``row`` or ``column``, default is ``row``. Defined for the flex container.\n  This defines the direction the flex items in the container are laid out, be it horizontal or vertical. If they are laid out horizontally, which is default, their width is used for the other flex item properties, for vertical their height is used.\n  The direction defined here becomes the *main axis*, whilst the other direction becomes the *cross axis* inside the container. These axes are used by normal [[HTML Element]]s and other CSS properties too.\n  \n  * ``gap``: Numerical unit. Defined on the flex container, it defines the spacing between the flex items. across the *main axis*.\n- ``justify-content`` and ``align-items``\n  The former, aligns the children of an [[HTML Element]] across its *main axis* whilst the latter aligns them across the *cross axis*. Values are some predefined strings, check intellisense.\n  \n  For ex.:\n  ``align-items: center`` would align the items to the center of the cross axis. \n  If the main axis is horizontal, then this is the result\n  ![image.png](../assets/image_1692869633645_0.png)",536870918]],["^15",[429,"^17",1700492151823,536870918]],["^15",[429,"^Z","JS/pages/CSS Property.md",536870918]],["^15",[430,"^K",1700492152171,536870918]],["^15",[430,"^[",429,536870918]],["^15",[430,"^@",false,536870918]],["^15",[430,"^Y","css property",536870918]],["^15",[430,"^11","CSS Property",536870918]],["^15",[430,"^B",1700492152171,536870918]],["^15",[430,"^;","~u655b7378-579a-4f8f-b503-4c3b963fa6b8",536870918]],["^15",[431,"^Q","FlexBox\n[Reference](https://www.theodinproject.com/lessons/foundations-growing-and-shrinking)\n\nA relatively new way of arranging [[HTML Element]]s.\nBy having the value ``flex`` for the ``display`` css property, we make an HTML element a *Flex Container*. And it's children are called *Flex Item*s. FlexBox is a way of defining both these.\nThis is a container element, meaning this HTML element can have multiple direct children.\n\nThis is an incredibly flexible container that can automatically resize itself based on its children, then it automatically resizes its children to fit with each other and it can also adjust the children's children.\n\nFor ex.:\nFor this HTML\n```html\n<div class=\"flex-container\">\n  <div class=\"one\"></div>\n  <div class=\"two\"></div>\n  <div class=\"three\"></div>\n</div>\n```\nIf we style the elements like so\n```css\n.flex-container {\n   display: flex; \n}\n\n/* this selector selects all divs inside of .flex-container */\n.flex-container div {\n  background: peachpuff;\n  border: 4px solid brown;\n  height: 100px;\n   flex: 1; \n}\n```\nThen we get this\n![image.png](../assets/image_1692600346035_0.png)\n\nAnd if we remove the ``display:flex`` we would get\n![image.png](../assets/image_1692600380882_0.png)\nwhere it's using the whole space of the viewport to lay out the elements.\n\n\n* The Flex Container: The element that uses the ``flex`` property is called a Flex Container, and its children are called flex items.\n![image.png](../assets/image_1692600501827_0.png)\n\nThe children theirselves can be flex containers and the parent flex container and adjust their flex items too.\n![image.png](../assets/image_1692600535073_0.png)\n\nBy just using FlexBox, we can create all sorts of layouts.\n![image.png](../assets/image_1692600562264_0.png)\n\n\n* ``flex`` Property: \nThis is a shorthand CSS property for ``flex-grow``, ``flex-shrink`` and ``flex-basis`` respectively. These are defined on flex items to adjust them.\n\n``flex-grow``: This defines the growth, or in other words in the size of an item in proportion to other flex items.\nBy default the ``flex-grow`` is 1. So if an item gets a ``flex-grow`` of 2, it will be larger than the other items. \nFor ex.:\n![image.png](../assets/image_1692601081462_0.png)\n\n``flex-shrink``: This defines the shrinkness factor, which is also 1 by default. It is applied to the flex items when the size of the flex container is smaller than the sum of sizes of the flex items. Higher values of ``flex-shrink`` shrink a flex item more than the others.\n\n``flex-basis``: Default is 0%. Defines the percentage of the flex items' ``width`` property to be added to the grow or shrink factor. That is, if the basis is ``0%`` then the flex items' width is ignored and the flex item grows or shrinks at the same rate as the other flex items, but if it is say ``5%``, then ``5%`` of the item's ``width`` is added to the shrinkness or growth factor and hence it grows or shrinks faster than other flex elements. There's another value, ``auto`` for it.\n\n\nThe ``flex`` shorthand property can be given some values to get predefined values for all 3. \n``flex: auto``: is equivalent to ``flex: 1 1 auto``\n``flex: 1``: is equivalent to ``flex: 1 1 0``\n\n* ``flex-direction``: Can be ``row`` or ``column``, default is ``row``. Defined for the flex container.\nThis defines the direction the flex items in the container are laid out, be it horizontal or vertical. If they are laid out horizontally, which is default, their width is used for the other flex item properties, for vertical their height is used.\nThe direction defined here becomes the *main axis*, whilst the other direction becomes the *cross axis* inside the container. These axes are used by normal [[HTML Element]]s and other CSS properties too.\n\n* ``gap``: Numerical unit. Defined on the flex container, it defines the spacing between the flex items. across the *main axis*.",536870918]],["^15",[431,"^O","^16",536870918]],["^15",[431,"^F",436,536870918]],["^15",[431,"^X",430,536870918]],["^15",[431,"^V",430,536870918]],["^15",[431,"^U",383,536870918]],["^15",[431,"^U",430,536870918]],["^15",[431,"^H",383,536870918]],["^15",[431,"^;","~u655b7377-8518-4f93-bb52-28a1f33ef987",536870918]],["^15",[432,"^Q","As defined in [CSS Properties List MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference)\n[[CSS]]",536870918]],["^15",[432,"^O","^16",536870918]],["^15",[432,"^F",430,536870918]],["^15",[432,"^X",430,536870918]],["^15",[432,"^V",430,536870918]],["^15",[432,"^U",402,536870918]],["^15",[432,"^U",430,536870918]],["^15",[432,"^H",402,536870918]],["^15",[432,"^;","~u655b7377-9d10-4f4f-a383-3efcf6a0f478",536870918]],["^15",[433,"^Q","~``display``\nA box in CSS around any [[HTML Element]] is treated as either ``inline`` or ``block`` [Flow Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout).\nInline basically means it is treated as it is a part of an ongoing text, like the word ``yo`` is inline in this paragraph. So text and other content simply wraps around in the text direction of an inline element.\n\nBlock elements are those that are treated as Blocks, much like how this paragraph and the previous one are their own ``Blocks``.\n\nThese are the outer display types, there's also the inner display types. We can set both for a given using this property. [display](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\nFor ex.:\n```css\ndisplay: block; /*Sets the outer display type to block.*/\ndisplay: flex; /* Sets the inner display type to flex. */\ndisplay: inline-flex; /* Sets both*/\n```\nThe inner display types define how the children are laid out, it can be either flow, grid or flex (creating a flexbox).\n\nFor ex.:\n```css\nimg {\n  display: block;\n  margin: 0 auto;\n}\n```\n``centers`` an img block, img is an inline element and this turns it into a block.",536870918]],["^15",[433,"^O","^16",536870918]],["^15",[433,"^F",437,536870918]],["^15",[433,"^X",430,536870918]],["^15",[433,"^V",430,536870918]],["^15",[433,"^U",383,536870918]],["^15",[433,"^U",430,536870918]],["^15",[433,"^H",383,536870918]],["^15",[433,"^;","~u655b7377-98c6-4b76-b387-c2f86499f503",536870918]],["^15",[434,"^Q","~``justify-content`` and ``align-items``\nThe former, aligns the children of an [[HTML Element]] across its *main axis* whilst the latter aligns them across the *cross axis*. Values are some predefined strings, check intellisense.\n\nFor ex.:\n``align-items: center`` would align the items to the center of the cross axis. \nIf the main axis is horizontal, then this is the result\n![image.png](../assets/image_1692869633645_0.png)",536870918]],["^15",[434,"^O","^16",536870918]],["^15",[434,"^F",431,536870918]],["^15",[434,"^X",430,536870918]],["^15",[434,"^V",430,536870918]],["^15",[434,"^U",383,536870918]],["^15",[434,"^U",430,536870918]],["^15",[434,"^H",383,536870918]],["^15",[434,"^;","~u655b7377-2314-437b-8229-5f9b6b01fc61",536870918]],["^15",[435,"^Q","Shorthand\nSome CSS Properties are shorthand for accessing multiple properties.\nFor ex.: \n``padding`` is a shorthand for ``padding-top``, ``padding-right``, ``padding-bottom`` and ``padding-left``. \nSo a value like ``padding: 20px 30px 50px 40px`` assigns value to all 4 of these properties.",536870918]],["^15",[435,"^O","^16",536870918]],["^15",[435,"^F",432,536870918]],["^15",[435,"^X",430,536870918]],["^15",[435,"^V",430,536870918]],["^15",[435,"^U",430,536870918]],["^15",[435,"^;","~u655b7377-0306-4a93-962e-3956e7cf86b1",536870918]],["^15",[436,"^Q","Positioning\nCSS can define where and how an element is positioned on the page. This is done using the [position](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property which defines the type of position, a value from \n``fixed``: Fixed to the viewport. So no space is created for the element in the Document and then offset by LTRB. Can be thought of as fixed from the current window's top left.\n``static``: Positioning according to the flow of the document, so if its ``display is ``inline/block then it applies normally. LTRB doesn't affect it.\n``relative``: Like static, then it is offset by LTRB but without moving other elements.\n``sticky``: Kind of like fixed but fixed to the nearest scrolling element.\n``absolute``: Like fixed but fixed to the nearest element with the ``position`` property set and then affected by LTRB. \n\nThis property is combined with any or all of the properties ``left``, ``top``, ``right`` and ``bottom`` (LTRB) to finally determine the actual position of the [[HTML Element]].\nFor ex.:\n```css\nposition: relative;\ntop: 40px; \nleft: 40px;\n```",536870918]],["^15",[436,"^O","^16",536870918]],["^15",[436,"^F",433,536870918]],["^15",[436,"^X",430,536870918]],["^15",[436,"^V",430,536870918]],["^15",[436,"^U",383,536870918]],["^15",[436,"^U",430,536870918]],["^15",[436,"^H",383,536870918]],["^15",[436,"^;","~u655b7377-df91-47ed-a833-4f470bc202dc",536870918]],["^15",[437,"^Q","~``border``\nDefines the size, line style and color of the [border](https://developer.mozilla.org/en-US/docs/Web/CSS/display).\nFor ex.:\n```css\nborder: 5px solid black;\n```\nSets the border line width as 5px, line style as solid and border line color as black.",536870918]],["^15",[437,"^O","^16",536870918]],["^15",[437,"^F",439,536870918]],["^15",[437,"^X",430,536870918]],["^15",[437,"^V",430,536870918]],["^15",[437,"^U",430,536870918]],["^15",[437,"^;","~u655b7377-8641-453f-ad7c-755d1f9f997c",536870918]],["^15",[438,"^Q","~``padding``\nSets the padding.\nFor ex.:\n```css\n  padding: 0 20px 20px 20px;\n```\nDefines padding in TRBL. \nCan specify 1 (all sides), 2 (top and bottom take first, left and right take second), 3(TRB) or 4(TRBL) values.\n\nMore details: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding#syntax)",536870918]],["^15",[438,"^O","^16",536870918]],["^15",[438,"^F",435,536870918]],["^15",[438,"^X",430,536870918]],["^15",[438,"^V",430,536870918]],["^15",[438,"^U",430,536870918]],["^15",[438,"^;","~u655b7377-949b-4cc5-81a8-91949a78f822",536870918]],["^15",[439,"^Q","~``margin``\nSame as padding but defines the margins.\nThese properties can also take a value of ``auto`` which divides the remaining space on the axis equally.\nFor ex.:\n```css\n  margin: 0 auto;\n```\nGives 0 margin to top and bottom and then equally divides left and right space for the element.\nThis ``centers`` the element horizontally.",536870918]],["^15",[439,"^O","^16",536870918]],["^15",[439,"^F",438,536870918]],["^15",[439,"^X",430,536870918]],["^15",[439,"^V",430,536870918]],["^15",[439,"^U",430,536870918]],["^15",[439,"^;","~u655b7377-7354-4b04-8794-a31463b94161",536870918]],["^15",[440,"^3","alias:: Cascading Style Sheets\n\n- It is a language to specifically define styles. We use it in conjunction with [[HTML]] to define styles for \n  it. Here's the spec for [CSS](https://w3c.github.io/csswg-drafts/css2/)\n- CSS can be defined inline, using the ``style=\"<css>\"`` attribute of [[HTML]] elements or in the head [[HTML Element]] (embedded) or in a separate file .\n  \n  * External\n  For ex.:\n  For a file ``1.css``,\n  ```css\n  p {\n    color: red;\n    width: 500px;\n  }\n  ```\n  And it is saved with ``.css`` extension. \n  Then to link an external ``.css`` file and use it in an [[HTML]] Document, we use the ``link`` [[HTML Element]]\n  like so\n  ```html\n  <link href=\"styles/1.css\" rel=\"stylesheet\" />\n  ```\n  \n  * Inline\n  For ex.:\n  ```html\n  <div style=\"color:red; width: 500px;\" > ... </div>\n  ```\n  \n  * Internal/Embedded \n  ```html\n  <head>\n  p {\n    color: red;\n    width: 500px;\n  }\n  </head>\n  \n  <body> ... </body>\n  ```\n  And this CSS is applied to the current document.\n  \n  The priority of the CSS definitions go \n  Inline -> Internal/Embedded -> External CSS\n  So if an HTML element gets the same style property from External, then it will be overridden by the Inline element if it also defines it. \n  For ex.:\n  \n  ```html\n  <head>\n  p {\n  color: red;\n  width: 500px;\n  }\n  </head>\n  <body> \n   <p style=\"color:blue;\"> </p>\n   </body> \n  \n  <!-- will apply color:blue and width:500px to p -->\n  ```\n- Components of a CSS ``ruleset``\n  A CSS ruleset is a combination of a selector and a declaration block which looks like an [[Object]] but is simply a block that accepts ``Key:Value;`` pairs. \n  \n  For ex.:\n  ![CSS p declaration color red](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/css-declaration-small.png)\n  is a ruleset.\n  \n  * The selector is matched against all elements and if an [[HTML Element]] matches the selector then the styles defined in the declaration block are applied to the element.\n  We can have multiple selectors, \n  ```css\n  p,\n  h1,\n  li {\n  ...\n  }\n  ```\n  applies the same declaration block to all multiple type of elements.\n  There are more types of selectors \n  ![image.png](../assets/image_1687471001429_0.png)\n  Defined here: [MDN](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors)\n   \n  \n  * The property name and value is picked from [CSS Properties List MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference). Not all CSS properties are applicable to all HTML elements and this can be quite arduous to list, so it's best to check if a CSS property is applicable to an HTML element manually. Property value doesn't necessary need to be a single value though, it can accept a single value or multiple separated by ``,`` or just using `` `` and one property can even accept multiple types of values.\n-\n- Fonts\n  We can include external fonts with the ``link`` [[HTML Element]]\n  ```html\n  <link\n    href=\"https://fonts.googleapis.com/css?family=Open+Sans\"\n    rel=\"stylesheet\" />\n  ```\n  Then, use it in css like so\n  ```css\n  html {\n    font-size: 10px; \n    font-family: \"Open Sans\", sans-serif; \n  }\n  ```\n  uses the ``CSS Sizing`` for units.\n- CSS Box Model\n  CSS uses the box model for defining positions and sizes of and between elements.\n  It looks like so\n  ![Three boxes sat inside one another. From outside to in they are labelled margin, border and padding](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/box-model.png)\n  \n  So, for any [[HTML Element]] we can define the sizes for these properties and they will be affected as shown in the box model.\n  \n  For ex.:\n  ```css\n  body {\n    width: 600px;\n    margin: 0 auto;\n    background-color: #ff9500;\n    padding: 0 20px 20px 20px;\n    border: 5px solid black;\n  }\n  ```\n  sets the background color for the ``body`` [[HTML Element]] along with margin, width, padding etc.\n- [[CSS Property]]\n- Comment\n  Using ``/* */``\n- Computed And Resolved Properties\n  Raw values that are provided to an element after all the CSS selectors and styles have been applied are called computed properties. Then, once they are finally adjusted to the environment they become resolved properties. The [[DOM]] has method to get these properties on any ``node``.\n  \n  The resolution process takes the environment into account which includes resolution, window size, dpi etc. and even other elements on the page.\n  For ex.:\n  For this html with the sizes defined\n  ```html\n  <div id=\"example\">\n    ...Text...\n  </div>\n  <style>\n    #example {\n      width: 300px;\n      height: 200px;\n      border: 25px solid #E8C48F;\n      padding: 20px;\n      overflow: auto;\n    }\n  </style>\n  ```\n  Will actually have sizes like these\n  ![image.png](../assets/image_1687622635611_0.png)\n  \n  Here, since the scrollbar, which is added automatically by the browser, takes 16px the actual size taken up is 284px by the content.\n- Units\n  Units for length values in CSS are defined in either Absolute or Relative [units](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units).\n  \n  Absolute units\n  ![image.png](../assets/image_1687644544616_0.png)\n  \n  Relative units\n  ![image.png](../assets/image_1687644566356_0.png)\n  \n  We commonly use ``px`` for absolute and ``em``/``%`` for relative units.\n-",536870918]],["^15",[440,"^17",1700492151861,536870918]],["^15",[440,"^Z","JS/pages/CSS.md",536870918]],["^15",[441,"^5",402,536870918]],["^15",[441,"^K",1700492151860,536870918]],["^15",[441,"^@",false,536870918]],["^15",[441,"^Y","cascading style sheets",536870918]],["^15",[441,"^11","Cascading Style Sheets",536870918]],["^15",[441,"^B",1700492151860,536870918]],["^15",[441,"^;","~u655b7377-7f22-4291-8b4d-9d0829a3f547",536870918]],["^15",[442,"^Q","Computed And Resolved Properties\nRaw values that are provided to an element after all the CSS selectors and styles have been applied are called computed properties. Then, once they are finally adjusted to the environment they become resolved properties. The [[DOM]] has method to get these properties on any ``node``.\n\nThe resolution process takes the environment into account which includes resolution, window size, dpi etc. and even other elements on the page.\nFor ex.:\nFor this html with the sizes defined\n```html\n<div id=\"example\">\n  ...Text...\n</div>\n<style>\n  #example {\n    width: 300px;\n    height: 200px;\n    border: 25px solid #E8C48F;\n    padding: 20px;\n    overflow: auto;\n  }\n</style>\n```\nWill actually have sizes like these\n![image.png](../assets/image_1687622635611_0.png)\n\nHere, since the scrollbar, which is added automatically by the browser, takes 16px the actual size taken up is 284px by the content.",536870918]],["^15",[442,"^O","^16",536870918]],["^15",[442,"^F",453,536870918]],["^15",[442,"^X",402,536870918]],["^15",[442,"^V",402,536870918]],["^15",[442,"^U",288,536870918]],["^15",[442,"^U",402,536870918]],["^15",[442,"^H",288,536870918]],["^15",[442,"^;","~u655b7377-789b-4e81-8dd6-c113ba345eb2",536870918]],["^15",[443,"^Q","Components of a CSS ``ruleset``\nA CSS ruleset is a combination of a selector and a declaration block which looks like an [[Object]] but is simply a block that accepts ``Key:Value;`` pairs. \n\nFor ex.:\n![CSS p declaration color red](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/css-declaration-small.png)\nis a ruleset.\n\n* The selector is matched against all elements and if an [[HTML Element]] matches the selector then the styles defined in the declaration block are applied to the element.\nWe can have multiple selectors, \n```css\np,\nh1,\nli {\n...\n}\n```\napplies the same declaration block to all multiple type of elements.\nThere are more types of selectors \n![image.png](../assets/image_1687471001429_0.png)\nDefined here: [MDN](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors)\n \n\n* The property name and value is picked from [CSS Properties List MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference). Not all CSS properties are applicable to all HTML elements and this can be quite arduous to list, so it's best to check if a CSS property is applicable to an HTML element manually. Property value doesn't necessary need to be a single value though, it can accept a single value or multiple separated by ``,`` or just using `` `` and one property can even accept multiple types of values.",536870918]],["^15",[443,"^O","^16",536870918]],["^15",[443,"^F",448,536870918]],["^15",[443,"^X",402,536870918]],["^15",[443,"^V",402,536870918]],["^15",[443,"^U",299,536870918]],["^15",[443,"^U",383,536870918]],["^15",[443,"^U",402,536870918]],["^15",[443,"^H",299,536870918]],["^15",[443,"^H",383,536870918]],["^15",[443,"^;","~u655b7377-ac0d-4825-a0b8-25ea87eb4425",536870918]],["^15",[444,"^Q","It is a language to specifically define styles. We use it in conjunction with [[HTML]] to define styles for \nit. Here's the spec for [CSS](https://w3c.github.io/csswg-drafts/css2/)",536870918]],["^15",[444,"^O","^16",536870918]],["^15",[444,"^F",446,536870918]],["^15",[444,"^X",402,536870918]],["^15",[444,"^V",402,536870918]],["^15",[444,"^U",284,536870918]],["^15",[444,"^U",402,536870918]],["^15",[444,"^H",284,536870918]],["^15",[444,"^;","~u655b7377-0eeb-47d7-944b-8771c16435a3",536870918]],["^15",[445,"^Q","Fonts\nWe can include external fonts with the ``link`` [[HTML Element]]\n```html\n<link\n  href=\"https://fonts.googleapis.com/css?family=Open+Sans\"\n  rel=\"stylesheet\" />\n```\nThen, use it in css like so\n```css\nhtml {\n  font-size: 10px; \n  font-family: \"Open Sans\", sans-serif; \n}\n```\nuses the ``CSS Sizing`` for units.",536870918]],["^15",[445,"^O","^16",536870918]],["^15",[445,"^F",447,536870918]],["^15",[445,"^X",402,536870918]],["^15",[445,"^V",402,536870918]],["^15",[445,"^U",383,536870918]],["^15",[445,"^U",402,536870918]],["^15",[445,"^H",383,536870918]],["^15",[445,"^;","~u655b7377-15a5-4f2e-8509-6e9490b48075",536870918]],["^15",[446,"^Q","alias:: Cascading Style Sheets\n\n",536870918]],["^15",[446,"^O","^16",536870918]],["^15",[446,"^1;",["^19",[]],536870918]],["^15",[446,"^F",402,536870918]],["^15",[446,"^X",402,536870918]],["^15",[446,"^V",402,536870918]],["^15",[446,"^U",402,536870918]],["^15",[446,"^U",441,536870918]],["^15",[446,"^:",true,536870918]],["^15",[446,"^?",["^ ","^18",["^19",["Cascading Style Sheets"]]],536870918]],["^15",[446,"^J",["^18"],536870918]],["^15",[446,"^4",["^ ","^18","Cascading Style Sheets"],536870918]],["^15",[446,"^H",441,536870918]],["^15",[446,"^;","~u655b7377-4e7c-4f4a-a2fd-cedbd5569e4a",536870918]],["^15",[447,"^Q","",536870918]],["^15",[447,"^O","^16",536870918]],["^15",[447,"^F",443,536870918]],["^15",[447,"^X",402,536870918]],["^15",[447,"^V",402,536870918]],["^15",[447,"^U",402,536870918]],["^15",[447,"^;","~u655b7377-915b-4a44-9ab0-65c990e066ab",536870918]],["^15",[448,"^Q","CSS can be defined inline, using the ``style=\"<css>\"`` attribute of [[HTML]] elements or in the head [[HTML Element]] (embedded) or in a separate file .\n\n* External\nFor ex.:\nFor a file ``1.css``,\n```css\np {\n  color: red;\n  width: 500px;\n}\n```\nAnd it is saved with ``.css`` extension. \nThen to link an external ``.css`` file and use it in an [[HTML]] Document, we use the ``link`` [[HTML Element]]\nlike so\n```html\n<link href=\"styles/1.css\" rel=\"stylesheet\" />\n```\n\n* Inline\nFor ex.:\n```html\n<div style=\"color:red; width: 500px;\" > ... </div>\n```\n\n* Internal/Embedded \n```html\n<head>\np {\n  color: red;\n  width: 500px;\n}\n</head>\n\n<body> ... </body>\n```\nAnd this CSS is applied to the current document.\n\nThe priority of the CSS definitions go \nInline -> Internal/Embedded -> External CSS\nSo if an HTML element gets the same style property from External, then it will be overridden by the Inline element if it also defines it. \nFor ex.:\n\n```html\n<head>\np {\ncolor: red;\nwidth: 500px;\n}\n</head>\n<body> \n <p style=\"color:blue;\"> </p>\n </body> \n\n<!-- will apply color:blue and width:500px to p -->\n```",536870918]],["^15",[448,"^O","^16",536870918]],["^15",[448,"^F",444,536870918]],["^15",[448,"^X",402,536870918]],["^15",[448,"^V",402,536870918]],["^15",[448,"^U",284,536870918]],["^15",[448,"^U",383,536870918]],["^15",[448,"^U",402,536870918]],["^15",[448,"^H",284,536870918]],["^15",[448,"^H",383,536870918]],["^15",[448,"^;","~u655b7377-7663-49b4-a8c2-7a19c90b5529",536870918]],["^15",[449,"^Q","",536870918]],["^15",[449,"^O","^16",536870918]],["^15",[449,"^F",452,536870918]],["^15",[449,"^X",402,536870918]],["^15",[449,"^V",402,536870918]],["^15",[449,"^U",402,536870918]],["^15",[449,"^;","~u655b7377-3f24-4772-9753-0f18b1702e4d",536870918]],["^15",[450,"^Q","CSS Box Model\nCSS uses the box model for defining positions and sizes of and between elements.\nIt looks like so\n![Three boxes sat inside one another. From outside to in they are labelled margin, border and padding](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/box-model.png)\n\nSo, for any [[HTML Element]] we can define the sizes for these properties and they will be affected as shown in the box model.\n\nFor ex.:\n```css\nbody {\n  width: 600px;\n  margin: 0 auto;\n  background-color: #ff9500;\n  padding: 0 20px 20px 20px;\n  border: 5px solid black;\n}\n```\nsets the background color for the ``body`` [[HTML Element]] along with margin, width, padding etc.",536870918]],["^15",[450,"^O","^16",536870918]],["^15",[450,"^F",445,536870918]],["^15",[450,"^X",402,536870918]],["^15",[450,"^V",402,536870918]],["^15",[450,"^U",383,536870918]],["^15",[450,"^U",402,536870918]],["^15",[450,"^H",383,536870918]],["^15",[450,"^;","~u655b7377-bb1b-4e19-986a-4f6d001c2924",536870918]],["^15",[451,"^Q","[[CSS Property]]",536870918]],["^15",[451,"^O","^16",536870918]],["^15",[451,"^F",450,536870918]],["^15",[451,"^X",402,536870918]],["^15",[451,"^V",402,536870918]],["^15",[451,"^U",402,536870918]],["^15",[451,"^U",430,536870918]],["^15",[451,"^H",430,536870918]],["^15",[451,"^;","~u655b7377-06db-4896-bdff-af327ac9fc85",536870918]],["^15",[452,"^Q","Units\nUnits for length values in CSS are defined in either Absolute or Relative [units](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units).\n\nAbsolute units\n![image.png](../assets/image_1687644544616_0.png)\n\nRelative units\n![image.png](../assets/image_1687644566356_0.png)\n\nWe commonly use ``px`` for absolute and ``em``/``%`` for relative units.",536870918]],["^15",[452,"^O","^16",536870918]],["^15",[452,"^F",442,536870918]],["^15",[452,"^X",402,536870918]],["^15",[452,"^V",402,536870918]],["^15",[452,"^U",402,536870918]],["^15",[452,"^;","~u655b7377-d836-46e7-b4e4-2f204ea2ba2a",536870918]],["^15",[453,"^Q","Comment\nUsing ``/* */``",536870918]],["^15",[453,"^O","^16",536870918]],["^15",[453,"^F",451,536870918]],["^15",[453,"^X",402,536870918]],["^15",[453,"^V",402,536870918]],["^15",[453,"^U",402,536870918]],["^15",[453,"^;","~u655b7377-e3c5-47b3-aaf0-52e087c31dad",536870918]],["^15",[454,"^3","- A class in JS is a kind of [[Function]], which is just an [[Object]]. Still, it offers a lot of convenience and familiarity with classes in other language such as [[C++]].\n- Classes are defined with the ``class`` keyword,\n  For ex.:\n  ```js\n  class Yo {\n  constructor() {} //notice the lack of commas unlike in Objects\n  hi(){}\n  } \n  \n  let x = new Yo();\n  x.hi();\n  ```\n  Then we can create ``Class objects`` (COs) with the [[new]] keyword. (A CO or class object or just object is different from an Object, ofc an object is still an Object but in terminology, a CO is different from an Object)\n- Classes are just a convenience over [[Function]]s in JS\n  For ex.:\n  ```js\n  class X{}\n  \n  console.log(typeof X); //prints Function\n  ```\n- When we create a CO with the [[new]] keyword, these 4 things happen\n  * A [[Function]] with the same name as the class is created\n  * The class' ctor function's body, if defined, becomes the body of this function\n  * The default ``[[Prototype]]`` of the function gets augmented with the class' methods/properties as they become methods/properties of the [[Prototype Object]] of this function. \n  * Calls this function as a Ctor Function.\n  For ex.:\n  ```js\n  class X{\n   yo(){}\n  }\n  \n  let x = new X();\n  ```\n  Here, a function named ``X`` is created, it has empty body, ``X``'s ``[[Prototype]]`` gets the method ``yo()`` in it, then this ``X`` function is called.\n  So, the function ``X`` has ``X.prototype = {constructor: X, yo(){}}`` and we can check this too\n  ```js\n  class X{\n   yo(){}\n  }\n  \n  console.log(X === X.prototype.constructor); //true\n  \n  ```\n  \n  Remember, just like [[Function]] has ``.prototype`` so does a class, this ``.prototype``'s Object is assigned to the ``[[Prototype]]`` of the Object that is returned after ``new <Class>()`` is called.\n- However, despite all that there are actual differences between classes and [[Function]]s. This is due to how JS applies many other things to classes, such as\n  * ``[[IsClassConstructor]]``, this special internal property is implicitly set to true for classes and is referred at many places in JS, such as with [[new]].\n  For ex.:\n  ```js\n  class X{}\n  \n  let x = new X(); //ok\n  X(); //error\n  ```\n  * String representation of a class is different too\n  ```js\n  class X{}\n  console.log(X); //prints class X...\n  ```\n  * All class methods are non-enumerable by default.\n  * All code inside classes uses ``Strict`` mode.\n- Class Expression\n  Just like [[Function]] expression, these are allowed\n  ```js\n  let x = class {...}; //notice the semicolon\n  let y = class Yo{...}; //also allowed, just like Named Function Expressions\n  let z = new x(); //ok\n  ```\n  This allows us to even dynamically create classes, like when we return CE's from functions.\n- Classes can use getter/setter methods and the syntax is the same as Accessor Properties in [[Object]].\n- Computed Names are also allowed in classes\n  For ex.:\n  ```js\n  class X{\n   [\"yo\"+\"yee\"]() {\n   console.log(\"yuh\");\n    }\n  }\n  \n  let x = new X();\n  x[\"yo\"+\"yee\"](); //ok\n  ```\n  Calling methods using the ``[...]`` [[Operator]] is allowed too.\n- Introduced in recent years, classes allow fields too now\n  ```js\n  class X{\n   name = \"yo\"; //notice the semicolon\n  }\n  \n  let x =new X();\n  console.log(x.prototype.name); //undefined\n  console.log(x.name); //yo\n  ```\n  These are set on individual Objects and not the [[Prototype Object]]. And can even use expressions so the value is evaluated at runtime.\n  \n  Class field is something even the traditional [[Object]] doesn't have, as we can use Arrow [[Function]] to be assigned to a field hence allowing us to refer the class directly in [[this]]\n  For ex.:\n  ```js\n  let x = {\n   yo: () => {...}, //error as arrow functions are not allowed in Objects\n  };\n  \n  class X {\n   a= 2;\n   yo = () => {\n    console.log(this.a); //works\n    }\n  }\n  let xobj= new X();\n  x.yo(); //ok\n  \n  ```\n- The value of [[this]] in class methods is the class itself.\n- Class Inheritance\n  We can extend a class with the ``extends`` keyword\n  ``class Child extends Parent {...}``.\n  \n  And it works as expected. The way it works is by simply setting ``Child.prototype``'s [[Prototype Object]] to the ``Parent`` class.\n  For ex.:\n  ```js\n  class X {\n  yo() {}\n  };\n  class Y extends X{\n  };\n  let y = new Y();\n  y.yo(); //ok\n  ```\n  It looks something like so\n  ![image.png](../assets/image_1686809042985_0.png) \n  \n  * However, unlike in other languages, JS also allows an expression after ``extends``\n  For ex.:\n  ```js\n  function yo() {\n   return class {};\n  }\n  \n  class X extends yo() {\n  }  //works\n  ```\n  * Overriding methods\n  Just like normal, if a child has a method with the same name as the parent then the child method overrides (or call it [[Shadowed]]) the parent one.\n  \n  * If a class extends another class and doesn't have a ctor, then the following ctor is generated automatically\n  ```js\n  class X {}\n  class Y extends X{\n  /*generates\n  constructor(...args) {\n    super(...args);\n   }\n  this ctor implicitly\n  */\n  }\n  \n  let y= new Y();\n  ```\n  If we specify our own ctor, then we must call ``super(...)`` before using [[this]] in the ctor. Otherwise it is an error.\n  \n  This works like so, in JS there's a difference between the ``constructor()`` function of a child/deriving class and of a ``constructor()`` of a parent/derived class. The derived class' ctor function has a special internal property ``[[ConstructorKind]]:\"derived\"`` set on its [[Object]]. \n  When [[new]] executes the ctor function, it passes an empty Object to [[this]] if there's no derived class, but if there is a derived class then it expects a call to the ``constructor()`` of the derived class and the generated Object is passed to the [[this]].\n  \n  * Yes we can inherit and override class fields too\n  ```js\n  class X{\n   name= \"X\";\n   constructor() {\n    console.log(this.name);\n   }\n  \n   yo() {\n   console.log(this.name);\n   }\n  }\n  class Y extends X{\n   name = \"Y\";\n  \n  }\n  \n  let x = new X(); //prints \"X\"\n  let y = new Y(); //also prints \"X\"\n  y.yo(); //prints \"Y\"\n  x.yo(); //prints \"X\"\n  ```\n  \n  The reason ``new Y()`` prints X is due to how the objects are initialized. Firstly, fields are created on the object itself and not the class. Meaning if a class' object is not created yet, it won't have access to the fields. So above, as we know a default ctor is created for ``Y`` which calls ``X``'s ctor. And at that time, ``Y`` isn't created yet so the object of y calling X doesn't yet have a ``name`` property, hence the ctor of ``X``  uses its own field then finishes up . Then the rest of the Y's ctor is finished and it's object overrides the name set by X in the resultant object.\n  On the other hand, the resultant object has correct value for name after ctor and now when ``.yo()`` is called, it uses the ``name`` set by ``Y``.\n-\n- ``super`` keyword: \n  Classes also provide a way to call their Parent Class' methods, this is done using the super keyword.\n  For ex.:\n  ```js\n  class X{\n  yo(){}\n  } \n  class Y {\n   constructor() { \n    super(); //call the super ctor\n   } \n   \n   ho() {\n   super.yo(); //ok\n   let x = function() {\n     super.yo(); //error as super is unknown here\n    }\n   let y = () => {\n    super.yo(); //ok\n     }\n   }\n   \n  }\n  ```\n  Arrow [[Function]]s don't have ``super`` either, so they refer to their parent block's super which is why it works here.\n  \n  ``super`` works similarly in normal Object methods too.\n- ``[[HomeObject]]``:\n  ``super`` doesn't use [[this]] directly to go up the parent chain, it uses this special property.\n  ``[[HomeObject]]`` is a special internal property set on [[Function]]s when they are methods of either [[Class]]es or [[Object]]s. The value of this property is the class or Object itself. This is used by ``super`` to correctly identify parent class methods and call them.\n  For ex.:\n  ```js\n  let x ={\n   yo() {}\n   no() {} //no.[[HomeObject]] = x\n  };\n  let y = {\n  __proto__: x\n   yo() {\n   this.__proto__.yo.call(this); \n   }\n   no() { //no.[[HomeObject]] = y\n   super.no();\n  }\n  };\n  let z = {\n   __proto__: y\n   yo() {\n   this.__proto__yo.call(this); //we can do this.__proto__.yo() too but then when y.yo() is called it won't have a ``this`` that has a __proto__ to x as ``this`` be no Object.\n   }\n    no() { //no.[[HomeObject]] = z\n   super.no(); \n  }\n  }\n  \n  z.yo(); //call stack error\n  z.no(); //works, calls z.no() then y.no() then x.no()\n  ```\n  leads to an infinite recursion as ``z.yo()`` calls ``y.yo()`` which still has ``this`` that has ``z`` in it so it calls ``y.yo()`` again and the same for infinite times. \n  On the other hand, ``z.no()`` works because ``super`` knows how to circumvent such issues. It does so by calling something like ``z.no.[[HomeObject]].__proto__.no()`` when we do ``super.no()``, which leads yo ``y.no()`` and then ``y.no.[[HomeObject]].__proto__.no()`` is called which leads to ``x.no()`` finally.\n  \n  * This special property is only used by ``super``.\n  * ``[[HomeObject]]`` is immutable. It never changes. This means, unlike normal Functions, methods in Classes/Objects that use ``super`` must never be copied to other Classes/Objects if we wish to keep the same behavior.\n  For ex.:\n  ```js\n  let x ={\n   yo() {\n   console.log(\"x.yo\");\n   }\n  };\n  let y = {\n   __proto__: x\n   yo() {\n  console.log(\"y.yo\");\n   super.yo();\n   }\n  };\n  let z = {\n   yo() {\n    console.log(\"z.yo\");\n   }\n  };\n  let k = {\n   __proto__:z\n   yo: y.yo,\n  };\n  \n  k.yo(); //prints y.yo then x.yo\n  ```\n  This is not expected behavior since we expect ``k.yo`` to copy the method ``y.yo`` and the ``super.yo()`` in it to call ``z.yo()``. Since the ``[[HomeObject]]`` never changes, even when ``k.yo`` copies the function, it is still the same ``y`` so we get this behavior.\n  * ``[[HomeObject]]`` is only set for methods that are defined like ``<method>()`` and not any other way, like ``<method name>: function(){...}``.\n- Static Properties and Methods\n  Classes in JS can have static methods/properties too, i.e., methods that exist on the Class itself rather than in each object of the class. We use the ``static`` keyword for this.\n  For ex.:\n  ```js\n  class X{\n   static name = \"nig\";\n    yo() {\n      console.log(typeof this);\n    }\n    static no() { //use static keyword\n      console.log(typeof this);\n    }\n  }\n  X.halo = function () {}; //or create static methods like so\n  X.otherName = \"ayooo\";  //same with properties\n  \n  let x = new X();\n  x.yo(); //prints object\n  X.halo(); //works\n  X.no(); //prints function\n  console.log(X.name); //prints nig\n  \n  //x.no(); doesn't work, no is a method on the class itself not the objects of it\n  ```\n  These are the 2 ways to create static methods/properties on classes. The value of [[this]] in a static method is the ctor function of the class.\n  \n  * These are inherited too\n  ```js\n  class X{\n   static name = \"Ay\";\n   yo() {}\n  }\n  \n  class Y extends X {\n   nah(){}\n  }\n  \n  console.log(Y.name); //prints Ay. \n  ```\n  The static properties/methods remain in the class itself, so the [[Prototype Object]] of Y which is X has the property name in it.\n  It looks like so\n  ![image.png](../assets/image_1686878500858_0.png)\n  \n  We can check it too\n  ```js\n  class X {}\n  class Y extends X {}\n  \n  // for statics\n  console.log(Y.__proto__ === X); // true\n  \n  // for regular methods\n  console.log(Y.prototype.__proto__ === X.prototype); // true\n  ```\n  \n  However, built-in classes are an exception. Like [[Array]] and [[Date]] both extend [[Object]], however they don't inherit the statics from Object.\n- Access Modifiers:\n  Not in the language as of yet, curently it is recommended to go by convention and have protected properties prefixed with ``_`` in classes/ [[Object]]s. The language currently itself doesn't see these properties differently and inheritance/etc. works like normal.\n  However, a new JS feature is almost implemented in the standard that allows private properties and methods. To do so we prefix property/method names with ``#`` and such properties/methods are considered private. These are not inherited and can only be accessed by the same class internally.\n  For ex.:\n  ```js\n  class X{\n   #speed = 20;\n   yo() {\n   console.log(this.#speed); //ok works\n   }\n  }\n  \n  class Y extends X {\n   nah() {\n   console.log(this[#name]); //2 errors, firstly the [...] Operator can't use this syntax, this is an intended limitation\n  // secondly, as this is a private property, Y can't access it.\n   }\n  }\n  ```\n- Built-in classes are implemented in a way that allows extending them more convenient.\n  For ex.:\n  ```js\n  class PowerArray extends Array {\n    isEmpty() {\n      return this.length === 0;\n    }\n  }\n  \n  let arr = new PowerArray(1, 2, 5, 10, 50);\n  console.log(arr.isEmpty()); // false\n  \n  let filteredArr = arr.filter(item => item >= 10);\n  console.log(filteredArr); // 10, 50\n  console.log(filteredArr.isEmpty()); // false. This still works, isEmpty is present in PowerArray and filter returns PowerArray here.\n  \n  console.log(arr.constructor===PowerArray); //true\n  ```\n  Here, our extension on [[Array]] still works despite being processed by the parent Class' method. That is, methods like ``<array>.filter`` are smart enough to return the same type of object that invoked them. To do this, they use the constructor of the child object, which is why ``arr.constructor`` is equal to ``PowerArray`` above.\n  \n   However, this behavior can be modified so that they return a given type of object. To do so, our Class must override static getter method ``[Symbol.species]`` which is a [[Symbol]] and then we return the constructor those methods will use to generate result object of.\n  For ex.:\n  ```js\n  class PowerArray extends Array{\n   static get [Symbol.species]  {\n   return Array;\n   }\n   yo() {}\n  }\n  let arr = new PowerArray(1,2,3,4);\n  let arrF= arr.filter(i=> i>1);\n  arrF.yo(); //error as arrF is of type Array and not PowerArray\n  ```\n- ``instanceOf`` [[Operator]]\n  This op. returns true if a given object is an instance of a given class, or one of its parents.\n  ``<obj> instanceOf <class>``.\n  For ex.:\n  ```js\n  let x= [1,2,3];\n  console.log(x instanceOf Array); //true\n  console.log(x instanceOf Object); //also true\n  ```\n  \n  This behavior can be customized too, by defining a static method with the signature [Symbol.hasInstance](<obj>) which is a [[Symbol]]. This method has to return true or false. \n  For ex.:\n  ```js\n  class X{\n   static [Symbol.hasInstance](obj) {\n    return true;\n    }\n  }\n  \n  let arr = [1,2,3];\n  console.log(arr instanceOf X); //prints true\n  ```\n  The instanceOf op. roughly works like so, for the given Class, search for this method in the Class, if found pass the object, else compare ``<obj>.__proto__===<Class>.prototype``, if this is false then look up the [[Prototype Object]] chain and check these 2 again. If no Class in the prototypal chain has this method and all the [[Prototype Object]] comparison return false, then return false.\n  \n  There's also ``<objA>.isPrototypeOf(<objB>)``, so we can also use ``<Class>.prototype.isPrototypeOf(obj)``.\n- Mixin\n  This is a ``Class`` that only provides behavior/functionality that other classes can ``mix-in`` their own definitions to conveniently copy functionality. \n  Classes in JS are single inheritance as we know, so mixins provide a way to mix multiple classes in.\n  JS doesn't provide any special functionality for mixins, but we can copy over methods from a class manually. \n  \n  For ex.:\n  ```js\n  let myMixin= {\n   yo() {}\n  };\n  \n  class X{\n   \n  }\n  \n  Object.assign(X.prototype, myMixin);\n  \n  new X().yo(); //works\n  ```\n  We use ``Object.assign(...)`` [[Object]]'s method to copy over methods/properties from one Object into another.",536870918]],["^15",[454,"^17",1700492151931,536870918]],["^15",[454,"^Z","JS/pages/Class.md",536870918]],["^15",[455,"^5",859,536870919]],["^15",[455,"^K",1700492152171,536870918]],["^15",[455,"^@",false,536870918]],["^15",[455,"^Y","prototype object",536870918]],["^15",[455,"^11","Prototype Object",536870918]],["^15",[455,"^B",1700492152171,536870918]],["^15",[455,"^;","~u655b7379-9aa2-4e84-bd3e-39329243e1e5",536870919]],["^15",[456,"^K",1700492152438,536870918]],["^15",[456,"^[",1017,536870919]],["^15",[456,"^@",false,536870918]],["^15",[456,"^Y","new",536870918]],["^15",[456,"^11","new",536870918]],["^15",[456,"^B",1700492152438,536870918]],["^15",[456,"^;","~u655b7379-bf48-467f-ae54-767f7b52066e",536870919]],["^15",[457,"^K",1700492152310,536870918]],["^15",[457,"^[",564,536870918]],["^15",[457,"^@",false,536870918]],["^15",[457,"^Y","date",536870918]],["^15",[457,"^11","Date",536870918]],["^15",[457,"^B",1700492152310,536870918]],["^15",[457,"^;","~u655b7378-188f-4926-b256-d81f49fb1946",536870918]],["^15",[458,"^5",953,536870919]],["^15",[458,"^K",1700492152435,536870918]],["^15",[458,"^[",952,536870919]],["^15",[458,"^@",false,536870918]],["^15",[458,"^Y","shadowed",536870918]],["^15",[458,"^11","Shadowed",536870918]],["^15",[458,"^?",["^ ","^18",["^19",["Variable Shadowing"]]],536870919]],["^15",[458,"^4",["^ ","^18","Variable Shadowing"],536870919]],["^15",[458,"^B",1700492152435,536870918]],["^15",[458,"^;","~u655b7379-0382-4209-b0b9-a1ef978c0ed5",536870919]],["^15",[459,"^Q","Class Inheritance\nWe can extend a class with the ``extends`` keyword\n``class Child extends Parent {...}``.\n\nAnd it works as expected. The way it works is by simply setting ``Child.prototype``'s [[Prototype Object]] to the ``Parent`` class.\nFor ex.:\n```js\nclass X {\nyo() {}\n};\nclass Y extends X{\n};\nlet y = new Y();\ny.yo(); //ok\n```\nIt looks something like so\n![image.png](../assets/image_1686809042985_0.png) \n\n* However, unlike in other languages, JS also allows an expression after ``extends``\nFor ex.:\n```js\nfunction yo() {\n return class {};\n}\n\nclass X extends yo() {\n}  //works\n```\n* Overriding methods\nJust like normal, if a child has a method with the same name as the parent then the child method overrides (or call it [[Shadowed]]) the parent one.\n\n* If a class extends another class and doesn't have a ctor, then the following ctor is generated automatically\n```js\nclass X {}\nclass Y extends X{\n/*generates\nconstructor(...args) {\n  super(...args);\n }\nthis ctor implicitly\n*/\n}\n\nlet y= new Y();\n```\nIf we specify our own ctor, then we must call ``super(...)`` before using [[this]] in the ctor. Otherwise it is an error.\n\nThis works like so, in JS there's a difference between the ``constructor()`` function of a child/deriving class and of a ``constructor()`` of a parent/derived class. The derived class' ctor function has a special internal property ``[[ConstructorKind]]:\"derived\"`` set on its [[Object]]. \nWhen [[new]] executes the ctor function, it passes an empty Object to [[this]] if there's no derived class, but if there is a derived class then it expects a call to the ``constructor()`` of the derived class and the generated Object is passed to the [[this]].\n\n* Yes we can inherit and override class fields too\n```js\nclass X{\n name= \"X\";\n constructor() {\n  console.log(this.name);\n }\n\n yo() {\n console.log(this.name);\n }\n}\nclass Y extends X{\n name = \"Y\";\n\n}\n\nlet x = new X(); //prints \"X\"\nlet y = new Y(); //also prints \"X\"\ny.yo(); //prints \"Y\"\nx.yo(); //prints \"X\"\n```\n\nThe reason ``new Y()`` prints X is due to how the objects are initialized. Firstly, fields are created on the object itself and not the class. Meaning if a class' object is not created yet, it won't have access to the fields. So above, as we know a default ctor is created for ``Y`` which calls ``X``'s ctor. And at that time, ``Y`` isn't created yet so the object of y calling X doesn't yet have a ``name`` property, hence the ctor of ``X``  uses its own field then finishes up . Then the rest of the Y's ctor is finished and it's object overrides the name set by X in the resultant object.\nOn the other hand, the resultant object has correct value for name after ctor and now when ``.yo()`` is called, it uses the ``name`` set by ``Y``.",536870918]],["^15",[459,"^O","^16",536870918]],["^15",[459,"^F",465,536870918]],["^15",[459,"^X",332,536870918]],["^15",[459,"^V",332,536870918]],["^15",[459,"^U",299,536870918]],["^15",[459,"^U",332,536870918]],["^15",[459,"^U",400,536870918]],["^15",[459,"^U",455,536870918]],["^15",[459,"^U",456,536870918]],["^15",[459,"^U",458,536870918]],["^15",[459,"^H",299,536870918]],["^15",[459,"^H",400,536870918]],["^15",[459,"^H",455,536870918]],["^15",[459,"^H",456,536870918]],["^15",[459,"^H",458,536870918]],["^15",[459,"^;","~u655b7377-ef1f-473c-9844-75cb5bdcbb4a",536870918]],["^15",[460,"^Q","Access Modifiers:\nNot in the language as of yet, curently it is recommended to go by convention and have protected properties prefixed with ``_`` in classes/ [[Object]]s. The language currently itself doesn't see these properties differently and inheritance/etc. works like normal.\nHowever, a new JS feature is almost implemented in the standard that allows private properties and methods. To do so we prefix property/method names with ``#`` and such properties/methods are considered private. These are not inherited and can only be accessed by the same class internally.\nFor ex.:\n```js\nclass X{\n #speed = 20;\n yo() {\n console.log(this.#speed); //ok works\n }\n}\n\nclass Y extends X {\n nah() {\n console.log(this[#name]); //2 errors, firstly the [...] Operator can't use this syntax, this is an intended limitation\n// secondly, as this is a private property, Y can't access it.\n }\n}\n```",536870918]],["^15",[460,"^O","^16",536870918]],["^15",[460,"^F",471,536870918]],["^15",[460,"^X",332,536870918]],["^15",[460,"^V",332,536870918]],["^15",[460,"^U",299,536870918]],["^15",[460,"^U",332,536870918]],["^15",[460,"^H",299,536870918]],["^15",[460,"^;","~u655b7377-1f42-4f69-834d-d9dc9e8a0f26",536870918]],["^15",[461,"^Q","Computed Names are also allowed in classes\nFor ex.:\n```js\nclass X{\n [\"yo\"+\"yee\"]() {\n console.log(\"yuh\");\n  }\n}\n\nlet x = new X();\nx[\"yo\"+\"yee\"](); //ok\n```\nCalling methods using the ``[...]`` [[Operator]] is allowed too.",536870918]],["^15",[461,"^O","^16",536870918]],["^15",[461,"^F",466,536870918]],["^15",[461,"^X",332,536870918]],["^15",[461,"^V",332,536870918]],["^15",[461,"^U",332,536870918]],["^15",[461,"^U",339,536870918]],["^15",[461,"^H",339,536870918]],["^15",[461,"^;","~u655b7377-701a-4145-8a60-3eb45fd40801",536870918]],["^15",[462,"^Q","~``instanceOf`` [[Operator]]\nThis op. returns true if a given object is an instance of a given class, or one of its parents.\n``<obj> instanceOf <class>``.\nFor ex.:\n```js\nlet x= [1,2,3];\nconsole.log(x instanceOf Array); //true\nconsole.log(x instanceOf Object); //also true\n```\n\nThis behavior can be customized too, by defining a static method with the signature [Symbol.hasInstance](<obj>) which is a [[Symbol]]. This method has to return true or false. \nFor ex.:\n```js\nclass X{\n static [Symbol.hasInstance](obj) {\n  return true;\n  }\n}\n\nlet arr = [1,2,3];\nconsole.log(arr instanceOf X); //prints true\n```\nThe instanceOf op. roughly works like so, for the given Class, search for this method in the Class, if found pass the object, else compare ``<obj>.__proto__===<Class>.prototype``, if this is false then look up the [[Prototype Object]] chain and check these 2 again. If no Class in the prototypal chain has this method and all the [[Prototype Object]] comparison return false, then return false.\n\nThere's also ``<objA>.isPrototypeOf(<objB>)``, so we can also use ``<Class>.prototype.isPrototypeOf(obj)``.",536870918]],["^15",[462,"^O","^16",536870918]],["^15",[462,"^F",472,536870918]],["^15",[462,"^X",332,536870918]],["^15",[462,"^V",332,536870918]],["^15",[462,"^U",302,536870918]],["^15",[462,"^U",332,536870918]],["^15",[462,"^U",339,536870918]],["^15",[462,"^U",455,536870918]],["^15",[462,"^H",302,536870918]],["^15",[462,"^H",339,536870918]],["^15",[462,"^H",455,536870918]],["^15",[462,"^;","~u655b7377-7dea-4a86-9d2e-f0b471ed8d2e",536870918]],["^15",[463,"^Q","Classes are just a convenience over [[Function]]s in JS\nFor ex.:\n```js\nclass X{}\n\nconsole.log(typeof X); //prints Function\n```",536870918]],["^15",[463,"^O","^16",536870918]],["^15",[463,"^F",468,536870918]],["^15",[463,"^X",332,536870918]],["^15",[463,"^V",332,536870918]],["^15",[463,"^U",163,536870918]],["^15",[463,"^U",332,536870918]],["^15",[463,"^H",163,536870918]],["^15",[463,"^;","~u655b7377-3d3b-46c0-b918-b582a943e049",536870918]],["^15",[464,"^Q","",536870918]],["^15",[464,"^O","^16",536870918]],["^15",[464,"^F",459,536870918]],["^15",[464,"^X",332,536870918]],["^15",[464,"^V",332,536870918]],["^15",[464,"^U",332,536870918]],["^15",[464,"^;","~u655b7377-16eb-4b76-81b7-002be2d51662",536870918]],["^15",[465,"^Q","The value of [[this]] in class methods is the class itself.",536870918]],["^15",[465,"^O","^16",536870918]],["^15",[465,"^F",473,536870918]],["^15",[465,"^X",332,536870918]],["^15",[465,"^V",332,536870918]],["^15",[465,"^U",332,536870918]],["^15",[465,"^U",400,536870918]],["^15",[465,"^H",400,536870918]],["^15",[465,"^;","~u655b7377-71a9-4229-857f-57cd47f681ed",536870918]],["^15",[466,"^Q","Classes can use getter/setter methods and the syntax is the same as Accessor Properties in [[Object]].",536870918]],["^15",[466,"^O","^16",536870918]],["^15",[466,"^F",467,536870918]],["^15",[466,"^X",332,536870918]],["^15",[466,"^V",332,536870918]],["^15",[466,"^U",299,536870918]],["^15",[466,"^U",332,536870918]],["^15",[466,"^H",299,536870918]],["^15",[466,"^;","~u655b7377-ba13-44ac-9434-69b35c115d48",536870918]],["^15",[467,"^Q","Class Expression\nJust like [[Function]] expression, these are allowed\n```js\nlet x = class {...}; //notice the semicolon\nlet y = class Yo{...}; //also allowed, just like Named Function Expressions\nlet z = new x(); //ok\n```\nThis allows us to even dynamically create classes, like when we return CE's from functions.",536870918]],["^15",[467,"^O","^16",536870918]],["^15",[467,"^F",470,536870918]],["^15",[467,"^X",332,536870918]],["^15",[467,"^V",332,536870918]],["^15",[467,"^U",163,536870918]],["^15",[467,"^U",332,536870918]],["^15",[467,"^H",163,536870918]],["^15",[467,"^;","~u655b7377-ab5b-463d-86ee-3df820eb8816",536870918]],["^15",[468,"^Q","Classes are defined with the ``class`` keyword,\nFor ex.:\n```js\nclass Yo {\nconstructor() {} //notice the lack of commas unlike in Objects\nhi(){}\n} \n\nlet x = new Yo();\nx.hi();\n```\nThen we can create ``Class objects`` (COs) with the [[new]] keyword. (A CO or class object or just object is different from an Object, ofc an object is still an Object but in terminology, a CO is different from an Object)",536870918]],["^15",[468,"^O","^16",536870918]],["^15",[468,"^F",474,536870918]],["^15",[468,"^X",332,536870918]],["^15",[468,"^V",332,536870918]],["^15",[468,"^U",332,536870918]],["^15",[468,"^U",456,536870918]],["^15",[468,"^H",456,536870918]],["^15",[468,"^;","~u655b7377-a6fc-49bb-bbc9-f7841037b164",536870918]],["^15",[469,"^Q","Mixin\nThis is a ``Class`` that only provides behavior/functionality that other classes can ``mix-in`` their own definitions to conveniently copy functionality. \nClasses in JS are single inheritance as we know, so mixins provide a way to mix multiple classes in.\nJS doesn't provide any special functionality for mixins, but we can copy over methods from a class manually. \n\nFor ex.:\n```js\nlet myMixin= {\n yo() {}\n};\n\nclass X{\n \n}\n\nObject.assign(X.prototype, myMixin);\n\nnew X().yo(); //works\n```\nWe use ``Object.assign(...)`` [[Object]]'s method to copy over methods/properties from one Object into another.",536870918]],["^15",[469,"^O","^16",536870918]],["^15",[469,"^F",462,536870918]],["^15",[469,"^X",332,536870918]],["^15",[469,"^V",332,536870918]],["^15",[469,"^U",299,536870918]],["^15",[469,"^U",332,536870918]],["^15",[469,"^H",299,536870918]],["^15",[469,"^;","~u655b7377-8f23-4f20-b041-b2f8411eecfb",536870918]],["^15",[470,"^Q","However, despite all that there are actual differences between classes and [[Function]]s. This is due to how JS applies many other things to classes, such as\n* ``[[IsClassConstructor]]``, this special internal property is implicitly set to true for classes and is referred at many places in JS, such as with [[new]].\nFor ex.:\n```js\nclass X{}\n\nlet x = new X(); //ok\nX(); //error\n```\n* String representation of a class is different too\n```js\nclass X{}\nconsole.log(X); //prints class X...\n```\n* All class methods are non-enumerable by default.\n* All code inside classes uses ``Strict`` mode.",536870918]],["^15",[470,"^O","^16",536870918]],["^15",[470,"^F",477,536870918]],["^15",[470,"^X",332,536870918]],["^15",[470,"^V",332,536870918]],["^15",[470,"^U",163,536870918]],["^15",[470,"^U",332,536870918]],["^15",[470,"^U",456,536870918]],["^15",[470,"^H",163,536870918]],["^15",[470,"^H",456,536870918]],["^15",[470,"^;","~u655b7377-30e2-4d7f-a0cf-82811a45d59d",536870918]],["^15",[471,"^Q","Static Properties and Methods\nClasses in JS can have static methods/properties too, i.e., methods that exist on the Class itself rather than in each object of the class. We use the ``static`` keyword for this.\nFor ex.:\n```js\nclass X{\n static name = \"nig\";\n  yo() {\n    console.log(typeof this);\n  }\n  static no() { //use static keyword\n    console.log(typeof this);\n  }\n}\nX.halo = function () {}; //or create static methods like so\nX.otherName = \"ayooo\";  //same with properties\n\nlet x = new X();\nx.yo(); //prints object\nX.halo(); //works\nX.no(); //prints function\nconsole.log(X.name); //prints nig\n\n//x.no(); doesn't work, no is a method on the class itself not the objects of it\n```\nThese are the 2 ways to create static methods/properties on classes. The value of [[this]] in a static method is the ctor function of the class.\n\n* These are inherited too\n```js\nclass X{\n static name = \"Ay\";\n yo() {}\n}\n\nclass Y extends X {\n nah(){}\n}\n\nconsole.log(Y.name); //prints Ay. \n```\nThe static properties/methods remain in the class itself, so the [[Prototype Object]] of Y which is X has the property name in it.\nIt looks like so\n![image.png](../assets/image_1686878500858_0.png)\n\nWe can check it too\n```js\nclass X {}\nclass Y extends X {}\n\n// for statics\nconsole.log(Y.__proto__ === X); // true\n\n// for regular methods\nconsole.log(Y.prototype.__proto__ === X.prototype); // true\n```\n\nHowever, built-in classes are an exception. Like [[Array]] and [[Date]] both extend [[Object]], however they don't inherit the statics from Object.",536870918]],["^15",[471,"^O","^16",536870918]],["^15",[471,"^F",476,536870918]],["^15",[471,"^X",332,536870918]],["^15",[471,"^V",332,536870918]],["^15",[471,"^U",299,536870918]],["^15",[471,"^U",305,536870918]],["^15",[471,"^U",332,536870918]],["^15",[471,"^U",400,536870918]],["^15",[471,"^U",455,536870918]],["^15",[471,"^U",457,536870918]],["^15",[471,"^H",299,536870918]],["^15",[471,"^H",305,536870918]],["^15",[471,"^H",400,536870918]],["^15",[471,"^H",455,536870918]],["^15",[471,"^H",457,536870918]],["^15",[471,"^;","~u655b7377-c222-4eec-be55-d3c4d0b0cb2e",536870918]],["^15",[472,"^Q","Built-in classes are implemented in a way that allows extending them more convenient.\nFor ex.:\n```js\nclass PowerArray extends Array {\n  isEmpty() {\n    return this.length === 0;\n  }\n}\n\nlet arr = new PowerArray(1, 2, 5, 10, 50);\nconsole.log(arr.isEmpty()); // false\n\nlet filteredArr = arr.filter(item => item >= 10);\nconsole.log(filteredArr); // 10, 50\nconsole.log(filteredArr.isEmpty()); // false. This still works, isEmpty is present in PowerArray and filter returns PowerArray here.\n\nconsole.log(arr.constructor===PowerArray); //true\n```\nHere, our extension on [[Array]] still works despite being processed by the parent Class' method. That is, methods like ``<array>.filter`` are smart enough to return the same type of object that invoked them. To do this, they use the constructor of the child object, which is why ``arr.constructor`` is equal to ``PowerArray`` above.\n\n However, this behavior can be modified so that they return a given type of object. To do so, our Class must override static getter method ``[Symbol.species]`` which is a [[Symbol]] and then we return the constructor those methods will use to generate result object of.\nFor ex.:\n```js\nclass PowerArray extends Array{\n static get [Symbol.species]  {\n return Array;\n }\n yo() {}\n}\nlet arr = new PowerArray(1,2,3,4);\nlet arrF= arr.filter(i=> i>1);\narrF.yo(); //error as arrF is of type Array and not PowerArray\n```",536870918]],["^15",[472,"^O","^16",536870918]],["^15",[472,"^F",460,536870918]],["^15",[472,"^X",332,536870918]],["^15",[472,"^V",332,536870918]],["^15",[472,"^U",302,536870918]],["^15",[472,"^U",305,536870918]],["^15",[472,"^U",332,536870918]],["^15",[472,"^H",302,536870918]],["^15",[472,"^H",305,536870918]],["^15",[472,"^;","~u655b7377-3b94-4629-8834-88b4bd29515e",536870918]],["^15",[473,"^Q","Introduced in recent years, classes allow fields too now\n```js\nclass X{\n name = \"yo\"; //notice the semicolon\n}\n\nlet x =new X();\nconsole.log(x.prototype.name); //undefined\nconsole.log(x.name); //yo\n```\nThese are set on individual Objects and not the [[Prototype Object]]. And can even use expressions so the value is evaluated at runtime.\n\nClass field is something even the traditional [[Object]] doesn't have, as we can use Arrow [[Function]] to be assigned to a field hence allowing us to refer the class directly in [[this]]\nFor ex.:\n```js\nlet x = {\n yo: () => {...}, //error as arrow functions are not allowed in Objects\n};\n\nclass X {\n a= 2;\n yo = () => {\n  console.log(this.a); //works\n  }\n}\nlet xobj= new X();\nx.yo(); //ok\n\n```",536870918]],["^15",[473,"^O","^16",536870918]],["^15",[473,"^F",461,536870918]],["^15",[473,"^X",332,536870918]],["^15",[473,"^V",332,536870918]],["^15",[473,"^U",163,536870918]],["^15",[473,"^U",299,536870918]],["^15",[473,"^U",332,536870918]],["^15",[473,"^U",400,536870918]],["^15",[473,"^U",455,536870918]],["^15",[473,"^H",163,536870918]],["^15",[473,"^H",299,536870918]],["^15",[473,"^H",400,536870918]],["^15",[473,"^H",455,536870918]],["^15",[473,"^;","~u655b7377-3c07-418b-a82d-21ea8d949d7c",536870918]],["^15",[474,"^Q","A class in JS is a kind of [[Function]], which is just an [[Object]]. Still, it offers a lot of convenience and familiarity with classes in other language such as [[C++]].",536870918]],["^15",[474,"^O","^16",536870918]],["^15",[474,"^F",332,536870918]],["^15",[474,"^X",332,536870918]],["^15",[474,"^V",332,536870918]],["^15",[474,"^U",163,536870918]],["^15",[474,"^U",299,536870918]],["^15",[474,"^U",301,536870918]],["^15",[474,"^U",332,536870918]],["^15",[474,"^H",163,536870918]],["^15",[474,"^H",299,536870918]],["^15",[474,"^H",301,536870918]],["^15",[474,"^;","~u655b7377-3898-4bd8-9d8e-eb1c48f54ce3",536870918]],["^15",[475,"^Q","~``super`` keyword: \nClasses also provide a way to call their Parent Class' methods, this is done using the super keyword.\nFor ex.:\n```js\nclass X{\nyo(){}\n} \nclass Y {\n constructor() { \n  super(); //call the super ctor\n } \n \n ho() {\n super.yo(); //ok\n let x = function() {\n   super.yo(); //error as super is unknown here\n  }\n let y = () => {\n  super.yo(); //ok\n   }\n }\n \n}\n```\nArrow [[Function]]s don't have ``super`` either, so they refer to their parent block's super which is why it works here.\n\n``super`` works similarly in normal Object methods too.",536870918]],["^15",[475,"^O","^16",536870918]],["^15",[475,"^F",464,536870918]],["^15",[475,"^X",332,536870918]],["^15",[475,"^V",332,536870918]],["^15",[475,"^U",163,536870918]],["^15",[475,"^U",332,536870918]],["^15",[475,"^H",163,536870918]],["^15",[475,"^;","~u655b7377-ea29-42ef-89f5-b7bd11685374",536870918]],["^15",[476,"^Q","~``[[HomeObject]]``:\n``super`` doesn't use [[this]] directly to go up the parent chain, it uses this special property.\n``[[HomeObject]]`` is a special internal property set on [[Function]]s when they are methods of either [[Class]]es or [[Object]]s. The value of this property is the class or Object itself. This is used by ``super`` to correctly identify parent class methods and call them.\nFor ex.:\n```js\nlet x ={\n yo() {}\n no() {} //no.[[HomeObject]] = x\n};\nlet y = {\n__proto__: x\n yo() {\n this.__proto__.yo.call(this); \n }\n no() { //no.[[HomeObject]] = y\n super.no();\n}\n};\nlet z = {\n __proto__: y\n yo() {\n this.__proto__yo.call(this); //we can do this.__proto__.yo() too but then when y.yo() is called it won't have a ``this`` that has a __proto__ to x as ``this`` be no Object.\n }\n  no() { //no.[[HomeObject]] = z\n super.no(); \n}\n}\n\nz.yo(); //call stack error\nz.no(); //works, calls z.no() then y.no() then x.no()\n```\nleads to an infinite recursion as ``z.yo()`` calls ``y.yo()`` which still has ``this`` that has ``z`` in it so it calls ``y.yo()`` again and the same for infinite times. \nOn the other hand, ``z.no()`` works because ``super`` knows how to circumvent such issues. It does so by calling something like ``z.no.[[HomeObject]].__proto__.no()`` when we do ``super.no()``, which leads yo ``y.no()`` and then ``y.no.[[HomeObject]].__proto__.no()`` is called which leads to ``x.no()`` finally.\n\n* This special property is only used by ``super``.\n* ``[[HomeObject]]`` is immutable. It never changes. This means, unlike normal Functions, methods in Classes/Objects that use ``super`` must never be copied to other Classes/Objects if we wish to keep the same behavior.\nFor ex.:\n```js\nlet x ={\n yo() {\n console.log(\"x.yo\");\n }\n};\nlet y = {\n __proto__: x\n yo() {\nconsole.log(\"y.yo\");\n super.yo();\n }\n};\nlet z = {\n yo() {\n  console.log(\"z.yo\");\n }\n};\nlet k = {\n __proto__:z\n yo: y.yo,\n};\n\nk.yo(); //prints y.yo then x.yo\n```\nThis is not expected behavior since we expect ``k.yo`` to copy the method ``y.yo`` and the ``super.yo()`` in it to call ``z.yo()``. Since the ``[[HomeObject]]`` never changes, even when ``k.yo`` copies the function, it is still the same ``y`` so we get this behavior.\n* ``[[HomeObject]]`` is only set for methods that are defined like ``<method>()`` and not any other way, like ``<method name>: function(){...}``.",536870918]],["^15",[476,"^O","^16",536870918]],["^15",[476,"^F",475,536870918]],["^15",[476,"^X",332,536870918]],["^15",[476,"^V",332,536870918]],["^15",[476,"^U",163,536870918]],["^15",[476,"^U",299,536870918]],["^15",[476,"^U",332,536870918]],["^15",[476,"^U",400,536870918]],["^15",[476,"^H",163,536870918]],["^15",[476,"^H",299,536870918]],["^15",[476,"^H",332,536870918]],["^15",[476,"^H",400,536870918]],["^15",[476,"^;","~u655b7377-b313-4947-acfd-b9d6a43c7af7",536870918]],["^15",[477,"^Q","When we create a CO with the [[new]] keyword, these 4 things happen\n* A [[Function]] with the same name as the class is created\n* The class' ctor function's body, if defined, becomes the body of this function\n* The default ``[[Prototype]]`` of the function gets augmented with the class' methods/properties as they become methods/properties of the [[Prototype Object]] of this function. \n* Calls this function as a Ctor Function.\nFor ex.:\n```js\nclass X{\n yo(){}\n}\n\nlet x = new X();\n```\nHere, a function named ``X`` is created, it has empty body, ``X``'s ``[[Prototype]]`` gets the method ``yo()`` in it, then this ``X`` function is called.\nSo, the function ``X`` has ``X.prototype = {constructor: X, yo(){}}`` and we can check this too\n```js\nclass X{\n yo(){}\n}\n\nconsole.log(X === X.prototype.constructor); //true\n\n```\n\nRemember, just like [[Function]] has ``.prototype`` so does a class, this ``.prototype``'s Object is assigned to the ``[[Prototype]]`` of the Object that is returned after ``new <Class>()`` is called.",536870918]],["^15",[477,"^O","^16",536870918]],["^15",[477,"^F",463,536870918]],["^15",[477,"^X",332,536870918]],["^15",[477,"^V",332,536870918]],["^15",[477,"^U",163,536870918]],["^15",[477,"^U",332,536870918]],["^15",[477,"^U",455,536870918]],["^15",[477,"^U",456,536870918]],["^15",[477,"^H",163,536870918]],["^15",[477,"^H",455,536870918]],["^15",[477,"^H",456,536870918]],["^15",[477,"^;","~u655b7377-cd49-46da-a7dd-3140d8ea6a12",536870918]],["^15",[478,"^3","- The standard ``//`` for single line and ``/* */`` for multi-line.",536870918]],["^15",[478,"^17",1700492151936,536870918]],["^15",[478,"^Z","JS/pages/Comments.md",536870918]],["^15",[479,"^K",1700492152311,536870918]],["^15",[479,"^[",478,536870918]],["^15",[479,"^@",false,536870918]],["^15",[479,"^Y","comments",536870918]],["^15",[479,"^11","Comments",536870918]],["^15",[479,"^B",1700492152311,536870918]],["^15",[479,"^;","~u655b7378-4342-4212-a9d5-8f496a512931",536870918]],["^15",[480,"^Q","The standard ``//`` for single line and ``/* */`` for multi-line.",536870918]],["^15",[480,"^O","^16",536870918]],["^15",[480,"^F",479,536870918]],["^15",[480,"^X",479,536870918]],["^15",[480,"^V",479,536870918]],["^15",[480,"^U",479,536870918]],["^15",[480,"^;","~u655b7377-75dc-4049-9add-5e1835328b3e",536870918]],["^15",[481,"^3","- Compares values using the comparison [[Operator]]\n- There's Normal Equality, using == and !=. And [[Strict Equality]] using ``===`` and ``!==``.\n- There's another oddity with normal equality comparison, the null and undefined comparison.\n  null and undefined always equal each other and theirselves in normal equality comparison.\n  For ex.:\n  ```js\n  let x= null==undefined; //true and they only equal each other and theirselves.\n  ```\n- For other operations, [[null]] and [[undefined]] are converted to [[Number]] where [[null]] becomes 0 and [[undefined]] becomes [[NaN]]. \n  Note, normal equality comparison doesn't convert [[null]] or [[undefined]] and only returns true when compared against theirselves or each other, but other comparison operators do.\n  This leads to following behavior:\n  ```js\n  let x= null > 0; //false, converts null to 0\n  x = null==0; //false, compares null to 0\n  x= null >= 0; //true, converts null to 0\n  ```\n  On the contrary, undefined always returns false when not normal equality compared against itself or null, because it gets converted to [[NaN]].\n-",536870918]],["^15",[481,"^17",1700492151947,536870918]],["^15",[481,"^Z","JS/pages/Comparison.md",536870918]],["^15",[482,"^K",1700492152311,536870918]],["^15",[482,"^[",481,536870918]],["^15",[482,"^@",false,536870918]],["^15",[482,"^Y","comparison",536870918]],["^15",[482,"^11","Comparison",536870918]],["^15",[482,"^B",1700492152311,536870918]],["^15",[482,"^;","~u655b7379-99df-4fef-8ab5-d480fc2607d0",536870919]],["^15",[483,"^K",1700492151947,536870918]],["^15",[483,"^[",957,536870919]],["^15",[483,"^@",false,536870918]],["^15",[483,"^Y","strict equality",536870918]],["^15",[483,"^11","Strict Equality",536870918]],["^15",[483,"^B",1700492151947,536870918]],["^15",[483,"^;","~u655b7379-dcdf-4acf-86d7-14bf96035f57",536870919]],["^15",[484,"^K",1700492152308,536870918]],["^15",[484,"^[",1021,536870919]],["^15",[484,"^@",false,536870918]],["^15",[484,"^Y","null",536870918]],["^15",[484,"^11","null",536870918]],["^15",[484,"^B",1700492152308,536870918]],["^15",[484,"^;","~u655b7379-4db6-4479-8e64-08edfbdec864",536870919]],["^15",[485,"^K",1700492152011,536870918]],["^15",[485,"^[",831,536870919]],["^15",[485,"^@",false,536870918]],["^15",[485,"^Y","nan",536870918]],["^15",[485,"^11","NaN",536870918]],["^15",[485,"^B",1700492152011,536870918]],["^15",[485,"^;","~u655b7379-db50-44cd-828d-c4866eb7b395",536870919]],["^15",[486,"^Q","Compares values using the comparison [[Operator]]",536870918]],["^15",[486,"^O","^16",536870918]],["^15",[486,"^F",482,536870918]],["^15",[486,"^X",482,536870918]],["^15",[486,"^V",482,536870918]],["^15",[486,"^U",339,536870918]],["^15",[486,"^U",482,536870918]],["^15",[486,"^H",339,536870918]],["^15",[486,"^;","~u655b7377-7237-4daa-8293-a57f5a0423c3",536870918]],["^15",[487,"^Q","There's Normal Equality, using == and !=. And [[Strict Equality]] using ``===`` and ``!==``.",536870918]],["^15",[487,"^O","^16",536870918]],["^15",[487,"^F",486,536870918]],["^15",[487,"^X",482,536870918]],["^15",[487,"^V",482,536870918]],["^15",[487,"^U",482,536870918]],["^15",[487,"^U",483,536870918]],["^15",[487,"^H",483,536870918]],["^15",[487,"^;","~u655b7377-cd26-49ff-a1f1-231045d927f8",536870918]],["^15",[488,"^Q","There's another oddity with normal equality comparison, the null and undefined comparison.\nnull and undefined always equal each other and theirselves in normal equality comparison.\nFor ex.:\n```js\nlet x= null==undefined; //true and they only equal each other and theirselves.\n```",536870918]],["^15",[488,"^O","^16",536870918]],["^15",[488,"^F",487,536870918]],["^15",[488,"^X",482,536870918]],["^15",[488,"^V",482,536870918]],["^15",[488,"^U",482,536870918]],["^15",[488,"^;","~u655b7377-ed70-4d4f-b226-42b843e2e7ff",536870918]],["^15",[489,"^Q","For other operations, [[null]] and [[undefined]] are converted to [[Number]] where [[null]] becomes 0 and [[undefined]] becomes [[NaN]]. \nNote, normal equality comparison doesn't convert [[null]] or [[undefined]] and only returns true when compared against theirselves or each other, but other comparison operators do.\nThis leads to following behavior:\n```js\nlet x= null > 0; //false, converts null to 0\nx = null==0; //false, compares null to 0\nx= null >= 0; //true, converts null to 0\n```\nOn the contrary, undefined always returns false when not normal equality compared against itself or null, because it gets converted to [[NaN]].",536870918]],["^15",[489,"^O","^16",536870918]],["^15",[489,"^F",488,536870918]],["^15",[489,"^X",482,536870918]],["^15",[489,"^V",482,536870918]],["^15",[489,"^U",162,536870918]],["^15",[489,"^U",303,536870918]],["^15",[489,"^U",482,536870918]],["^15",[489,"^U",484,536870918]],["^15",[489,"^U",485,536870918]],["^15",[489,"^H",162,536870918]],["^15",[489,"^H",303,536870918]],["^15",[489,"^H",484,536870918]],["^15",[489,"^H",485,536870918]],["^15",[489,"^;","~u655b7377-1d89-4d8d-a1d5-cae69dece82b",536870918]],["^15",[490,"^Q","",536870918]],["^15",[490,"^O","^16",536870918]],["^15",[490,"^F",489,536870918]],["^15",[490,"^X",482,536870918]],["^15",[490,"^V",482,536870918]],["^15",[490,"^U",482,536870918]],["^15",[490,"^;","~u655b7377-365e-44a7-a86a-c29d98860650",536870918]],["^15",[491,"^3","- JS is interpreted line-by-line in browser [[<script>]]s , however it is also compiled as most modern browsers use JIT to compile only necessary code.",536870918]],["^15",[491,"^17",1700492151969,536870918]],["^15",[491,"^Z","JS/pages/Compilation.md",536870918]],["^15",[492,"^K",1700492152438,536870918]],["^15",[492,"^[",491,536870918]],["^15",[492,"^@",false,536870918]],["^15",[492,"^Y","compilation",536870918]],["^15",[492,"^11","Compilation",536870918]],["^15",[492,"^B",1700492152438,536870918]],["^15",[492,"^;","~u655b7379-aa3e-44df-9f73-f37f9c296eb4",536870919]],["^15",[493,"^Q","JS is interpreted line-by-line in browser [[<script>]]s , however it is also compiled as most modern browsers use JIT to compile only necessary code.",536870918]],["^15",[493,"^O","^16",536870918]],["^15",[493,"^F",492,536870918]],["^15",[493,"^X",492,536870918]],["^15",[493,"^V",492,536870918]],["^15",[493,"^U",283,536870918]],["^15",[493,"^U",492,536870918]],["^15",[493,"^H",283,536870918]],["^15",[493,"^;","~u655b7377-b35b-48df-b43d-6e17b6eaf24d",536870918]],["^15",[494,"^3","- The standard, \n  ``if(<bool>) {...} else if (<bool>) {...} else {...}``\n  The {...} is optional if a single statement is used like in [[C++]].\n- [[Conditional]] Operator is also supported like Ternary Operator in C++.\n- Switch Statement is also supported.\n  They use strict equality.\n  \n  For ex.:\n  ```js\n  let a=\"1\";\n  let b=0;\n  \n  switch (+a) {\n  case \"1\": ... \n               break;\n  case b+1: ... //runs this as +a converts a to number 1 and it is strictly equal to 0+1\n                break;\n  default: \n              break;\n  }\n  ```\n  Just like [[C++]], the cases allow fall-through, so if any case gets matched and it doesn't have a [[break]] then the next case is executed without its condition being checked.\n-",536870918]],["^15",[494,"^17",1700492151980,536870918]],["^15",[494,"^Z","JS/pages/Conditional.md",536870918]],["^15",[495,"^K",1700492152311,536870918]],["^15",[495,"^[",1698,536870942]],["^15",[495,"^@",false,536870918]],["^15",[495,"^Y","conditional",536870918]],["^15",[495,"^11","Conditional",536870918]],["^15",[495,"^B",1700492152311,536870918]],["^15",[495,"^;","~u656462fd-a3db-4256-b26e-7e194658929e",536870942]],["^15",[496,"^K",1700492151980,536870918]],["^15",[496,"^[",1010,536870919]],["^15",[496,"^@",false,536870918]],["^15",[496,"^Y","break",536870918]],["^15",[496,"^11","break",536870918]],["^15",[496,"^B",1700492151980,536870918]],["^15",[496,"^;","~u655b7379-2f55-4074-a2c6-fd52b6e55433",536870919]],["^15",[497,"^Q","These statements allow simple branching. Unlike languages like JS, non- [[Bool]]s aren’t automatically converted to [[Bool]]s .",536870942]],["^15",[497,"^O","^16",536870918]],["^15",[497,"^F",495,536870918]],["^15",[497,"^X",495,536870918]],["^15",[497,"^V",495,536870918]],["^15",[497,"^U",301,536870918]],["^15",[497,"^U",495,536870918]],["^15",[497,"^U",1113,536870942]],["^15",[497,"^H",1113,536870942]],["^15",[497,"^;","~u655b7377-a1ac-442d-b5fa-de36515f2e51",536870918]],["^15",[500,"^Q","",536870918]],["^15",[500,"^O","^16",536870918]],["^15",[500,"^F",1701,536870942]],["^15",[500,"^X",495,536870918]],["^15",[500,"^V",495,536870918]],["^15",[500,"^U",495,536870918]],["^15",[500,"^;","~u655b7377-e726-4664-a6e8-04498313eced",536870918]],["^15",[501,"^3","- ``console.log(<any number and type of values>)`` logs stuff to the console. It implicitly converts the arguments to string.\n- ``console.dir(<obj>)`` supported in Chrome Devtools and NodeJS takes an [[Object]] and shows all its properties, even the ones in the [[Prototype Object]] . \n  Like so\n  ![image.png](../assets/image_1686712854181_0.png)****",536870918]],["^15",[501,"^17",1700492151990,536870918]],["^15",[501,"^Z","JS/pages/Console.md",536870918]],["^15",[502,"^K",1700492152312,536870918]],["^15",[502,"^[",501,536870918]],["^15",[502,"^@",false,536870918]],["^15",[502,"^Y","console",536870918]],["^15",[502,"^11","Console",536870918]],["^15",[502,"^B",1700492152312,536870918]],["^15",[502,"^;","~u655b7378-e2a1-47f2-b5c8-93781bf761bc",536870918]],["^15",[503,"^Q","~``console.log(<any number and type of values>)`` logs stuff to the console. It implicitly converts the arguments to string.",536870918]],["^15",[503,"^O","^16",536870918]],["^15",[503,"^F",502,536870918]],["^15",[503,"^X",502,536870918]],["^15",[503,"^V",502,536870918]],["^15",[503,"^U",502,536870918]],["^15",[503,"^;","~u655b7377-1d11-491e-8c35-239adeed1c7c",536870918]],["^15",[504,"^Q","~``console.dir(<obj>)`` supported in Chrome Devtools and NodeJS takes an [[Object]] and shows all its properties, even the ones in the [[Prototype Object]] . \nLike so\n![image.png](../assets/image_1686712854181_0.png)****",536870918]],["^15",[504,"^O","^16",536870918]],["^15",[504,"^F",503,536870918]],["^15",[504,"^X",502,536870918]],["^15",[504,"^V",502,536870918]],["^15",[504,"^U",299,536870918]],["^15",[504,"^U",455,536870918]],["^15",[504,"^U",502,536870918]],["^15",[504,"^H",299,536870918]],["^15",[504,"^H",455,536870918]],["^15",[504,"^;","~u655b7377-353d-4e2a-abe8-0c1769a09f8b",536870918]],["^15",[505,"^3","- Most operators and functions implicitly convert values of types into the types they can accept.\n  For ex.:\n  ``alert(...)`` converts values into strings.\n  Similarly, some mathematical operations implicitly convert values into [[Number]]s.\n  \n  There's 2 types of conversions, implicit which is applied automatically and explicit which we apply through methods like String(...), Number(...), etc.\n- Hints:\n  In JS when a different type is required than the variable's type, a \"hint\" is passed for conversion of the type. [[ECMAScript]] specification defines 3 types of \"hints\":\n  \"string\"\n  \"number\"\n  \"default\"\n  \n  Boolean isn't required because all values of all types are true in Boolean (except a few special values).\n  Default is the type when a String or Number both can be valid.\n  \n  For ex.:\n  ``alert(...)`` works with Strings, so JS passes the hint \"string\".\n- [[String]] conversion:\n  ``String(<value/variable>)`` converts stuff into string. It is pretty straight-forward as values like false become \"false\", null becomes \"null\" etc.\n- [[Number]] conversion:\n  aka ``Numeric Conversion``\n  For ex.:\n  ```js\n  let v= \"6\"/\"2\"; //converts 6 and 3 into numbers, applies division and stores the result 3 in v.\n  ```\n  implicit conversion. (Note: This doesn't always happen, for ex. in [[String]] concatenation)\n  \n  ``Number(<val/var>)`` explicit, returns [[NaN]] if conversion fails.\n  Some more rules:\n  ![image.png](../assets/image_1685372316472_0.png)\n- [[Boolean]] conversion:\n  Explicitly done with ``Boolean(<val/var>)``\n  \n  Rules:\n  0, empty [[String]], [[null]], [[undefined]], [[NaN]] become false.\n  All other values become true.\n  For ex.:\n  ```js\n  Boolean(\"\"); //false\n  Boolean(\" \"); //true\n  ```\n- [[Object]] Conversion:\n  To convert an Object to another type implicitly, JS looks for 3 type of methods\n  First it looks for\n  ``<object>[Symbol.toPrimitive](hint)``\n  Then, if hint is \"string\" it looks for\n  ``<object>.toString()`` or ``<object>.valueOf()``\n  If the hint is \"number\" or \"default\",\n  ``<object>.valueOf()`` or ``<object>.toString()`` \n  \n  Yes it looks for methods differently based on the hint.\n  \n  The simplest way to define this behavior is like so\n  ```js\n  let x = {};\n  x[Symbol.toPrimitive]= function(hint) {\n   if (hint === \"string\") return \"yo\";\n   else return 2;\n  }\n  alert(x); //works, returns \"yo\"\n  x+x; //returns 4\n  ```\n  Symbol.toPrimitive uses a predefined [[Symbol]].\n-\n-",536870918]],["^15",[505,"^17",1700492152012,536870918]],["^15",[505,"^Z","JS/pages/Conversion.md",536870918]],["^15",[506,"^K",1700492152311,536870918]],["^15",[506,"^[",505,536870918]],["^15",[506,"^@",false,536870918]],["^15",[506,"^Y","conversion",536870918]],["^15",[506,"^11","Conversion",536870918]],["^15",[506,"^B",1700492152311,536870918]],["^15",[506,"^;","~u655b7378-42c7-4eea-8225-da95fc5a1331",536870918]],["^15",[507,"^Q","Most operators and functions implicitly convert values of types into the types they can accept.\nFor ex.:\n``alert(...)`` converts values into strings.\nSimilarly, some mathematical operations implicitly convert values into [[Number]]s.\n\nThere's 2 types of conversions, implicit which is applied automatically and explicit which we apply through methods like String(...), Number(...), etc.",536870918]],["^15",[507,"^O","^16",536870918]],["^15",[507,"^F",506,536870918]],["^15",[507,"^X",506,536870918]],["^15",[507,"^V",506,536870918]],["^15",[507,"^U",162,536870918]],["^15",[507,"^U",506,536870918]],["^15",[507,"^H",162,536870918]],["^15",[507,"^;","~u655b7378-38d6-4b93-8711-f40889045beb",536870918]],["^15",[508,"^Q","Hints:\nIn JS when a different type is required than the variable's type, a \"hint\" is passed for conversion of the type. [[ECMAScript]] specification defines 3 types of \"hints\":\n\"string\"\n\"number\"\n\"default\"\n\nBoolean isn't required because all values of all types are true in Boolean (except a few special values).\nDefault is the type when a String or Number both can be valid.\n\nFor ex.:\n``alert(...)`` works with Strings, so JS passes the hint \"string\".",536870918]],["^15",[508,"^O","^16",536870918]],["^15",[508,"^F",507,536870918]],["^15",[508,"^X",506,536870918]],["^15",[508,"^V",506,536870918]],["^15",[508,"^U",401,536870918]],["^15",[508,"^U",506,536870918]],["^15",[508,"^H",401,536870918]],["^15",[508,"^;","~u655b7378-b8a1-4aa2-9edd-f3ac628e0f1e",536870918]],["^15",[509,"^Q","[[String]] conversion:\n``String(<value/variable>)`` converts stuff into string. It is pretty straight-forward as values like false become \"false\", null becomes \"null\" etc.",536870918]],["^15",[509,"^O","^16",536870918]],["^15",[509,"^F",508,536870918]],["^15",[509,"^X",506,536870918]],["^15",[509,"^V",506,536870918]],["^15",[509,"^U",80,536870918]],["^15",[509,"^U",506,536870918]],["^15",[509,"^H",80,536870918]],["^15",[509,"^;","~u655b7378-a13f-484a-960c-94d80fb015f9",536870918]],["^15",[510,"^Q","[[Number]] conversion:\naka ``Numeric Conversion``\nFor ex.:\n```js\nlet v= \"6\"/\"2\"; //converts 6 and 3 into numbers, applies division and stores the result 3 in v.\n```\nimplicit conversion. (Note: This doesn't always happen, for ex. in [[String]] concatenation)\n\n``Number(<val/var>)`` explicit, returns [[NaN]] if conversion fails.\nSome more rules:\n![image.png](../assets/image_1685372316472_0.png)",536870918]],["^15",[510,"^O","^16",536870918]],["^15",[510,"^F",509,536870918]],["^15",[510,"^X",506,536870918]],["^15",[510,"^V",506,536870918]],["^15",[510,"^U",80,536870918]],["^15",[510,"^U",162,536870918]],["^15",[510,"^U",485,536870918]],["^15",[510,"^U",506,536870918]],["^15",[510,"^H",80,536870918]],["^15",[510,"^H",162,536870918]],["^15",[510,"^H",485,536870918]],["^15",[510,"^;","~u655b7378-fee3-4bf5-af91-58402a171f39",536870918]],["^15",[511,"^Q","[[Boolean]] conversion:\nExplicitly done with ``Boolean(<val/var>)``\n\nRules:\n0, empty [[String]], [[null]], [[undefined]], [[NaN]] become false.\nAll other values become true.\nFor ex.:\n```js\nBoolean(\"\"); //false\nBoolean(\" \"); //true\n```",536870918]],["^15",[511,"^O","^16",536870918]],["^15",[511,"^F",510,536870918]],["^15",[511,"^X",506,536870918]],["^15",[511,"^V",506,536870918]],["^15",[511,"^U",80,536870918]],["^15",[511,"^U",303,536870918]],["^15",[511,"^U",362,536870918]],["^15",[511,"^U",484,536870918]],["^15",[511,"^U",485,536870918]],["^15",[511,"^U",506,536870918]],["^15",[511,"^H",80,536870918]],["^15",[511,"^H",303,536870918]],["^15",[511,"^H",362,536870918]],["^15",[511,"^H",484,536870918]],["^15",[511,"^H",485,536870918]],["^15",[511,"^;","~u655b7378-3c34-4b4d-8987-fa55ee242930",536870918]],["^15",[512,"^Q","[[Object]] Conversion:\nTo convert an Object to another type implicitly, JS looks for 3 type of methods\nFirst it looks for\n``<object>[Symbol.toPrimitive](hint)``\nThen, if hint is \"string\" it looks for\n``<object>.toString()`` or ``<object>.valueOf()``\nIf the hint is \"number\" or \"default\",\n``<object>.valueOf()`` or ``<object>.toString()`` \n\nYes it looks for methods differently based on the hint.\n\nThe simplest way to define this behavior is like so\n```js\nlet x = {};\nx[Symbol.toPrimitive]= function(hint) {\n if (hint === \"string\") return \"yo\";\n else return 2;\n}\nalert(x); //works, returns \"yo\"\nx+x; //returns 4\n```\nSymbol.toPrimitive uses a predefined [[Symbol]].",536870918]],["^15",[512,"^O","^16",536870918]],["^15",[512,"^F",511,536870918]],["^15",[512,"^X",506,536870918]],["^15",[512,"^V",506,536870918]],["^15",[512,"^U",299,536870918]],["^15",[512,"^U",302,536870918]],["^15",[512,"^U",506,536870918]],["^15",[512,"^H",299,536870918]],["^15",[512,"^H",302,536870918]],["^15",[512,"^;","~u655b7378-f827-4117-a051-8b01aba9183a",536870918]],["^15",[513,"^Q","",536870918]],["^15",[513,"^O","^16",536870918]],["^15",[513,"^F",512,536870918]],["^15",[513,"^X",506,536870918]],["^15",[513,"^V",506,536870918]],["^15",[513,"^U",506,536870918]],["^15",[513,"^;","~u655b7378-1daa-4407-86d8-1719c0051ad4",536870918]],["^15",[514,"^Q","",536870918]],["^15",[514,"^O","^16",536870918]],["^15",[514,"^F",513,536870918]],["^15",[514,"^X",506,536870918]],["^15",[514,"^V",506,536870918]],["^15",[514,"^U",506,536870918]],["^15",[514,"^;","~u655b7378-127b-454a-892c-b4cd199d85cd",536870918]],["^15",[515,"^3","- Currying is a general programming concept where we turn a [[Function]] ``f(a,b,c)`` call into ``f(a)(b)(c)``.\n  For ex.:\n  ```js\n  function curry(func) {\n  \n    return function curried(...args) {\n      if (args.length >= func.length) {\n        return func.apply(this, args);\n      } else {\n        return function(...args2) {\n          return curried.apply(this, args.concat(args2));\n        }\n      }\n    };\n  \n  }\n  \n  \n  function sum(a, b) {\n    return a + b;\n  }\n  \n  let curriedSum = curry(sum);\n  \n  console.log( curriedSum(1)(2) ); //prints 3\n  ```\n-",536870918]],["^15",[515,"^17",1700492152021,536870918]],["^15",[515,"^Z","JS/pages/Currying.md",536870918]],["^15",[516,"^K",1700492152316,536870918]],["^15",[516,"^[",515,536870918]],["^15",[516,"^@",false,536870918]],["^15",[516,"^Y","currying",536870918]],["^15",[516,"^11","Currying",536870918]],["^15",[516,"^B",1700492152316,536870918]],["^15",[516,"^;","~u655b7378-9bf5-4dd5-b920-6406c459d4a0",536870918]],["^15",[517,"^Q","Currying is a general programming concept where we turn a [[Function]] ``f(a,b,c)`` call into ``f(a)(b)(c)``.\nFor ex.:\n```js\nfunction curry(func) {\n\n  return function curried(...args) {\n    if (args.length >= func.length) {\n      return func.apply(this, args);\n    } else {\n      return function(...args2) {\n        return curried.apply(this, args.concat(args2));\n      }\n    }\n  };\n\n}\n\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nlet curriedSum = curry(sum);\n\nconsole.log( curriedSum(1)(2) ); //prints 3\n```",536870918]],["^15",[517,"^O","^16",536870918]],["^15",[517,"^F",516,536870918]],["^15",[517,"^X",516,536870918]],["^15",[517,"^V",516,536870918]],["^15",[517,"^U",163,536870918]],["^15",[517,"^U",516,536870918]],["^15",[517,"^H",163,536870918]],["^15",[517,"^;","~u655b7378-1e7f-4a29-8f4b-5c3bff730046",536870918]],["^15",[518,"^Q","",536870918]],["^15",[518,"^O","^16",536870918]],["^15",[518,"^F",517,536870918]],["^15",[518,"^X",516,536870918]],["^15",[518,"^V",516,536870918]],["^15",[518,"^U",516,536870918]],["^15",[518,"^;","~u655b7378-74e0-41b6-a854-d54b86e990c1",536870918]],["^15",[519,"^3","- More props can be checked in the specs of the node type.\n- ``.nodeType``: All nodes. Property, this is a [[Number]] that tells which type of node it is. As seen in the spec, [node](https://dom.spec.whatwg.org/#node\n  For ex.:\n  ![image.png](../assets/image_1687328592197_0.png)\n  shows the nodeType of any  Element type node is 1.\n- ``.nodeName``: All nodes. Property which has the string name of the node type. Element Nodes also have a ``.tagName`` property which has the same value as ``nodeName``. NodeName and TagName are both basically the [[HTML]] element's name. Like a ``div`` element will have ``div`` tagname and nodename.\n- ``.innerHTML``: All nodes. Property which has the HTML inside the node as string. We can modify it and the changes are reflected on the page.\n  For ex.:\n  ```html\n  <body>\n  <p>A paragraph</p>\n  <div>A div</div>\n  - <script>\n    alert( document.body.innerHTML ); // read the current contents\n    document.body.innerHTML = 'The new BODY!'; // replace it\n  </script>\n  - </body>\n  ```\n  However, [[<script>]]s inserted inside the ``.innerHTML`` aren't executed automatically.\n  Furthermore, any change to the ``.innerHTML`` of a node causes the whole node to be re-rendered. Meaning even if we concatenate a single character to the innerHTML of a node then the whole node will be rendered again, this causes hovered items to lose focus, inputted text to be wiped as well and etc. as the state is reset. If the node had a lot of resources then they will all be re-rendered so it is an expensive operation.\n- ``.outerHTML``: All nodes. Property which has the innerHTMl + the node's element itself.\n  However, there's a slight difference between innerHTML and outerHTML.\n  If we modify an innerHTML with new content, it replaces the innerHTML and the reference to the node remains the same so we can work with it. However, when we modify the outerHTML then the node's element is removed and the new modified element inserted whilst the reference keeps pointing to the old and now removed from DOM node.\n  For ex.:\n  ```js\n  let x= document.querySelector(...);\n  alert(x.outerHTML); //prints <div>...</div>\n  x.outerHTML = \"<p> yo</p>\";\n  alert(x.outerHTML); //still prints <div>...</div>\n  ```\n  Here, the new element is inserted and replaces the current node in the DOM but the variable still references the old one. We need to explicitly get the new reference after modifying the outerHTML.\n- ``.data`` and ``.nodeValue``: Text Nodes. Properties which hold their data.\n  For ex.:\n  ```html\n  <body>\n    Hello\n    <!-- Comment -->\n    <script>\n      let text = document.body.firstChild;\n      alert(text.data); // prints Hello\n  \n      let comment = text.nextSibling;\n      alert(comment.data); // prints Comment\n    </script>\n  </body>\n  ```\n- ``.textContent``: All nodes . Property that just has the text contents in it concatenated into a single string without any tags.\n  For ex.:\n  ```html\n  <div id=\"news\">\n  <h1>Headline!</h1>\n  <p>Martians attack people!</p>\n  </div>\n  - <script>\n  \n  alert(news.textContent); // prints Headline! Martians attack people!\n  </script>\n  ```\n  We can read/write directly using this and this doesn't cause the whole node to be re-rendered, however if there is any tag in the textContent written to the node, then it is treated literally and is not parsed.\n- ``.hidden``: All nodes. Hides the node if it is set to true.\n- ``.id``, ``.className`` and ``.classList``: All nodes. Provides the node's id and class name (named so because `class` used to be a reserved keyword by JS). The ``.classList`` returns an [[Iterable]] which returns an iterable on the class names of an element and provides methods to add/remove classes as well.\n  4 important methods are \n  ``<node>.classList.toggle(\"<classname>\")`` : adds the class if not present, otherwise removes it\n  ``<node>.classList.contains(\"<classname>\")``\n  ``<node>.classList.add(\"<classname>\")``\n  ``<node>.classList.remove(\"<classname>\")``\n  For ex.:\n  ```html\n  <body id=\"aydi\" class=\"ha yo\"> </body>\n  <script>\n  alert(document.body.className); //prints ha yo\n  - document.body.className = \"yo ha\";\n  for (let elem of document.body.classList); //passes ha then yo\n  {}\n  - document.body.classList.contains(\"yo\"); //returns true\n  document.body.classList.toggle(\"yo\"); // removes it\n  - <script>\n  ```\n  Writing to ``.className`` overwrites the whole ``class`` attribute.\n- ``.style``: All nodes. Provides an [[Object]] with the style properties of the node. This Object has all valid [[CSS]] attributes for the node set in it, so we can provide values to them directly.\n  For ex.:\n  ```js\n  document.body.style.width= 20px;\n  alert(document.body.style.width); //prints 20px//\n  CSS Attributes that have '-' in their property name have the -'s removed and next letter capitalized.\n  document.body.style.MozBorderRadius = 2px; //as the attribute is -moz-border-radius\n  //The Style Object requires the whole direction with propertes like margin\n  document.body.style.marginTop = 2px; //ok\n  ```\n  \n  \n  * Instead of calling ``delete <style Object property>`` we should assign the property an empty [[String]] or a default value.\n  Or alternatively, to remove a specific CSS property we can also use ``<node>.style.removeProperty(\"<prop name>\")``.\n  \n  * We can also get/set the whole style at once using ``.style.cssText`` property. This overwrites existing style. \n  These only return the inline CSS syles and not the final style after all the CSS selectors have applied their styles. To get those we use ``getComputedStyle(\"<node>\", \"<optional pseudo class>\")`` which returns the Style Object as well, with the computed and then resolved properties (computed means raw value and resolved means finally adjusted to the environment, like relative sizes adjusted to raw, it returns the resolved values). Pseudo class can be any except \":visited\" as it is forbidden due to security of [[Brower]] to see its state.\n  \n  * Units need to provided explictly.\n- Custom DOM Class Properties\n  This is possible too, \n  For ex.:\n  ```js\n  Element.prototype.yo= function () {\n  };\n  document.body.nah= function() {\n  };\n  \n  console.log(document.body.nah()); //works\n  console.log(document.body.yo()); //also works as document is a child to Element ([[Prototype Object]]).\n  ```\n  * For any attribute on an [[HTML]] element, if it is standard for the type of element then the DOM automatically keeps track of it. But custom properties must be manually fetched and updated.\n  To do so we use\n  ``<node>.hasAttribute(name)`` – checks for existence.\n  ``<node>.getAttribute(name)`` – gets the value.\n   ``<node>.setAttribute(name, value)`` – sets the value.\n  ``<node>.removeAttribute(name)`` – removes the attribute.\n  ``<node>.attributes``- Returns a collection with all the attributes, [[Iterable]] \n  For ex.:\n  ```html\n  <div id=\"a\" yoo=\"bro\">\n  </div>\n  <script>\n  \n  let node= document.getElementById(\"a\");\n  console.log(node.id); //ok prints a\n  console.log(node.yoo); //undefined\n  \n  alert(node.getAttribute(\"a\")); //prints bro\n  </script>\n  ```\n  \n  * Attribute names are case-insensitive.\n  \n  * The ``.outerHTML`` has all the attributes, even custom ones.\n  \n  * Attribute values are almost always strings. But some attributes such as ``.checked`` on the ``input`` element are boolean or some other tpe.\n  \n  * Almost all attribute changes made to the HTML sync with the DOM, the exception are attributes like ``.value`` on text input nodes.\n  For ex.:\n  ```html\n  <script>\n    let input = document.querySelector('input');\n  \n    // attribute => property\n    input.setAttribute('value', 'text');\n    alert(input.value); // text\n  \n    // NOT property => attribute\n    input.value = 'newValue';\n    alert(input.getAttribute('value')); // text (not updated!)\n  </script>\n  ```\n  \n  * The dataset property\n  By the HTML standard, the prefix ``data-`` is left for custom attribute names. And these are all also available in the ``dataset`` property of the DOM.\n  For ex.:\n  ```html\n  <div id=\"a\" data-yoo=\"bro\">\n  </div>\n  <script>\n  \n  let node= document.getElementById(\"a\");\n  console.log(node.dataset.yoo); //ok prints \"bro\"\n  </script>\n  ```\n  These [[HTML]] attributes can be used in CSS as well and are automatically synced too.\n- Geometry Properties\n  There are various properties available to [[DOM]]``<nodes>`` that define their ``outer geometry``.\n  \n  ![image.png](../assets/image_1687623412218_0.png)\n  \n  The ``<node>.offsetParent`` returns the ``node`` closest to the element which has either [[CSS Property]] ``position`` set (with a value except static), or a ``table`` [[HTML Element]] or the ``body`` HTML element. \n  \n  Then the properties in the image define their respective sizes.\n  For ex.:\n  ```html\n  <main style=\"position: relative\" id=\"main\">\n    <article>\n      <div id=\"example\" style=\"position: absolute; left: 180px; top: 180px\">...</div>\n    </article>\n  </main>\n  <script>\n    alert(example.offsetParent.id); // main\n    alert(example.offsetLeft); // 180 (note: a number, not a string \"180px\")\n    alert(example.offsetTop); // 180\n  </script>\n  ```\n  The ``.offsetParent`` is null when the element has ``display: none`` or isn't in the DOM, or is ``html`` or ``body`` element or has ``position: fixed`` [[CSS]].\n  \n  It is recommended to use these properties over ``getComputedStyle(...)`` method as it's behavior is dependent on the browser where it may automatically include sizes like scrollbar width or not, but these are explicit and always computed.\n  \n  \n  * The ``document.documentElement.clientWidth`` and ``document.documentElement.clientHeight`` which is on the ``html`` element of the [[HTML]] Document effectively return the actual window size (minus the scrollbar width/height). The ``window.innerHeight`` and ``window.innerWidth`` on [[window]] do the same, however they don't take the scrollbar into account.\n  \n  * Given all inconsistences across browsers and versions, it is recommended to use this logic for getting the right window height/width.\n  ```js\n  let windowHeight = Math.max(\n    document.body.scrollHeight, document.documentElement.scrollHeight,\n    document.body.offsetHeight, document.documentElement.offsetHeight,\n    document.body.clientHeight, document.documentElement.clientHeight\n  );\n  ```\n- We can get the current scroll position in the page by using the [[window]] Object's \n   ``window.pageYOffset``/``window.scrollY`` and ``window.pageXOffset``/``window.scrollX``. These are read-only properties. The alternate properties are their aliases.\n-",536870918]],["^15",[519,"^17",1700492152066,536870918]],["^15",[519,"^Z","JS/pages/DOM Class Property.md",536870918]],["^15",[520,"^K",1700492152171,536870918]],["^15",[520,"^[",519,536870918]],["^15",[520,"^@",false,536870918]],["^15",[520,"^Y","dom class property",536870918]],["^15",[520,"^11","DOM Class Property",536870918]],["^15",[520,"^B",1700492152171,536870918]],["^15",[520,"^;","~u655b7379-6f6a-40a2-9dc3-dba9b5ad93f0",536870919]],["^15",[521,"^K",1700492152065,536870918]],["^15",[521,"^@",false,536870918]],["^15",[521,"^Y","node",536870918]],["^15",[521,"^11","node",536870918]],["^15",[521,"^B",1700492152065,536870918]],["^15",[521,"^;","~u655b7378-97ee-44de-a8e9-fbe8919e829c",536870918]],["^15",[522,"^Q","~``.nodeName``: All nodes. Property which has the string name of the node type. Element Nodes also have a ``.tagName`` property which has the same value as ``nodeName``. NodeName and TagName are both basically the [[HTML]] element's name. Like a ``div`` element will have ``div`` tagname and nodename.",536870918]],["^15",[522,"^O","^16",536870918]],["^15",[522,"^F",523,536870918]],["^15",[522,"^X",520,536870918]],["^15",[522,"^V",520,536870918]],["^15",[522,"^U",284,536870918]],["^15",[522,"^U",520,536870918]],["^15",[522,"^H",284,536870918]],["^15",[522,"^;","~u655b7378-1916-4dc0-8597-1b8f9b2b1b1e",536870918]],["^15",[523,"^Q","~``.nodeType``: All nodes. Property, this is a [[Number]] that tells which type of node it is. As seen in the spec, [node](https://dom.spec.whatwg.org/#node\nFor ex.:\n![image.png](../assets/image_1687328592197_0.png)\nshows the nodeType of any  Element type node is 1.",536870918]],["^15",[523,"^O","^16",536870918]],["^15",[523,"^F",527,536870918]],["^15",[523,"^X",520,536870918]],["^15",[523,"^V",520,536870918]],["^15",[523,"^U",162,536870918]],["^15",[523,"^U",520,536870918]],["^15",[523,"^U",521,536870918]],["^15",[523,"^H",162,536870918]],["^15",[523,"^H",521,536870918]],["^15",[523,"^;","~u655b7378-a6a1-469f-9827-fac2b197eab8",536870918]],["^15",[524,"^Q","",536870918]],["^15",[524,"^O","^16",536870918]],["^15",[524,"^F",529,536870918]],["^15",[524,"^X",520,536870918]],["^15",[524,"^V",520,536870918]],["^15",[524,"^U",520,536870918]],["^15",[524,"^;","~u655b7378-0a3b-4c02-98c5-766589030c04",536870918]],["^15",[525,"^Q","Geometry Properties\nThere are various properties available to [[DOM]]``<nodes>`` that define their ``outer geometry``.\n\n![image.png](../assets/image_1687623412218_0.png)\n\nThe ``<node>.offsetParent`` returns the ``node`` closest to the element which has either [[CSS Property]] ``position`` set (with a value except static), or a ``table`` [[HTML Element]] or the ``body`` HTML element. \n\nThen the properties in the image define their respective sizes.\nFor ex.:\n```html\n<main style=\"position: relative\" id=\"main\">\n  <article>\n    <div id=\"example\" style=\"position: absolute; left: 180px; top: 180px\">...</div>\n  </article>\n</main>\n<script>\n  alert(example.offsetParent.id); // main\n  alert(example.offsetLeft); // 180 (note: a number, not a string \"180px\")\n  alert(example.offsetTop); // 180\n</script>\n```\nThe ``.offsetParent`` is null when the element has ``display: none`` or isn't in the DOM, or is ``html`` or ``body`` element or has ``position: fixed`` [[CSS]].\n\nIt is recommended to use these properties over ``getComputedStyle(...)`` method as it's behavior is dependent on the browser where it may automatically include sizes like scrollbar width or not, but these are explicit and always computed.\n\n\n* The ``document.documentElement.clientWidth`` and ``document.documentElement.clientHeight`` which is on the ``html`` element of the [[HTML]] Document effectively return the actual window size (minus the scrollbar width/height). The ``window.innerHeight`` and ``window.innerWidth`` on [[window]] do the same, however they don't take the scrollbar into account.\n\n* Given all inconsistences across browsers and versions, it is recommended to use this logic for getting the right window height/width.\n```js\nlet windowHeight = Math.max(\n  document.body.scrollHeight, document.documentElement.scrollHeight,\n  document.body.offsetHeight, document.documentElement.offsetHeight,\n  document.body.clientHeight, document.documentElement.clientHeight\n);\n```",536870918]],["^15",[525,"^O","^16",536870918]],["^15",[525,"^F",528,536870918]],["^15",[525,"^X",520,536870918]],["^15",[525,"^V",520,536870918]],["^15",[525,"^U",284,536870918]],["^15",[525,"^U",288,536870918]],["^15",[525,"^U",375,536870918]],["^15",[525,"^U",383,536870918]],["^15",[525,"^U",402,536870918]],["^15",[525,"^U",430,536870918]],["^15",[525,"^U",520,536870918]],["^15",[525,"^H",284,536870918]],["^15",[525,"^H",288,536870918]],["^15",[525,"^H",375,536870918]],["^15",[525,"^H",383,536870918]],["^15",[525,"^H",402,536870918]],["^15",[525,"^H",430,536870918]],["^15",[525,"^;","~u655b7378-69b1-40b7-b16c-f1b01c19df18",536870918]],["^15",[526,"^Q","~``.data`` and ``.nodeValue``: Text Nodes. Properties which hold their data.\nFor ex.:\n```html\n<body>\n  Hello\n  <!-- Comment -->\n  <script>\n    let text = document.body.firstChild;\n    alert(text.data); // prints Hello\n\n    let comment = text.nextSibling;\n    alert(comment.data); // prints Comment\n  </script>\n</body>\n```",536870918]],["^15",[526,"^O","^16",536870918]],["^15",[526,"^F",532,536870918]],["^15",[526,"^X",520,536870918]],["^15",[526,"^V",520,536870918]],["^15",[526,"^U",520,536870918]],["^15",[526,"^;","~u655b7378-66b0-45d2-86e1-45e7292ff2b4",536870918]],["^15",[527,"^Q","More props can be checked in the specs of the node type.",536870918]],["^15",[527,"^O","^16",536870918]],["^15",[527,"^F",520,536870918]],["^15",[527,"^X",520,536870918]],["^15",[527,"^V",520,536870918]],["^15",[527,"^U",520,536870918]],["^15",[527,"^;","~u655b7378-91c4-4116-9819-9d244e2abec4",536870918]],["^15",[528,"^Q","Custom DOM Class Properties\nThis is possible too, \nFor ex.:\n```js\nElement.prototype.yo= function () {\n};\ndocument.body.nah= function() {\n};\n\nconsole.log(document.body.nah()); //works\nconsole.log(document.body.yo()); //also works as document is a child to Element ([[Prototype Object]]).\n```\n* For any attribute on an [[HTML]] element, if it is standard for the type of element then the DOM automatically keeps track of it. But custom properties must be manually fetched and updated.\nTo do so we use\n``<node>.hasAttribute(name)`` – checks for existence.\n``<node>.getAttribute(name)`` – gets the value.\n ``<node>.setAttribute(name, value)`` – sets the value.\n``<node>.removeAttribute(name)`` – removes the attribute.\n``<node>.attributes``- Returns a collection with all the attributes, [[Iterable]] \nFor ex.:\n```html\n<div id=\"a\" yoo=\"bro\">\n</div>\n<script>\n\nlet node= document.getElementById(\"a\");\nconsole.log(node.id); //ok prints a\nconsole.log(node.yoo); //undefined\n\nalert(node.getAttribute(\"a\")); //prints bro\n</script>\n```\n\n* Attribute names are case-insensitive.\n\n* The ``.outerHTML`` has all the attributes, even custom ones.\n\n* Attribute values are almost always strings. But some attributes such as ``.checked`` on the ``input`` element are boolean or some other tpe.\n\n* Almost all attribute changes made to the HTML sync with the DOM, the exception are attributes like ``.value`` on text input nodes.\nFor ex.:\n```html\n<script>\n  let input = document.querySelector('input');\n\n  // attribute => property\n  input.setAttribute('value', 'text');\n  alert(input.value); // text\n\n  // NOT property => attribute\n  input.value = 'newValue';\n  alert(input.getAttribute('value')); // text (not updated!)\n</script>\n```\n\n* The dataset property\nBy the HTML standard, the prefix ``data-`` is left for custom attribute names. And these are all also available in the ``dataset`` property of the DOM.\nFor ex.:\n```html\n<div id=\"a\" data-yoo=\"bro\">\n</div>\n<script>\n\nlet node= document.getElementById(\"a\");\nconsole.log(node.dataset.yoo); //ok prints \"bro\"\n</script>\n```\nThese [[HTML]] attributes can be used in CSS as well and are automatically synced too.",536870918]],["^15",[528,"^O","^16",536870918]],["^15",[528,"^F",534,536870918]],["^15",[528,"^X",520,536870918]],["^15",[528,"^V",520,536870918]],["^15",[528,"^U",284,536870918]],["^15",[528,"^U",304,536870918]],["^15",[528,"^U",520,536870918]],["^15",[528,"^H",284,536870918]],["^15",[528,"^H",304,536870918]],["^15",[528,"^;","~u655b7378-ce66-4a5a-bf71-d7fb7d90492c",536870918]],["^15",[529,"^Q","We can get the current scroll position in the page by using the [[window]] Object's \n ``window.pageYOffset``/``window.scrollY`` and ``window.pageXOffset``/``window.scrollX``. These are read-only properties. The alternate properties are their aliases.",536870918]],["^15",[529,"^O","^16",536870918]],["^15",[529,"^F",525,536870918]],["^15",[529,"^X",520,536870918]],["^15",[529,"^V",520,536870918]],["^15",[529,"^U",375,536870918]],["^15",[529,"^U",520,536870918]],["^15",[529,"^H",375,536870918]],["^15",[529,"^;","~u655b7378-bc8a-4af2-aff4-946eaae8424a",536870918]],["^15",[530,"^Q","~``.hidden``: All nodes. Hides the node if it is set to true.",536870918]],["^15",[530,"^O","^16",536870918]],["^15",[530,"^F",535,536870918]],["^15",[530,"^X",520,536870918]],["^15",[530,"^V",520,536870918]],["^15",[530,"^U",520,536870918]],["^15",[530,"^;","~u655b7378-6d66-410b-b05e-ccd8c74a7e92",536870918]],["^15",[531,"^Q","~``.id``, ``.className`` and ``.classList``: All nodes. Provides the node's id and class name (named so because `class` used to be a reserved keyword by JS). The ``.classList`` returns an [[Iterable]] which returns an iterable on the class names of an element and provides methods to add/remove classes as well.\n4 important methods are \n``<node>.classList.toggle(\"<classname>\")`` : adds the class if not present, otherwise removes it\n``<node>.classList.contains(\"<classname>\")``\n``<node>.classList.add(\"<classname>\")``\n``<node>.classList.remove(\"<classname>\")``\nFor ex.:\n```html\n<body id=\"aydi\" class=\"ha yo\"> </body>\n<script>\nalert(document.body.className); //prints ha yo\n- document.body.className = \"yo ha\";\nfor (let elem of document.body.classList); //passes ha then yo\n{}\n- document.body.classList.contains(\"yo\"); //returns true\ndocument.body.classList.toggle(\"yo\"); // removes it\n- <script>\n```\nWriting to ``.className`` overwrites the whole ``class`` attribute.",536870918]],["^15",[531,"^O","^16",536870918]],["^15",[531,"^F",530,536870918]],["^15",[531,"^X",520,536870918]],["^15",[531,"^V",520,536870918]],["^15",[531,"^U",304,536870918]],["^15",[531,"^U",520,536870918]],["^15",[531,"^H",304,536870918]],["^15",[531,"^;","~u655b7378-b7be-4f25-8a0f-0fcf5c1cd0da",536870918]],["^15",[532,"^Q","~``.outerHTML``: All nodes. Property which has the innerHTMl + the node's element itself.\nHowever, there's a slight difference between innerHTML and outerHTML.\nIf we modify an innerHTML with new content, it replaces the innerHTML and the reference to the node remains the same so we can work with it. However, when we modify the outerHTML then the node's element is removed and the new modified element inserted whilst the reference keeps pointing to the old and now removed from DOM node.\nFor ex.:\n```js\nlet x= document.querySelector(...);\nalert(x.outerHTML); //prints <div>...</div>\nx.outerHTML = \"<p> yo</p>\";\nalert(x.outerHTML); //still prints <div>...</div>\n```\nHere, the new element is inserted and replaces the current node in the DOM but the variable still references the old one. We need to explicitly get the new reference after modifying the outerHTML.",536870918]],["^15",[532,"^O","^16",536870918]],["^15",[532,"^F",533,536870918]],["^15",[532,"^X",520,536870918]],["^15",[532,"^V",520,536870918]],["^15",[532,"^U",520,536870918]],["^15",[532,"^;","~u655b7378-c6f3-4344-8e82-bc010173d42a",536870918]],["^15",[533,"^Q","~``.innerHTML``: All nodes. Property which has the HTML inside the node as string. We can modify it and the changes are reflected on the page.\nFor ex.:\n```html\n<body>\n<p>A paragraph</p>\n<div>A div</div>\n- <script>\n  alert( document.body.innerHTML ); // read the current contents\n  document.body.innerHTML = 'The new BODY!'; // replace it\n</script>\n- </body>\n```\nHowever, [[<script>]]s inserted inside the ``.innerHTML`` aren't executed automatically.\nFurthermore, any change to the ``.innerHTML`` of a node causes the whole node to be re-rendered. Meaning even if we concatenate a single character to the innerHTML of a node then the whole node will be rendered again, this causes hovered items to lose focus, inputted text to be wiped as well and etc. as the state is reset. If the node had a lot of resources then they will all be re-rendered so it is an expensive operation.",536870918]],["^15",[533,"^O","^16",536870918]],["^15",[533,"^F",522,536870918]],["^15",[533,"^X",520,536870918]],["^15",[533,"^V",520,536870918]],["^15",[533,"^U",283,536870918]],["^15",[533,"^U",520,536870918]],["^15",[533,"^H",283,536870918]],["^15",[533,"^;","~u655b7378-6dcd-4d11-8e9e-313687e4088c",536870918]],["^15",[534,"^Q","~``.style``: All nodes. Provides an [[Object]] with the style properties of the node. This Object has all valid [[CSS]] attributes for the node set in it, so we can provide values to them directly.\nFor ex.:\n```js\ndocument.body.style.width= 20px;\nalert(document.body.style.width); //prints 20px//\nCSS Attributes that have '-' in their property name have the -'s removed and next letter capitalized.\ndocument.body.style.MozBorderRadius = 2px; //as the attribute is -moz-border-radius\n//The Style Object requires the whole direction with propertes like margin\ndocument.body.style.marginTop = 2px; //ok\n```\n\n\n* Instead of calling ``delete <style Object property>`` we should assign the property an empty [[String]] or a default value.\nOr alternatively, to remove a specific CSS property we can also use ``<node>.style.removeProperty(\"<prop name>\")``.\n\n* We can also get/set the whole style at once using ``.style.cssText`` property. This overwrites existing style. \nThese only return the inline CSS syles and not the final style after all the CSS selectors have applied their styles. To get those we use ``getComputedStyle(\"<node>\", \"<optional pseudo class>\")`` which returns the Style Object as well, with the computed and then resolved properties (computed means raw value and resolved means finally adjusted to the environment, like relative sizes adjusted to raw, it returns the resolved values). Pseudo class can be any except \":visited\" as it is forbidden due to security of [[Brower]] to see its state.\n\n* Units need to provided explictly.",536870918]],["^15",[534,"^O","^16",536870918]],["^15",[534,"^F",531,536870918]],["^15",[534,"^X",520,536870918]],["^15",[534,"^V",520,536870918]],["^15",[534,"^U",80,536870918]],["^15",[534,"^U",299,536870918]],["^15",[534,"^U",374,536870918]],["^15",[534,"^U",402,536870918]],["^15",[534,"^U",520,536870918]],["^15",[534,"^H",80,536870918]],["^15",[534,"^H",299,536870918]],["^15",[534,"^H",374,536870918]],["^15",[534,"^H",402,536870918]],["^15",[534,"^;","~u655b7378-e615-4eef-ac64-32419a8327a5",536870918]],["^15",[535,"^Q","~``.textContent``: All nodes . Property that just has the text contents in it concatenated into a single string without any tags.\nFor ex.:\n```html\n<div id=\"news\">\n<h1>Headline!</h1>\n<p>Martians attack people!</p>\n</div>\n- <script>\n\nalert(news.textContent); // prints Headline! Martians attack people!\n</script>\n```\nWe can read/write directly using this and this doesn't cause the whole node to be re-rendered, however if there is any tag in the textContent written to the node, then it is treated literally and is not parsed.",536870918]],["^15",[535,"^O","^16",536870918]],["^15",[535,"^F",526,536870918]],["^15",[535,"^X",520,536870918]],["^15",[535,"^V",520,536870918]],["^15",[535,"^U",520,536870918]],["^15",[535,"^;","~u655b7378-ef86-4054-8add-0bfd24ff7d36",536870918]],["^15",[536,"^3","alias:: Document Object Model\n\n- It is what it is named, it represents the [[HTML]] (and [[CSS]]) or [[XML]] Document as an [[Object]] and allows JS to interact with it as if it was an Object. This allows JS to freely modify the Document.\n  The DOM Object has its own spec: [DOM](https://dom.spec.whatwg.org/)\n  Similarly, we can modify the CSS classes as well using the CSSOM (creating/removing CSS classes can be done without it) which has the spec: [CSSOM](https://www.w3.org/TR/cssom-1/)\n- The ``document`` [[Object]] is the main entry point to a page, it has the entire Document in it as an Object.\n  For ex.:\n  In [[Browser]]\n  ```js\n  document.body.style.background = \"red\"; //turns the background of the Document red.\n  ```\n  \n  For ex.:\n  ```html\n  <!DOCTYPE HTML>\n  <html>\n  <head>\n    <title>About elk</title>\n  </head>\n  <body>\n    The truth about elk.\n  </body>\n  </html>\n  ```\n  \n  is represented as\n  ![image.png](../assets/image_1687267144086_0.png)\n  by the DOM\n  Newline character and spaces between [[HTML]] tags is completely valid Objects for DOM, that is why we see them here.\n  \n  * The ``document`` Object is a property of the [[window]] Object. So accessing ``document.<someprop>`` is the same as accessing ``window.document.<someprop>``.\n- The general rule is, everything in an HTML page is a part of the DOM tree. Even the ``<!DOCTYPE...`` directive.\n- Every attribute of an [[HTML Element]] is mapped to a [[DOM Class Property]] on its node. \n  However, whilst HTML attributes are case insensitive, DOM attributes are case sensitive as JS is case sensitive.\n- There are different types of ``nodes``, each node is an [[Object]] with a specific structure, each element in [[HTML]] is represented as a ``node`` in the DOM. There's [12](https://dom.spec.whatwg.org/#node) of these.\n  The 4 most common are:\n  * ``document`` – the “entry point” into DOM.\n  * ``element nodes`` – HTML-tags, the tree building blocks.\n  * ``text nodes`` – contain text.\n  * ``comments`` – sometimes we can put information there, it won’t be shown, but JS can read it from the DOM.\n- We can view the DOM on sites like [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/) or using the [[Developer tools]].\n- Navigation\n  ![image.png](../assets/image_1687276220476_0.png)\n  We can walk the DOM tree using methods with the same name as shown above, \n  ```js\n  let body = document.body; \n  ``` \n  and so on. These 3 are directly accessible.\n  Note: The [[Browser]] parses the HTML document from top-to-bottom, so if we have a [[<script>]] tag before an element, then it can't see it in the DOM yet. We can have the script tag in the head tag which means the ``document.body`` itself can be [[null]]. In DOM null simply means the element doesn't exist.\n  This is why it is recommended to have the script tag at the bottom.\n  \n  To traverse\n  ```js\n  let x = document.body.firstChild;\n  if (x.hasChildNodes()){\n   for(let child of x.childNodes) {\n     console.log(child.innerText);\n    }\n  }\n  ```\n  ``<node>.hasChildNodes()`` returns true if the node has child nodes. \n  ``.childNodes`` returns an Array-like Object, called a ``Collection``, which is an [[Iterable]] so it can be looped over. However, it is advised to use ``for..of`` [[Loop]] and not ``for..in`` as the latter even enumerates over properties that aren't related to the DOM.\n  \n  * DOM collections are live and read-only, we can't replace a node with another node. However we can add/remove children and they represent the live state of the node in the Document. If we modify a node then its changes are rendered right away (after being called in the [[Message Queue]])\n  \n  * Sometimes we don't want to traverse all nodes, just specific type of nodes, for element nodes we have\n  ![image.png](../assets/image_1687277449222_0.png)\n  The top document node is its own node, so \n  ```js\n  alert( document.documentElement.parentNode ); // document\n  alert( document.documentElement.parentElement ); // null\n  ```\n  This is useful if we wish to traverse all the way up,\n  ```js\n  //let elem = ... some node...;\n  while(elem = elem.parentElement) {...} \n  ```\n-\n- Searching for elements\n  We can also search for individual nodes directly.\n  \n  If they have an ``id`` attribute set then we can get them directly\n  ```html\n  <div id= \"yo\">\n   ...\n  \n  <script>\n   yo.style.background=\"red\"; //ok\n  </script>\n  ``` \n  Or we can use the ``document.getElementById(\"<id>\")`` method to get the node.\n  It is recommended to use this method as the direct access method relies on the mixing of namespaces of JS and DOM, which means it may not be clear to the reader to understand if the variable came from the JS or the DOM and it can be easily [[Shadowed]] by any JS element as well.\n  \n  * ``document.getElementById(\"<id>\")`` \n  * ``document.querySelectorAll(\"<css>\")``: Any valid [[CSS]] selector can be used here, and then a collection of such nodes is returned. It can even use [[CSS]] pseudo-classes like ``document.querySelectorAll(\":hover\")`` returns the current nodes being hovered over (from the html node to the given node in depth order)\n  *  ``document.querySelector(\"<css>\")``: Same as above except only searches for as long as a single node matching the selector is found, then stops. Meaning it is faster.\n  * ``<node>.matches(\"<css>\")``: Returns a bool, true if the given node matches the CSS selector.\n  * ``<node>.closest(\"<css>\")``: Starts checking the current node, then its parent, and so on until a node matching the css is found then returns that node. \n  * ``<node>.getElementsByTagName(\"<tagname>\")``: Returns a collection of child nodes that have the given tag. The tag can be \"*\" meaning any tag. \n  * ``<node>.getElementsByClassName(\"<classname>\")``\n  * ``document.getElementsByTagName(\"<tag name>\")``: Searches the whole document and returns a collection with these nodes.\n  ![image.png](../assets/image_1687323010732_0.png)\n  \n  By ``Live``, it means that these methods return the live node, so it represents the current state on the DOM and would get updated if the DOM does, similarly, updating them would update the DOM. In contract, the ``...querySelector...`` return ``static`` elements, which don't represent the Live state of the DOM.\n  \n  * The ``document....(...)`` methods can be called by any Element Node as well. \n  For ex.:\n  ```html\n  <div>\n   <span>\n   </span>\n  </div>\n  <script>\n  let div = document.querySelector('div'); \n  let span = div.querySelect('span'); //works\n  </script>\n  ```\n  The nodes then are searched inside the given node, so only the children of a node are evaluated.\n- DOM Node Classes\n  ![image.png](../assets/image_1687328193414_0.png)\n  This is the hierarchy with the EventTarget abstract [[Class]] at the top, JS doesn't have the concept of abstract classes, it just means that by convention it is a class that shouldn't be made an object of, just inherited using [[Prototype Object]].\n  EventTarget also provides [[Browser Event]]s. This is why all nodes can have an event hooked to them.\n  We can use [[Console]].dir to see any node's prototypal chain.\n  \n  [[Browser]]s provide all these classes to the JS environment, hence we can directly check them too.\n  For ex.:\n  ```js\n  alert( document.body instanceof HTMLBodyElement ); // true\n  alert( document.body instanceof HTMLElement ); // true\n  alert( document.body instanceof Element ); // true\n  alert( document.body instanceof Node ); // true\n  alert( document.body instanceof EventTarget ); // true\n  ```\n  uses ``instanceOf`` [[Operator]]\n- [[DOM Class Property]]\n-\n- Creating and Inserting Nodes:\n  To create:\n  * ``document.createElement(\"<tag name>\")``: Creates an Element type node of the given tagname. Recall that tagNames are basically the name of the element. \n  \n  * ``document.createTextNode(\"<text node content>\")``:\n  ...and so on for other types of nodes as well.\n  \n  Now to insert the created node:\n  * ``<node>.append(...nodes or strings)`` – append nodes or strings *at the end* of `node`,\n  * ``<node>.prepend(...nodes or strings)`` – insert nodes or strings *at the beginning* of `node`,\n  * ``<node>.before(...nodes or strings)`` –- insert nodes or strings *before* `node`,\n  * ``<node>.after(...nodes or strings)`` –- insert nodes or strings *after* `node`,\n  * ``<node>.replaceWith(...nodes or strings)`` –- replaces `node` with the given nodes or strings.\n  They use the spread [[Operator]] so multiple nodes or strings can be inserted at once.\n  Stings inserted are not parsed, so even if they contain HTML syntax, they are added `as-is`.\n  \n  Like so\n  ![image.png](../assets/image_1687454198531_0.png)\n  For ex.:\n  ```html\n  <ol id=\"ol\">\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n  </ol>\n  \n  <script>\n    ol.before('before'); // insert string \"before\" before <ol>\n    ol.after('after'); // insert string \"after\" after <ol>\n  \n    let liFirst = document.createElement('li');\n    liFirst.innerHTML = 'prepend';\n    ol.prepend(liFirst); // insert liFirst at the beginning of <ol>\n  \n    let liLast = document.createElement('li');\n    liLast.innerHTML = 'append';\n    ol.append(liLast); // insert liLast at the end of <ol>\n  </script>\n  ```\n  Creates\n  ```html\n  before\n  <ol id=\"ol\">\n    <li>prepend</li>\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n    <li>append</li>\n  </ol>\n  after\n  ```\n  \n  * There is another way to insert nodes, using the ``<node>.insertAdjacementElement(\"<where string>\", \"<html string>\")``, ``<node>.insertAdjacementText(\"<where string>\", \"<html string>\")`` and so on.\n  These methods takes a ``where`` string, which can be a value from \"beforebegin\", \"afterbegin\", \"beforeend\" and \"afterend\" and defines the position, and an [[HTML]] [[String]] which is parsed as HTML and the created node/text/etc. inserted at the given position.\n  Like so\n  ![image.png](../assets/image_1687454718947_0.png)\n  \n  * Old ways of adding nodes to DOM\n   ``<parent node>.appendChild(<child Node>)``: An old method, returns the inserted node as well. \n   ``<parent node>.insertBefore(<node>, <next sibling node>)``: Same\n  \n  * ``document.write(\"<html string>\")``: The html passed is parsed and then inserted right where the method was called in the HTML document. Deprecated as it can only be used while the Document is loading. If it is used after the page has loaded, it overwrites the entire Document with the given html.\n- (Re)moving a Node\n  ``<node>.remove()``: Removes the node and updates the DOM and [[HTML]] Document. \n  \n  To move a node, we simply get the node and insert it any new place. It is automatically removed from its old place and inserted at the new place.\n  \n  * ``<parent node>replaceChild(<node>, <old child node>)``: An old method, returns the inserted node. Replaces the old child node with the given node from the children of the parent node.\n  *  ``<parent node>removeChild(<node>)``: Same.\n- ``<node>.cloneNode(<bool shouldDeepCopy>)``\n  Returns a copy of the node. That is, it clones a node. If the provided bool is true, the children elements are cloned as well otherwise only the given node is cloned with all its attributes as well.\n- ``DocumentFragment``\n  This [[Class]] can be used to create a 'transparent' list of nodes that can be inserted anywhere, and this `wrapper` doesn't do anything.\n  For ex.:\n  ```js\n  let x = new DocumentFragment();\n  let div = document.createElement('div');\n  let div2= document.createElement('div');\n  x.push(div);\n  x.push(div2);\n  \n  document.query....(...).append(...x); //works, only div and div2 are inserted\n  ```\n  It's not necessary to use this wrapper class, as a normal [[Array]] would work the same as well.\n- Scrolling\n  We can scroll a page using JS  by setting\n  ``document.documentElement.scrollTop`` or ``..scrollLeft`` [[DOM Class Property]] to raw values, in safari we instead use ``document.body.scrollTop``/``..scrollLeft``.``\n  \n  window.scrollBy(x,y)`` or ``window.scrollTo(x,y)`` which work the same way in all browsers. ``.scrollTo`` makes sure the x,y is at the top-left of the current [[window]].\n  \n  ``<node>.scrollIntoView(<bool top>)`` Brings node into viewport. If top is default/false, then the bottom edge of the element is aligned with the bottom of the window, otherwise the top one.\n  \n  ``document.body.style.overlow`` If this [[CSS Property]] is set to \"hidden\", the scrollbar disappears and scrolling is forbidden for the element, which is body here so it forbids it for the whole page.\n- [[HTML Element]] coordinates\n  Each ``node`` is generally positioned using either 1 of these 2 coordinate systems \n  \n  * Relative to the window: Basically relative to the window's top-left. Let's call them [clientX/clientY](https://javascript.info/coordinates).\n  * Relative to the Document:  Relative to the document's top-left. Let's call them pageX/pageY.\n  \n  For ex.:\n  ![image.png](../assets/image_1687829516610_0.png)\n  As we can see for the given element, if it is relative to the window (clientX/Y) then it's position has changed as the clientY is shorter after scrolling the window up. But if it is relative to the document, which it is in this case, it's pageY value still remains the same. \n  \n  The ``<node>.getBoundingClientRect()`` [[DOM Class Property]] method returns a ``DOMRect`` [[Class]]' object which represents a minimal rectangle that encapsulates the entire element. Then the methods on this object return properties of this rectange.\n  ``<DOMRect object>.x``/``.y``: PageX/PageY\n  ``.width``/``.height``: Can be -ve.\n  ``.left/top/right/bottom``: Returns either the x-coordinate (for left and right) or the y-coordinate (for top and bottom)\n  Like so\n  ![image.png](../assets/image_1687830169589_0.png)\n  \n  If the rectangle is flipped so the right bottom was x and y then the left/top won't match the x and y, this is why they are 2 separate properties.\n  \n  * The ``document.elementFromPoint(x,y)`` returns the most-nested element from the given coordinates (clientX/Y). It returns null if the given coordinates are outside the range of the window.\n- Forms and control elements\n  [Form](https://html.spec.whatwg.org/multipage/forms.html)s in [[HTML]] are an [[HTML Element]] which are treated specially. Similarly, control elements like ``input`` are also treated specially by [[Browser]]s.\n  \n  They are available in a named and ordered collection ``<node>.forms`` so all forms directly under a node are available in its ``.forms``. Like the forms in the main document are in ``document.forms``. \n  Since they are named and ordered, we can access a form node like ``<node>.forms.myForm`` where ``myForm`` is its ``id`` or with ``<node>.forms[0]`` if its the first form under the node (from top to bottom in the [[HTML]] Document).\n  For ex.:\n  ```html\n  <form name=\"my\">\n    <input name=\"one\" value=\"1\">\n    <input name=\"two\" value=\"2\">\n  </form>\n  \n  <script>\n  \n    let form = document.forms.my; // <form name=\"my\"> element\n  \n    let elem = form.elements.one; // <input name=\"one\"> element\n  \n    alert(elem.value); // 1\n  </script>\n  ```\n  ``Form`` nodes have a prop ``.elements`` which is also a named Collection of nodes under the form but the ``name`` is used instead of the ``id``. If there are multiple elements with the same ``name``, then it returns a collection instead of a node. All control elements under a form, despite any level are available to ``<form>.elements``.\n  \n  * All elements under a ``<form>.elements`` are also properties on the form Object itself, however, if the name of the form changes then the old properties and new ones are still valid.\n  That is\n  ```html\n  <form name=\"yo\">\n    <input name = \"x\" >\n  </form>\n  \n  <script>\n   let form = document.forms.yo;\n   let x= form.x; //works\n   x.name=\"y\";\n  let y = form.x; //still works\n  let y1= form.elements.x; //doesnt exist\n  \n  </script>\n  ```\n  \n  * All elements under a form have a backreference to the form itself which is kept in ``<node>.form`` property of the nodes under the form.\n  ![image.png](../assets/image_1688003269350_0.png)\n  \n  * Forms have a [[Browser Event]] ``submit`` which is triggered when the form submits. We can also use ``<form node>.submit()`` to do so manually.\n  For ex.:\n  ```js\n  let form = document.createElement('form');\n  form.action = 'https://google.com/search';\n  form.method = 'GET';\n  \n  form.innerHTML = '<input name=\"q\" value=\"test\">';\n  \n  // the form must be in the document to submit it\n  document.body.append(form);\n  \n  form.submit();\n  ```\n- Page Events\n  There are a few important [[Browser Event]]s that trigger on an [[HTML]] page's lifecycle.\n  \n  The events are triggered in this order:\n  ``DOMContentLoaded``: The DOM is loaded and ready. The [[<script>]]s of the page are loaded as well, but [[Async]] scripts and dynamically generated scripts are loaded after this event. \n  The event handler has to be on the ``document`` [[DOM]] node. \n  ``load``: External resources are loaded, like [[CSS]] stylesheets, images etc.\n  ``beforeunload`` and ``unload``: The user is has gone to another page and now the page is unloading. \n  \n  For load/unload the [[window]] has to take the event handler.\n  \n  * ``document.readyState``: This [[DOM Class Property]] has one of 3 values \"loading\" (doc is loading), \"interactive\" (doc is fully read) and \"complete\" (doc is read and ext. resources loaded) and indicates the readiness of the document's loading. \n  The ``readystatechange`` event is triggered when this property changes.\n- [[MutationObserver]]\n- Range\n  This [[Class]] allows us to select a range of data from the nodes. \n  \n  We can create an instance with ``let range= new Range();`` then each Range object/instance requires 2 endpoints, start and end. \n  We set the start with ``<range Object>.setStart(<node>, <offset>)`` and end with ``<range Object>.setEnd(<node>, <offset>)``. \n  The start and end node can be different. The offset must be a [[Number]].\n  \n  If the start node is a text node, then it returns the given position of characters in its text content from start to end encompassing all text nodes from start to end.\n  For ex.:\n  ```html\n  <p id=\"p\">Hello</p>\n  <p id=\"p2\">Example: <i>italic</i> and <b>bold</b></p>\n  <script>\n    let range = new Range();\n    range.setStart(p.firstChild, 2); //the first child is the text node\n    range.setEnd(p.firstChild, 4);\n  \n    // toString of a range returns its content as text\n    console.log(range); // ll\n  \n    range.setStart(p2.firstChild, 2);\n    range.setEnd(p2.querySelector('b').firstChild, 3);\n  \n    console.log(range); // ample: italic and bol\n  </script>\n  ```\n  ![image.png](../assets/image_1688010650331_0.png)\n  and\n  ![image.png](../assets/image_1688010758960_0.png)\n  \n  If the start node is an element node, then it returns the nodes in the range.\n  For ex.:\n  ```js\n  <p id=\"p\">Example: <i>italic</i> and <b>bold</b></p>\n  \n  <script>\n    let range = new Range();\n  \n    range.setStart(p, 0);\n    range.setEnd(p, 2);\n  \n    // toString of a range returns its content as text, without tags\n    console.log(range); // Example: italic\n  </script>\n  ```\n  \n  Every range object has these properties\n  ![image.png](../assets/image_1688010962681_0.png)\n  \n  There are more selection methods and also range editing methods [here](https://javascript.info/selection-range#range-selection-methods)\n- Selection\n  Whilst Range selects a given range, it doesn't show anything visually. However ``Selection`` Objects can show selections visually on the page in the [[Browser]], they can be obtained with either ``document.getSelection()`` or ``window.getSelection()``.\n  In firefox, multiple separate regions can be selected with ``Ctrl+click`` like so\n  ![image.png](../assets/image_1688011215800_0.png)\n  \n  but in other browsers there can only be a single selection at any time.\n  This Object has these properties\n  ![image.png](../assets/image_1688011308957_0.png)\n  \n  Similarly, there are many methods too [here](https://javascript.info/selection-range#selection-methods).\n  * [[Browser Event]] \n  ``selectstart`` and ``selectionchange`` are triggered if an element is selected or if the selection changes.\n  \n  * Both select and range have much more comprehensive utility and interactions with other elements such as with Form [[HTML Element]], given [here](https://javascript.info/selection-range).",536870918]],["^15",[536,"^17",1700492152173,536870918]],["^15",[536,"^Z","JS/pages/DOM.md",536870918]],["^15",[537,"^5",288,536870918]],["^15",[537,"^K",1700492152169,536870918]],["^15",[537,"^@",false,536870918]],["^15",[537,"^Y","document object model",536870918]],["^15",[537,"^11","Document Object Model",536870918]],["^15",[537,"^B",1700492152169,536870918]],["^15",[537,"^;","~u655b7378-eb31-4172-b51f-c2314b425620",536870918]],["^15",[538,"^K",1700492152306,536870918]],["^15",[538,"^[",588,536870918]],["^15",[538,"^@",false,536870918]],["^15",[538,"^Y","developer tools",536870918]],["^15",[538,"^11","Developer tools",536870918]],["^15",[538,"^B",1700492152306,536870918]],["^15",[538,"^;","~u655b7378-6554-4fd7-b48c-aecbfc5c5d2a",536870918]],["^15",[539,"^K",1700492152172,536870918]],["^15",[539,"^[",827,536870919]],["^15",[539,"^@",false,536870918]],["^15",[539,"^Y","mutationobserver",536870918]],["^15",[539,"^11","MutationObserver",536870918]],["^15",[539,"^B",1700492152172,536870918]],["^15",[539,"^;","~u655b7379-31c5-4b2d-ba11-293f547bb3de",536870919]],["^15",[540,"^Q","~``DocumentFragment``\nThis [[Class]] can be used to create a 'transparent' list of nodes that can be inserted anywhere, and this `wrapper` doesn't do anything.\nFor ex.:\n```js\nlet x = new DocumentFragment();\nlet div = document.createElement('div');\nlet div2= document.createElement('div');\nx.push(div);\nx.push(div2);\n\ndocument.query....(...).append(...x); //works, only div and div2 are inserted\n```\nIt's not necessary to use this wrapper class, as a normal [[Array]] would work the same as well.",536870918]],["^15",[540,"^O","^16",536870918]],["^15",[540,"^F",561,536870918]],["^15",[540,"^X",288,536870918]],["^15",[540,"^V",288,536870918]],["^15",[540,"^U",288,536870918]],["^15",[540,"^U",305,536870918]],["^15",[540,"^U",332,536870918]],["^15",[540,"^H",305,536870918]],["^15",[540,"^H",332,536870918]],["^15",[540,"^;","~u655b7378-8f53-4b70-bc9f-e5feecf18940",536870918]],["^15",[541,"^Q","Range\nThis [[Class]] allows us to select a range of data from the nodes. \n\nWe can create an instance with ``let range= new Range();`` then each Range object/instance requires 2 endpoints, start and end. \nWe set the start with ``<range Object>.setStart(<node>, <offset>)`` and end with ``<range Object>.setEnd(<node>, <offset>)``. \nThe start and end node can be different. The offset must be a [[Number]].\n\nIf the start node is a text node, then it returns the given position of characters in its text content from start to end encompassing all text nodes from start to end.\nFor ex.:\n```html\n<p id=\"p\">Hello</p>\n<p id=\"p2\">Example: <i>italic</i> and <b>bold</b></p>\n<script>\n  let range = new Range();\n  range.setStart(p.firstChild, 2); //the first child is the text node\n  range.setEnd(p.firstChild, 4);\n\n  // toString of a range returns its content as text\n  console.log(range); // ll\n\n  range.setStart(p2.firstChild, 2);\n  range.setEnd(p2.querySelector('b').firstChild, 3);\n\n  console.log(range); // ample: italic and bol\n</script>\n```\n![image.png](../assets/image_1688010650331_0.png)\nand\n![image.png](../assets/image_1688010758960_0.png)\n\nIf the start node is an element node, then it returns the nodes in the range.\nFor ex.:\n```js\n<p id=\"p\">Example: <i>italic</i> and <b>bold</b></p>\n\n<script>\n  let range = new Range();\n\n  range.setStart(p, 0);\n  range.setEnd(p, 2);\n\n  // toString of a range returns its content as text, without tags\n  console.log(range); // Example: italic\n</script>\n```\n\nEvery range object has these properties\n![image.png](../assets/image_1688010962681_0.png)\n\nThere are more selection methods and also range editing methods [here](https://javascript.info/selection-range#range-selection-methods)",536870918]],["^15",[541,"^O","^16",536870918]],["^15",[541,"^F",559,536870918]],["^15",[541,"^X",288,536870918]],["^15",[541,"^V",288,536870918]],["^15",[541,"^U",162,536870918]],["^15",[541,"^U",288,536870918]],["^15",[541,"^U",332,536870918]],["^15",[541,"^H",162,536870918]],["^15",[541,"^H",332,536870918]],["^15",[541,"^;","~u655b7378-912e-4c9f-88af-d3ce10250e7b",536870918]],["^15",[542,"^Q","[[HTML Element]] coordinates\nEach ``node`` is generally positioned using either 1 of these 2 coordinate systems \n\n* Relative to the window: Basically relative to the window's top-left. Let's call them [clientX/clientY](https://javascript.info/coordinates).\n* Relative to the Document:  Relative to the document's top-left. Let's call them pageX/pageY.\n\nFor ex.:\n![image.png](../assets/image_1687829516610_0.png)\nAs we can see for the given element, if it is relative to the window (clientX/Y) then it's position has changed as the clientY is shorter after scrolling the window up. But if it is relative to the document, which it is in this case, it's pageY value still remains the same. \n\nThe ``<node>.getBoundingClientRect()`` [[DOM Class Property]] method returns a ``DOMRect`` [[Class]]' object which represents a minimal rectangle that encapsulates the entire element. Then the methods on this object return properties of this rectange.\n``<DOMRect object>.x``/``.y``: PageX/PageY\n``.width``/``.height``: Can be -ve.\n``.left/top/right/bottom``: Returns either the x-coordinate (for left and right) or the y-coordinate (for top and bottom)\nLike so\n![image.png](../assets/image_1687830169589_0.png)\n\nIf the rectangle is flipped so the right bottom was x and y then the left/top won't match the x and y, this is why they are 2 separate properties.\n\n* The ``document.elementFromPoint(x,y)`` returns the most-nested element from the given coordinates (clientX/Y). It returns null if the given coordinates are outside the range of the window.",536870918]],["^15",[542,"^O","^16",536870918]],["^15",[542,"^F",545,536870918]],["^15",[542,"^X",288,536870918]],["^15",[542,"^V",288,536870918]],["^15",[542,"^U",288,536870918]],["^15",[542,"^U",332,536870918]],["^15",[542,"^U",383,536870918]],["^15",[542,"^U",520,536870918]],["^15",[542,"^H",332,536870918]],["^15",[542,"^H",383,536870918]],["^15",[542,"^H",520,536870918]],["^15",[542,"^;","~u655b7378-127f-4bca-8b27-5835b39eeb2b",536870918]],["^15",[543,"^Q","Navigation\n![image.png](../assets/image_1687276220476_0.png)\nWe can walk the DOM tree using methods with the same name as shown above, \n```js\nlet body = document.body; \n``` \nand so on. These 3 are directly accessible.\nNote: The [[Browser]] parses the HTML document from top-to-bottom, so if we have a [[<script>]] tag before an element, then it can't see it in the DOM yet. We can have the script tag in the head tag which means the ``document.body`` itself can be [[null]]. In DOM null simply means the element doesn't exist.\nThis is why it is recommended to have the script tag at the bottom.\n\nTo traverse\n```js\nlet x = document.body.firstChild;\nif (x.hasChildNodes()){\n for(let child of x.childNodes) {\n   console.log(child.innerText);\n  }\n}\n```\n``<node>.hasChildNodes()`` returns true if the node has child nodes. \n``.childNodes`` returns an Array-like Object, called a ``Collection``, which is an [[Iterable]] so it can be looped over. However, it is advised to use ``for..of`` [[Loop]] and not ``for..in`` as the latter even enumerates over properties that aren't related to the DOM.\n\n* DOM collections are live and read-only, we can't replace a node with another node. However we can add/remove children and they represent the live state of the node in the Document. If we modify a node then its changes are rendered right away (after being called in the [[Message Queue]])\n\n* Sometimes we don't want to traverse all nodes, just specific type of nodes, for element nodes we have\n![image.png](../assets/image_1687277449222_0.png)\nThe top document node is its own node, so \n```js\nalert( document.documentElement.parentNode ); // document\nalert( document.documentElement.parentElement ); // null\n```\nThis is useful if we wish to traverse all the way up,\n```js\n//let elem = ... some node...;\nwhile(elem = elem.parentElement) {...} \n```",536870918]],["^15",[543,"^O","^16",536870918]],["^15",[543,"^F",548,536870918]],["^15",[543,"^X",288,536870918]],["^15",[543,"^V",288,536870918]],["^15",[543,"^U",283,536870918]],["^15",[543,"^U",288,536870918]],["^15",[543,"^U",289,536870918]],["^15",[543,"^U",300,536870918]],["^15",[543,"^U",304,536870918]],["^15",[543,"^U",343,536870918]],["^15",[543,"^U",484,536870918]],["^15",[543,"^H",283,536870918]],["^15",[543,"^H",289,536870918]],["^15",[543,"^H",300,536870918]],["^15",[543,"^H",304,536870918]],["^15",[543,"^H",343,536870918]],["^15",[543,"^H",484,536870918]],["^15",[543,"^;","~u655b7378-a53d-4e2d-b2b3-d20956ffe2ed",536870918]],["^15",[544,"^Q","",536870918]],["^15",[544,"^O","^16",536870918]],["^15",[544,"^F",543,536870918]],["^15",[544,"^X",288,536870918]],["^15",[544,"^V",288,536870918]],["^15",[544,"^U",288,536870918]],["^15",[544,"^;","~u655b7378-7b67-4932-a095-9d4a863b33b1",536870918]],["^15",[545,"^Q","Scrolling\nWe can scroll a page using JS  by setting\n``document.documentElement.scrollTop`` or ``..scrollLeft`` [[DOM Class Property]] to raw values, in safari we instead use ``document.body.scrollTop``/``..scrollLeft``.``\n\nwindow.scrollBy(x,y)`` or ``window.scrollTo(x,y)`` which work the same way in all browsers. ``.scrollTo`` makes sure the x,y is at the top-left of the current [[window]].\n\n``<node>.scrollIntoView(<bool top>)`` Brings node into viewport. If top is default/false, then the bottom edge of the element is aligned with the bottom of the window, otherwise the top one.\n\n``document.body.style.overlow`` If this [[CSS Property]] is set to \"hidden\", the scrollbar disappears and scrolling is forbidden for the element, which is body here so it forbids it for the whole page.",536870918]],["^15",[545,"^O","^16",536870918]],["^15",[545,"^F",540,536870918]],["^15",[545,"^X",288,536870918]],["^15",[545,"^V",288,536870918]],["^15",[545,"^U",288,536870918]],["^15",[545,"^U",375,536870918]],["^15",[545,"^U",430,536870918]],["^15",[545,"^U",520,536870918]],["^15",[545,"^H",375,536870918]],["^15",[545,"^H",430,536870918]],["^15",[545,"^H",520,536870918]],["^15",[545,"^;","~u655b7378-084d-4b3e-8d9d-179c15bd4e98",536870918]],["^15",[546,"^Q","Creating and Inserting Nodes:\nTo create:\n* ``document.createElement(\"<tag name>\")``: Creates an Element type node of the given tagname. Recall that tagNames are basically the name of the element. \n\n* ``document.createTextNode(\"<text node content>\")``:\n...and so on for other types of nodes as well.\n\nNow to insert the created node:\n* ``<node>.append(...nodes or strings)`` – append nodes or strings *at the end* of `node`,\n* ``<node>.prepend(...nodes or strings)`` – insert nodes or strings *at the beginning* of `node`,\n* ``<node>.before(...nodes or strings)`` –- insert nodes or strings *before* `node`,\n* ``<node>.after(...nodes or strings)`` –- insert nodes or strings *after* `node`,\n* ``<node>.replaceWith(...nodes or strings)`` –- replaces `node` with the given nodes or strings.\nThey use the spread [[Operator]] so multiple nodes or strings can be inserted at once.\nStings inserted are not parsed, so even if they contain HTML syntax, they are added `as-is`.\n\nLike so\n![image.png](../assets/image_1687454198531_0.png)\nFor ex.:\n```html\n<ol id=\"ol\">\n  <li>0</li>\n  <li>1</li>\n  <li>2</li>\n</ol>\n\n<script>\n  ol.before('before'); // insert string \"before\" before <ol>\n  ol.after('after'); // insert string \"after\" after <ol>\n\n  let liFirst = document.createElement('li');\n  liFirst.innerHTML = 'prepend';\n  ol.prepend(liFirst); // insert liFirst at the beginning of <ol>\n\n  let liLast = document.createElement('li');\n  liLast.innerHTML = 'append';\n  ol.append(liLast); // insert liLast at the end of <ol>\n</script>\n```\nCreates\n```html\nbefore\n<ol id=\"ol\">\n  <li>prepend</li>\n  <li>0</li>\n  <li>1</li>\n  <li>2</li>\n  <li>append</li>\n</ol>\nafter\n```\n\n* There is another way to insert nodes, using the ``<node>.insertAdjacementElement(\"<where string>\", \"<html string>\")``, ``<node>.insertAdjacementText(\"<where string>\", \"<html string>\")`` and so on.\nThese methods takes a ``where`` string, which can be a value from \"beforebegin\", \"afterbegin\", \"beforeend\" and \"afterend\" and defines the position, and an [[HTML]] [[String]] which is parsed as HTML and the created node/text/etc. inserted at the given position.\nLike so\n![image.png](../assets/image_1687454718947_0.png)\n\n* Old ways of adding nodes to DOM\n ``<parent node>.appendChild(<child Node>)``: An old method, returns the inserted node as well. \n ``<parent node>.insertBefore(<node>, <next sibling node>)``: Same\n\n* ``document.write(\"<html string>\")``: The html passed is parsed and then inserted right where the method was called in the HTML document. Deprecated as it can only be used while the Document is loading. If it is used after the page has loaded, it overwrites the entire Document with the given html.",536870918]],["^15",[546,"^O","^16",536870918]],["^15",[546,"^F",551,536870918]],["^15",[546,"^X",288,536870918]],["^15",[546,"^V",288,536870918]],["^15",[546,"^U",80,536870918]],["^15",[546,"^U",284,536870918]],["^15",[546,"^U",288,536870918]],["^15",[546,"^U",339,536870918]],["^15",[546,"^H",80,536870918]],["^15",[546,"^H",284,536870918]],["^15",[546,"^H",339,536870918]],["^15",[546,"^;","~u655b7378-9117-4888-bae3-8fcbdef77766",536870918]],["^15",[547,"^Q","The general rule is, everything in an HTML page is a part of the DOM tree. Even the ``<!DOCTYPE...`` directive.",536870918]],["^15",[547,"^O","^16",536870918]],["^15",[547,"^F",563,536870918]],["^15",[547,"^X",288,536870918]],["^15",[547,"^V",288,536870918]],["^15",[547,"^U",288,536870918]],["^15",[547,"^;","~u655b7378-fa3c-402e-8a2f-30d87f8e7f5d",536870918]],["^15",[548,"^Q","We can view the DOM on sites like [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/) or using the [[Developer tools]].",536870918]],["^15",[548,"^O","^16",536870918]],["^15",[548,"^F",552,536870918]],["^15",[548,"^X",288,536870918]],["^15",[548,"^V",288,536870918]],["^15",[548,"^U",288,536870918]],["^15",[548,"^U",538,536870918]],["^15",[548,"^H",538,536870918]],["^15",[548,"^;","~u655b7378-e29a-4448-a91f-f78ddb8a935a",536870918]],["^15",[549,"^Q","Searching for elements\nWe can also search for individual nodes directly.\n\nIf they have an ``id`` attribute set then we can get them directly\n```html\n<div id= \"yo\">\n ...\n\n<script>\n yo.style.background=\"red\"; //ok\n</script>\n``` \nOr we can use the ``document.getElementById(\"<id>\")`` method to get the node.\nIt is recommended to use this method as the direct access method relies on the mixing of namespaces of JS and DOM, which means it may not be clear to the reader to understand if the variable came from the JS or the DOM and it can be easily [[Shadowed]] by any JS element as well.\n\n* ``document.getElementById(\"<id>\")`` \n* ``document.querySelectorAll(\"<css>\")``: Any valid [[CSS]] selector can be used here, and then a collection of such nodes is returned. It can even use [[CSS]] pseudo-classes like ``document.querySelectorAll(\":hover\")`` returns the current nodes being hovered over (from the html node to the given node in depth order)\n*  ``document.querySelector(\"<css>\")``: Same as above except only searches for as long as a single node matching the selector is found, then stops. Meaning it is faster.\n* ``<node>.matches(\"<css>\")``: Returns a bool, true if the given node matches the CSS selector.\n* ``<node>.closest(\"<css>\")``: Starts checking the current node, then its parent, and so on until a node matching the css is found then returns that node. \n* ``<node>.getElementsByTagName(\"<tagname>\")``: Returns a collection of child nodes that have the given tag. The tag can be \"*\" meaning any tag. \n* ``<node>.getElementsByClassName(\"<classname>\")``\n* ``document.getElementsByTagName(\"<tag name>\")``: Searches the whole document and returns a collection with these nodes.\n![image.png](../assets/image_1687323010732_0.png)\n\nBy ``Live``, it means that these methods return the live node, so it represents the current state on the DOM and would get updated if the DOM does, similarly, updating them would update the DOM. In contract, the ``...querySelector...`` return ``static`` elements, which don't represent the Live state of the DOM.\n\n* The ``document....(...)`` methods can be called by any Element Node as well. \nFor ex.:\n```html\n<div>\n <span>\n </span>\n</div>\n<script>\nlet div = document.querySelector('div'); \nlet span = div.querySelect('span'); //works\n</script>\n```\nThe nodes then are searched inside the given node, so only the children of a node are evaluated.",536870918]],["^15",[549,"^O","^16",536870918]],["^15",[549,"^F",544,536870918]],["^15",[549,"^X",288,536870918]],["^15",[549,"^V",288,536870918]],["^15",[549,"^U",288,536870918]],["^15",[549,"^U",402,536870918]],["^15",[549,"^U",458,536870918]],["^15",[549,"^H",402,536870918]],["^15",[549,"^H",458,536870918]],["^15",[549,"^;","~u655b7378-9f85-477d-a66f-57b4684b8e7c",536870918]],["^15",[550,"^Q","(Re)moving a Node\n``<node>.remove()``: Removes the node and updates the DOM and [[HTML]] Document. \n\nTo move a node, we simply get the node and insert it any new place. It is automatically removed from its old place and inserted at the new place.\n\n* ``<parent node>replaceChild(<node>, <old child node>)``: An old method, returns the inserted node. Replaces the old child node with the given node from the children of the parent node.\n*  ``<parent node>removeChild(<node>)``: Same.",536870918]],["^15",[550,"^O","^16",536870918]],["^15",[550,"^F",546,536870918]],["^15",[550,"^X",288,536870918]],["^15",[550,"^V",288,536870918]],["^15",[550,"^U",284,536870918]],["^15",[550,"^U",288,536870918]],["^15",[550,"^H",284,536870918]],["^15",[550,"^;","~u655b7378-297a-465a-a91c-f9d3d98c9dfe",536870918]],["^15",[551,"^Q","",536870918]],["^15",[551,"^O","^16",536870918]],["^15",[551,"^F",554,536870918]],["^15",[551,"^X",288,536870918]],["^15",[551,"^V",288,536870918]],["^15",[551,"^U",288,536870918]],["^15",[551,"^;","~u655b7378-a875-4f65-acb3-72c60b1aac3c",536870918]],["^15",[552,"^Q","There are different types of ``nodes``, each node is an [[Object]] with a specific structure, each element in [[HTML]] is represented as a ``node`` in the DOM. There's [12](https://dom.spec.whatwg.org/#node) of these.\nThe 4 most common are:\n* ``document`` – the “entry point” into DOM.\n* ``element nodes`` – HTML-tags, the tree building blocks.\n* ``text nodes`` – contain text.\n* ``comments`` – sometimes we can put information there, it won’t be shown, but JS can read it from the DOM.",536870918]],["^15",[552,"^O","^16",536870918]],["^15",[552,"^F",556,536870918]],["^15",[552,"^X",288,536870918]],["^15",[552,"^V",288,536870918]],["^15",[552,"^U",284,536870918]],["^15",[552,"^U",288,536870918]],["^15",[552,"^U",299,536870918]],["^15",[552,"^H",284,536870918]],["^15",[552,"^H",299,536870918]],["^15",[552,"^;","~u655b7378-b6b4-476a-8533-e4653245c125",536870918]],["^15",[553,"^Q","DOM Node Classes\n![image.png](../assets/image_1687328193414_0.png)\nThis is the hierarchy with the EventTarget abstract [[Class]] at the top, JS doesn't have the concept of abstract classes, it just means that by convention it is a class that shouldn't be made an object of, just inherited using [[Prototype Object]].\nEventTarget also provides [[Browser Event]]s. This is why all nodes can have an event hooked to them.\nWe can use [[Console]].dir to see any node's prototypal chain.\n\n[[Browser]]s provide all these classes to the JS environment, hence we can directly check them too.\nFor ex.:\n```js\nalert( document.body instanceof HTMLBodyElement ); // true\nalert( document.body instanceof HTMLElement ); // true\nalert( document.body instanceof Element ); // true\nalert( document.body instanceof Node ); // true\nalert( document.body instanceof EventTarget ); // true\n```\nuses ``instanceOf`` [[Operator]]",536870918]],["^15",[553,"^O","^16",536870918]],["^15",[553,"^F",549,536870918]],["^15",[553,"^X",288,536870918]],["^15",[553,"^V",288,536870918]],["^15",[553,"^U",285,536870918]],["^15",[553,"^U",288,536870918]],["^15",[553,"^U",289,536870918]],["^15",[553,"^U",332,536870918]],["^15",[553,"^U",339,536870918]],["^15",[553,"^U",455,536870918]],["^15",[553,"^U",502,536870918]],["^15",[553,"^H",285,536870918]],["^15",[553,"^H",289,536870918]],["^15",[553,"^H",332,536870918]],["^15",[553,"^H",339,536870918]],["^15",[553,"^H",455,536870918]],["^15",[553,"^H",502,536870918]],["^15",[553,"^;","~u655b7378-665d-49c7-9ddc-5e9d40568321",536870918]],["^15",[554,"^Q","[[DOM Class Property]]",536870918]],["^15",[554,"^O","^16",536870918]],["^15",[554,"^F",553,536870918]],["^15",[554,"^X",288,536870918]],["^15",[554,"^V",288,536870918]],["^15",[554,"^U",288,536870918]],["^15",[554,"^U",520,536870918]],["^15",[554,"^H",520,536870918]],["^15",[554,"^;","~u655b7378-c90a-41c5-b999-ab4ef771075f",536870918]],["^15",[555,"^Q","Forms and control elements\n[Form](https://html.spec.whatwg.org/multipage/forms.html)s in [[HTML]] are an [[HTML Element]] which are treated specially. Similarly, control elements like ``input`` are also treated specially by [[Browser]]s.\n\nThey are available in a named and ordered collection ``<node>.forms`` so all forms directly under a node are available in its ``.forms``. Like the forms in the main document are in ``document.forms``. \nSince they are named and ordered, we can access a form node like ``<node>.forms.myForm`` where ``myForm`` is its ``id`` or with ``<node>.forms[0]`` if its the first form under the node (from top to bottom in the [[HTML]] Document).\nFor ex.:\n```html\n<form name=\"my\">\n  <input name=\"one\" value=\"1\">\n  <input name=\"two\" value=\"2\">\n</form>\n\n<script>\n\n  let form = document.forms.my; // <form name=\"my\"> element\n\n  let elem = form.elements.one; // <input name=\"one\"> element\n\n  alert(elem.value); // 1\n</script>\n```\n``Form`` nodes have a prop ``.elements`` which is also a named Collection of nodes under the form but the ``name`` is used instead of the ``id``. If there are multiple elements with the same ``name``, then it returns a collection instead of a node. All control elements under a form, despite any level are available to ``<form>.elements``.\n\n* All elements under a ``<form>.elements`` are also properties on the form Object itself, however, if the name of the form changes then the old properties and new ones are still valid.\nThat is\n```html\n<form name=\"yo\">\n  <input name = \"x\" >\n</form>\n\n<script>\n let form = document.forms.yo;\n let x= form.x; //works\n x.name=\"y\";\nlet y = form.x; //still works\nlet y1= form.elements.x; //doesnt exist\n\n</script>\n```\n\n* All elements under a form have a backreference to the form itself which is kept in ``<node>.form`` property of the nodes under the form.\n![image.png](../assets/image_1688003269350_0.png)\n\n* Forms have a [[Browser Event]] ``submit`` which is triggered when the form submits. We can also use ``<form node>.submit()`` to do so manually.\nFor ex.:\n```js\nlet form = document.createElement('form');\nform.action = 'https://google.com/search';\nform.method = 'GET';\n\nform.innerHTML = '<input name=\"q\" value=\"test\">';\n\n// the form must be in the document to submit it\ndocument.body.append(form);\n\nform.submit();\n```",536870918]],["^15",[555,"^O","^16",536870918]],["^15",[555,"^F",542,536870918]],["^15",[555,"^X",288,536870918]],["^15",[555,"^V",288,536870918]],["^15",[555,"^U",284,536870918]],["^15",[555,"^U",285,536870918]],["^15",[555,"^U",288,536870918]],["^15",[555,"^U",289,536870918]],["^15",[555,"^U",383,536870918]],["^15",[555,"^H",284,536870918]],["^15",[555,"^H",285,536870918]],["^15",[555,"^H",289,536870918]],["^15",[555,"^H",383,536870918]],["^15",[555,"^;","~u655b7378-c4a8-4d5c-863d-0302c6690657",536870918]],["^15",[556,"^Q","Every attribute of an [[HTML Element]] is mapped to a [[DOM Class Property]] on its node. \nHowever, whilst HTML attributes are case insensitive, DOM attributes are case sensitive as JS is case sensitive.",536870918]],["^15",[556,"^O","^16",536870918]],["^15",[556,"^F",547,536870918]],["^15",[556,"^X",288,536870918]],["^15",[556,"^V",288,536870918]],["^15",[556,"^U",288,536870918]],["^15",[556,"^U",383,536870918]],["^15",[556,"^U",520,536870918]],["^15",[556,"^H",383,536870918]],["^15",[556,"^H",520,536870918]],["^15",[556,"^;","~u655b7378-c581-46f1-9769-b60ee7de4347",536870918]],["^15",[557,"^Q","Selection\nWhilst Range selects a given range, it doesn't show anything visually. However ``Selection`` Objects can show selections visually on the page in the [[Browser]], they can be obtained with either ``document.getSelection()`` or ``window.getSelection()``.\nIn firefox, multiple separate regions can be selected with ``Ctrl+click`` like so\n![image.png](../assets/image_1688011215800_0.png)\n\nbut in other browsers there can only be a single selection at any time.\nThis Object has these properties\n![image.png](../assets/image_1688011308957_0.png)\n\nSimilarly, there are many methods too [here](https://javascript.info/selection-range#selection-methods).\n* [[Browser Event]] \n``selectstart`` and ``selectionchange`` are triggered if an element is selected or if the selection changes.\n\n* Both select and range have much more comprehensive utility and interactions with other elements such as with Form [[HTML Element]], given [here](https://javascript.info/selection-range).",536870918]],["^15",[557,"^O","^16",536870918]],["^15",[557,"^F",541,536870918]],["^15",[557,"^X",288,536870918]],["^15",[557,"^V",288,536870918]],["^15",[557,"^U",285,536870918]],["^15",[557,"^U",288,536870918]],["^15",[557,"^U",289,536870918]],["^15",[557,"^U",383,536870918]],["^15",[557,"^H",285,536870918]],["^15",[557,"^H",289,536870918]],["^15",[557,"^H",383,536870918]],["^15",[557,"^;","~u655b7378-0ad5-4482-951b-1cdb13c153f6",536870918]],["^15",[558,"^Q","Page Events\nThere are a few important [[Browser Event]]s that trigger on an [[HTML]] page's lifecycle.\n\nThe events are triggered in this order:\n``DOMContentLoaded``: The DOM is loaded and ready. The [[<script>]]s of the page are loaded as well, but [[Async]] scripts and dynamically generated scripts are loaded after this event. \nThe event handler has to be on the ``document`` [[DOM]] node. \n``load``: External resources are loaded, like [[CSS]] stylesheets, images etc.\n``beforeunload`` and ``unload``: The user is has gone to another page and now the page is unloading. \n\nFor load/unload the [[window]] has to take the event handler.\n\n* ``document.readyState``: This [[DOM Class Property]] has one of 3 values \"loading\" (doc is loading), \"interactive\" (doc is fully read) and \"complete\" (doc is read and ext. resources loaded) and indicates the readiness of the document's loading. \nThe ``readystatechange`` event is triggered when this property changes.",536870918]],["^15",[558,"^O","^16",536870918]],["^15",[558,"^F",555,536870918]],["^15",[558,"^X",288,536870918]],["^15",[558,"^V",288,536870918]],["^15",[558,"^U",283,536870918]],["^15",[558,"^U",284,536870918]],["^15",[558,"^U",285,536870918]],["^15",[558,"^U",288,536870918]],["^15",[558,"^U",341,536870918]],["^15",[558,"^U",375,536870918]],["^15",[558,"^U",402,536870918]],["^15",[558,"^U",520,536870918]],["^15",[558,"^H",283,536870918]],["^15",[558,"^H",284,536870918]],["^15",[558,"^H",285,536870918]],["^15",[558,"^H",288,536870918]],["^15",[558,"^H",341,536870918]],["^15",[558,"^H",375,536870918]],["^15",[558,"^H",402,536870918]],["^15",[558,"^H",520,536870918]],["^15",[558,"^;","~u655b7378-b273-4a8f-888d-8f90ae37a098",536870918]],["^15",[559,"^Q","[[MutationObserver]]",536870918]],["^15",[559,"^O","^16",536870918]],["^15",[559,"^F",558,536870918]],["^15",[559,"^X",288,536870918]],["^15",[559,"^V",288,536870918]],["^15",[559,"^U",288,536870918]],["^15",[559,"^U",539,536870918]],["^15",[559,"^H",539,536870918]],["^15",[559,"^;","~u655b7378-9a70-471e-8c4d-a5a35094fb8a",536870918]],["^15",[560,"^Q","It is what it is named, it represents the [[HTML]] (and [[CSS]]) or [[XML]] Document as an [[Object]] and allows JS to interact with it as if it was an Object. This allows JS to freely modify the Document.\nThe DOM Object has its own spec: [DOM](https://dom.spec.whatwg.org/)\nSimilarly, we can modify the CSS classes as well using the CSSOM (creating/removing CSS classes can be done without it) which has the spec: [CSSOM](https://www.w3.org/TR/cssom-1/)",536870918]],["^15",[560,"^O","^16",536870918]],["^15",[560,"^F",562,536870918]],["^15",[560,"^X",288,536870918]],["^15",[560,"^V",288,536870918]],["^15",[560,"^U",284,536870918]],["^15",[560,"^U",288,536870918]],["^15",[560,"^U",299,536870918]],["^15",[560,"^U",402,536870918]],["^15",[560,"^U",424,536870918]],["^15",[560,"^H",284,536870918]],["^15",[560,"^H",299,536870918]],["^15",[560,"^H",402,536870918]],["^15",[560,"^H",424,536870918]],["^15",[560,"^;","~u655b7378-6a0b-4c81-ae86-1bb817647768",536870918]],["^15",[561,"^Q","~``<node>.cloneNode(<bool shouldDeepCopy>)``\nReturns a copy of the node. That is, it clones a node. If the provided bool is true, the children elements are cloned as well otherwise only the given node is cloned with all its attributes as well.",536870918]],["^15",[561,"^O","^16",536870918]],["^15",[561,"^F",550,536870918]],["^15",[561,"^X",288,536870918]],["^15",[561,"^V",288,536870918]],["^15",[561,"^U",288,536870918]],["^15",[561,"^;","~u655b7378-7439-4ac8-a12a-1cc2002f2ec3",536870918]],["^15",[562,"^Q","alias:: Document Object Model\n\n",536870918]],["^15",[562,"^O","^16",536870918]],["^15",[562,"^1;",["^19",[]],536870918]],["^15",[562,"^F",288,536870918]],["^15",[562,"^X",288,536870918]],["^15",[562,"^V",288,536870918]],["^15",[562,"^U",288,536870918]],["^15",[562,"^U",537,536870918]],["^15",[562,"^:",true,536870918]],["^15",[562,"^?",["^ ","^18",["^19",["Document Object Model"]]],536870918]],["^15",[562,"^J",["^18"],536870918]],["^15",[562,"^4",["^ ","^18","Document Object Model"],536870918]],["^15",[562,"^H",537,536870918]],["^15",[562,"^;","~u655b7378-7cd5-4a6c-ba80-9b232f650322",536870918]],["^15",[563,"^Q","The ``document`` [[Object]] is the main entry point to a page, it has the entire Document in it as an Object.\nFor ex.:\nIn [[Browser]]\n```js\ndocument.body.style.background = \"red\"; //turns the background of the Document red.\n```\n\nFor ex.:\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <title>About elk</title>\n</head>\n<body>\n  The truth about elk.\n</body>\n</html>\n```\n\nis represented as\n![image.png](../assets/image_1687267144086_0.png)\nby the DOM\nNewline character and spaces between [[HTML]] tags is completely valid Objects for DOM, that is why we see them here.\n\n* The ``document`` Object is a property of the [[window]] Object. So accessing ``document.<someprop>`` is the same as accessing ``window.document.<someprop>``.",536870918]],["^15",[563,"^O","^16",536870918]],["^15",[563,"^F",560,536870918]],["^15",[563,"^X",288,536870918]],["^15",[563,"^V",288,536870918]],["^15",[563,"^U",284,536870918]],["^15",[563,"^U",288,536870918]],["^15",[563,"^U",289,536870918]],["^15",[563,"^U",299,536870918]],["^15",[563,"^U",375,536870918]],["^15",[563,"^H",284,536870918]],["^15",[563,"^H",289,536870918]],["^15",[563,"^H",299,536870918]],["^15",[563,"^H",375,536870918]],["^15",[563,"^;","~u655b7378-ee30-4d99-8076-1231efbeb86f",536870918]],["^15",[564,"^3","- Quite powerful Date and Time utility, obviously implemented on [[Object]].\n- Methods\n  ``new Date()``// creates a Date Object with now's date and time. Overrides exist with int milliseconds for time since epoch (Jan 1 1970), time since epoch is aka timestamp. Negative values go behind epoch. Or with a string which can be of format \"YYYY-MM-DD\" etc. and is parsed automatically.\n  Or \n  ``new Date(year, month, date, hours, minutes, seconds, ms)``\n  ``.getYear()`` Deprecated, avoid. Use ``.getFullYear()`` instead.\n  ``.getMonth()`` and the like methods exist as well.\n  ``Date.now()`` gets int value which time since epoch in ms till now.\n  ``Date.parse(<str>)``\n  \n  Similarly, for setting\n  * [`setFullYear(year, [month], [date])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)\n  * [`setMonth(month, [date])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth)\n  * [`setDate(date)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate)\n  * [`setHours(hour, [min], [sec], [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\n  * [`setMinutes(min, [sec], [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes)\n  * [`setSeconds(sec, [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds)\n  * [`setMilliseconds(ms)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds)\n  * [`setTime(milliseconds)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime) (sets the whole date by milliseconds since 01.01.1970 UTC)\n  \n  All methods have their get/setUTC... counterparts for getting/setting UTC time.\n- Date Objects autocorrect theirselves.\n  For ex.:\n  ```js\n  let date = new Date(2013, 0, 32); // 32 Jan 2013 ?!?\n  console.log(date); // ...is 1st Feb 2013!\n  ```\n- Addition [[Operator]] on Date and Int sends a date ahead.\n  ```js\n  let date = new Date(2016, 1, 28);\n  date.setDate(date.getDate() + 2);\n  \n  console.log( date ); // 1 Mar 2016\n  ```\n-",536870918]],["^15",[564,"^17",1700492152211,536870918]],["^15",[564,"^Z","JS/pages/Date.md",536870918]],["^15",[565,"^Q","Quite powerful Date and Time utility, obviously implemented on [[Object]].",536870918]],["^15",[565,"^O","^16",536870918]],["^15",[565,"^F",457,536870918]],["^15",[565,"^X",457,536870918]],["^15",[565,"^V",457,536870918]],["^15",[565,"^U",299,536870918]],["^15",[565,"^U",457,536870918]],["^15",[565,"^H",299,536870918]],["^15",[565,"^;","~u655b7378-9908-4fdf-be1d-b60324fbcc82",536870918]],["^15",[566,"^Q","Methods\n``new Date()``// creates a Date Object with now's date and time. Overrides exist with int milliseconds for time since epoch (Jan 1 1970), time since epoch is aka timestamp. Negative values go behind epoch. Or with a string which can be of format \"YYYY-MM-DD\" etc. and is parsed automatically.\nOr \n``new Date(year, month, date, hours, minutes, seconds, ms)``\n``.getYear()`` Deprecated, avoid. Use ``.getFullYear()`` instead.\n``.getMonth()`` and the like methods exist as well.\n``Date.now()`` gets int value which time since epoch in ms till now.\n``Date.parse(<str>)``\n\nSimilarly, for setting\n* [`setFullYear(year, [month], [date])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)\n* [`setMonth(month, [date])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth)\n* [`setDate(date)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate)\n* [`setHours(hour, [min], [sec], [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\n* [`setMinutes(min, [sec], [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes)\n* [`setSeconds(sec, [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds)\n* [`setMilliseconds(ms)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds)\n* [`setTime(milliseconds)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime) (sets the whole date by milliseconds since 01.01.1970 UTC)\n\nAll methods have their get/setUTC... counterparts for getting/setting UTC time.",536870918]],["^15",[566,"^O","^16",536870918]],["^15",[566,"^F",565,536870918]],["^15",[566,"^X",457,536870918]],["^15",[566,"^V",457,536870918]],["^15",[566,"^U",457,536870918]],["^15",[566,"^;","~u655b7378-cd68-4401-9283-c6d48b9da5bf",536870918]],["^15",[567,"^Q","Date Objects autocorrect theirselves.\nFor ex.:\n```js\nlet date = new Date(2013, 0, 32); // 32 Jan 2013 ?!?\nconsole.log(date); // ...is 1st Feb 2013!\n```",536870918]],["^15",[567,"^O","^16",536870918]],["^15",[567,"^F",566,536870918]],["^15",[567,"^X",457,536870918]],["^15",[567,"^V",457,536870918]],["^15",[567,"^U",457,536870918]],["^15",[567,"^;","~u655b7378-8163-413f-8f6c-81de22ebda0e",536870918]],["^15",[568,"^Q","Addition [[Operator]] on Date and Int sends a date ahead.\n```js\nlet date = new Date(2016, 1, 28);\ndate.setDate(date.getDate() + 2);\n\nconsole.log( date ); // 1 Mar 2016\n```",536870918]],["^15",[568,"^O","^16",536870918]],["^15",[568,"^F",567,536870918]],["^15",[568,"^X",457,536870918]],["^15",[568,"^V",457,536870918]],["^15",[568,"^U",339,536870918]],["^15",[568,"^U",457,536870918]],["^15",[568,"^H",339,536870918]],["^15",[568,"^;","~u655b7378-e592-4450-a80e-4d41890994e0",536870918]],["^15",[569,"^Q","",536870918]],["^15",[569,"^O","^16",536870918]],["^15",[569,"^F",568,536870918]],["^15",[569,"^X",457,536870918]],["^15",[569,"^V",457,536870918]],["^15",[569,"^U",457,536870918]],["^15",[569,"^;","~u655b7378-f88c-4a98-b9b4-65a5e79b1cc6",536870918]],["^15",[570,"^3","- There's also a keyword ``debugger``, if the [[Developer tools]] are open, and this keyword is present in a script in a webpage then the Debugger automatically stops at this keyword.",536870918]],["^15",[570,"^17",1700492152225,536870918]],["^15",[570,"^Z","JS/pages/Debugging.md",536870918]],["^15",[571,"^Q","There's also a keyword ``debugger``, if the [[Developer tools]] are open, and this keyword is present in a script in a webpage then the Debugger automatically stops at this keyword.",536870918]],["^15",[571,"^O","^16",536870918]],["^15",[571,"^F",405,536870918]],["^15",[571,"^X",405,536870918]],["^15",[571,"^V",405,536870918]],["^15",[571,"^U",405,536870918]],["^15",[571,"^U",538,536870918]],["^15",[571,"^H",538,536870918]],["^15",[571,"^;","~u655b7378-7dfe-4f1e-a919-8324c1a1092d",536870918]],["^15",[572,"^3","alias:: Destructuring Assignment\n\n- This syntax allows us to destructure [[Array]]s and get them into variables.\n  For ex.:\n  ```js\n  let arr= [\"abc\",1];\n  let [a,b]= arr;\n  //works\n  ```\n- If we want to omit a value, we leave an empty ``,``\n  For ex.:\n  ```js\n  let arr= [\"abc\",1,2];\n  let [a,,b]= arr;// ok\n  \n  ```\n- Specifically, any [[Iterable]] can be destructured. It's like for..of [[Loop]].\n  For ex.:\n  ```js\n  let [a,b,c]=\"abc\";  //ok\n  ```\n- Can be used to swap variables\n  ```js\n  let a= 2;\n  let b =\"A\";\n  [a,b]= [b,a];\n  ```\n- If the [[Iterable]] is longer than the number of variables in the destructuring assignment, then the extra elements are simply ignored.\n  \n  Similarly, if the Iterable is shorter than the number of variables, then unassigned variables are simply [[undefined]].\n  \n  We can give a default value to variables too\n  ```js\n  let arr= [\"abc\",1];\n  let [a,b,c = \"yo\"]= arr; //ok, c will be yo since it is unassigned after destructure assignment\n  ```\n  And just like normal default values in [[Function]]s, the default value can be a function too and it is called when the variable is unassigned.\n- The ``...`` [[Operator]] can pick up the rest of the elements and becomes an [[Array]] holding those elements.\n  That is,\n  ```js\n  let arr= [\"abc\",1,\"b\"];\n  let [a,...b]= arr;  //b[0] is 1 and b[1] is \"b\" now.\n  ```\n- Works with raw [[Object]]s too.\n  However, the destructuring requires the property names to be given. \n  That is,\n  ```js\n  let x= {\n   \"a\":2,\n   b:3,\n  };\n  let {a,b} = x; //ok \n  // we can also\n  let {x: a, y: b}= x; //Here the syntax is variable name: source name\n  //and also add default values\n  let {a1: a= 5, a2: b = prompt(\"What's b ?\") }= x;\n  //also with ...\n  let {...z}= x; //ok, z is not an Array but an Object.\n  z[a]; //returns 2\n  ```\n  However, there's 1 thing we can't do exactly like Array Destructuring, that is declaration and destructuring separately,\n  ```js\n  let x= {...};\n  let a;\n  let b;\n  {a,b} = x; //error\n  ({a,b} = x); //ok\n  ```\n  This is because the syntax closely resembles a code block and for a code block it is invalid syntax, by using (...) we override that behavior.\n- [[Object]] Destructuring can also use Nested Destructuring.\n  For ex.:\n  ```js\n  let options = {\n    size: {\n      width: 100,\n      height: 200\n    },\n    items: [\"Cake\", \"Donut\"],\n    extra: true\n  };\n  \n  let {\n    size: { // put size here\n      width,\n      height\n    },\n    items: [item1, item2], // assign items here\n    title = \"Menu\" // not present in the object (default value is used)\n  } = options;\n  ```\n- We can also use [[Object]] Destructuring with [[Function]] parameters\n  ```js\n  let x = {title: 2, name : 3};\n  \n  function yo({title= \"IDK\", name= 2, age = 0}) {...}\n  \n  yo(x); //works\n  \n  //However, now yo(); would be an error, to have empty arg list we need to pass an empty object.\n   \n  yo({ }); //ok\n  \n  //Alternatively, we can set the default value of the Object itself and then we can call \n  //a function like yo without any args\n  \n  function hoo({title = \"IDK\", age= 2} = { }) {...}\n  \n  hoo(); //ok\n  \n  \n  ```\n-\n-\n-",536870918]],["^15",[572,"^17",1700492152247,536870918]],["^15",[572,"^Z","JS/pages/Destructuring.md",536870918]],["^15",[573,"^5",574,536870918]],["^15",[573,"^K",1700492152246,536870918]],["^15",[573,"^@",false,536870918]],["^15",[573,"^Y","destructuring assignment",536870918]],["^15",[573,"^11","Destructuring Assignment",536870918]],["^15",[573,"^B",1700492152246,536870918]],["^15",[573,"^;","~u655b7379-f282-45dd-926c-b1673441a101",536870919]],["^15",[574,"^5",573,536870918]],["^15",[574,"^K",1700492152313,536870918]],["^15",[574,"^[",572,536870918]],["^15",[574,"^@",false,536870918]],["^15",[574,"^Y","destructuring",536870918]],["^15",[574,"^11","Destructuring",536870918]],["^15",[574,"^?",["^ ","^18",["^19",["Destructuring Assignment"]]],536870918]],["^15",[574,"^4",["^ ","^18","Destructuring Assignment"],536870918]],["^15",[574,"^B",1700492152313,536870918]],["^15",[574,"^;","~u656462fe-6c69-4fc1-862b-58662be44ff7",536870950]],["^15",[575,"^Q","Works with raw [[Object]]s too.\nHowever, the destructuring requires the property names to be given. \nThat is,\n```js\nlet x= {\n \"a\":2,\n b:3,\n};\nlet {a,b} = x; //ok \n// we can also\nlet {x: a, y: b}= x; //Here the syntax is variable name: source name\n//and also add default values\nlet {a1: a= 5, a2: b = prompt(\"What's b ?\") }= x;\n//also with ...\nlet {...z}= x; //ok, z is not an Array but an Object.\nz[a]; //returns 2\n```\nHowever, there's 1 thing we can't do exactly like Array Destructuring, that is declaration and destructuring separately,\n```js\nlet x= {...};\nlet a;\nlet b;\n{a,b} = x; //error\n({a,b} = x); //ok\n```\nThis is because the syntax closely resembles a code block and for a code block it is invalid syntax, by using (...) we override that behavior.",536870918]],["^15",[575,"^O","^16",536870918]],["^15",[575,"^F",583,536870918]],["^15",[575,"^X",574,536870918]],["^15",[575,"^V",574,536870918]],["^15",[575,"^U",299,536870918]],["^15",[575,"^U",574,536870918]],["^15",[575,"^H",299,536870918]],["^15",[575,"^;","~u655b7378-53b5-4495-82db-4c0a55c7a474",536870918]],["^15",[576,"^Q","We can also use [[Object]] Destructuring with [[Function]] parameters\n```js\nlet x = {title: 2, name : 3};\n\nfunction yo({title= \"IDK\", name= 2, age = 0}) {...}\n\nyo(x); //works\n\n//However, now yo(); would be an error, to have empty arg list we need to pass an empty object.\n \nyo({ }); //ok\n\n//Alternatively, we can set the default value of the Object itself and then we can call \n//a function like yo without any args\n\nfunction hoo({title = \"IDK\", age= 2} = { }) {...}\n\nhoo(); //ok\n\n\n```",536870918]],["^15",[576,"^O","^16",536870918]],["^15",[576,"^F",582,536870918]],["^15",[576,"^X",574,536870918]],["^15",[576,"^V",574,536870918]],["^15",[576,"^U",163,536870918]],["^15",[576,"^U",299,536870918]],["^15",[576,"^U",574,536870918]],["^15",[576,"^H",163,536870918]],["^15",[576,"^H",299,536870918]],["^15",[576,"^;","~u655b7378-2cab-4078-a0f3-067de396c225",536870918]],["^15",[577,"^Q","",536870918]],["^15",[577,"^O","^16",536870918]],["^15",[577,"^F",585,536870918]],["^15",[577,"^X",574,536870918]],["^15",[577,"^V",574,536870918]],["^15",[577,"^U",574,536870918]],["^15",[577,"^;","~u655b7378-0600-4f78-9a3d-e4f19ab3ce83",536870918]],["^15",[578,"^Q","Specifically, any [[Iterable]] can be destructured. It's like for..of [[Loop]].\nFor ex.:\n```js\nlet [a,b,c]=\"abc\";  //ok\n```",536870918]],["^15",[578,"^O","^16",536870918]],["^15",[578,"^F",587,536870918]],["^15",[578,"^X",574,536870918]],["^15",[578,"^V",574,536870918]],["^15",[578,"^U",300,536870918]],["^15",[578,"^U",304,536870918]],["^15",[578,"^U",574,536870918]],["^15",[578,"^H",300,536870918]],["^15",[578,"^H",304,536870918]],["^15",[578,"^;","~u655b7378-d17a-49e8-a739-5a816b4868dd",536870918]],["^15",[579,"^Q","",536870918]],["^15",[579,"^O","^16",536870918]],["^15",[579,"^F",576,536870918]],["^15",[579,"^X",574,536870918]],["^15",[579,"^V",574,536870918]],["^15",[579,"^U",574,536870918]],["^15",[579,"^;","~u655b7378-eb4e-47b0-b28c-1fe94d612244",536870918]],["^15",[580,"^Q","Can be used to swap variables\n```js\nlet a= 2;\nlet b =\"A\";\n[a,b]= [b,a];\n```",536870918]],["^15",[580,"^O","^16",536870918]],["^15",[580,"^F",578,536870918]],["^15",[580,"^X",574,536870918]],["^15",[580,"^V",574,536870918]],["^15",[580,"^U",574,536870918]],["^15",[580,"^;","~u655b7378-4ae2-4df9-821a-5690bec359b1",536870918]],["^15",[581,"^Q","alias:: Destructuring Assignment\n\n",536870918]],["^15",[581,"^O","^16",536870918]],["^15",[581,"^1;",["^19",[]],536870918]],["^15",[581,"^F",574,536870918]],["^15",[581,"^X",574,536870918]],["^15",[581,"^V",574,536870918]],["^15",[581,"^U",573,536870918]],["^15",[581,"^U",574,536870918]],["^15",[581,"^:",true,536870918]],["^15",[581,"^?",["^ ","^18",["^19",["Destructuring Assignment"]]],536870918]],["^15",[581,"^J",["^18"],536870918]],["^15",[581,"^4",["^ ","^18","Destructuring Assignment"],536870918]],["^15",[581,"^H",573,536870918]],["^15",[581,"^;","~u655b7378-0210-4844-8a18-617ce12ebf34",536870918]],["^15",[582,"^Q","[[Object]] Destructuring can also use Nested Destructuring.\nFor ex.:\n```js\nlet options = {\n  size: {\n    width: 100,\n    height: 200\n  },\n  items: [\"Cake\", \"Donut\"],\n  extra: true\n};\n\nlet {\n  size: { // put size here\n    width,\n    height\n  },\n  items: [item1, item2], // assign items here\n  title = \"Menu\" // not present in the object (default value is used)\n} = options;\n```",536870918]],["^15",[582,"^O","^16",536870918]],["^15",[582,"^F",575,536870918]],["^15",[582,"^X",574,536870918]],["^15",[582,"^V",574,536870918]],["^15",[582,"^U",299,536870918]],["^15",[582,"^U",574,536870918]],["^15",[582,"^H",299,536870918]],["^15",[582,"^;","~u655b7378-f3f9-45d8-8f22-0947e05dd50d",536870918]],["^15",[583,"^Q","The ``...`` [[Operator]] can pick up the rest of the elements and becomes an [[Array]] holding those elements.\nThat is,\n```js\nlet arr= [\"abc\",1,\"b\"];\nlet [a,...b]= arr;  //b[0] is 1 and b[1] is \"b\" now.\n```",536870918]],["^15",[583,"^O","^16",536870918]],["^15",[583,"^F",584,536870918]],["^15",[583,"^X",574,536870918]],["^15",[583,"^V",574,536870918]],["^15",[583,"^U",305,536870918]],["^15",[583,"^U",339,536870918]],["^15",[583,"^U",574,536870918]],["^15",[583,"^H",305,536870918]],["^15",[583,"^H",339,536870918]],["^15",[583,"^;","~u655b7378-10be-463b-927a-15fba7742b63",536870918]],["^15",[584,"^Q","If the [[Iterable]] is longer than the number of variables in the destructuring assignment, then the extra elements are simply ignored.\n\nSimilarly, if the Iterable is shorter than the number of variables, then unassigned variables are simply [[undefined]].\n\nWe can give a default value to variables too\n```js\nlet arr= [\"abc\",1];\nlet [a,b,c = \"yo\"]= arr; //ok, c will be yo since it is unassigned after destructure assignment\n```\nAnd just like normal default values in [[Function]]s, the default value can be a function too and it is called when the variable is unassigned.",536870918]],["^15",[584,"^O","^16",536870918]],["^15",[584,"^F",580,536870918]],["^15",[584,"^X",574,536870918]],["^15",[584,"^V",574,536870918]],["^15",[584,"^U",163,536870918]],["^15",[584,"^U",303,536870918]],["^15",[584,"^U",304,536870918]],["^15",[584,"^U",574,536870918]],["^15",[584,"^H",163,536870918]],["^15",[584,"^H",303,536870918]],["^15",[584,"^H",304,536870918]],["^15",[584,"^;","~u655b7378-beb6-4b9e-8067-f4bb208ce961",536870918]],["^15",[585,"^Q","",536870918]],["^15",[585,"^O","^16",536870918]],["^15",[585,"^F",579,536870918]],["^15",[585,"^X",574,536870918]],["^15",[585,"^V",574,536870918]],["^15",[585,"^U",574,536870918]],["^15",[585,"^;","~u655b7378-8072-4d27-8639-a6869404918b",536870918]],["^15",[586,"^Q","This syntax allows us to destructure [[Array]]s and get them into variables.\nFor ex.:\n```js\nlet arr= [\"abc\",1];\nlet [a,b]= arr;\n//works\n```",536870918]],["^15",[586,"^O","^16",536870918]],["^15",[586,"^F",581,536870918]],["^15",[586,"^X",574,536870918]],["^15",[586,"^V",574,536870918]],["^15",[586,"^U",305,536870918]],["^15",[586,"^U",574,536870918]],["^15",[586,"^H",305,536870918]],["^15",[586,"^;","~u655b7378-5158-42a5-915b-792866c694b3",536870918]],["^15",[587,"^Q","If we want to omit a value, we leave an empty ``,``\nFor ex.:\n```js\nlet arr= [\"abc\",1,2];\nlet [a,,b]= arr;// ok\n\n```",536870918]],["^15",[587,"^O","^16",536870918]],["^15",[587,"^F",586,536870918]],["^15",[587,"^X",574,536870918]],["^15",[587,"^V",574,536870918]],["^15",[587,"^U",574,536870918]],["^15",[587,"^;","~u655b7378-36dd-4d38-8f2c-bd8368544141",536870918]],["^15",[588,"^3","- On chrome and firefox, F12 toggles visiblity for the menu.\n- In the developer tools, we have the Sources menu which allows [[Debugging]] [[ECMAScript]] scripts used in a webpage. \n  ![image.png](../assets/image_1685462450744_0.png)\n- We can also use ``chrome://tracing`` to record website performance and see things like where GC occured etc.\n- For normal [[HTML]] Document, the DT shows the various properties in it.\n  For ex.:\n  ![image.png](../assets/image_1687275980756_0.png)\n  \n  Note: We can click an element, the currently selected element is put in a variable $0, with the previous one being $1 and so on. The reverse is also possible, using the function ``inspect(<node>)`` in the console shows which variables refer the given DOM node.\n-\n-",536870918]],["^15",[588,"^17",1700492152258,536870918]],["^15",[588,"^Z","JS/pages/Developer tools.md",536870918]],["^15",[589,"^Q","On chrome and firefox, F12 toggles visiblity for the menu.",536870918]],["^15",[589,"^O","^16",536870918]],["^15",[589,"^F",538,536870918]],["^15",[589,"^X",538,536870918]],["^15",[589,"^V",538,536870918]],["^15",[589,"^U",538,536870918]],["^15",[589,"^;","~u655b7378-c0d3-4423-9a94-9a4488dbcbfb",536870918]],["^15",[590,"^Q","In the developer tools, we have the Sources menu which allows [[Debugging]] [[ECMAScript]] scripts used in a webpage. \n![image.png](../assets/image_1685462450744_0.png)",536870918]],["^15",[590,"^O","^16",536870918]],["^15",[590,"^F",589,536870918]],["^15",[590,"^X",538,536870918]],["^15",[590,"^V",538,536870918]],["^15",[590,"^U",401,536870918]],["^15",[590,"^U",405,536870918]],["^15",[590,"^U",538,536870918]],["^15",[590,"^H",401,536870918]],["^15",[590,"^H",405,536870918]],["^15",[590,"^;","~u655b7378-8ee8-4c73-9471-83834515afea",536870918]],["^15",[591,"^Q","We can also use ``chrome://tracing`` to record website performance and see things like where GC occured etc.",536870918]],["^15",[591,"^O","^16",536870918]],["^15",[591,"^F",590,536870918]],["^15",[591,"^X",538,536870918]],["^15",[591,"^V",538,536870918]],["^15",[591,"^U",538,536870918]],["^15",[591,"^;","~u655b7378-d6e2-47cf-862b-54db66def047",536870918]],["^15",[592,"^Q","For normal [[HTML]] Document, the DT shows the various properties in it.\nFor ex.:\n![image.png](../assets/image_1687275980756_0.png)\n\nNote: We can click an element, the currently selected element is put in a variable $0, with the previous one being $1 and so on. The reverse is also possible, using the function ``inspect(<node>)`` in the console shows which variables refer the given DOM node.",536870918]],["^15",[592,"^O","^16",536870918]],["^15",[592,"^F",591,536870918]],["^15",[592,"^X",538,536870918]],["^15",[592,"^V",538,536870918]],["^15",[592,"^U",284,536870918]],["^15",[592,"^U",538,536870918]],["^15",[592,"^H",284,536870918]],["^15",[592,"^;","~u655b7378-9d16-4b91-8f95-ad2a1c74ab33",536870918]],["^15",[593,"^Q","",536870918]],["^15",[593,"^O","^16",536870918]],["^15",[593,"^F",592,536870918]],["^15",[593,"^X",538,536870918]],["^15",[593,"^V",538,536870918]],["^15",[593,"^U",538,536870918]],["^15",[593,"^;","~u655b7378-5706-459d-81a5-0d1987c30461",536870918]],["^15",[594,"^Q","",536870918]],["^15",[594,"^O","^16",536870918]],["^15",[594,"^F",593,536870918]],["^15",[594,"^X",538,536870918]],["^15",[594,"^V",538,536870918]],["^15",[594,"^U",538,536870918]],["^15",[594,"^;","~u655b7378-1e3d-494f-885c-984068ae6a5c",536870918]],["^15",[595,"^3","alias:: JavaScript\n\n- Programs in [[JavaScript]] are called \"[[<script>]]s\", they can be written directly in webpages and almost all modern web browsers can execute them. All that is required to run [[JavaScript]] code is a JavaScript Engine, which is [V8](https://v8.dev/) in Chrome/Opera/Edge and Spidermonkey in Firefox.\n  \n  In browsers, the “script” is parsed then compiled into machine code and executed. It is\n  heavily optimized.\n  \n  It is a pretty *safe* language, as it doesn’t have low-level access. Still, its capabilities vary depending on the environment executing it, for browsers JS can manipulate the webpage, interact with web servers, get set cookies, remember *user data* etc. On servers (like in Node.js), it can do other things like File I/O etc.\n  That said, JS on the browser has many limitations imposed to enforce security, such as not being\n  able to see contents of another tab in the browser, no access to OS, strict browser managed access to peripherals, not being able to connect to other domains unless explicitly allowed by both domains, etc. These are not present in JS outside the scripts in webpages.\n  \n  Generally both Web browsers and Node.JS use V8, node simply provides a large runtime library that allows the V8 to do a lot of stuff on the server side.\n- JS files are saved with the extension ``.js``\n- Execution\n  For browsers, any .html file that uses a <script> tag with inline js or external js file as\n  source can execute a js file.\n  For server-side, or locally, we can use node <filename.js> to execute it using Node.js.\n  \n  Browsers have [[Developer tools]] which present various developer friendly tools to inspect a page's script and behaviors.\n- [[Compilation]]\n- Semicolons are optional but a good practice, otherwise line break is considered the end of a statement (called implicit semicolon and the feature called [[automatic semicolon insertion]]).\n  But a single line can have multiple statements with a semicolon.\n  \n  [[ASI]] is a bit more powerful and can understand if sometimes line breaks shouldn't be interpreted as semicolon/statement end\n  For ex.:\n  ```js\n  alert(3 +\n  1\n  + 2);\n  ```\n  So it is recommended use semicolons everywhere except with expressions like these.\n- Comments\n  Same as everywhere else,\n  ``//`` for single line\n  ``/* */`` for multi\n- use strict;\n  Older JS standards (before ES5 in 2009) use now what's called the [[Old Mode]], but after it a non-breaking change was introduced called ``strict mode`` that complies with any new changes in the ECMA standard. This string at the top of a [[<script>]] or [[Function]] enables strict mode. When applied globally, it is applied to the whole script, and for function it only enables it for the function. There's no way to disable it if enabled for a script.\n  \n  \n  For ex.:\n  ```js\n  use strict;\n  \n  ```\n  Recommended to enable it always.\n  For console, when we need to use it we can just use \n  ```js\n  use strict; (Shift + Enter)\n  //...Rest of code\n  \n  //or if that doesn't work,\n  'use strict'; (Shift + Enter)\n  \n  //or if that doesn't work either, this ugly hack works\n  (function() {\n    'use strict';\n  \n    // ...your code here...\n  })()\n  ```\n- Variable\n  Use ``let`` to declare a mutable variable\n  ```js\n  let x;\n  //  or\n  let y=2; //with assignment\n  //or\n  let x1=\"ay\", yo=2; //multi declaration in single line\n  //or\n  let x2=2,\n       y1= \"yo\";\n  \n  ```\n  ``let`` prohibits redeclaration.\n  \n  Or [[var]] for the same, however [[var]] is an old way and declares variables quite differently. \n  \n  Variables can be named however as long as they aren't [[Reserved Words]], can use letters(unicode)/digits/'$'/'_' and mustn't begin with digits.\n  \n  [[Old Mode]] allows variable declaration without a let. This is why in console we can declare variables without using let.\n  \n  * Const\n     Non-mutable variables can be declared with const.\n    For ex.:\n  ```js\n  const X=2; //Immutable variable x\n  const Y; //can be assigned later, but only once\n  \n  ```\n  It is recommended to use all capitals for constants that are known prior to runtime, and normal camelCase for other variables. \n  \n  const on [[Object]] denies reassignment but the Object itself can mutate however, as const is applied to the variable (which stores the address of the Object) and the Object itself is free to mutate.\n  For ex.:\n  ```js\n  const x= {\n    name:2,\n  };\n  x[\"a\"]=2; //works\n  ```\n- Data Types\n  Dynamically typed, meaning variables do have types but they can change them at runtime.\n  For ex.:\n  \n  ```js\n  let x=\"Yo\"; //string\n  x=2;  //works, type is now int\n  \n  ```\n  There are 7 [[Primitives]] and then there is [[Object]]\n  \n  * [[Number]]\n  * [[String]]\n  * [[Boolean]]\n  * [[null]]\n  * [[BigInt]]\n  * [[undefined]]\n  * [[Symbol]]\n  \n  * [[Object]]\n\t-\n- Other complex types also exist in JS:\n  Collection of values: [[Array]]\n  Object like Dictionary: [[Map]]\n  Collection of unique values: [[Set]]\n  [[Date]]\n  [[JSON]]\n  \n  \n  Weaker variants:\n  [[WeakMap]]\n  [[WeakSet]]\n-\n- [[typeOf]]\n- Interaction\n  \n  ``Alert``: Sends a message to the browser window and waits for the user to press \"OK\". Doesn't return anything.\n  For ex.:\n  ```js\n  alert(\"yae\");\n  ```\n  ``prompt``: Sends a message and presents an input field, along with an \"OK\" and \"Cancel\" button.\n  If user presses Ok then returns a string with the inputted value (empty string if nothing entered). If uses presses cancel or Esc then null is returned.\n  Syntax:\n  ``result = prompt(title, [default]);``\n  For ex.:\n  ```js\n  let x= prompt(\"yo ?\"); //Then we cancel\n  console.log(typeof x); //Prints \"null\"\n  ```\n  Also accepts an optional parameter, a default value to return if cancelled.\n  ```js\n  let x=prompt(\"Yo ?\", 2); //cancel  \n  console.log(x); //prints 2\n  ```\n  \n  ``confirm``: Sends a message and waits for \"Ok\" or \"Cancel\", returns true on the former and false for the latter.\n- [[Conversion]]\n- [[Operator]]\n- [[Comparison]]\n- [[Conditional]]\n- [[Loop]]\n- [[Function]]\n- [[Comments]]\n- [[Console]]\n- [[Testing]]\n- [[Transpiler]]\n- [[Polyfill]]\n- [[Garbage Collection]]\n- [[Destructuring]]\n- [[Global]] [[Object]]\n- [[Scheduling]]\n- [[Class]]\n- [[Asynchronous]]\n- [[Message Queue]]\n- [[Proxy]]\n- [[Eval]]\n- [[Currying]]\n- JS can run on any platform that can run the V8 engine or any JS engine, these platforms are called ``Host Environment``s , like Node.JS which provides functionality for creating and running servers using JS and [[Browser]]s which provide the [[window]] Object and some others to help JS interact and manipulate the [[DOM]], [[BOM]] and core JS functionality.\n- [[ArrayBuffer]]",536870918]],["^15",[595,"^17",1700492152317,536870918]],["^15",[595,"^Z","JS/pages/ECMAScript.md",536870918]],["^15",[596,"^5",772,536870919]],["^15",[596,"^K",1700492152310,536870918]],["^15",[596,"^[",771,536870919]],["^15",[596,"^@",false,536870918]],["^15",[596,"^Y","json",536870918]],["^15",[596,"^11","JSON",536870918]],["^15",[596,"^?",["^ ","^18",["^19",["JavaScript Object Notation"]]],536870919]],["^15",[596,"^4",["^ ","^18","JavaScript Object Notation"],536870919]],["^15",[596,"^B",1700492152310,536870918]],["^15",[596,"^;","~u655b7378-51b6-453e-99da-6ee47223c914",536870919]],["^15",[597,"^K",1700492152311,536870918]],["^15",[597,"^[",797,536870919]],["^15",[597,"^@",false,536870918]],["^15",[597,"^Y","map",536870918]],["^15",[597,"^11","Map",536870918]],["^15",[597,"^B",1700492152311,536870918]],["^15",[597,"^;","~u655b7379-c98d-4b8c-9b7e-e9d5602d29b0",536870919]],["^15",[598,"^K",1700492152312,536870918]],["^15",[598,"^[",970,536870919]],["^15",[598,"^@",false,536870918]],["^15",[598,"^Y","testing",536870918]],["^15",[598,"^11","Testing",536870918]],["^15",[598,"^B",1700492152312,536870918]],["^15",[598,"^;","~u655b7379-51e5-403b-a249-4573ae3a1f46",536870919]],["^15",[599,"^K",1700492152359,536870918]],["^15",[599,"^@",false,536870918]],["^15",[599,"^Y","old mode",536870918]],["^15",[599,"^11","Old Mode",536870918]],["^15",[599,"^B",1700492152359,536870918]],["^15",[599,"^;","~u655b7379-7aea-4a19-854d-80f69414737e",536870919]],["^15",[600,"^K",1700492152308,536870918]],["^15",[600,"^@",false,536870918]],["^15",[600,"^Y","primitives",536870918]],["^15",[600,"^11","Primitives",536870918]],["^15",[600,"^B",1700492152308,536870918]],["^15",[600,"^;","~u655b7379-9da9-4ec1-b931-b2008730d467",536870919]],["^15",[601,"^K",1700492152317,536870918]],["^15",[601,"^@",false,536870918]],["^15",[601,"^Y","bom",536870918]],["^15",[601,"^11","BOM",536870918]],["^15",[601,"^B",1700492152317,536870918]],["^15",[601,"^;","~u655b7379-6f86-4dde-a96d-4b6ed83badf8",536870919]],["^15",[602,"^K",1700492152308,536870918]],["^15",[602,"^[",1036,536870919]],["^15",[602,"^@",false,536870918]],["^15",[602,"^Y","var",536870918]],["^15",[602,"^11","var",536870918]],["^15",[602,"^B",1700492152308,536870918]],["^15",[602,"^;","~u655b7379-8386-4c72-a875-8ca40707777f",536870919]],["^15",[603,"^5",612,536870919]],["^15",[603,"^K",1700492152307,536870918]],["^15",[603,"^[",1008,536870919]],["^15",[603,"^@",false,536870918]],["^15",[603,"^Y","automatic semicolon insertion",536870918]],["^15",[603,"^11","automatic semicolon insertion",536870918]],["^15",[603,"^?",["^ ","^18",["^19",["ASI"]]],536870919]],["^15",[603,"^4",["^ ","^18","ASI"],536870919]],["^15",[603,"^B",1700492152307,536870918]],["^15",[603,"^;","~u655b7379-c612-4cf9-ac57-4cd0147ef786",536870919]],["^15",[604,"^K",1700492152308,536870918]],["^15",[604,"^@",false,536870918]],["^15",[604,"^Y","reserved words",536870918]],["^15",[604,"^11","Reserved Words",536870918]],["^15",[604,"^B",1700492152308,536870918]],["^15",[604,"^;","~u655b7378-c7a2-4b09-a43b-d5cff34be596",536870918]],["^15",[605,"^K",1700492152359,536870918]],["^15",[605,"^[",667,536870918]],["^15",[605,"^@",false,536870918]],["^15",[605,"^Y","eval",536870918]],["^15",[605,"^11","Eval",536870918]],["^15",[605,"^B",1700492152359,536870918]],["^15",[605,"^;","~u655b7378-ad22-433b-8271-8672ad43c670",536870918]],["^15",[606,"^5",720,536870919]],["^15",[606,"^K",1700492152438,536870918]],["^15",[606,"^[",719,536870919]],["^15",[606,"^@",false,536870918]],["^15",[606,"^Y","garbage collection",536870918]],["^15",[606,"^11","Garbage Collection",536870918]],["^15",[606,"^?",["^ ","^18",["^19",["GC"]]],536870919]],["^15",[606,"^4",["^ ","^18","GC"],536870919]],["^15",[606,"^B",1700492152438,536870918]],["^15",[606,"^;","~u655b7379-3554-48c2-8ed2-43a86861b02d",536870919]],["^15",[607,"^5",401,536870918]],["^15",[607,"^K",1700492152437,536870918]],["^15",[607,"^@",false,536870918]],["^15",[607,"^Y","javascript",536870918]],["^15",[607,"^11","JavaScript",536870918]],["^15",[607,"^B",1700492152437,536870918]],["^15",[607,"^;","~u655b7378-96a8-4304-aa5d-e9504aaf469c",536870919]],["^15",[608,"^K",1700492152309,536870918]],["^15",[608,"^[",981,536870919]],["^15",[608,"^@",false,536870918]],["^15",[608,"^Y","weakset",536870918]],["^15",[608,"^11","WeakSet",536870918]],["^15",[608,"^B",1700492152309,536870918]],["^15",[608,"^;","~u655b7379-bbbc-4c6a-8172-6ee884145d23",536870919]],["^15",[609,"^K",1700492152438,536870918]],["^15",[609,"^[",737,536870919]],["^15",[609,"^@",false,536870918]],["^15",[609,"^Y","global",536870918]],["^15",[609,"^11","Global",536870918]],["^15",[609,"^B",1700492152438,536870918]],["^15",[609,"^;","~u655b7379-1982-4ea2-bdea-e8848179273b",536870919]],["^15",[610,"^K",1700492152310,536870918]],["^15",[610,"^[",976,536870919]],["^15",[610,"^@",false,536870918]],["^15",[610,"^Y","weakmap",536870918]],["^15",[610,"^11","WeakMap",536870918]],["^15",[610,"^B",1700492152310,536870918]],["^15",[610,"^;","~u655b7379-c2dd-4eac-8365-b12d79cfdd1b",536870919]],["^15",[611,"^5",919,536870919]],["^15",[611,"^K",1700492152316,536870918]],["^15",[611,"^[",918,536870919]],["^15",[611,"^@",false,536870918]],["^15",[611,"^Y","proxy",536870918]],["^15",[611,"^11","Proxy",536870918]],["^15",[611,"^?",["^ ","^18",["^19",["Proxy Object"]]],536870919]],["^15",[611,"^4",["^ ","^18","Proxy Object"],536870919]],["^15",[611,"^B",1700492152316,536870918]],["^15",[611,"^;","~u655b7379-c07e-4560-8495-1976bd06aa99",536870919]],["^15",[612,"^5",603,536870919]],["^15",[612,"^K",1700492152435,536870918]],["^15",[612,"^@",false,536870918]],["^15",[612,"^Y","asi",536870918]],["^15",[612,"^11","ASI",536870918]],["^15",[612,"^B",1700492152435,536870918]],["^15",[612,"^;","~u655b7379-ccba-4bf0-91f5-d12417eae1be",536870919]],["^15",[613,"^K",1700492152313,536870918]],["^15",[613,"^[",973,536870919]],["^15",[613,"^@",false,536870918]],["^15",[613,"^Y","transpiler",536870918]],["^15",[613,"^11","Transpiler",536870918]],["^15",[613,"^B",1700492152313,536870918]],["^15",[613,"^;","~u655b7379-0cce-4ea0-b28f-0bc153adb72a",536870919]],["^15",[614,"^Q","Semicolons are optional but a good practice, otherwise line break is considered the end of a statement (called implicit semicolon and the feature called [[automatic semicolon insertion]]).\nBut a single line can have multiple statements with a semicolon.\n\n[[ASI]] is a bit more powerful and can understand if sometimes line breaks shouldn't be interpreted as semicolon/statement end\nFor ex.:\n```js\nalert(3 +\n1\n+ 2);\n```\nSo it is recommended use semicolons everywhere except with expressions like these.",536870918]],["^15",[614,"^O","^16",536870918]],["^15",[614,"^F",642,536870918]],["^15",[614,"^X",401,536870918]],["^15",[614,"^V",401,536870918]],["^15",[614,"^U",401,536870918]],["^15",[614,"^U",603,536870918]],["^15",[614,"^U",612,536870918]],["^15",[614,"^H",603,536870918]],["^15",[614,"^H",612,536870918]],["^15",[614,"^;","~u655b7378-c9af-4ea5-b3fa-9e6ebe3a24c2",536870918]],["^15",[615,"^Q","[[Conversion]]",536870918]],["^15",[615,"^O","^16",536870918]],["^15",[615,"^F",638,536870918]],["^15",[615,"^X",401,536870918]],["^15",[615,"^V",401,536870918]],["^15",[615,"^U",401,536870918]],["^15",[615,"^U",506,536870918]],["^15",[615,"^H",506,536870918]],["^15",[615,"^;","~u655b7378-8399-4227-a93c-506b342643eb",536870918]],["^15",[616,"^Q","[[Operator]]",536870918]],["^15",[616,"^O","^16",536870918]],["^15",[616,"^F",615,536870918]],["^15",[616,"^X",401,536870918]],["^15",[616,"^V",401,536870918]],["^15",[616,"^U",339,536870918]],["^15",[616,"^U",401,536870918]],["^15",[616,"^H",339,536870918]],["^15",[616,"^;","~u655b7378-deed-44c7-88e4-52a19f15e5ad",536870918]],["^15",[617,"^Q","use strict;\nOlder JS standards (before ES5 in 2009) use now what's called the [[Old Mode]], but after it a non-breaking change was introduced called ``strict mode`` that complies with any new changes in the ECMA standard. This string at the top of a [[<script>]] or [[Function]] enables strict mode. When applied globally, it is applied to the whole script, and for function it only enables it for the function. There's no way to disable it if enabled for a script.\n\n\nFor ex.:\n```js\nuse strict;\n\n```\nRecommended to enable it always.\nFor console, when we need to use it we can just use \n```js\nuse strict; (Shift + Enter)\n//...Rest of code\n\n//or if that doesn't work,\n'use strict'; (Shift + Enter)\n\n//or if that doesn't work either, this ugly hack works\n(function() {\n  'use strict';\n\n  // ...your code here...\n})()\n```",536870918]],["^15",[617,"^O","^16",536870918]],["^15",[617,"^F",625,536870918]],["^15",[617,"^X",401,536870918]],["^15",[617,"^V",401,536870918]],["^15",[617,"^U",163,536870918]],["^15",[617,"^U",283,536870918]],["^15",[617,"^U",401,536870918]],["^15",[617,"^U",599,536870918]],["^15",[617,"^H",163,536870918]],["^15",[617,"^H",283,536870918]],["^15",[617,"^H",599,536870918]],["^15",[617,"^;","~u655b7378-80f5-4a37-a6a8-80deaf3f5f40",536870918]],["^15",[618,"^Q","Variable\nUse ``let`` to declare a mutable variable\n```js\nlet x;\n//  or\nlet y=2; //with assignment\n//or\nlet x1=\"ay\", yo=2; //multi declaration in single line\n//or\nlet x2=2,\n     y1= \"yo\";\n\n```\n``let`` prohibits redeclaration.\n\nOr [[var]] for the same, however [[var]] is an old way and declares variables quite differently. \n\nVariables can be named however as long as they aren't [[Reserved Words]], can use letters(unicode)/digits/'$'/'_' and mustn't begin with digits.\n\n[[Old Mode]] allows variable declaration without a let. This is why in console we can declare variables without using let.\n\n* Const\n   Non-mutable variables can be declared with const.\n  For ex.:\n```js\nconst X=2; //Immutable variable x\nconst Y; //can be assigned later, but only once\n\n```\nIt is recommended to use all capitals for constants that are known prior to runtime, and normal camelCase for other variables. \n\nconst on [[Object]] denies reassignment but the Object itself can mutate however, as const is applied to the variable (which stores the address of the Object) and the Object itself is free to mutate.\nFor ex.:\n```js\nconst x= {\n  name:2,\n};\nx[\"a\"]=2; //works\n```",536870918]],["^15",[618,"^O","^16",536870918]],["^15",[618,"^F",617,536870918]],["^15",[618,"^X",401,536870918]],["^15",[618,"^V",401,536870918]],["^15",[618,"^U",299,536870918]],["^15",[618,"^U",401,536870918]],["^15",[618,"^U",599,536870918]],["^15",[618,"^U",602,536870918]],["^15",[618,"^U",604,536870918]],["^15",[618,"^H",299,536870918]],["^15",[618,"^H",599,536870918]],["^15",[618,"^H",602,536870918]],["^15",[618,"^H",604,536870918]],["^15",[618,"^;","~u655b7378-0192-4440-9db6-c036c6335718",536870918]],["^15",[619,"^Q","[[Message Queue]]",536870918]],["^15",[619,"^O","^16",536870918]],["^15",[619,"^F",635,536870918]],["^15",[619,"^X",401,536870918]],["^15",[619,"^V",401,536870918]],["^15",[619,"^U",343,536870918]],["^15",[619,"^U",401,536870918]],["^15",[619,"^H",343,536870918]],["^15",[619,"^;","~u655b7378-7ab7-4cb5-a8f8-82ec5f62cd73",536870918]],["^15",[620,"^Q","[[Proxy]]",536870918]],["^15",[620,"^O","^16",536870918]],["^15",[620,"^F",619,536870918]],["^15",[620,"^X",401,536870918]],["^15",[620,"^V",401,536870918]],["^15",[620,"^U",401,536870918]],["^15",[620,"^U",611,536870918]],["^15",[620,"^H",611,536870918]],["^15",[620,"^;","~u655b7378-9451-40b1-8052-0eaaea77bd3a",536870918]],["^15",[621,"^Q","[[Eval]]",536870918]],["^15",[621,"^O","^16",536870918]],["^15",[621,"^F",620,536870918]],["^15",[621,"^X",401,536870918]],["^15",[621,"^V",401,536870918]],["^15",[621,"^U",401,536870918]],["^15",[621,"^U",605,536870918]],["^15",[621,"^H",605,536870918]],["^15",[621,"^;","~u655b7378-0651-42fa-9da9-3e1717c88083",536870918]],["^15",[622,"^Q","alias:: JavaScript\n\n",536870918]],["^15",[622,"^O","^16",536870918]],["^15",[622,"^1;",["^19",[]],536870918]],["^15",[622,"^F",401,536870918]],["^15",[622,"^X",401,536870918]],["^15",[622,"^V",401,536870918]],["^15",[622,"^U",401,536870918]],["^15",[622,"^U",607,536870918]],["^15",[622,"^:",true,536870918]],["^15",[622,"^?",["^ ","^18",["^19",["JavaScript"]]],536870918]],["^15",[622,"^J",["^18"],536870918]],["^15",[622,"^4",["^ ","^18","JavaScript"],536870918]],["^15",[622,"^H",607,536870918]],["^15",[622,"^;","~u655b7378-edd8-4fc8-8733-f94752800978",536870918]],["^15",[623,"^Q","JS files are saved with the extension ``.js``",536870918]],["^15",[623,"^O","^16",536870918]],["^15",[623,"^F",624,536870918]],["^15",[623,"^X",401,536870918]],["^15",[623,"^V",401,536870918]],["^15",[623,"^U",401,536870918]],["^15",[623,"^;","~u655b7378-07a5-4866-8218-79b467233dc1",536870918]],["^15",[624,"^Q","Programs in [[JavaScript]] are called \"[[<script>]]s\", they can be written directly in webpages and almost all modern web browsers can execute them. All that is required to run [[JavaScript]] code is a JavaScript Engine, which is [V8](https://v8.dev/) in Chrome/Opera/Edge and Spidermonkey in Firefox.\n\nIn browsers, the “script” is parsed then compiled into machine code and executed. It is\nheavily optimized.\n\nIt is a pretty *safe* language, as it doesn’t have low-level access. Still, its capabilities vary depending on the environment executing it, for browsers JS can manipulate the webpage, interact with web servers, get set cookies, remember *user data* etc. On servers (like in Node.js), it can do other things like File I/O etc.\nThat said, JS on the browser has many limitations imposed to enforce security, such as not being\nable to see contents of another tab in the browser, no access to OS, strict browser managed access to peripherals, not being able to connect to other domains unless explicitly allowed by both domains, etc. These are not present in JS outside the scripts in webpages.\n\nGenerally both Web browsers and Node.JS use V8, node simply provides a large runtime library that allows the V8 to do a lot of stuff on the server side.",536870918]],["^15",[624,"^O","^16",536870918]],["^15",[624,"^F",622,536870918]],["^15",[624,"^X",401,536870918]],["^15",[624,"^V",401,536870918]],["^15",[624,"^U",283,536870918]],["^15",[624,"^U",401,536870918]],["^15",[624,"^U",607,536870918]],["^15",[624,"^H",283,536870918]],["^15",[624,"^H",607,536870918]],["^15",[624,"^;","~u655b7378-8343-41de-828a-a40b504afd5a",536870918]],["^15",[625,"^Q","Comments\nSame as everywhere else,\n``//`` for single line\n``/* */`` for multi",536870918]],["^15",[625,"^O","^16",536870918]],["^15",[625,"^F",614,536870918]],["^15",[625,"^X",401,536870918]],["^15",[625,"^V",401,536870918]],["^15",[625,"^U",401,536870918]],["^15",[625,"^;","~u655b7378-48a3-4af8-9be0-ab5029dd1500",536870918]],["^15",[626,"^Q","[[Global]] [[Object]]",536870918]],["^15",[626,"^O","^16",536870918]],["^15",[626,"^F",631,536870918]],["^15",[626,"^X",401,536870918]],["^15",[626,"^V",401,536870918]],["^15",[626,"^U",299,536870918]],["^15",[626,"^U",401,536870918]],["^15",[626,"^U",609,536870918]],["^15",[626,"^H",299,536870918]],["^15",[626,"^H",609,536870918]],["^15",[626,"^;","~u655b7378-aa22-46e8-b3f6-ef79d5643897",536870918]],["^15",[627,"^Q","[[Transpiler]]",536870918]],["^15",[627,"^O","^16",536870918]],["^15",[627,"^F",630,536870918]],["^15",[627,"^X",401,536870918]],["^15",[627,"^V",401,536870918]],["^15",[627,"^U",401,536870918]],["^15",[627,"^U",613,536870918]],["^15",[627,"^H",613,536870918]],["^15",[627,"^;","~u655b7378-9750-4457-969b-34904a9ffba4",536870918]],["^15",[628,"^Q","JS can run on any platform that can run the V8 engine or any JS engine, these platforms are called ``Host Environment``s , like Node.JS which provides functionality for creating and running servers using JS and [[Browser]]s which provide the [[window]] Object and some others to help JS interact and manipulate the [[DOM]], [[BOM]] and core JS functionality.",536870918]],["^15",[628,"^O","^16",536870918]],["^15",[628,"^F",644,536870918]],["^15",[628,"^X",401,536870918]],["^15",[628,"^V",401,536870918]],["^15",[628,"^U",288,536870918]],["^15",[628,"^U",289,536870918]],["^15",[628,"^U",375,536870918]],["^15",[628,"^U",401,536870918]],["^15",[628,"^U",601,536870918]],["^15",[628,"^H",288,536870918]],["^15",[628,"^H",289,536870918]],["^15",[628,"^H",375,536870918]],["^15",[628,"^H",601,536870918]],["^15",[628,"^;","~u655b7378-cba5-441e-81aa-6fd4a2914672",536870918]],["^15",[629,"^Q","[[Comments]]",536870918]],["^15",[629,"^O","^16",536870918]],["^15",[629,"^F",647,536870918]],["^15",[629,"^X",401,536870918]],["^15",[629,"^V",401,536870918]],["^15",[629,"^U",401,536870918]],["^15",[629,"^U",479,536870918]],["^15",[629,"^H",479,536870918]],["^15",[629,"^;","~u655b7378-4613-4619-9cef-8a6805f547f9",536870918]],["^15",[630,"^Q","[[Testing]]",536870918]],["^15",[630,"^O","^16",536870918]],["^15",[630,"^F",633,536870918]],["^15",[630,"^X",401,536870918]],["^15",[630,"^V",401,536870918]],["^15",[630,"^U",401,536870918]],["^15",[630,"^U",598,536870918]],["^15",[630,"^H",598,536870918]],["^15",[630,"^;","~u655b7378-ab9d-42fc-9341-26dd6201bde1",536870918]],["^15",[631,"^Q","[[Destructuring]]",536870918]],["^15",[631,"^O","^16",536870918]],["^15",[631,"^F",651,536870918]],["^15",[631,"^X",401,536870918]],["^15",[631,"^V",401,536870918]],["^15",[631,"^U",401,536870918]],["^15",[631,"^U",574,536870918]],["^15",[631,"^H",574,536870918]],["^15",[631,"^;","~u655b7378-a60e-4cce-a959-a1d4fc2d1e40",536870918]],["^15",[632,"^Q","Data Types\nDynamically typed, meaning variables do have types but they can change them at runtime.\nFor ex.:\n\n```js\nlet x=\"Yo\"; //string\nx=2;  //works, type is now int\n\n```\nThere are 7 [[Primitives]] and then there is [[Object]]\n\n* [[Number]]\n* [[String]]\n* [[Boolean]]\n* [[null]]\n* [[BigInt]]\n* [[undefined]]\n* [[Symbol]]\n\n* [[Object]]",536870918]],["^15",[632,"^O","^16",536870918]],["^15",[632,"^F",618,536870918]],["^15",[632,"^X",401,536870918]],["^15",[632,"^V",401,536870918]],["^15",[632,"^U",80,536870918]],["^15",[632,"^U",162,536870918]],["^15",[632,"^U",299,536870918]],["^15",[632,"^U",302,536870918]],["^15",[632,"^U",303,536870918]],["^15",[632,"^U",361,536870918]],["^15",[632,"^U",362,536870918]],["^15",[632,"^U",401,536870918]],["^15",[632,"^U",484,536870918]],["^15",[632,"^U",600,536870918]],["^15",[632,"^H",80,536870918]],["^15",[632,"^H",162,536870918]],["^15",[632,"^H",299,536870918]],["^15",[632,"^H",302,536870918]],["^15",[632,"^H",303,536870918]],["^15",[632,"^H",361,536870918]],["^15",[632,"^H",362,536870918]],["^15",[632,"^H",484,536870918]],["^15",[632,"^H",600,536870918]],["^15",[632,"^;","~u655b7378-5f2e-4ab8-a735-0aa559c28e27",536870918]],["^15",[633,"^Q","[[Console]]",536870918]],["^15",[633,"^O","^16",536870918]],["^15",[633,"^F",629,536870918]],["^15",[633,"^X",401,536870918]],["^15",[633,"^V",401,536870918]],["^15",[633,"^U",401,536870918]],["^15",[633,"^U",502,536870918]],["^15",[633,"^H",502,536870918]],["^15",[633,"^;","~u655b7378-954e-4592-bf66-fa5c88a928fc",536870918]],["^15",[634,"^Q","[[Scheduling]]",536870918]],["^15",[634,"^O","^16",536870918]],["^15",[634,"^F",626,536870918]],["^15",[634,"^X",401,536870918]],["^15",[634,"^V",401,536870918]],["^15",[634,"^U",401,536870918]],["^15",[634,"^U",403,536870918]],["^15",[634,"^H",403,536870918]],["^15",[634,"^;","~u655b7378-fae3-4252-b7b1-b8a5dfcfa8c3",536870918]],["^15",[635,"^Q","[[Asynchronous]]",536870918]],["^15",[635,"^O","^16",536870918]],["^15",[635,"^F",636,536870918]],["^15",[635,"^X",401,536870918]],["^15",[635,"^V",401,536870918]],["^15",[635,"^U",346,536870918]],["^15",[635,"^U",401,536870918]],["^15",[635,"^H",346,536870918]],["^15",[635,"^;","~u655b7378-bd33-4b4d-a996-e1ec78540c43",536870918]],["^15",[636,"^Q","[[Class]]",536870918]],["^15",[636,"^O","^16",536870918]],["^15",[636,"^F",634,536870918]],["^15",[636,"^X",401,536870918]],["^15",[636,"^V",401,536870918]],["^15",[636,"^U",332,536870918]],["^15",[636,"^U",401,536870918]],["^15",[636,"^H",332,536870918]],["^15",[636,"^;","~u655b7378-cdae-490b-a2de-f38ae33f44c4",536870918]],["^15",[637,"^Q","[[Loop]]",536870918]],["^15",[637,"^O","^16",536870918]],["^15",[637,"^F",645,536870918]],["^15",[637,"^X",401,536870918]],["^15",[637,"^V",401,536870918]],["^15",[637,"^U",300,536870918]],["^15",[637,"^U",401,536870918]],["^15",[637,"^H",300,536870918]],["^15",[637,"^;","~u655b7378-181c-41ba-b860-ffceb7f169a6",536870918]],["^15",[638,"^Q","Interaction\n\n``Alert``: Sends a message to the browser window and waits for the user to press \"OK\". Doesn't return anything.\nFor ex.:\n```js\nalert(\"yae\");\n```\n``prompt``: Sends a message and presents an input field, along with an \"OK\" and \"Cancel\" button.\nIf user presses Ok then returns a string with the inputted value (empty string if nothing entered). If uses presses cancel or Esc then null is returned.\nSyntax:\n``result = prompt(title, [default]);``\nFor ex.:\n```js\nlet x= prompt(\"yo ?\"); //Then we cancel\nconsole.log(typeof x); //Prints \"null\"\n```\nAlso accepts an optional parameter, a default value to return if cancelled.\n```js\nlet x=prompt(\"Yo ?\", 2); //cancel  \nconsole.log(x); //prints 2\n```\n\n``confirm``: Sends a message and waits for \"Ok\" or \"Cancel\", returns true on the former and false for the latter.",536870918]],["^15",[638,"^O","^16",536870918]],["^15",[638,"^F",640,536870918]],["^15",[638,"^X",401,536870918]],["^15",[638,"^V",401,536870918]],["^15",[638,"^U",401,536870918]],["^15",[638,"^;","~u655b7378-f14c-4700-90f2-6c613c060ff9",536870918]],["^15",[639,"^Q","[[ArrayBuffer]]",536870918]],["^15",[639,"^O","^16",536870918]],["^15",[639,"^F",628,536870918]],["^15",[639,"^X",401,536870918]],["^15",[639,"^V",401,536870918]],["^15",[639,"^U",331,536870918]],["^15",[639,"^U",401,536870918]],["^15",[639,"^H",331,536870918]],["^15",[639,"^;","~u655b7378-8238-45e0-899f-4f86aea24e09",536870918]],["^15",[640,"^Q","[[typeOf]]",536870918]],["^15",[640,"^O","^16",536870918]],["^15",[640,"^F",650,536870918]],["^15",[640,"^X",401,536870918]],["^15",[640,"^V",401,536870918]],["^15",[640,"^U",298,536870918]],["^15",[640,"^U",401,536870918]],["^15",[640,"^H",298,536870918]],["^15",[640,"^;","~u655b7378-8d7f-428d-bec5-d5f7505cb1cb",536870918]],["^15",[641,"^Q","Execution\nFor browsers, any .html file that uses a <script> tag with inline js or external js file as\nsource can execute a js file.\nFor server-side, or locally, we can use node <filename.js> to execute it using Node.js.\n\nBrowsers have [[Developer tools]] which present various developer friendly tools to inspect a page's script and behaviors.",536870918]],["^15",[641,"^O","^16",536870918]],["^15",[641,"^F",623,536870918]],["^15",[641,"^X",401,536870918]],["^15",[641,"^V",401,536870918]],["^15",[641,"^U",401,536870918]],["^15",[641,"^U",538,536870918]],["^15",[641,"^H",538,536870918]],["^15",[641,"^;","~u655b7378-b806-4a73-836f-aeb961c6b948",536870918]],["^15",[642,"^Q","[[Compilation]]",536870918]],["^15",[642,"^O","^16",536870918]],["^15",[642,"^F",641,536870918]],["^15",[642,"^X",401,536870918]],["^15",[642,"^V",401,536870918]],["^15",[642,"^U",401,536870918]],["^15",[642,"^U",492,536870918]],["^15",[642,"^H",492,536870918]],["^15",[642,"^;","~u655b7378-dbbd-427a-99b8-2f5f8946ba75",536870918]],["^15",[643,"^Q","Other complex types also exist in JS:\nCollection of values: [[Array]]\nObject like Dictionary: [[Map]]\nCollection of unique values: [[Set]]\n[[Date]]\n[[JSON]]\n\n\nWeaker variants:\n[[WeakMap]]\n[[WeakSet]]",536870918]],["^15",[643,"^O","^16",536870918]],["^15",[643,"^F",632,536870918]],["^15",[643,"^X",401,536870918]],["^15",[643,"^V",401,536870918]],["^15",[643,"^U",140,536870918]],["^15",[643,"^U",305,536870918]],["^15",[643,"^U",401,536870918]],["^15",[643,"^U",457,536870918]],["^15",[643,"^U",596,536870918]],["^15",[643,"^U",597,536870918]],["^15",[643,"^U",608,536870918]],["^15",[643,"^U",610,536870918]],["^15",[643,"^H",140,536870918]],["^15",[643,"^H",305,536870918]],["^15",[643,"^H",457,536870918]],["^15",[643,"^H",596,536870918]],["^15",[643,"^H",597,536870918]],["^15",[643,"^H",608,536870918]],["^15",[643,"^H",610,536870918]],["^15",[643,"^;","~u655b7378-4fd1-4d6a-a791-735197ca2dd4",536870918]],["^15",[644,"^Q","[[Currying]]",536870918]],["^15",[644,"^O","^16",536870918]],["^15",[644,"^F",621,536870918]],["^15",[644,"^X",401,536870918]],["^15",[644,"^V",401,536870918]],["^15",[644,"^U",401,536870918]],["^15",[644,"^U",516,536870918]],["^15",[644,"^H",516,536870918]],["^15",[644,"^;","~u655b7378-3dc2-446b-9400-95096aee08a0",536870918]],["^15",[645,"^Q","[[Conditional]]",536870918]],["^15",[645,"^O","^16",536870918]],["^15",[645,"^F",649,536870918]],["^15",[645,"^X",401,536870918]],["^15",[645,"^V",401,536870918]],["^15",[645,"^U",401,536870918]],["^15",[645,"^U",495,536870918]],["^15",[645,"^H",495,536870918]],["^15",[645,"^;","~u655b7378-7c14-4402-9e23-87b8ce64d0fb",536870918]],["^15",[646,"^Q","[[Polyfill]]",536870918]],["^15",[646,"^O","^16",536870918]],["^15",[646,"^F",627,536870918]],["^15",[646,"^X",401,536870918]],["^15",[646,"^V",401,536870918]],["^15",[646,"^U",363,536870918]],["^15",[646,"^U",401,536870918]],["^15",[646,"^H",363,536870918]],["^15",[646,"^;","~u655b7378-bfba-49df-8ed3-aed724ac547d",536870918]],["^15",[647,"^Q","[[Function]]",536870918]],["^15",[647,"^O","^16",536870918]],["^15",[647,"^F",637,536870918]],["^15",[647,"^X",401,536870918]],["^15",[647,"^V",401,536870918]],["^15",[647,"^U",163,536870918]],["^15",[647,"^U",401,536870918]],["^15",[647,"^H",163,536870918]],["^15",[647,"^;","~u655b7378-a49a-46e7-bfc1-f50bc75754f7",536870918]],["^15",[648,"^Q","",536870918]],["^15",[648,"^O","^16",536870918]],["^15",[648,"^F",632,536870918]],["^15",[648,"^X",401,536870918]],["^15",[648,"^V",632,536870918]],["^15",[648,"^U",80,536870918]],["^15",[648,"^U",162,536870918]],["^15",[648,"^U",299,536870918]],["^15",[648,"^U",302,536870918]],["^15",[648,"^U",303,536870918]],["^15",[648,"^U",361,536870918]],["^15",[648,"^U",362,536870918]],["^15",[648,"^U",401,536870918]],["^15",[648,"^U",484,536870918]],["^15",[648,"^U",600,536870918]],["^15",[648,"^;","~u655b7378-78df-40b3-afa6-18e144299c55",536870918]],["^15",[649,"^Q","[[Comparison]]",536870918]],["^15",[649,"^O","^16",536870918]],["^15",[649,"^F",616,536870918]],["^15",[649,"^X",401,536870918]],["^15",[649,"^V",401,536870918]],["^15",[649,"^U",401,536870918]],["^15",[649,"^U",482,536870918]],["^15",[649,"^H",482,536870918]],["^15",[649,"^;","~u655b7378-8bc8-457f-977b-a927f0d1b473",536870918]],["^15",[650,"^Q","",536870918]],["^15",[650,"^O","^16",536870918]],["^15",[650,"^F",643,536870918]],["^15",[650,"^X",401,536870918]],["^15",[650,"^V",401,536870918]],["^15",[650,"^U",401,536870918]],["^15",[650,"^;","~u655b7378-69d8-4641-9e0a-5b60a999d94b",536870918]],["^15",[651,"^Q","[[Garbage Collection]]",536870918]],["^15",[651,"^O","^16",536870918]],["^15",[651,"^F",646,536870918]],["^15",[651,"^X",401,536870918]],["^15",[651,"^V",401,536870918]],["^15",[651,"^U",401,536870918]],["^15",[651,"^U",606,536870918]],["^15",[651,"^H",606,536870918]],["^15",[651,"^;","~u655b7378-93ac-44ee-85c4-8da5c4d2f38b",536870918]],["^15",[652,"^3","- It is an [[Object]] that holds the [[Environment Record]], it's name is ``[[Environment]]``.\n-",536870918]],["^15",[652,"^17",1700492152327,536870918]],["^15",[652,"^Z","JS/pages/Environment Object.md",536870918]],["^15",[653,"^K",1700492152439,536870918]],["^15",[653,"^[",652,536870918]],["^15",[653,"^@",false,536870918]],["^15",[653,"^Y","environment object",536870918]],["^15",[653,"^11","Environment Object",536870918]],["^15",[653,"^B",1700492152439,536870918]],["^15",[653,"^;","~u655b7379-d42a-4e02-9575-c5dbd72bd240",536870919]],["^15",[654,"^K",1700492152326,536870918]],["^15",[654,"^@",false,536870918]],["^15",[654,"^Y","environment record",536870918]],["^15",[654,"^11","Environment Record",536870918]],["^15",[654,"^B",1700492152326,536870918]],["^15",[654,"^;","~u655b7379-67bf-4b5c-aed3-90dd72714bbc",536870919]],["^15",[655,"^Q","It is an [[Object]] that holds the [[Environment Record]], it's name is ``[[Environment]]``.",536870918]],["^15",[655,"^O","^16",536870918]],["^15",[655,"^F",653,536870918]],["^15",[655,"^X",653,536870918]],["^15",[655,"^V",653,536870918]],["^15",[655,"^U",299,536870918]],["^15",[655,"^U",653,536870918]],["^15",[655,"^U",654,536870918]],["^15",[655,"^H",299,536870918]],["^15",[655,"^H",654,536870918]],["^15",[655,"^;","~u655b7378-8ce4-476f-8da2-8f33a32213c8",536870918]],["^15",[656,"^Q","",536870918]],["^15",[656,"^O","^16",536870918]],["^15",[656,"^F",655,536870918]],["^15",[656,"^X",653,536870918]],["^15",[656,"^V",653,536870918]],["^15",[656,"^U",653,536870918]],["^15",[656,"^;","~u655b7378-57f4-42be-91b6-bbf58a5ed68f",536870918]],["^15",[657,"^3","alias:: Exception\n\n- The same as in other languages like [[C++]].\n- ``try {...} catch (err) {...} finally {...}`` to try and catch errors.\n  However, in JS, syntax errors are a bit more nuanced. For ex.:\n  ```js\n  try{\n   a=2;\n  }\n  catch(err) {...}  //catches this error\n  ```\n  Works, but other syntactical errors fail the compilation itself. Generally, only the errors at runtime are meant to be handled by try catch.\n  \n  * It is synchronous, so\n  ```js\n  try {\n  setTimeout(function(){\n   ...\n  },100);\n  }\n  catch(err) {} //won't catch errors from inside setTimeout\n  ```\n  If the error doesn't occur whilst a try block is being executed then it is not caught in JS. So for places like these, try catch must be in the same execution context.\n  * ``catch(...)`` can omit ``(...)``.\n  * ``finally`` is **always** ran. \n  For ex.:\n  ```js\n  try{\n   return;\n  }\n  catch {...}\n  finally{ console.log(\"yo\")}; //will print yo\n  ```\n  * ``try {...} finally {...}`` is allowed in JS too.\n-\n- The error [[Object]] has 3 properties, ``name``, ``message`` and ``stack``.\n  It is thrown using the ``throw`` keyword. JS also provides built-in Error Objects.\n  For ex.:\n  ```js\n  let x= {\n   name: \"ayo\",\n  };\n  try{\n   throw x; \n   //or throw new Error(\"ayo\"), or throw new SyntaxError(\"ayo\") etc.\n  } catch (err) {\n   console.log(err.name); //prints ayo\n  }\n  ```\n  For built-in error Objects, the name is the Object's Ctor name, and message is the provided string.\n  \n  We can check if a given error is a certain type with \n  ``if (err instanceOf ReferenceError){...}`` and the like.\n  \n  * Rethrowing is allowed in JS.\n  * ``throw`` throws any given data type, be it [[Object]], [[Number]] etc.\n- Global Error Handling\n  In browsers, the [[window]] Object provides a global error event handler ``.onerror``and in Node, ``process.on(\"<exception type>\")`` provides global error event handler per error type.\n  For ex.:\n  ```js\n  window.onerror= function(message, url, line, col, err) {...}\n  ```\n  \n  External error-handling utilities make use of these handlers and set them to custom values. So when we insert a JS [[<script>]] URL from one of these services, they assign a custom value to these methods and then provide the details by sending errors to their [[API]]s.\n  For ex.: [muscula](https://www.muscula.com/)  and [errorception](https://errorception.com/)\n- ``unhandledrejection`` [[Browser]] [[Browser Event]]\n  Can be caught with\n  ```js\n  window.addEventListener('unhandledrejection', function(event) {\n    // the event object has two special properties:\n    alert(event.promise); // [object Promise] - the promise that generated the error\n    alert(event.reason); // Error: Whoops! - the unhandled error object\n  });\n  \n  ```",536870918]],["^15",[657,"^17",1700492152349,536870918]],["^15",[657,"^Z","JS/pages/Error.md",536870918]],["^15",[658,"^5",340,536870918]],["^15",[658,"^K",1700492152347,536870918]],["^15",[658,"^@",false,536870918]],["^15",[658,"^Y","exception",536870918]],["^15",[658,"^11","Exception",536870918]],["^15",[658,"^B",1700492152347,536870918]],["^15",[658,"^;","~u655b7378-f7ff-4856-9019-d2fd1073bded",536870918]],["^15",[659,"^K",1700492152349,536870918]],["^15",[659,"^@",false,536870918]],["^15",[659,"^Y","api",536870918]],["^15",[659,"^11","API",536870918]],["^15",[659,"^B",1700492152349,536870918]],["^15",[659,"^;","~u655b7378-9afa-4f98-84e9-b6f03c5e300e",536870918]],["^15",[660,"^Q","Rust divides errors into 2 categories, *Recoverable* and *Non-Recoverable* Errors. \nSimple errors like File not Found can be handled as their failing is expected so they are recoverable errors and are represented with the [[Result Type]], but errors such as accessing an invalid index in an [[Array]] is not expected so it is a type of non-recoverable error, these are triggered through the ``panic!`` [[Macro]].",536870946]],["^15",[660,"^O","^16",536870918]],["^15",[660,"^F",340,536870918]],["^15",[660,"^X",340,536870918]],["^15",[660,"^V",340,536870918]],["^15",[660,"^U",305,536870946]],["^15",[660,"^U",340,536870918]],["^15",[660,"^U",658,536870918]],["^15",[660,"^U",1079,536870946]],["^15",[660,"^U",1098,536870946]],["^15",[660,"^H",305,536870946]],["^15",[660,"^H",1079,536870946]],["^15",[660,"^H",1098,536870946]],["^15",[660,"^;","~u655b7378-9b31-428d-ae87-3e148c4cd408",536870918]],["^15",[663,"^Q","",536870918]],["^15",[663,"^O","^16",536870918]],["^15",[663,"^F",1709,536870946]],["^15",[663,"^X",340,536870918]],["^15",[663,"^V",340,536870918]],["^15",[663,"^U",340,536870918]],["^15",[663,"^;","~u655b7378-556c-4fc8-8814-09080ee487e6",536870918]],["^15",[667,"^3","- This special [[Function]] takes a [[String]], parses it as [[ECMAScript]] and executes the code in the string as JS for the current [[Scope]]/[[Lexical Environment]]. It can also return value, which is value of the parsed code.\n  For ex.:\n  ```js\n  let x =1;\n  let y= eval(\"x+1\");\n  console.log(y); //prints 2\n  \n  eval(\"console.log(`${x} says hello`)\"); //prints 1 says hello\n  eval(\"let z= 1; console.log(z+x);\");//prints 2\n  ```\n  To have a multi-line eval we can use ``;``.\n  \n  In [[Old Mode]] it can create, read and update the variables for the Scope. However in ``strict mode`` it can only read and update variables, it can create and use variables inside but they are not created for the surrounding [[Lexical Environment]]. This is because in ``strict mode`` it has its own [[Lexical Environment]], that is, it has its own Scope so its like a block.\n- Unrecommended to use it, it even harms [[Minifier]] as if it references variables they can't be minified. \n  Still if it has to be used, when variables don't need to be accessed, better to use ``window.eval(...)`` in [[Browser]]s. And if variables have to be used, use ``new Function(...)`` [[new]] [[Function]]  instead as it also works similarly.",536870918]],["^15",[667,"^17",1700492152360,536870918]],["^15",[667,"^Z","JS/pages/Eval.md",536870918]],["^15",[668,"^K",1700492152438,536870918]],["^15",[668,"^[",811,536870919]],["^15",[668,"^@",false,536870918]],["^15",[668,"^Y","minifier",536870918]],["^15",[668,"^11","Minifier",536870918]],["^15",[668,"^B",1700492152438,536870918]],["^15",[668,"^;","~u655b7379-8553-428d-9851-42aa203843db",536870919]],["^15",[669,"^K",1700492152438,536870918]],["^15",[669,"^[",780,536870919]],["^15",[669,"^@",false,536870918]],["^15",[669,"^Y","lexical environment",536870918]],["^15",[669,"^11","Lexical Environment",536870918]],["^15",[669,"^B",1700492152438,536870918]],["^15",[669,"^;","~u655b7379-2922-4b52-a4d9-6c043bda5b1c",536870919]],["^15",[670,"^Q","This special [[Function]] takes a [[String]], parses it as [[ECMAScript]] and executes the code in the string as JS for the current [[Scope]]/[[Lexical Environment]]. It can also return value, which is value of the parsed code.\nFor ex.:\n```js\nlet x =1;\nlet y= eval(\"x+1\");\nconsole.log(y); //prints 2\n\neval(\"console.log(`${x} says hello`)\"); //prints 1 says hello\neval(\"let z= 1; console.log(z+x);\");//prints 2\n```\nTo have a multi-line eval we can use ``;``.\n\nIn [[Old Mode]] it can create, read and update the variables for the Scope. However in ``strict mode`` it can only read and update variables, it can create and use variables inside but they are not created for the surrounding [[Lexical Environment]]. This is because in ``strict mode`` it has its own [[Lexical Environment]], that is, it has its own Scope so its like a block.",536870918]],["^15",[670,"^O","^16",536870918]],["^15",[670,"^F",605,536870918]],["^15",[670,"^X",605,536870918]],["^15",[670,"^V",605,536870918]],["^15",[670,"^U",80,536870918]],["^15",[670,"^U",163,536870918]],["^15",[670,"^U",345,536870918]],["^15",[670,"^U",401,536870918]],["^15",[670,"^U",599,536870918]],["^15",[670,"^U",605,536870918]],["^15",[670,"^U",669,536870918]],["^15",[670,"^H",80,536870918]],["^15",[670,"^H",163,536870918]],["^15",[670,"^H",345,536870918]],["^15",[670,"^H",401,536870918]],["^15",[670,"^H",599,536870918]],["^15",[670,"^H",669,536870918]],["^15",[670,"^;","~u655b7378-973f-4caf-bb51-1296cd067288",536870918]],["^15",[671,"^Q","Unrecommended to use it, it even harms [[Minifier]] as if it references variables they can't be minified. \nStill if it has to be used, when variables don't need to be accessed, better to use ``window.eval(...)`` in [[Browser]]s. And if variables have to be used, use ``new Function(...)`` [[new]] [[Function]]  instead as it also works similarly.",536870918]],["^15",[671,"^O","^16",536870918]],["^15",[671,"^F",670,536870918]],["^15",[671,"^X",605,536870918]],["^15",[671,"^V",605,536870918]],["^15",[671,"^U",163,536870918]],["^15",[671,"^U",289,536870918]],["^15",[671,"^U",456,536870918]],["^15",[671,"^U",605,536870918]],["^15",[671,"^U",668,536870918]],["^15",[671,"^H",163,536870918]],["^15",[671,"^H",289,536870918]],["^15",[671,"^H",456,536870918]],["^15",[671,"^H",668,536870918]],["^15",[671,"^;","~u655b7378-da6c-4a7f-8572-2d83428ef994",536870918]],["^15",[672,"^3","- It is an environment or rather a broad concept that refers to the collection of items JS engine creates when a [[Function]] is called. It includes other components such as the [[Variable Environment]], [[Lexical Environment]] and the [[this]] binding.\n-",536870918]],["^15",[672,"^17",1700492152369,536870918]],["^15",[672,"^Z","JS/pages/Execution Context.md",536870918]],["^15",[673,"^K",1700492152438,536870918]],["^15",[673,"^[",672,536870918]],["^15",[673,"^@",false,536870918]],["^15",[673,"^Y","execution context",536870918]],["^15",[673,"^11","Execution Context",536870918]],["^15",[673,"^B",1700492152438,536870918]],["^15",[673,"^;","~u655b7378-0e52-4054-9d2b-3d8ecbcdf433",536870918]],["^15",[674,"^K",1700492152368,536870918]],["^15",[674,"^@",false,536870918]],["^15",[674,"^Y","variable environment",536870918]],["^15",[674,"^11","Variable Environment",536870918]],["^15",[674,"^B",1700492152368,536870918]],["^15",[674,"^;","~u655b7378-d28d-4868-8f86-3fc314793ba4",536870918]],["^15",[675,"^Q","It is an environment or rather a broad concept that refers to the collection of items JS engine creates when a [[Function]] is called. It includes other components such as the [[Variable Environment]], [[Lexical Environment]] and the [[this]] binding.",536870918]],["^15",[675,"^O","^16",536870918]],["^15",[675,"^F",673,536870918]],["^15",[675,"^X",673,536870918]],["^15",[675,"^V",673,536870918]],["^15",[675,"^U",163,536870918]],["^15",[675,"^U",400,536870918]],["^15",[675,"^U",669,536870918]],["^15",[675,"^U",673,536870918]],["^15",[675,"^U",674,536870918]],["^15",[675,"^H",163,536870918]],["^15",[675,"^H",400,536870918]],["^15",[675,"^H",669,536870918]],["^15",[675,"^H",674,536870918]],["^15",[675,"^;","~u655b7378-2aea-4a63-8462-a93cb6517861",536870918]],["^15",[676,"^Q","",536870918]],["^15",[676,"^O","^16",536870918]],["^15",[676,"^F",675,536870918]],["^15",[676,"^X",673,536870918]],["^15",[676,"^V",673,536870918]],["^15",[676,"^U",673,536870918]],["^15",[676,"^;","~u655b7378-9ca6-442f-a35f-6d0cbad5651d",536870918]],["^15",[677,"^3","filters:: {\"generator function\" true}\n\n- To create one, \n  ``function <name>(<param 1>, <param 2>...) {...}``\n  If we have a function ``xyz`` we can call it with xyz();\n- Just like other languages, [[ECMAScript]] also has [[Scope]]s, so variables declared inside Functions are only visible inside the function's scope. They can use/modify variables from outer scope unless they are [[Shadowed]].\n- Parameters don't need to have any type and can also be omitted at call-site.\n  For ex.:\n  ```js\n  function xyz(x,y= yo(), z=\"na\", p) {\n  ...\n  \n  }\n  //can be called with\n  xyz();\n  xyz(\"yo\");\n  xyz(\"yooo\",\"yo\",\"a\",\"b\",\"c\"); \n  xyz(\"x\", undefined);\n  //etc.\n  ```\n  Here y and z are ``default`` parameters as when they are provided no value or undefined (strict equality) then the given default value is evaluated and assigned.\n  \n  This is also to say, in JS functions can receive any number of args despite their parameters, if there are more args than parameters then extra args are ignored, if there are less args than parameters then the unassigned parameters are [[undefined]]. \n  \n  And this is also to say, functions in JS are uniquely identified by just their names. Which is to say there is no function overloading in JS, as there can be only 1 function with a given name, if there's more, one of them has the other [[Shadowed]]\n  For ex.:\n  ```js\n  function yo(a) {\n    console.log(\"1\");\n  }\n  \n  function yo() {\n    console.log(\"2\");\n  }\n  \n  let x=  {\n      yo(){\n          console.log(\"1\");\n      },\n      yo(){\n          console.log(\"2\");\n      }\n  };\n  \n  class X{\n      yo(){\n          console.log(\"1\");\n      }\n      yo(){\n          console.log(\"2\");\n      }\n  }\n  yo(); //prints 2\n  x.yo(); //also prints 2\n  \n  let obj= new X();\n  obj.yo(); //also prints 2\n  ```\n  The same is true in [[Class]]es and [[Object]]s.\n-\n- We can check if a parameter is provided a value with the [[Nullish-Coalescing Operator]] or the || or explicit check for undefined.\n  ```js\n  function xyz(x) {\n  if(x===undefined) x=2;\n  }\n  \n  ```\n- [[Return]] keyword returns a value, just like other languages. However since there the types are dynamic, there is no change in the function syntax.\n  For ex.:\n  ```js\n  function x(){\n    return 2;\n  }\n  ```\n  \n  If a function doesn't return anything, it returns undefined.\n  The expression to be evaluated at return or the value to be returned must start on the same line as the return as [[ASI]] assumes semicolon after an empty return.\n-\n- Function Expression\n  In [[ECMAScript]] a function is just a value to be evaluated, this is why it can also be assigned to variables.\n  For ex.:\n  ```js\n  let x= function() {\n    ...\n  }; //Notice the semicolon\n  //called with \n  x();\n  ```\n  Here ``function(){...}`` is a Function Expression. Just like a normal function, if it returns a value, that will be returned from ``x()`` otherwise undefined will be returned.\n  \n  The semicolon is because the Function Expression is still a value being assigned, and just like other values being assigned, it indicates the end of value.\n- Rest arguments\n  Using the ``...`` spread [[Operator]] on a parameter we can convert incoming args to elements in an [[Array]] .\n  For ex.:\n  ```js\n  function yo(a,...b) {\n   //use b as an array\n  }\n  yo(1,2,3,3,4); //ok, so b[0] will be 2, b[1] will be 3 and so on.\n  ```\n  \n  The rest parameter must be at the end of parameter definition in a function.\n- Array-like special Object ``arguments`` \n  Every function (except arrow function) has this [[Object]] which has **all** the args of a function.\n  For ex.:\n  ```js\n  function yo (a) {\n   console.log(arguments[0]); \n   console.log(arguments[1]); \n   console.log(arguments[2]); \n  }\n  yo(1,2); //prints 1 2 undefined\n  ```\n  Unlike the rest parameter, this Object captures all the args. It is [[Iterable]] and uses array-like syntax for accessing values but it is not an [[Array]] and hence doesn't support the array methods.\n  The arrow function doesn't have this Object and if we use it inside it, it access the ``arguments`` of the parent function.\n- The ``...`` spread [[Operator]] can also be used to expand an [[Iterable]] into individual args.\n  For ex.:\n  ```js\n  let x = [1,2,5,1,2];\n  console.log(Math.max(...x)); // unpacks x and passes all elements of x to .max(...)\n  ```\n  \n  Similarly, it can also be used to copy an Object.\n  ```js\n  let x = { a: 2, b:\"yo\" };\n  let y= { ...x }; //Spread the list of properties and copy them into this empty object with their values.\n  x[\"a\"]; //prints 2;\n  x==y; //false\n  ```\n-\n-\n- Function Declarations can be called before they are declared in their own scope, Function Expression's can't.\n  For ex.:\n  ```js\n  function xyz(){\n    pp();\n    function pp() {\n      console.log(\"yoo\");\n    }\n  }\n  \n  xyz();\n  ```\n  works and prints \"yoo\". But if ``pp`` was assigned to a variable, it would have needed to be called after declaration of the variable. \n  This is because [[JavaScript]] Engine creates the function declarations before executing the code in an [[Initialization Stage]].\n- Functions in [[JavaScript]] allow nesting. However they are only visible in their respective [[Scope]]s and the ones below in strict mode.\n- If we call a function without evaluating it, it returns the function body.\n  For ex.:\n  ```js \n  function sayHi() {\n    alert( \"Hello\" );\n  }\n  \n  alert( sayHi ); //prints function sayHi() {\n                          // alert( \"Hello\" );\n                          // }\n  ```\n  ``alert(...)`` gets the function body converted to [[String]] and prints that. \n  This also allows us to assign the function to other variables.\n- Callback Function\n  A function passed as a parameter to another function.\n  For ex.:\n  ```js \n  function x(p) {p();} //Here p is a callback function\n  \n  ```\n- Arrow Function\n  These functions are an even simpler way to create Function Expressions.\n  ```js\n  let x= () => {\n    return 2;\n  };\n  let y = () => 2;\n  \n  console.log(x());\n  console.log(y());\n  ```\n- Constructor Function\n  This function can create [[Object]]s at runtime.\n  We use [[new]] [[Operator]] and [[this]] to do so.\n  For ex.:\n  ```js\n  function Yo(name) {\n   this.name = name\n   this.age = 2;\n   this.hi = function() {...};\n  }\n  \n  let x= new Yo(\"Haa\");\n   x.hi(); //works\n  ```\n  Ctor functions should be PascalCase by convention. \n  new keyword here creates a new empty Object and passes it to Yo(), which then uses ``this`` to modify it. Then the value of ``this`` is returned implicitly.\n  \n  Arrow Functions can't be used with Ctor Fns.\n- The main purpose of Ctor Fns is reusability.\n  However, there's a one-off version as well.\n  For ex.:\n  ```js\n  let x = new Function() {\n    this.name = \"yo\";\n  };\n  ```\n  Here [[new]] does the same as earlier, however, this function is immediately called and evaluated for the variable. The result is that x contains an Object returned from [[this]].  And this Function can't be called again. \n  The purpose of this Ctor Fn is simply to offer encapsulation.\n- Return from Ctor Fn\n  If a Ctor fn returns an Object, that is returned instead of this.\n  For any other value, the value is ignored and this is returned.\n  For ex.:\n  ```js\n  function BigUser() {\n    this.name = \"John\";\n    return { name: \"Godzilla\" };  // <-- returns this object\n  }\n  alert( new BigUser().name );  // Godzilla, got that object\n  ```\n- Recursion works just like any other language. Max safe recursion depth is 10000, and maybe more depending on the engine and if it supports ``Tail-Call Optimization``.\n  \n  In JS, each function call is associated with an [[Execution Context]] which is stored in an [[Execution Context Stack]] and this is the stack that tracks the program's flow.\n- JS supports Nested Functions.\n- ``IIFE``: Immediately Invoked Function Expressions\n  That is, this syntax allows us to declare a function expression and immediately execute it. \n  For ex.:\n  ```js\n  (function() {\n   ...\n  }\n  )();\n  \n  // Ways to create IIFE\n  \n  (function() {\n    alert(\"Parentheses around the function\");\n  })();\n  \n  (function() {\n    alert(\"Parentheses around the whole thing\");\n  }());\n  \n  !function() {\n    alert(\"Bitwise NOT operator starts the expression\");\n  }();\n  \n  +function() {\n    alert(\"Unary plus starts the expression\");\n  }();\n  ```\n  We can only do it with function expressions.\n- ``NFE``: Named Function Expressions\n  Function expressions can use an ``internal name``. This allows them to reference theirselves.\n  For ex.:\n  ```js\n  let x = function yo() {\n   yo();\n  }; //ok\n  \n  let y = function()  {\n   y(); //works as well, however\n  };\n  \n  let z = y;\n  y = null;\n  \n  //now z() will yield an error since it calls y() which is null.\n  ```\n- Functions are still [[Object]]s in JS, there is no Function type. That means they have properties too.\n  Like the ``name`` property, in JS, all functions have this property set automatically, and through a feature called ``contextual name``, in the [[Compilation]] the property is set to the correct name through context of the code.\n  For ex.:\n  ```js\n  function yo() {}\n  \n  console.log(yo.name); //prints yo\n  \n  let x = function() {};\n  \n  console.log(x.name); //prints x\n  \n  let y= {\n   yo() {}\n   hey: function(){}\n  };\n  \n  console.log(y.yo.name); //prints yo\n  console.log(y.hey.name); //prints hey\n  ```\n  For ``NFEs``, name is set to the ``internal name`` and not the variable name.\n- Similarly, there's a ``length`` property, it returns the no. of parameters except the rest parameter a function accepts.\n- We can use Functions as [[Object]]s by setting custom properties as well. \n  For ex.:\n  ```js\n  function yo() {\n   if(yo.count=== undefined) yo.count=0;\n   \n  yo.count++;\n  }\n  yo();\n  yo();\n  yo.count; //returns 2\n  ```\n  This is just like using closures, except the function property is visible on the same [[Scope]] as the function's declaration/expression as well as inside it meaning we don't need to rely on closures to remember and set variables (properties) on the [[Environment Object]]. Still, it takes space in the function Object and unlike the [[Environment Object]], a function's lifetime ends at the end of the scope, so for [[Global]] Functions, this means their properties are not [[Garbage Collection]]ed until the end of the program or explicit deletion.\n- We can also create Functions from [[String]]s, this is done using [[new]] keyword.\n  The format is\n  ``let x = new Function (<optional param 1 in string>, <optional param 2 in string>, ...<optional param n in string>, <string function body>);``\n  \n  For ex.:\n  ```js\n  let x = new Function('a', 'b', 'return a+b'); //works. \n  ```\n  These functions are evaluated and dynamically created at runtime. So they can be passed around different programs.\n  There are many differences to how this function works, like the [[Lexical Environment]] and hence  [[Environment Object]] only refer to the [[Global]] [[Scope]]. This is because there's no guarantee the variables and other [[Object]]s it refers to will not have their names minified by the [[Minifier]], and since this function is evaluated at runtime, it can't be optimized to see the new names.\n- Caching\n  It's a simple concept where we simply store the result of a function if it is called often with the same values,\n  For ex.:\n  ```js\n  function slow(x) {\n  console.log(`Called with ${x}`);\n  return x;\n  }\n  - function cachingDecorator(func) {\n  let cache = new Map();\n  - return function(x) {\n    if (cache.has(x)) {    \n      return cache.get(x); \n    }\n  - let result = func(x);\n  - cache.set(x, result);  \n    return result;\n  };\n  }\n  slow = cachingDecorator(slow);\n  console.log( slow(1) ); // slow(1) is cached and the result returned\n  console.log( \"Again: \" + slow(1) ); // slow(1) result returned from cache\n  console.log( slow(2) ); // slow(2) is cached and the result returned\n  console.log( \"Again: \" + slow(2) ); // slow(2) result returned from cache\n  ```\n  For the call of ``func(x)``, the rest of the function is a ``wrapper`` and it stores its value in it.\n  However, such wrapper functions don't work with [[Object]]s because the method might access ``this`` which when called from a function's context might not be able to access\n  That is,\n  ```js\n  let x = {\n   a:2,\n   b() {\n  return this.a; \n  }\n  };\n  - function wrapper(fn) {\n   let cache = new Map();\n  return  function(x) {\n    if (cache.has(x)) return cache.get(x);\n    let result = fn(x);\n    cache.set(x, result);\n     return result;\n  }\n  }\n  - x.b= wrapper(b);\n  x.b(2); //error as the this in b() was using the [[Environment Object]]'s a, but when called through \n            // the wrapper's returned function the ``[[Environment]]`` was set to the function(x) which has \n           // its ``[[Environment]]`` set to wrapper(fn)\n  ```\n- We can use ``<function>.call(<context obj>, <optional arg1>, <optional arg2>,...)`` to explicitly set ``this`` to some other Object. This is a method present in all Function's and it does nothing special, simply set's the ``this`` to the given Object.\n  So, we can change our code to\n  ```js\n  ...\n  let result = fn.call(this,x);\n  ...\n  ```\n  and now the wrapper works even for methods. Here we are simply ``lifting`` the context, so that the context of ``fn`` is the same as it's parent function ``function(x)`` which has ``this`` set to the Object.\n  We can add variable args to our wrapper function with rest parameters and for key, hashing all args together and storing them as a single key.\n- Similar to ``<function>.call(<context>,<...args>)`` we have ``<function>.apply(<context>,<iterable>)``. They work the same, however ``.apply(...)`` accepts an [[Iterable]] and not individual args, and is a bit faster as it is optimized better by the engine.\n- Using ``.call(...)`` and ``.apply(...)`` we get a concept known as ``Method borrowing``. It is simply that we change context of an object's method to another, essentially ``borrowing`` a method from one object and using it in another.\n  For ex.:\n  ```js\n  let x ={\n   a:2,\n   yo() {\n    return this.a;\n   }\n   };\n   let y = {\n   a:4,\n   yo() {\n    return this.a;\n   }\n   };\n  x.yo.call(y); //returns 4\n  ```\n- Function binding\n  As we've seen the ``this`` [[Object]] for a function keeps changing with the change in [[Environment Object]]. ``<function>.bind(<object>, <optional arg value 1>, <... 2>, ...)`` returns a [[Function]] with a ``this`` that is bound to an Object and never changes.\n  For ex.:\n  ```js\n  function yo(fn) {\n    console.log(fn());\n  }\n  let x= {\n    a: 2,\n    ho() {\n      if(this === undefined || this.a === undefined)\n       return 5;\n      else\n        return this.a;\n    }\n  }\n  yo(x.ho); //prints 5\n  x.ho = x.ho.bind(x);\n  yo(x.ho); //prints 2\n  \n  //Similarly, we can even bind arguments\n  \n  function mul(x,y) {\n   console.log(x*y);\n  }\n  let double = mul.bind(null, 2); //Set context to null and first arg to 2\n  double(3); //prints 2*3 = 6\n  double(4); //prints 2*4 = 8  \n  ```\n  \n  This is called a ``partial function application`` as it turns a function's arguments partial allowing us to skip them.\n- Arrow Functions have no ``this`` and no ``arguments`` variable either. So they can be used in wrapper functions, etc. without imposing ``this`` to their bodies. \n  They can't be used with ``.bind(...)``, ``.apply(...)`` or ``.call(...)``, called with ``new``.\n-",536870918]],["^15",[677,"^17",1700492152439,536870918]],["^15",[677,"^Z","JS/pages/Function.md",536870918]],["^15",[678,"^K",1700492152438,536870918]],["^15",[678,"^@",false,536870918]],["^15",[678,"^Y","execution context stack",536870918]],["^15",[678,"^11","Execution Context Stack",536870918]],["^15",[678,"^B",1700492152438,536870918]],["^15",[678,"^;","~u655b7378-75a2-4195-a6fd-f5e188b74e73",536870918]],["^15",[679,"^K",1700492152437,536870918]],["^15",[679,"^@",false,536870918]],["^15",[679,"^Y","initialization stage",536870918]],["^15",[679,"^11","Initialization Stage",536870918]],["^15",[679,"^B",1700492152437,536870918]],["^15",[679,"^;","~u655b7378-17b9-4784-b02d-08c5fc885e92",536870918]],["^15",[680,"^K",1700492152436,536870918]],["^15",[680,"^@",false,536870918]],["^15",[680,"^Y","return",536870918]],["^15",[680,"^11","Return",536870918]],["^15",[680,"^B",1700492152436,536870918]],["^15",[680,"^;","~u655b7378-00c0-4406-ade0-f51008aae7b6",536870918]],["^15",[681,"^K",1700492152435,536870918]],["^15",[681,"^[",833,536870919]],["^15",[681,"^@",false,536870918]],["^15",[681,"^Y","nullish-coalescing operator",536870918]],["^15",[681,"^11","Nullish-Coalescing Operator",536870918]],["^15",[681,"^B",1700492152435,536870918]],["^15",[681,"^;","~u655b7379-570d-4ab1-bd28-9d9c8a81d534",536870919]],["^15",[713,"^Q","Just like other languages. \nHowever, functions by theirselves are not a data type and the compiler might inline them in some cases.\n\nUnlike *C++*, Functions can be defined anywhere, but they must be accessible by the caller’s scope.\nBasic syntax:\n``fn <function name>(<params>)-> <return type> { \n…  \nreturn <value>;\n}``\nFor ex.:\n```rust\nfn another_function(x: i32, unit_label: char) {\n println!(\"The value of x is: {x} and char is {unit_label}\");\n}\n```\n* Functions must define the types of their params in rust.",536870948]],["^15",[713,"^O","^16",536870918]],["^15",[713,"^F",163,536870918]],["^15",[713,"^X",163,536870918]],["^15",[713,"^V",163,536870918]],["^15",[713,"^U",163,536870918]],["^15",[713,"^;","~u655b7378-0285-41fc-baac-9b5489203a4d",536870918]],["^15",[718,"^Q","",536870918]],["^15",[718,"^O","^16",536870918]],["^15",[718,"^F",1715,536870948]],["^15",[718,"^X",163,536870918]],["^15",[718,"^V",163,536870918]],["^15",[718,"^U",163,536870918]],["^15",[718,"^;","~u655b7378-d97a-4e68-8a47-92df98650329",536870918]],["^15",[719,"^3","alias:: GC\n\n- JS engines use GC.\n- It works like normal GCs, like unreachable code is cleaned up, it is performed automatically etc.\n  For ex.: If we have an [[Object]]'s reference stored in a variable and we don't delete it but assign something else to it, then the actual Object becomes unreachable. This is sweeped off by the GC.\n  JS engines generally use ``mark and sweep`` for GC where it marks the reachable parts of the code as being in-use and doesn't clean them, and clean the rest.\n- Further reading: https://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection\n- V8's GC is called Orinoco",536870919]],["^15",[719,"^17",1700492152854,536870919]],["^15",[719,"^Z","JS/pages/Garbage Collection.md",536870919]],["^15",[720,"^5",606,536870919]],["^15",[720,"^K",1700492152853,536870919]],["^15",[720,"^@",false,536870919]],["^15",[720,"^Y","gc",536870919]],["^15",[720,"^11","GC",536870919]],["^15",[720,"^B",1700492152853,536870919]],["^15",[720,"^;","~u655b7378-20a6-457f-b0d5-5c604b716728",536870919]],["^15",[721,"^Q","alias:: GC\n\n",536870919]],["^15",[721,"^O","^16",536870919]],["^15",[721,"^1;",["^19",[]],536870919]],["^15",[721,"^F",606,536870919]],["^15",[721,"^X",606,536870919]],["^15",[721,"^V",606,536870919]],["^15",[721,"^U",606,536870919]],["^15",[721,"^U",720,536870919]],["^15",[721,"^:",true,536870919]],["^15",[721,"^?",["^ ","^18",["^19",["GC"]]],536870919]],["^15",[721,"^J",["^18"],536870919]],["^15",[721,"^4",["^ ","^18","GC"],536870919]],["^15",[721,"^H",720,536870919]],["^15",[721,"^;","~u655b7378-6f11-4a93-91ee-03ea9ff70a50",536870919]],["^15",[722,"^Q","JS engines use GC.",536870919]],["^15",[722,"^O","^16",536870919]],["^15",[722,"^F",721,536870919]],["^15",[722,"^X",606,536870919]],["^15",[722,"^V",606,536870919]],["^15",[722,"^U",606,536870919]],["^15",[722,"^;","~u655b7378-d003-4674-a0fb-1204d65a2c20",536870919]],["^15",[723,"^Q","It works like normal GCs, like unreachable code is cleaned up, it is performed automatically etc.\nFor ex.: If we have an [[Object]]'s reference stored in a variable and we don't delete it but assign something else to it, then the actual Object becomes unreachable. This is sweeped off by the GC.\nJS engines generally use ``mark and sweep`` for GC where it marks the reachable parts of the code as being in-use and doesn't clean them, and clean the rest.",536870919]],["^15",[723,"^O","^16",536870919]],["^15",[723,"^F",722,536870919]],["^15",[723,"^X",606,536870919]],["^15",[723,"^V",606,536870919]],["^15",[723,"^U",299,536870919]],["^15",[723,"^U",606,536870919]],["^15",[723,"^H",299,536870919]],["^15",[723,"^;","~u655b7378-9ee5-4783-99c3-0f9d1337959e",536870919]],["^15",[724,"^Q","Further reading: https://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection",536870919]],["^15",[724,"^O","^16",536870919]],["^15",[724,"^F",723,536870919]],["^15",[724,"^X",606,536870919]],["^15",[724,"^V",606,536870919]],["^15",[724,"^U",606,536870919]],["^15",[724,"^;","~u655b7378-5e69-401e-aa30-54c25bda145a",536870919]],["^15",[725,"^Q","V8's GC is called Orinoco",536870919]],["^15",[725,"^O","^16",536870919]],["^15",[725,"^F",724,536870919]],["^15",[725,"^X",606,536870919]],["^15",[725,"^V",606,536870919]],["^15",[725,"^U",606,536870919]],["^15",[725,"^;","~u655b7378-3654-475c-a990-f45d44874a66",536870919]],["^15",[726,"^3","- A special type of [[Function]].\n- Like Dart or python, JS also supports generator functions which can return values multiple times creating the concept of ``streams``.\n  It works like so\n  ```js\n  function* yo(){\n   yield 1;\n   yield 2;\n   return 3;\n  }\n  let genny = yo();\n  console.log(genny.next()); //prints {value: 1, done: false}\n  console.log(genny.next()); //prints {value: 2, done: false}\n  console.log(genny.next()); //prints {value: 3, done: true}\n  \n  let x = {\n   *yo(){ //generator methods\n     ...\n    }\n   aye: function*() {} \n  };\n  ```\n  These functions are defined with ``function*`` keyword.  Then we can ``yield`` values in the function. Yielding returns a value or nothing, in which case [[undefined]] is returned, yielding doesn't finish the function, it will send the control back but the position in the function will be remembered so when it is called again it will continue from the yield to the next yield or return. ``return`` however returns the control back and function won't resume again.\n  \n  A generator function returns an [[Object]] called a ``Generator Object`` which has a method ``.next(<optional arg>)``. When we call next it runs until either it finds a yield , or the function finishes, or the return is found. In all cases ``.next()`` returns an Object with 2 properties, value and done, the done is set to true if the function is finished, that is return or the function's over. value has the returned value, or undefined. \n  Calling ``next`` on a finished Generator Object gives value as undefined and done as true.\n  Calling the function again can create another generator Object so we can reuse it.\n  For ex.:\n  ```js\n  function* yo() {\n   return 2; \n  }\n  \n  let x = yo();\n  console.log(x.next()); //prints {value: 2, done: true}\n  console.log(x.next()); //prints {value: undefined, done: true}\n  \n  x = yo();\n  console.log(x.next()); //prints {value: 2, done: true}\n  ```\n  \n  \n  \n   for..of [[Loop]]\n  Generator Object's return an [[Iterable]] Object, so they can be iterated over. We can use for..of to do so \n  ```js\n  function* yo() {\n   yield 1;\n   return 2;\n  }\n  (for let value of yo){....} //value gets just the value of next()\n  \n  //similarly\n  let x = [...yo]; //as its an iterator, it can use spread Operator\n  console.log(x); //prints 1 (not 2)\n  \n  ```\n  \n  However, iterators don't get the value returned using ``return``, so they may not completely finish the generator function. This is why it is recommended to only ``yield`` values inside a generator function and let it implicitly return.\n-\n- Generator Composition\n  Using ``yield*`` we can delegate yield to another Generator, this is called Generator Composition.\n  For ex.:\n  ```js\n  function* gen1(){\n   yield 2;\n   yield 3;\n  }\n  function* gen2() {\n   yield* gen1();\n   yield 4;\n  }\n  let x= gen2();\n  for(let value of x){\n   console.log(value); //prints 2 3 4\n  }\n  ```\n  The flow is exactly like expected, until the delegated generator yields all its values, it keeps yielding.\n- ``.next(<arg>)`` can pass value to ``yield`` [[Operator]\n  For ex.:\n  ```js\n  function* gen(){\n  let x = yield 1;\n  console.log(x);\n  }\n  \n  let x = gen();\n  console.log(x.next().value); //prints 1 \n  x.next(5); //prints 5\n  console.log(x.next().value); //prints undefined\n  ```\n  The first call to ``.next()`` runs the generator till the yield's result. Then it is suspended where yield would return some value or [[undefined]], then the 2nd call to ``.next()`` passes an arg which becomes the ``yield``'s return value and runs the generator until end and last ``.next()`` has no value so it returns undefined.\n  \n  Similarly, we can also send an [[Error]] into a generator. To do so we use ``<generator obj>.throw(<err Obj>)``\n  For ex.:\n  ```js\n  function* gen() {\n  try {\n    let x = yield 1;\n    console.log(x);\n  } catch (err) {\n    console.log(err.message);\n  }\n  }\n  - let x = gen();\n  console.log(x.next()); //prints 1\n  x.throw(new Error(\"nah\")); //prints nah\n  ```\n  It continues the generator after passing an Error to the yield, if the error is unhandled it leaks back into the calling code.\n- ``<generator obj>.return(<arg>)`` Returns an Object like ``.next()`` returns with the given value and finishes the generator so done is set to true.\n-\n-\n-",536870919]],["^15",[726,"^17",1700492152878,536870919]],["^15",[726,"^Z","JS/pages/Generator Function.md",536870919]],["^15",[727,"^K",1700492153043,536870919]],["^15",[727,"^[",726,536870919]],["^15",[727,"^@",false,536870919]],["^15",[727,"^Y","generator function",536870919]],["^15",[727,"^11","Generator Function",536870919]],["^15",[727,"^B",1700492153043,536870919]],["^15",[727,"^;","~u655b7379-101b-42b6-8713-c3add0cb432a",536870919]],["^15",[728,"^Q","",536870919]],["^15",[728,"^O","^16",536870919]],["^15",[728,"^F",736,536870919]],["^15",[728,"^X",727,536870919]],["^15",[728,"^V",727,536870919]],["^15",[728,"^U",727,536870919]],["^15",[728,"^;","~u655b7378-565b-4814-ac43-25d2c1de5bc8",536870919]],["^15",[729,"^Q","Generator Composition\nUsing ``yield*`` we can delegate yield to another Generator, this is called Generator Composition.\nFor ex.:\n```js\nfunction* gen1(){\n yield 2;\n yield 3;\n}\nfunction* gen2() {\n yield* gen1();\n yield 4;\n}\nlet x= gen2();\nfor(let value of x){\n console.log(value); //prints 2 3 4\n}\n```\nThe flow is exactly like expected, until the delegated generator yields all its values, it keeps yielding.",536870919]],["^15",[729,"^O","^16",536870919]],["^15",[729,"^F",730,536870919]],["^15",[729,"^X",727,536870919]],["^15",[729,"^V",727,536870919]],["^15",[729,"^U",727,536870919]],["^15",[729,"^;","~u655b7378-17ed-4ca5-a38c-770457fb3995",536870919]],["^15",[730,"^Q","",536870919]],["^15",[730,"^O","^16",536870919]],["^15",[730,"^F",731,536870919]],["^15",[730,"^X",727,536870919]],["^15",[730,"^V",727,536870919]],["^15",[730,"^U",727,536870919]],["^15",[730,"^;","~u655b7378-a372-4b2d-a7a3-b7d8db6ba24d",536870919]],["^15",[731,"^Q","Like Dart or python, JS also supports generator functions which can return values multiple times creating the concept of ``streams``.\nIt works like so\n```js\nfunction* yo(){\n yield 1;\n yield 2;\n return 3;\n}\nlet genny = yo();\nconsole.log(genny.next()); //prints {value: 1, done: false}\nconsole.log(genny.next()); //prints {value: 2, done: false}\nconsole.log(genny.next()); //prints {value: 3, done: true}\n\nlet x = {\n *yo(){ //generator methods\n   ...\n  }\n aye: function*() {} \n};\n```\nThese functions are defined with ``function*`` keyword.  Then we can ``yield`` values in the function. Yielding returns a value or nothing, in which case [[undefined]] is returned, yielding doesn't finish the function, it will send the control back but the position in the function will be remembered so when it is called again it will continue from the yield to the next yield or return. ``return`` however returns the control back and function won't resume again.\n\nA generator function returns an [[Object]] called a ``Generator Object`` which has a method ``.next(<optional arg>)``. When we call next it runs until either it finds a yield , or the function finishes, or the return is found. In all cases ``.next()`` returns an Object with 2 properties, value and done, the done is set to true if the function is finished, that is return or the function's over. value has the returned value, or undefined. \nCalling ``next`` on a finished Generator Object gives value as undefined and done as true.\nCalling the function again can create another generator Object so we can reuse it.\nFor ex.:\n```js\nfunction* yo() {\n return 2; \n}\n\nlet x = yo();\nconsole.log(x.next()); //prints {value: 2, done: true}\nconsole.log(x.next()); //prints {value: undefined, done: true}\n\nx = yo();\nconsole.log(x.next()); //prints {value: 2, done: true}\n```\n\n\n\n for..of [[Loop]]\nGenerator Object's return an [[Iterable]] Object, so they can be iterated over. We can use for..of to do so \n```js\nfunction* yo() {\n yield 1;\n return 2;\n}\n(for let value of yo){....} //value gets just the value of next()\n\n//similarly\nlet x = [...yo]; //as its an iterator, it can use spread Operator\nconsole.log(x); //prints 1 (not 2)\n\n```\n\nHowever, iterators don't get the value returned using ``return``, so they may not completely finish the generator function. This is why it is recommended to only ``yield`` values inside a generator function and let it implicitly return.",536870919]],["^15",[731,"^O","^16",536870919]],["^15",[731,"^F",733,536870919]],["^15",[731,"^X",727,536870919]],["^15",[731,"^V",727,536870919]],["^15",[731,"^U",299,536870919]],["^15",[731,"^U",300,536870919]],["^15",[731,"^U",303,536870919]],["^15",[731,"^U",304,536870919]],["^15",[731,"^U",727,536870919]],["^15",[731,"^H",299,536870919]],["^15",[731,"^H",300,536870919]],["^15",[731,"^H",303,536870919]],["^15",[731,"^H",304,536870919]],["^15",[731,"^;","~u655b7378-e316-482b-9d38-a65ba861d673",536870919]],["^15",[732,"^Q","~``.next(<arg>)`` can pass value to ``yield`` [[Operator]\nFor ex.:\n```js\nfunction* gen(){\nlet x = yield 1;\nconsole.log(x);\n}\n\nlet x = gen();\nconsole.log(x.next().value); //prints 1 \nx.next(5); //prints 5\nconsole.log(x.next().value); //prints undefined\n```\nThe first call to ``.next()`` runs the generator till the yield's result. Then it is suspended where yield would return some value or [[undefined]], then the 2nd call to ``.next()`` passes an arg which becomes the ``yield``'s return value and runs the generator until end and last ``.next()`` has no value so it returns undefined.\n\nSimilarly, we can also send an [[Error]] into a generator. To do so we use ``<generator obj>.throw(<err Obj>)``\nFor ex.:\n```js\nfunction* gen() {\ntry {\n  let x = yield 1;\n  console.log(x);\n} catch (err) {\n  console.log(err.message);\n}\n}\n- let x = gen();\nconsole.log(x.next()); //prints 1\nx.throw(new Error(\"nah\")); //prints nah\n```\nIt continues the generator after passing an Error to the yield, if the error is unhandled it leaks back into the calling code.",536870919]],["^15",[732,"^O","^16",536870919]],["^15",[732,"^F",729,536870919]],["^15",[732,"^X",727,536870919]],["^15",[732,"^V",727,536870919]],["^15",[732,"^U",303,536870919]],["^15",[732,"^U",340,536870919]],["^15",[732,"^U",727,536870919]],["^15",[732,"^H",303,536870919]],["^15",[732,"^H",340,536870919]],["^15",[732,"^;","~u655b7378-c25e-4314-bb6a-d9f3108195e2",536870919]],["^15",[733,"^Q","A special type of [[Function]].",536870919]],["^15",[733,"^O","^16",536870919]],["^15",[733,"^F",727,536870919]],["^15",[733,"^X",727,536870919]],["^15",[733,"^V",727,536870919]],["^15",[733,"^U",163,536870919]],["^15",[733,"^U",727,536870919]],["^15",[733,"^H",163,536870919]],["^15",[733,"^;","~u655b7378-7d62-4f95-8f03-a36436295d34",536870919]],["^15",[734,"^Q","~``<generator obj>.return(<arg>)`` Returns an Object like ``.next()`` returns with the given value and finishes the generator so done is set to true.",536870919]],["^15",[734,"^O","^16",536870919]],["^15",[734,"^F",732,536870919]],["^15",[734,"^X",727,536870919]],["^15",[734,"^V",727,536870919]],["^15",[734,"^U",727,536870919]],["^15",[734,"^;","~u655b7378-b1a6-47ff-a6fd-3b15cd61b779",536870919]],["^15",[735,"^Q","",536870919]],["^15",[735,"^O","^16",536870919]],["^15",[735,"^F",734,536870919]],["^15",[735,"^X",727,536870919]],["^15",[735,"^V",727,536870919]],["^15",[735,"^U",727,536870919]],["^15",[735,"^;","~u655b7378-a558-4dfe-9cd3-ddea84434b34",536870919]],["^15",[736,"^Q","",536870919]],["^15",[736,"^O","^16",536870919]],["^15",[736,"^F",735,536870919]],["^15",[736,"^X",727,536870919]],["^15",[736,"^V",727,536870919]],["^15",[736,"^U",727,536870919]],["^15",[736,"^;","~u655b7378-1986-4239-a4eb-57a42baf6ee6",536870919]],["^15",[737,"^3","- This [[Object]] contains the Global variables/functions and other environment-specific values in it. It is not the same as the [[Environment Object]] or the [[Lexical Environment]].\n  This object is accessible and even mutable by code, \n  In browsers, ``window`` is the name of this Object, ``global`` in node.js and most modern browsers and other environments also now support ``globalThis`` as a more standard name that doesn't need to depend on the environment.\n- Variables declared with [[var]] and function declarations are directly accessible through the Global Object as they exist as a property in it.\n  That is,\n  ```js\n  var x=2;\n  console.log(global.x); //prints 2\n  ```\n  However, it is unrecommended to rely on this behavior and if we wish to truly have variables persist globally, we should instead set the property directly on the Global Object to set Global Variables.\n- Essentially, JS built-in [[Object]]s we use are all Global Object's properties and JS simply allows syntax sugar to access them.\n  For ex.:\n  ```js\n  alert(2);\n  //is the same as\n  window.alert();\n  //Similarly,\n  let x = new Array();\n  //is the same as\n  let x = new window.Array();\n  ```\n  \n  This is why we can also test for a feature using the Global Object,\n  such as\n  ```js\n  if (!window.Promise) {\n    window.Promise = ... // custom implementation of the modern language feature\n  }\n  ```\n-\n-",536870919]],["^15",[737,"^17",1700492152892,536870919]],["^15",[737,"^Z","JS/pages/Global.md",536870919]],["^15",[738,"^Q","This [[Object]] contains the Global variables/functions and other environment-specific values in it. It is not the same as the [[Environment Object]] or the [[Lexical Environment]].\nThis object is accessible and even mutable by code, \nIn browsers, ``window`` is the name of this Object, ``global`` in node.js and most modern browsers and other environments also now support ``globalThis`` as a more standard name that doesn't need to depend on the environment.",536870919]],["^15",[738,"^O","^16",536870919]],["^15",[738,"^F",609,536870919]],["^15",[738,"^X",609,536870919]],["^15",[738,"^V",609,536870919]],["^15",[738,"^U",299,536870919]],["^15",[738,"^U",609,536870919]],["^15",[738,"^U",653,536870919]],["^15",[738,"^U",669,536870919]],["^15",[738,"^H",299,536870919]],["^15",[738,"^H",653,536870919]],["^15",[738,"^H",669,536870919]],["^15",[738,"^;","~u655b7378-4ed9-4123-a9ab-d0f1e2e4d421",536870919]],["^15",[739,"^Q","Variables declared with [[var]] and function declarations are directly accessible through the Global Object as they exist as a property in it.\nThat is,\n```js\nvar x=2;\nconsole.log(global.x); //prints 2\n```\nHowever, it is unrecommended to rely on this behavior and if we wish to truly have variables persist globally, we should instead set the property directly on the Global Object to set Global Variables.",536870919]],["^15",[739,"^O","^16",536870919]],["^15",[739,"^F",738,536870919]],["^15",[739,"^X",609,536870919]],["^15",[739,"^V",609,536870919]],["^15",[739,"^U",602,536870919]],["^15",[739,"^U",609,536870919]],["^15",[739,"^H",602,536870919]],["^15",[739,"^;","~u655b7378-74d7-45d9-822e-a89d10e65512",536870919]],["^15",[740,"^Q","Essentially, JS built-in [[Object]]s we use are all Global Object's properties and JS simply allows syntax sugar to access them.\nFor ex.:\n```js\nalert(2);\n//is the same as\nwindow.alert();\n//Similarly,\nlet x = new Array();\n//is the same as\nlet x = new window.Array();\n```\n\nThis is why we can also test for a feature using the Global Object,\nsuch as\n```js\nif (!window.Promise) {\n  window.Promise = ... // custom implementation of the modern language feature\n}\n```",536870919]],["^15",[740,"^O","^16",536870919]],["^15",[740,"^F",739,536870919]],["^15",[740,"^X",609,536870919]],["^15",[740,"^V",609,536870919]],["^15",[740,"^U",299,536870919]],["^15",[740,"^U",609,536870919]],["^15",[740,"^H",299,536870919]],["^15",[740,"^;","~u655b7378-7840-4304-ba5d-3cf50c4625d7",536870919]],["^15",[741,"^Q","",536870919]],["^15",[741,"^O","^16",536870919]],["^15",[741,"^F",740,536870919]],["^15",[741,"^X",609,536870919]],["^15",[741,"^V",609,536870919]],["^15",[741,"^U",609,536870919]],["^15",[741,"^;","~u655b7378-0a8c-46e3-89a0-d440430091c1",536870919]],["^15",[742,"^Q","",536870919]],["^15",[742,"^O","^16",536870919]],["^15",[742,"^F",741,536870919]],["^15",[742,"^X",609,536870919]],["^15",[742,"^V",609,536870919]],["^15",[742,"^U",609,536870919]],["^15",[742,"^;","~u655b7378-f738-4a3f-b31d-5b369570cba3",536870919]],["^15",[743,"^3","- Whilst the [[HTML]] spec has these defined, we can also refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) as it is more developer oriented than specification oriented.\n- Headings\n  There's 6 of these elements, ``<h1> </h1>`` to ``<h6> </h6>`` and each level has a smaller font size than the previous from 1 to 6.\n  It is recommended to use sequential pairs (like h1 then h2 )than arbitrary (like h1 then h4) for [[SEO]]\n- Paragraph\n  ``<p> </p>``\n- Lists\n  2 types\n  Ordered List: ``<ol> </ol>`` which assigns number to its items\n  Unordered List: ``<ul> </ul>``\n  \n  Each item in a list is defined inside list item element``<li> </li>``.\n- Links\n  ``<a> </a>``\n  Everything inside is hyperlinked, and the link/url is defined using the ``href=\"<url>\"`` attribute.\n- Link\n  ``<link />``\n  A void element, called the [external resource link element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link). This element establishes a relation between the current document and the given resource. \n  \n  For ex.:\n  Used to link external [[CSS]] resource\n  ```html\n  <link href=\"main.css\" rel=\"stylesheet\" />\n  ``` \n  \n  Can also link fonts, images, etc. any external resource.\n- [[<script>]]\n  This tag allows embedding executable code in an [[HTML]] Document.\n  Can be inserted anywhere in the webpage.\n  For ex.:\n  ```html\n  <!DOCTYPE HTML>\n  <html>\n  \n  <body>\n  \n    <p>Before the script...</p>\n  \n    <script>\n      alert( 'Hello, world!' );\n    </script>\n  \n    <p>...After the script.</p>\n  \n  </body>\n  \n  </html>\n  \n  ```\n  \n  * Attributes:\n  type: for ex. <script type=\"text/javascript\">. \n  Old html4 attr to denote type of a script, with modern HTML it defines [[Javascript]] modules.\n  \n  Language: <script language=…>\n  Old attr. Denotes the language of the script, now defaults and sticks to javascript.\n  \n  src: <script src=\"www.abc.com/something.js\"></script>\n  Instead of providing a body to this tag, we can reference a js file somewhere either through absolute/relative path or URL.\n  The benefit of using src is that browsers can cache the individual scripts and use them instead of fetching them again, thereby reducing the amount of data used in each webpage loading.\n  If both the body and src is provided, the body is ignored.",536870919]],["^15",[743,"^17",1700492152918,536870919]],["^15",[743,"^Z","JS/pages/HTML Element.md",536870919]],["^15",[744,"^K",1700492152916,536870919]],["^15",[744,"^@",false,536870919]],["^15",[744,"^Y","seo",536870919]],["^15",[744,"^11","SEO",536870919]],["^15",[744,"^B",1700492152916,536870919]],["^15",[744,"^;","~u655b7378-2941-415f-a5eb-bcc53660db7a",536870919]],["^15",[745,"^Q","Whilst the [[HTML]] spec has these defined, we can also refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) as it is more developer oriented than specification oriented.",536870919]],["^15",[745,"^O","^16",536870919]],["^15",[745,"^F",383,536870919]],["^15",[745,"^X",383,536870919]],["^15",[745,"^V",383,536870919]],["^15",[745,"^U",284,536870919]],["^15",[745,"^U",383,536870919]],["^15",[745,"^H",284,536870919]],["^15",[745,"^;","~u655b7378-ba1b-4820-8b5f-9d7eafe46663",536870919]],["^15",[746,"^Q","Headings\nThere's 6 of these elements, ``<h1> </h1>`` to ``<h6> </h6>`` and each level has a smaller font size than the previous from 1 to 6.\nIt is recommended to use sequential pairs (like h1 then h2 )than arbitrary (like h1 then h4) for [[SEO]]",536870919]],["^15",[746,"^O","^16",536870919]],["^15",[746,"^F",745,536870919]],["^15",[746,"^X",383,536870919]],["^15",[746,"^V",383,536870919]],["^15",[746,"^U",383,536870919]],["^15",[746,"^U",744,536870919]],["^15",[746,"^H",744,536870919]],["^15",[746,"^;","~u655b7378-b087-440a-93f9-390698af4bc1",536870919]],["^15",[747,"^Q","Paragraph\n``<p> </p>``",536870919]],["^15",[747,"^O","^16",536870919]],["^15",[747,"^F",746,536870919]],["^15",[747,"^X",383,536870919]],["^15",[747,"^V",383,536870919]],["^15",[747,"^U",383,536870919]],["^15",[747,"^;","~u655b7378-910b-4dc0-8921-886a9be950ce",536870919]],["^15",[748,"^Q","Lists\n2 types\nOrdered List: ``<ol> </ol>`` which assigns number to its items\nUnordered List: ``<ul> </ul>``\n\nEach item in a list is defined inside list item element``<li> </li>``.",536870919]],["^15",[748,"^O","^16",536870919]],["^15",[748,"^F",747,536870919]],["^15",[748,"^X",383,536870919]],["^15",[748,"^V",383,536870919]],["^15",[748,"^U",383,536870919]],["^15",[748,"^;","~u655b7378-2f86-45a0-92dd-31e23ad5f12b",536870919]],["^15",[749,"^Q","Links\n``<a> </a>``\nEverything inside is hyperlinked, and the link/url is defined using the ``href=\"<url>\"`` attribute.",536870919]],["^15",[749,"^O","^16",536870919]],["^15",[749,"^F",748,536870919]],["^15",[749,"^X",383,536870919]],["^15",[749,"^V",383,536870919]],["^15",[749,"^U",383,536870919]],["^15",[749,"^;","~u655b7378-6634-44b3-8329-fe20341a1ee3",536870919]],["^15",[750,"^Q","Link\n``<link />``\nA void element, called the [external resource link element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link). This element establishes a relation between the current document and the given resource. \n\nFor ex.:\nUsed to link external [[CSS]] resource\n```html\n<link href=\"main.css\" rel=\"stylesheet\" />\n``` \n\nCan also link fonts, images, etc. any external resource.",536870919]],["^15",[750,"^O","^16",536870919]],["^15",[750,"^F",749,536870919]],["^15",[750,"^X",383,536870919]],["^15",[750,"^V",383,536870919]],["^15",[750,"^U",383,536870919]],["^15",[750,"^U",402,536870919]],["^15",[750,"^H",402,536870919]],["^15",[750,"^;","~u655b7378-42c7-453e-9a7f-ccd006b50b94",536870919]],["^15",[751,"^Q","[[<script>]]\nThis tag allows embedding executable code in an [[HTML]] Document.\nCan be inserted anywhere in the webpage.\nFor ex.:\n```html\n<!DOCTYPE HTML>\n<html>\n\n<body>\n\n  <p>Before the script...</p>\n\n  <script>\n    alert( 'Hello, world!' );\n  </script>\n\n  <p>...After the script.</p>\n\n</body>\n\n</html>\n\n```\n\n* Attributes:\ntype: for ex. <script type=\"text/javascript\">. \nOld html4 attr to denote type of a script, with modern HTML it defines [[Javascript]] modules.\n\nLanguage: <script language=…>\nOld attr. Denotes the language of the script, now defaults and sticks to javascript.\n\nsrc: <script src=\"www.abc.com/something.js\"></script>\nInstead of providing a body to this tag, we can reference a js file somewhere either through absolute/relative path or URL.\nThe benefit of using src is that browsers can cache the individual scripts and use them instead of fetching them again, thereby reducing the amount of data used in each webpage loading.\nIf both the body and src is provided, the body is ignored.",536870919]],["^15",[751,"^O","^16",536870919]],["^15",[751,"^F",750,536870919]],["^15",[751,"^X",383,536870919]],["^15",[751,"^V",383,536870919]],["^15",[751,"^U",283,536870919]],["^15",[751,"^U",284,536870919]],["^15",[751,"^U",383,536870919]],["^15",[751,"^U",607,536870919]],["^15",[751,"^H",283,536870919]],["^15",[751,"^H",284,536870919]],["^15",[751,"^H",607,536870919]],["^15",[751,"^;","~u655b7378-e7b8-4917-8ccc-ff38ed0d7e49",536870919]],["^15",[752,"^3","alias:: Hyper Text Markup Language\n\n- It is a text format understood by browsers natively, defined here [HTML](https://html.spec.whatwg.org/). \n  The file format is denoted with``.html``\n  For ex.:\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"en-US\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width\" />\n      <title>My test page</title>\n    </head>\n    <body>\n      <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n    </body>\n  </html>\n  \n  ```\n  \n  HTML is a text markup language, meaning it gives a different look to content, and defines Elements and Attributes that do so.\n- The ``<!DOCTYPE HTML>`` directive denotes a text file is an HTML Document and is necessary. It is not an HTML element but it is still a part of the [[DOM]].\n  It also affects the top-level Geometry properties of the [[DOM Class Property]] by giving odd behavior if not present.\n- ``Elements`` and ``Tags``\n  HTML Elements are text tokens that are parsed by HTML as meaningful entities, like ``keywords`` of [[ECMAScript]].  Then each tag is a part of an element, generally each element has 2 tags, an opening tag denoting where the element starts and an end tag where it finishes. The content within is the body of the element.\n  \n  For ex.:\n  ```html\n  <html>\n  </html>\n  ```\n  Here the element is ``html``, and it's start tag is ``<html>`` and end tag is ``</html>``.\n  Some elements have a single tag as they don't need an explicit ending tag but they can still optionally use an ending tag. These are also called void elements.\n  For ex.:\n  ```html\n  <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n  ```\n  \n   Consequently, the ``tagName`` of any element, is the name of the element. So here the element is ``html`` so the tag ``<html>`` will have ``tagName`` of ``html``.\n  ![paragraph element including opening tag, content reading 'my cat is very grumpy', and a closing tag](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-small.png)\n  \n  * We can nest elements in HTML. Meaning a single element can have multiple children and so on for a variable depth (atleast >100).\n- Most useful [[HTML Element]]s \n  ``html`` element, which wraps the HTML content and is the rootmost element. It also has a ``lang`` attribute which denotes the language of the page.\n  ``head`` element which is a container for all the content that won't be visible as the content of the page, such as its title, encoding etc.\n  ``body`` element which finally holds the body of the Document, the content inside it is the content that is displayed on the page by the [[Brower]]s \n  [[<script>]] element which holds the executable script (JS) in it. \n  ``meta`` This void element defines important metadata of the document.\n  \n  There can be only single of all of these elements except script and meta element in a document.\n  For ex.:\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"en-US\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width\" />\n      <title>My test page</title>\n    </head>\n    <body>\n      <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n    </body>\n  </html>\n  \n  ```\n- Attributes\n  Every HTML element has some ``attributes`` which are basically additional properties accepted by the said element. These modify the Element's functionality or are there just to hold some information. \n  \n  These are generally ``key=value`` pairs but some are enabled just with a single keyword.\n  For ex.:\n  ```html\n  ...\n  <div id=\"yo\"> </div>\n  <!-- Here yo is the value to the id attribute of div element -->\n  ```\n  ![Paragraph opening tag with a class attribute highlighted: class=editor-note](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-attribute-small.png)\n  \n  Attribute names are case insensitive so we can use ``id`` or ``ID`` etc. it works.\n  \n  Whilst these depend on the element itself, there are some attributes which are common across all/most elements called [Global Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes).\n  * ``id=\"<value>\"``: Unique Id for any given element. This Id can be used by both [[CSS]] and [[<script>]] to modify the element. If it is not unique then any element with the same Id can be picked at random by the script or CSS.\n  \n  * ``class=\"<value>\"``: Space separated list of identifiers that can be used to group elements together for the CSS and JS. Just like the ID provides a unique identifier for each element, the class attribute provides a/multiple common identifier(s) for each element.\n-\n- Most HTML documents can be created dynamically.\n  For ex.:\n  ```js\n  function loadScript(src) {\n    // creates a <script> tag and append it to the page\n    // this causes the script with given src to start loading and run when complete\n    let script = document.createElement('script');\n    script.src = src;\n    document.head.append(script);\n  }\n  ```\n  This [[Function]] appends a [[<script>]] tag to the top of an ``HTML Document`` and assigns its src attribute the value given. This way we can dynamically add JS scripts to our Document. This is [[DOM]] manipulation.\n- Autocorrection\n  [[Brower]]s can autocorrect many common HTML errors, such as if we just put some text in a ``.html`` file then they would automatically add the ``<HTML>``, ``<Head>`` and ``<Body>`` tags enclosing it.\n  Similarly, it also auto closes tags.\n- Comment\n  A comment in HTML goes like so ``<!-- .... -->``\n  For ex.:\n  ```html\n  <!DOCTYPE HTML>\n  <html>\n  <body>\n    The truth about elk.\n    <ol>\n      <li>An elk is a smart</li>\n      <!-- comment -->\n      <li>...and cunning animal!</li>\n    </ol>\n  </body>\n  </html>\n  ```\n  Comments still appear in the [[DOM]]\n  ![image.png](../assets/image_1687271848413_0.png)\n- [[HTML Element]]s\n- Each of the [[HTML Element]]s has a ``style`` attribute, which is defined using [[CSS]].\n  That said, there are basically 2 ways to provide style to an [[HTML Element]]\n  Either through the ``style`` attribute which can be provided by inline/internal/external CSS. \n  \n  Or through the ``class`` attribute.\n  Providing a ``class`` attribute to an HTML element also allows it to be styled by the same CSS given it selects the class\n-",536870919]],["^15",[752,"^17",1700492152958,536870919]],["^15",[752,"^Z","JS/pages/HTML.md",536870919]],["^15",[753,"^5",284,536870919]],["^15",[753,"^K",1700492152956,536870919]],["^15",[753,"^@",false,536870919]],["^15",[753,"^Y","hyper text markup language",536870919]],["^15",[753,"^11","Hyper Text Markup Language",536870919]],["^15",[753,"^B",1700492152956,536870919]],["^15",[753,"^;","~u655b7378-3423-47f9-874b-37d9bfc51327",536870919]],["^15",[754,"^Q","",536870919]],["^15",[754,"^O","^16",536870919]],["^15",[754,"^F",765,536870919]],["^15",[754,"^X",284,536870919]],["^15",[754,"^V",284,536870919]],["^15",[754,"^U",284,536870919]],["^15",[754,"^;","~u655b7378-8515-4843-ab9f-dd222aae72d1",536870919]],["^15",[755,"^Q","Most HTML documents can be created dynamically.\nFor ex.:\n```js\nfunction loadScript(src) {\n  // creates a <script> tag and append it to the page\n  // this causes the script with given src to start loading and run when complete\n  let script = document.createElement('script');\n  script.src = src;\n  document.head.append(script);\n}\n```\nThis [[Function]] appends a [[<script>]] tag to the top of an ``HTML Document`` and assigns its src attribute the value given. This way we can dynamically add JS scripts to our Document. This is [[DOM]] manipulation.",536870919]],["^15",[755,"^O","^16",536870919]],["^15",[755,"^F",754,536870919]],["^15",[755,"^X",284,536870919]],["^15",[755,"^V",284,536870919]],["^15",[755,"^U",163,536870919]],["^15",[755,"^U",283,536870919]],["^15",[755,"^U",284,536870919]],["^15",[755,"^U",288,536870919]],["^15",[755,"^H",163,536870919]],["^15",[755,"^H",283,536870919]],["^15",[755,"^H",288,536870919]],["^15",[755,"^;","~u655b7378-89f0-472d-86d3-03e34da92847",536870919]],["^15",[756,"^Q","",536870919]],["^15",[756,"^O","^16",536870919]],["^15",[756,"^F",762,536870919]],["^15",[756,"^X",284,536870919]],["^15",[756,"^V",284,536870919]],["^15",[756,"^U",284,536870919]],["^15",[756,"^;","~u655b7378-c60a-423a-9d7a-127b1660e64f",536870919]],["^15",[757,"^Q","Autocorrection\n[[Brower]]s can autocorrect many common HTML errors, such as if we just put some text in a ``.html`` file then they would automatically add the ``<HTML>``, ``<Head>`` and ``<Body>`` tags enclosing it.\nSimilarly, it also auto closes tags.",536870919]],["^15",[757,"^O","^16",536870919]],["^15",[757,"^F",755,536870919]],["^15",[757,"^X",284,536870919]],["^15",[757,"^V",284,536870919]],["^15",[757,"^U",284,536870919]],["^15",[757,"^U",374,536870919]],["^15",[757,"^H",374,536870919]],["^15",[757,"^;","~u655b7378-c7a9-4ee4-a11e-22ca1317e0a0",536870919]],["^15",[758,"^Q","Comment\nA comment in HTML goes like so ``<!-- .... -->``\nFor ex.:\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n  The truth about elk.\n  <ol>\n    <li>An elk is a smart</li>\n    <!-- comment -->\n    <li>...and cunning animal!</li>\n  </ol>\n</body>\n</html>\n```\nComments still appear in the [[DOM]]\n![image.png](../assets/image_1687271848413_0.png)",536870919]],["^15",[758,"^O","^16",536870919]],["^15",[758,"^F",757,536870919]],["^15",[758,"^X",284,536870919]],["^15",[758,"^V",284,536870919]],["^15",[758,"^U",284,536870919]],["^15",[758,"^U",288,536870919]],["^15",[758,"^H",288,536870919]],["^15",[758,"^;","~u655b7378-4b07-4b57-843e-414f81ec582a",536870919]],["^15",[759,"^Q","Most useful [[HTML Element]]s \n``html`` element, which wraps the HTML content and is the rootmost element. It also has a ``lang`` attribute which denotes the language of the page.\n``head`` element which is a container for all the content that won't be visible as the content of the page, such as its title, encoding etc.\n``body`` element which finally holds the body of the Document, the content inside it is the content that is displayed on the page by the [[Brower]]s \n[[<script>]] element which holds the executable script (JS) in it. \n``meta`` This void element defines important metadata of the document.\n\nThere can be only single of all of these elements except script and meta element in a document.\nFor ex.:\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>My test page</title>\n  </head>\n  <body>\n    <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n  </body>\n</html>\n\n```",536870919]],["^15",[759,"^O","^16",536870919]],["^15",[759,"^F",764,536870919]],["^15",[759,"^X",284,536870919]],["^15",[759,"^V",284,536870919]],["^15",[759,"^U",283,536870919]],["^15",[759,"^U",284,536870919]],["^15",[759,"^U",374,536870919]],["^15",[759,"^U",383,536870919]],["^15",[759,"^H",283,536870919]],["^15",[759,"^H",374,536870919]],["^15",[759,"^H",383,536870919]],["^15",[759,"^;","~u655b7378-8a11-4748-b7c6-923af31089b2",536870919]],["^15",[760,"^Q","It is a text format understood by browsers natively, defined here [HTML](https://html.spec.whatwg.org/). \nThe file format is denoted with``.html``\nFor ex.:\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>My test page</title>\n  </head>\n  <body>\n    <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n  </body>\n</html>\n\n```\n\nHTML is a text markup language, meaning it gives a different look to content, and defines Elements and Attributes that do so.",536870919]],["^15",[760,"^O","^16",536870919]],["^15",[760,"^F",763,536870919]],["^15",[760,"^X",284,536870919]],["^15",[760,"^V",284,536870919]],["^15",[760,"^U",284,536870919]],["^15",[760,"^;","~u655b7378-2732-4bf4-be84-5a612be8ef76",536870919]],["^15",[761,"^Q","The ``<!DOCTYPE HTML>`` directive denotes a text file is an HTML Document and is necessary. It is not an HTML element but it is still a part of the [[DOM]].\nIt also affects the top-level Geometry properties of the [[DOM Class Property]] by giving odd behavior if not present.",536870919]],["^15",[761,"^O","^16",536870919]],["^15",[761,"^F",760,536870919]],["^15",[761,"^X",284,536870919]],["^15",[761,"^V",284,536870919]],["^15",[761,"^U",284,536870919]],["^15",[761,"^U",288,536870919]],["^15",[761,"^U",520,536870919]],["^15",[761,"^H",288,536870919]],["^15",[761,"^H",520,536870919]],["^15",[761,"^;","~u655b7378-c557-4cc1-a981-c1be5c77ff26",536870919]],["^15",[762,"^Q","Each of the [[HTML Element]]s has a ``style`` attribute, which is defined using [[CSS]].\nThat said, there are basically 2 ways to provide style to an [[HTML Element]]\nEither through the ``style`` attribute which can be provided by inline/internal/external CSS. \n\nOr through the ``class`` attribute.\nProviding a ``class`` attribute to an HTML element also allows it to be styled by the same CSS given it selects the class",536870919]],["^15",[762,"^O","^16",536870919]],["^15",[762,"^F",766,536870919]],["^15",[762,"^X",284,536870919]],["^15",[762,"^V",284,536870919]],["^15",[762,"^U",284,536870919]],["^15",[762,"^U",383,536870919]],["^15",[762,"^U",402,536870919]],["^15",[762,"^H",383,536870919]],["^15",[762,"^H",402,536870919]],["^15",[762,"^;","~u655b7378-2ecc-43d7-bc6b-fc02ee1acea8",536870919]],["^15",[763,"^Q","alias:: Hyper Text Markup Language\n\n",536870919]],["^15",[763,"^O","^16",536870919]],["^15",[763,"^1;",["^19",[]],536870919]],["^15",[763,"^F",284,536870919]],["^15",[763,"^X",284,536870919]],["^15",[763,"^V",284,536870919]],["^15",[763,"^U",284,536870919]],["^15",[763,"^U",753,536870919]],["^15",[763,"^:",true,536870919]],["^15",[763,"^?",["^ ","^18",["^19",["Hyper Text Markup Language"]]],536870919]],["^15",[763,"^J",["^18"],536870919]],["^15",[763,"^4",["^ ","^18","Hyper Text Markup Language"],536870919]],["^15",[763,"^H",753,536870919]],["^15",[763,"^;","~u655b7378-db05-45c6-8788-d64be7e1c280",536870919]],["^15",[764,"^Q","~``Elements`` and ``Tags``\nHTML Elements are text tokens that are parsed by HTML as meaningful entities, like ``keywords`` of [[ECMAScript]].  Then each tag is a part of an element, generally each element has 2 tags, an opening tag denoting where the element starts and an end tag where it finishes. The content within is the body of the element.\n\nFor ex.:\n```html\n<html>\n</html>\n```\nHere the element is ``html``, and it's start tag is ``<html>`` and end tag is ``</html>``.\nSome elements have a single tag as they don't need an explicit ending tag but they can still optionally use an ending tag. These are also called void elements.\nFor ex.:\n```html\n<img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n```\n\n Consequently, the ``tagName`` of any element, is the name of the element. So here the element is ``html`` so the tag ``<html>`` will have ``tagName`` of ``html``.\n![paragraph element including opening tag, content reading 'my cat is very grumpy', and a closing tag](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-small.png)\n\n* We can nest elements in HTML. Meaning a single element can have multiple children and so on for a variable depth (atleast >100).",536870919]],["^15",[764,"^O","^16",536870919]],["^15",[764,"^F",761,536870919]],["^15",[764,"^X",284,536870919]],["^15",[764,"^V",284,536870919]],["^15",[764,"^U",284,536870919]],["^15",[764,"^U",401,536870919]],["^15",[764,"^H",401,536870919]],["^15",[764,"^;","~u655b7378-5d7b-4899-a1c4-2734afe55a7e",536870919]],["^15",[765,"^Q","Attributes\nEvery HTML element has some ``attributes`` which are basically additional properties accepted by the said element. These modify the Element's functionality or are there just to hold some information. \n\nThese are generally ``key=value`` pairs but some are enabled just with a single keyword.\nFor ex.:\n```html\n...\n<div id=\"yo\"> </div>\n<!-- Here yo is the value to the id attribute of div element -->\n```\n![Paragraph opening tag with a class attribute highlighted: class=editor-note](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-attribute-small.png)\n\nAttribute names are case insensitive so we can use ``id`` or ``ID`` etc. it works.\n\nWhilst these depend on the element itself, there are some attributes which are common across all/most elements called [Global Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes).\n* ``id=\"<value>\"``: Unique Id for any given element. This Id can be used by both [[CSS]] and [[<script>]] to modify the element. If it is not unique then any element with the same Id can be picked at random by the script or CSS.\n\n* ``class=\"<value>\"``: Space separated list of identifiers that can be used to group elements together for the CSS and JS. Just like the ID provides a unique identifier for each element, the class attribute provides a/multiple common identifier(s) for each element.",536870919]],["^15",[765,"^O","^16",536870919]],["^15",[765,"^F",759,536870919]],["^15",[765,"^X",284,536870919]],["^15",[765,"^V",284,536870919]],["^15",[765,"^U",283,536870919]],["^15",[765,"^U",284,536870919]],["^15",[765,"^U",402,536870919]],["^15",[765,"^H",283,536870919]],["^15",[765,"^H",402,536870919]],["^15",[765,"^;","~u655b7378-c1b8-4da6-bfe0-1202873e5246",536870919]],["^15",[766,"^Q","[[HTML Element]]s",536870919]],["^15",[766,"^O","^16",536870919]],["^15",[766,"^F",758,536870919]],["^15",[766,"^X",284,536870919]],["^15",[766,"^V",284,536870919]],["^15",[766,"^U",284,536870919]],["^15",[766,"^U",383,536870919]],["^15",[766,"^H",383,536870919]],["^15",[766,"^;","~u655b7378-fcde-4e1f-9ed7-c807ff2e58eb",536870919]],["^15",[767,"^3","- An Iterable is an [[Object]] that has the [[Symbol]] method `[Symbol.Iterator]` or `[Symbol.asyncIterator]` in it with a value that is a function which returns an Object which has a method ``.next()`` which returns an Object with a value and a done property.\n  For ex.:\n  ```js\n  let x= { \n   a: 0,\n   b: 5,\n   [Symbol.iterator]: function() {\n    return {\n     a: this.a,\n     b: this.b,\n     next() {\n       if (a<=b) \n          return {done: false, value: this.a++};\n       else\n           return {done:true, value: this.a};\n      }\n    };\n   }\n  };\n  \n  for (let i of x) {...} //gets 0,1,2,3,4,5\n  ```\n- [[Async]] Iteration over [[Iterable]]\n  We use ``for await (let value of iterable)`` to [[Loop]] over async iterators.\n  An ``async`` iterator is an Object with a [[Symbol]] property ``Symbol.asyncIterator`` that works much like ``Symbol.Iterator`` but instead uses an async ``.next()``.\n  For ex.:\n  ```js\n  let x = {\n  start = 1,\n  end = 5,\n  [Symbol.asyncIterator](){\n  return {\n   start: this.start,\n   end: this.end,\n   async next() {\n      if(this.start <= this.end) return {done:false, value: this.start++}\n      else return {done: true}\n    }\n   }\n  }\n  }\n  - (async ()=> {\n  for await (let value of x){\n  console.log(value); //prints 1,2,3,4,5\n   }\n  })();\n  ```\n  ``Symbol.asyncIterator`` must have a ``next()`` that returns Promises, so either explicitly or implicitly using async keyword. Recall that we can't use ``await`` outside top-level of [[Module]]s or async functions or Promises, this is why we need to do this trick here to use ``for..await of``.\n- [[Async]] [[Generator Function]] [[Iterable]]\n  We simply make an async Iterable and use yield instead of return in its next. Then we can use an Async Iterable.\n  For ex.:\n  ```js\n  let range = {\n    from: 1,\n    to: 5,\n  \n    async* [Symbol.asyncIterator]() {\n      for(let value = this.from; value <= this.to; value++) {\n        yield value;\n      }\n    }\n  };\n  \n  (async () => {\n  \n    for await (let value of range) {\n      console.log(value); // 1, then 2, then 3, then 4, then 5\n    }\n  \n  })();\n  ```\n  Normal async generator functions can simply use ``async function* <name>(<params>){...}`` and for their values we need to use ``await <generator obj>.next(<optional arg>)`` to get the value.",536870919]],["^15",[767,"^17",1700492152973,536870919]],["^15",[767,"^Z","JS/pages/Iterable.md",536870919]],["^15",[768,"^Q","An Iterable is an [[Object]] that has the [[Symbol]] method `[Symbol.Iterator]` or `[Symbol.asyncIterator]` in it with a value that is a function which returns an Object which has a method ``.next()`` which returns an Object with a value and a done property.\nFor ex.:\n```js\nlet x= { \n a: 0,\n b: 5,\n [Symbol.iterator]: function() {\n  return {\n   a: this.a,\n   b: this.b,\n   next() {\n     if (a<=b) \n        return {done: false, value: this.a++};\n     else\n         return {done:true, value: this.a};\n    }\n  };\n }\n};\n\nfor (let i of x) {...} //gets 0,1,2,3,4,5\n```",536870919]],["^15",[768,"^O","^16",536870919]],["^15",[768,"^F",304,536870919]],["^15",[768,"^X",304,536870919]],["^15",[768,"^V",304,536870919]],["^15",[768,"^U",299,536870919]],["^15",[768,"^U",302,536870919]],["^15",[768,"^U",304,536870919]],["^15",[768,"^H",299,536870919]],["^15",[768,"^H",302,536870919]],["^15",[768,"^;","~u655b7378-9d2e-427d-a271-ef1205bfefa5",536870919]],["^15",[769,"^Q","[[Async]] Iteration over [[Iterable]]\nWe use ``for await (let value of iterable)`` to [[Loop]] over async iterators.\nAn ``async`` iterator is an Object with a [[Symbol]] property ``Symbol.asyncIterator`` that works much like ``Symbol.Iterator`` but instead uses an async ``.next()``.\nFor ex.:\n```js\nlet x = {\nstart = 1,\nend = 5,\n[Symbol.asyncIterator](){\nreturn {\n start: this.start,\n end: this.end,\n async next() {\n    if(this.start <= this.end) return {done:false, value: this.start++}\n    else return {done: true}\n  }\n }\n}\n}\n- (async ()=> {\nfor await (let value of x){\nconsole.log(value); //prints 1,2,3,4,5\n }\n})();\n```\n``Symbol.asyncIterator`` must have a ``next()`` that returns Promises, so either explicitly or implicitly using async keyword. Recall that we can't use ``await`` outside top-level of [[Module]]s or async functions or Promises, this is why we need to do this trick here to use ``for..await of``.",536870919]],["^15",[769,"^O","^16",536870919]],["^15",[769,"^F",768,536870919]],["^15",[769,"^X",304,536870919]],["^15",[769,"^V",304,536870919]],["^15",[769,"^U",287,536870919]],["^15",[769,"^U",300,536870919]],["^15",[769,"^U",302,536870919]],["^15",[769,"^U",304,536870919]],["^15",[769,"^U",341,536870919]],["^15",[769,"^H",287,536870919]],["^15",[769,"^H",300,536870919]],["^15",[769,"^H",302,536870919]],["^15",[769,"^H",304,536870919]],["^15",[769,"^H",341,536870919]],["^15",[769,"^;","~u655b7378-f326-40f5-a9be-271d89e0a219",536870919]],["^15",[770,"^Q","[[Async]] [[Generator Function]] [[Iterable]]\nWe simply make an async Iterable and use yield instead of return in its next. Then we can use an Async Iterable.\nFor ex.:\n```js\nlet range = {\n  from: 1,\n  to: 5,\n\n  async* [Symbol.asyncIterator]() {\n    for(let value = this.from; value <= this.to; value++) {\n      yield value;\n    }\n  }\n};\n\n(async () => {\n\n  for await (let value of range) {\n    console.log(value); // 1, then 2, then 3, then 4, then 5\n  }\n\n})();\n```\nNormal async generator functions can simply use ``async function* <name>(<params>){...}`` and for their values we need to use ``await <generator obj>.next(<optional arg>)`` to get the value.",536870919]],["^15",[770,"^O","^16",536870919]],["^15",[770,"^F",769,536870919]],["^15",[770,"^X",304,536870919]],["^15",[770,"^V",304,536870919]],["^15",[770,"^U",304,536870919]],["^15",[770,"^U",341,536870919]],["^15",[770,"^U",727,536870919]],["^15",[770,"^H",304,536870919]],["^15",[770,"^H",341,536870919]],["^15",[770,"^H",727,536870919]],["^15",[770,"^;","~u655b7378-5da9-4545-97a4-4a38c5730861",536870919]],["^15",[771,"^3","alias:: JavaScript Object Notation\n\n- General format to represent values and objects, as described in [RFC4627](https://datatracker.ietf.org/doc/html/rfc4627)\n- The JSON [[Object]] helps parse and create string from JS Objects. \n  ``JSON.parse(<str>, <optional reviver function (key,value)>)`` parses a str and returns an Object \n  ``JSON.stringify(obj, <optional replacer function (key,value)/array for selecting properties>, <optional int indent space count>)`` Creates a string from an Object. This String follows JSON formatting.\n- The ``.stringify(...)`` method accepts an optional replacer array, only properties given in this array are taken from the object. Or if a function then maps all keys to new values returned by it in the resulting string.\n  For ex.:\n  ```js\n  let meetup = {\n    title: \"Conference\",\n    participants: [{name: \"John\"}, {name: \"Alice\"}],\n  };\n  \n  \n  console.log( JSON.stringify(meetup, ['title', 'participants']) );\n  // {\"title\":\"Conference\",\"participants\":[{},{}]}\n  ```\n- The ``.stringify()`` first checks if the [[Object]] has a ``toJSON()`` [[Function]] in it. If it does, then it calls it and it's result is the return of the function instead.\n  ```js\n  let x= {\n   a:2,\n   toJSON() {\n    return this.a;\n    }\n  };\n  \n  console.log(JSON.stringify(x)); //prints 2\n  ```\n- Similar to ``.stringify(...)``, ``.parse(...)`` accepts a method. Each key and value picked is passed to it and the value returned by the function is assigned to the key in the resulting object.\n-",536870919]],["^15",[771,"^17",1700492152992,536870919]],["^15",[771,"^Z","JS/pages/JSON.md",536870919]],["^15",[772,"^5",596,536870919]],["^15",[772,"^K",1700492152991,536870919]],["^15",[772,"^@",false,536870919]],["^15",[772,"^Y","javascript object notation",536870919]],["^15",[772,"^11","JavaScript Object Notation",536870919]],["^15",[772,"^B",1700492152991,536870919]],["^15",[772,"^;","~u655b7378-056c-465f-97ff-bc678efc5844",536870919]],["^15",[773,"^Q","alias:: JavaScript Object Notation\n\n",536870919]],["^15",[773,"^O","^16",536870919]],["^15",[773,"^1;",["^19",[]],536870919]],["^15",[773,"^F",596,536870919]],["^15",[773,"^X",596,536870919]],["^15",[773,"^V",596,536870919]],["^15",[773,"^U",596,536870919]],["^15",[773,"^U",772,536870919]],["^15",[773,"^:",true,536870919]],["^15",[773,"^?",["^ ","^18",["^19",["JavaScript Object Notation"]]],536870919]],["^15",[773,"^J",["^18"],536870919]],["^15",[773,"^4",["^ ","^18","JavaScript Object Notation"],536870919]],["^15",[773,"^H",772,536870919]],["^15",[773,"^;","~u655b7378-185f-4bb9-9c23-d7d144d3f87f",536870919]],["^15",[774,"^Q","General format to represent values and objects, as described in [RFC4627](https://datatracker.ietf.org/doc/html/rfc4627)",536870919]],["^15",[774,"^O","^16",536870919]],["^15",[774,"^F",773,536870919]],["^15",[774,"^X",596,536870919]],["^15",[774,"^V",596,536870919]],["^15",[774,"^U",596,536870919]],["^15",[774,"^;","~u655b7378-b8f7-435e-9b04-d7a9a0dc3c15",536870919]],["^15",[775,"^Q","The JSON [[Object]] helps parse and create string from JS Objects. \n``JSON.parse(<str>, <optional reviver function (key,value)>)`` parses a str and returns an Object \n``JSON.stringify(obj, <optional replacer function (key,value)/array for selecting properties>, <optional int indent space count>)`` Creates a string from an Object. This String follows JSON formatting.",536870919]],["^15",[775,"^O","^16",536870919]],["^15",[775,"^F",774,536870919]],["^15",[775,"^X",596,536870919]],["^15",[775,"^V",596,536870919]],["^15",[775,"^U",299,536870919]],["^15",[775,"^U",596,536870919]],["^15",[775,"^H",299,536870919]],["^15",[775,"^;","~u655b7378-f253-4240-853a-8653ccf0a732",536870919]],["^15",[776,"^Q","The ``.stringify(...)`` method accepts an optional replacer array, only properties given in this array are taken from the object. Or if a function then maps all keys to new values returned by it in the resulting string.\nFor ex.:\n```js\nlet meetup = {\n  title: \"Conference\",\n  participants: [{name: \"John\"}, {name: \"Alice\"}],\n};\n\n\nconsole.log( JSON.stringify(meetup, ['title', 'participants']) );\n// {\"title\":\"Conference\",\"participants\":[{},{}]}\n```",536870919]],["^15",[776,"^O","^16",536870919]],["^15",[776,"^F",775,536870919]],["^15",[776,"^X",596,536870919]],["^15",[776,"^V",596,536870919]],["^15",[776,"^U",596,536870919]],["^15",[776,"^;","~u655b7378-cc27-4ae6-9602-e8e1baf98592",536870919]],["^15",[777,"^Q","The ``.stringify()`` first checks if the [[Object]] has a ``toJSON()`` [[Function]] in it. If it does, then it calls it and it's result is the return of the function instead.\n```js\nlet x= {\n a:2,\n toJSON() {\n  return this.a;\n  }\n};\n\nconsole.log(JSON.stringify(x)); //prints 2\n```",536870919]],["^15",[777,"^O","^16",536870919]],["^15",[777,"^F",776,536870919]],["^15",[777,"^X",596,536870919]],["^15",[777,"^V",596,536870919]],["^15",[777,"^U",163,536870919]],["^15",[777,"^U",299,536870919]],["^15",[777,"^U",596,536870919]],["^15",[777,"^H",163,536870919]],["^15",[777,"^H",299,536870919]],["^15",[777,"^;","~u655b7378-4f37-437e-9bd0-5c0bd958b21f",536870919]],["^15",[778,"^Q","Similar to ``.stringify(...)``, ``.parse(...)`` accepts a method. Each key and value picked is passed to it and the value returned by the function is assigned to the key in the resulting object.",536870919]],["^15",[778,"^O","^16",536870919]],["^15",[778,"^F",777,536870919]],["^15",[778,"^X",596,536870919]],["^15",[778,"^V",596,536870919]],["^15",[778,"^U",596,536870919]],["^15",[778,"^;","~u655b7378-860a-45df-9d6d-ab68107723f2",536870919]],["^15",[779,"^Q","",536870919]],["^15",[779,"^O","^16",536870919]],["^15",[779,"^F",778,536870919]],["^15",[779,"^X",596,536870919]],["^15",[779,"^V",596,536870919]],["^15",[779,"^U",596,536870919]],["^15",[779,"^;","~u655b7378-aae3-4f05-b01f-5d7b69109ba3",536870919]],["^15",[780,"^3","- In JS, all code is associated with a hidden internal [[Object]] called the ``Lexical Environment``.\n  It is a theoretical construct [Lexical Environment](https://tc39.es/ecma262/#sec-lexical-environments)  that exists only in the spec to define the behavior and is not an actual Object.\n- It has 2 parts,\n  * [[Environment Record]]: An [[Object]] that stores all local variables as properties, and some other information like the values of [[this]].\n  For ex.:\n  ![image.png](../assets/image_1686157370645_0.png)\n   \n  * A reference to the outer Lexical Environment.\n  \n  There's a ``Global Lexical Environment``, that is associated with the whole JS script. It's outer reference is [[null]] because it has no parent Lexical Environment to refer to.\n- Variable lifetime\n  ![image.png](../assets/image_1686171768924_0.png)\n  \n  JS already stores a declared variable's property in the [[Environment Record]] even before it is actually declared, this is thanks to the JIT [[Compilation]]. There are many [[Optimization]]s and tricks used by the engine to remove unused variables and modify parts, to have the same effect as intended but with lower costs.\n  This is also to say, variables in JS are rather, properties of the [[Environment Record]] [[Object]] and we are simply using that property to hold values.\n- [[Function]] lifetime\n  Unlike the variable lifetime, a function declaration is already initialized in the [[Environment Record]] if it is declared anywhere. This is why Function declarations can be called even before appearing in the code in the same [[Scope]].\n  ![image.png](../assets/image_1686172495303_0.png)\n  \n  This is because function is also a value in JS, and is instantly fully initialized.\n  \n  Function expressions are tied to variables so they follow Variable lifetime.\n- Reference to the outer Lexical Environment\n  Whenever a new LE is created, it has a reference to the outer LE.\n  ![image.png](../assets/image_1686172648317_0.png)\n  \n  This is how this example is valid:\n  ```js\n  function yo() {\n    let x = 1;\n    return function() {\n      console.log(x++);\n    }\n  }\n  \n  let y = yo();\n  y();  //prints 1\n  y(); // 2\n  y(); // 3\n  ```\n  as yo()'s LE is stored by the returned function. \n  \n  This is also to say, when a variable is to be searched, it is searched from within the current to the outermost [[Environment Record]].\n  \n  More specifically, all functions have a hidden [[Environment Object]]\n  ![image.png](../assets/image_1686173328589_0.png)\n  This is always set once, that is when a function is created and holds the outer [[Environment Record]].\n  So here it is ``counter.[[Environment]]`` that has the property ``count`` in it.\n  And in our code, ``y.[[Environment]]`` was holding the property x.\n  (Note, the property itself is called ``[[Environment]]`` so accessing it with ``<obj>.`` is using the dot access [[Operator]] and not the ``[ ]`` access Operator )\n  \n  A variable is only updated in the LE it exists in.\n  \n  There is a general term for this concept where a [[Function]] remembers variables and identifiers in its outer [[Scope]] and can modify it, such functions are called ``Closures``. In JS all Functions are closures as they can remember their outer scope using the [[Environment Object]] .\n- Just like normal [[Object]]s, a LE is only subject to [[Garbage Collection]] when it becomes unreachable. This means that LEs, with them all the variables and functions, are kept in the memory if they have just a single reference to them.\n  For ex.:\n  ```js\n  function f() {\n    let value = Math.random();\n  \n    return function() { alert(value); };\n  }\n  \n  let arr = [f(), f(), f()];\n  ```\n  Here, 3 LEs are stored in arr and they aren't cleared up until arr itself has references to them.\n  \n  JS engines perform [[Optimization]] on this as well, such as in V8 engine, while debugging, the [[Environment Object]]'s properties are optimized out.\n  For ex.:\n  Running this code and using Chrome Debugger \n  ```js\n  let value = \"Surprise!\";\n  \n  function f() {\n    let value = \"the closest value\";\n  \n    function g() {\n      debugger; // in console: type alert(value); Surprise!\n    }\n  \n    return g;\n  }\n  \n  let g = f();\n  g();\n  ```\n  \n  results in\n  ![image.png](../assets/image_1686174526926_0.png)\n-",536870919]],["^15",[780,"^17",1700492153024,536870919]],["^15",[780,"^Z","JS/pages/Lexical Environment.md",536870919]],["^15",[781,"^Q","In JS, all code is associated with a hidden internal [[Object]] called the ``Lexical Environment``.\nIt is a theoretical construct [Lexical Environment](https://tc39.es/ecma262/#sec-lexical-environments)  that exists only in the spec to define the behavior and is not an actual Object.",536870919]],["^15",[781,"^O","^16",536870919]],["^15",[781,"^F",669,536870919]],["^15",[781,"^X",669,536870919]],["^15",[781,"^V",669,536870919]],["^15",[781,"^U",299,536870919]],["^15",[781,"^U",669,536870919]],["^15",[781,"^H",299,536870919]],["^15",[781,"^;","~u655b7379-0868-4828-9484-e6c1a2153ff9",536870919]],["^15",[782,"^Q","It has 2 parts,\n* [[Environment Record]]: An [[Object]] that stores all local variables as properties, and some other information like the values of [[this]].\nFor ex.:\n![image.png](../assets/image_1686157370645_0.png)\n \n* A reference to the outer Lexical Environment.\n\nThere's a ``Global Lexical Environment``, that is associated with the whole JS script. It's outer reference is [[null]] because it has no parent Lexical Environment to refer to.",536870919]],["^15",[782,"^O","^16",536870919]],["^15",[782,"^F",781,536870919]],["^15",[782,"^X",669,536870919]],["^15",[782,"^V",669,536870919]],["^15",[782,"^U",299,536870919]],["^15",[782,"^U",400,536870919]],["^15",[782,"^U",484,536870919]],["^15",[782,"^U",654,536870919]],["^15",[782,"^U",669,536870919]],["^15",[782,"^H",299,536870919]],["^15",[782,"^H",400,536870919]],["^15",[782,"^H",484,536870919]],["^15",[782,"^H",654,536870919]],["^15",[782,"^;","~u655b7379-66b1-44cb-8cbe-01431e8f33b2",536870919]],["^15",[783,"^Q","Variable lifetime\n![image.png](../assets/image_1686171768924_0.png)\n\nJS already stores a declared variable's property in the [[Environment Record]] even before it is actually declared, this is thanks to the JIT [[Compilation]]. There are many [[Optimization]]s and tricks used by the engine to remove unused variables and modify parts, to have the same effect as intended but with lower costs.\nThis is also to say, variables in JS are rather, properties of the [[Environment Record]] [[Object]] and we are simply using that property to hold values.",536870919]],["^15",[783,"^O","^16",536870919]],["^15",[783,"^F",782,536870919]],["^15",[783,"^X",669,536870919]],["^15",[783,"^V",669,536870919]],["^15",[783,"^U",299,536870919]],["^15",[783,"^U",347,536870919]],["^15",[783,"^U",492,536870919]],["^15",[783,"^U",654,536870919]],["^15",[783,"^U",669,536870919]],["^15",[783,"^H",299,536870919]],["^15",[783,"^H",347,536870919]],["^15",[783,"^H",492,536870919]],["^15",[783,"^H",654,536870919]],["^15",[783,"^;","~u655b7379-6834-439c-9de3-3606c24f53e8",536870919]],["^15",[784,"^Q","[[Function]] lifetime\nUnlike the variable lifetime, a function declaration is already initialized in the [[Environment Record]] if it is declared anywhere. This is why Function declarations can be called even before appearing in the code in the same [[Scope]].\n![image.png](../assets/image_1686172495303_0.png)\n\nThis is because function is also a value in JS, and is instantly fully initialized.\n\nFunction expressions are tied to variables so they follow Variable lifetime.",536870919]],["^15",[784,"^O","^16",536870919]],["^15",[784,"^F",783,536870919]],["^15",[784,"^X",669,536870919]],["^15",[784,"^V",669,536870919]],["^15",[784,"^U",163,536870919]],["^15",[784,"^U",345,536870919]],["^15",[784,"^U",654,536870919]],["^15",[784,"^U",669,536870919]],["^15",[784,"^H",163,536870919]],["^15",[784,"^H",345,536870919]],["^15",[784,"^H",654,536870919]],["^15",[784,"^;","~u655b7379-4c88-4366-a0aa-8b7cb3dcce6e",536870919]],["^15",[785,"^Q","Reference to the outer Lexical Environment\nWhenever a new LE is created, it has a reference to the outer LE.\n![image.png](../assets/image_1686172648317_0.png)\n\nThis is how this example is valid:\n```js\nfunction yo() {\n  let x = 1;\n  return function() {\n    console.log(x++);\n  }\n}\n\nlet y = yo();\ny();  //prints 1\ny(); // 2\ny(); // 3\n```\nas yo()'s LE is stored by the returned function. \n\nThis is also to say, when a variable is to be searched, it is searched from within the current to the outermost [[Environment Record]].\n\nMore specifically, all functions have a hidden [[Environment Object]]\n![image.png](../assets/image_1686173328589_0.png)\nThis is always set once, that is when a function is created and holds the outer [[Environment Record]].\nSo here it is ``counter.[[Environment]]`` that has the property ``count`` in it.\nAnd in our code, ``y.[[Environment]]`` was holding the property x.\n(Note, the property itself is called ``[[Environment]]`` so accessing it with ``<obj>.`` is using the dot access [[Operator]] and not the ``[ ]`` access Operator )\n\nA variable is only updated in the LE it exists in.\n\nThere is a general term for this concept where a [[Function]] remembers variables and identifiers in its outer [[Scope]] and can modify it, such functions are called ``Closures``. In JS all Functions are closures as they can remember their outer scope using the [[Environment Object]] .",536870919]],["^15",[785,"^O","^16",536870919]],["^15",[785,"^F",784,536870919]],["^15",[785,"^X",669,536870919]],["^15",[785,"^V",669,536870919]],["^15",[785,"^U",163,536870919]],["^15",[785,"^U",339,536870919]],["^15",[785,"^U",345,536870919]],["^15",[785,"^U",653,536870919]],["^15",[785,"^U",654,536870919]],["^15",[785,"^U",669,536870919]],["^15",[785,"^H",163,536870919]],["^15",[785,"^H",339,536870919]],["^15",[785,"^H",345,536870919]],["^15",[785,"^H",653,536870919]],["^15",[785,"^H",654,536870919]],["^15",[785,"^;","~u655b7379-092e-45f9-b8e5-7dcebfc76611",536870919]],["^15",[786,"^Q","Just like normal [[Object]]s, a LE is only subject to [[Garbage Collection]] when it becomes unreachable. This means that LEs, with them all the variables and functions, are kept in the memory if they have just a single reference to them.\nFor ex.:\n```js\nfunction f() {\n  let value = Math.random();\n\n  return function() { alert(value); };\n}\n\nlet arr = [f(), f(), f()];\n```\nHere, 3 LEs are stored in arr and they aren't cleared up until arr itself has references to them.\n\nJS engines perform [[Optimization]] on this as well, such as in V8 engine, while debugging, the [[Environment Object]]'s properties are optimized out.\nFor ex.:\nRunning this code and using Chrome Debugger \n```js\nlet value = \"Surprise!\";\n\nfunction f() {\n  let value = \"the closest value\";\n\n  function g() {\n    debugger; // in console: type alert(value); Surprise!\n  }\n\n  return g;\n}\n\nlet g = f();\ng();\n```\n\nresults in\n![image.png](../assets/image_1686174526926_0.png)",536870919]],["^15",[786,"^O","^16",536870919]],["^15",[786,"^F",785,536870919]],["^15",[786,"^X",669,536870919]],["^15",[786,"^V",669,536870919]],["^15",[786,"^U",299,536870919]],["^15",[786,"^U",347,536870919]],["^15",[786,"^U",606,536870919]],["^15",[786,"^U",653,536870919]],["^15",[786,"^U",669,536870919]],["^15",[786,"^H",299,536870919]],["^15",[786,"^H",347,536870919]],["^15",[786,"^H",606,536870919]],["^15",[786,"^H",653,536870919]],["^15",[786,"^;","~u655b7379-5161-4370-ba0f-d5f0d4eba215",536870919]],["^15",[787,"^Q","",536870919]],["^15",[787,"^O","^16",536870919]],["^15",[787,"^F",786,536870919]],["^15",[787,"^X",669,536870919]],["^15",[787,"^V",669,536870919]],["^15",[787,"^U",669,536870919]],["^15",[787,"^;","~u655b7379-a749-4c3e-bf4c-d8d0ecc52b42",536870919]],["^15",[788,"^3","- The standard,\n  ``for(init; bool; step)`` \n  ``while(<bool>) {...}``\n  and\n  ``do {...} while (<bool>);``\n- [[break]] and [[continue]] directives are supported. Work like in other languages, they break/continue the immediately above loop.\n- for..in Loop\n  With [[Object]]s we can use this loop to loop over properties of the object.\n  For ex.:\n  ```js\n  let x= {...};\n  for(let key in x) {...} //use x[key] to access values or just key to access property names.\n  ```\n  It doesn't loop over [[Symbol]] properties.\n- for..of Loop\n  With [[String]]s we can use this loop to loop over the characters of the String.\n  For ex.:\n  ```js\n  let x = \"...\";\n  for (let char of x) {...}\n  ```\n- In general, for..of can be used with any [[Object]] that implements the [[Symbol]] Symbol.iterator. This property should hold a function that returns an Object which has a ``next()`` [[Function]] in it. This ``next()`` function then must return an Object with 2 keys,\n  {\n   done: boolean,\n   value: any,\n  };\n  \n  For ex.:\n  ```js\n  let x= { \n   a: 0,\n   b: 5,\n   [Symbol.iterator]: function() {\n    return {\n     a: this.a,\n     b: this.b,\n     next() {\n       if (a<=b) \n          return {done: false, value: this.a++};\n       else\n           return {done:true, value: this.a};\n      }\n    };\n   }\n  };\n  \n  for (let i of x) {...} //gets 0,1,2,3,4,5\n  \n  ```\n  This [[Object]] is called an [[Iterable]].\n  \n  for..of calls the function associated with Symbol.Iterator once and parses the Object returned from it.\n  Then it call's the next() method of that Object and keeps calling it until it returns an Object with done: true.\n  \n  This is also to say that we can simply use any Object's iterator explicitly as well.\n  For ex.:\n  ```js\n  let x = \"abc\";\n  let it= x[Symbol.iterator];\n  let val = it[next]();\n  while(!val[done]) {...};\n  ```\n- We can also use [[Generator Function]]s with ``Symbol.Iterator``\n  For ex.:\n  ```js\n  let x = {\n   start: 0,\n   end: 5,\n   *[Symbol.Iterator]() {\n     for(let value= start; start<= end; ++start)\n     yield value;\n    }\n  }; //works \n  ```\n-",536870919]],["^15",[788,"^17",1700492153043,536870919]],["^15",[788,"^Z","JS/pages/Loop.md",536870919]],["^15",[789,"^K",1700492153043,536870919]],["^15",[789,"^@",false,536870919]],["^15",[789,"^Y","continue",536870919]],["^15",[789,"^11","continue",536870919]],["^15",[789,"^B",1700492153043,536870919]],["^15",[789,"^;","~u655b7379-29a1-41f9-8ef9-03b71dfbce03",536870919]],["^15",[790,"^Q","~``loop``, ``while`` and ``for``. ``break`` and ``continue`` are also expressions, and can be\nused with loops for some neat operations.",536870950]],["^15",[790,"^O","^16",536870919]],["^15",[790,"^F",300,536870919]],["^15",[790,"^X",300,536870919]],["^15",[790,"^V",300,536870919]],["^15",[790,"^U",300,536870919]],["^15",[790,"^;","~u655b7379-d502-470e-a3da-d035ccd3fdf2",536870919]],["^15",[796,"^Q","",536870919]],["^15",[796,"^O","^16",536870919]],["^15",[796,"^F",1722,536870950]],["^15",[796,"^X",300,536870919]],["^15",[796,"^V",300,536870919]],["^15",[796,"^U",300,536870919]],["^15",[796,"^;","~u655b7379-8dc7-43c5-bd45-660b7ae82e93",536870919]],["^15",[797,"^3","- An [[Object]] like data structure.\n  Yes, it is still just an Object but the main specialization are the methods in it that allow keys of any type, even Object and [[NaN]] .\n  To achieve this, Map uses [SameValueZero](https://tc39.github.io/ecma262/#sec-samevaluezero) alg.\n- Methods:\n  * [`new Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) – creates the map.\n  * [`map.set(key, value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set) – stores the value by the key.\n  * [`map.get(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) – returns the value by the key, `undefined` if `key` doesn’t exist in map.\n  * [`map.has(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) – returns `true` if the `key` exists, `false` otherwise.\n  * [`map.delete(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete) – removes the element (the key/value pair) by the key.\n  * [`map.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear) – removes everything from the map.\n  * [`map.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size) – returns the current element count.\n  * [`map.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys) – returns an iterable for keys,\n  * [`map.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values) – returns an iterable for values,\n  * [`map.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries) – returns an iterable for entries `[key, value]`, it’s used by default in `for..of`.\n  * ``.forEach(value,key,map)``\n- Map can be created like so as well\n  ```js\n  let map = new Map([\n    ['1',  'str1'],\n    [1,    'num1'],\n    [true, 'bool1']\n  ]);\n  ```\n- [[Object]] has a method ``Object.entries(<obj>)`` that returns an array of K:V pairs. This can be used to directly create a Map from an Object.\n- Similarly, [[Object]] also has an ``Object.fromEntries(<array of K:V pairs>)`` that returns an Object from the given K:V pairs. Using a ``<map>.entries()``, we can directly convert a Map to an Object.\n-",536870919]],["^15",[797,"^17",1700492153064,536870919]],["^15",[797,"^Z","JS/pages/Map.md",536870919]],["^15",[798,"^Q","An [[Object]] like data structure.\nYes, it is still just an Object but the main specialization are the methods in it that allow keys of any type, even Object and [[NaN]] .\nTo achieve this, Map uses [SameValueZero](https://tc39.github.io/ecma262/#sec-samevaluezero) alg.",536870919]],["^15",[798,"^O","^16",536870919]],["^15",[798,"^F",597,536870919]],["^15",[798,"^X",597,536870919]],["^15",[798,"^V",597,536870919]],["^15",[798,"^U",299,536870919]],["^15",[798,"^U",485,536870919]],["^15",[798,"^U",597,536870919]],["^15",[798,"^H",299,536870919]],["^15",[798,"^H",485,536870919]],["^15",[798,"^;","~u655b7379-81f7-4d7e-81d3-7152cc3e6093",536870919]],["^15",[799,"^Q","Methods:\n* [`new Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) – creates the map.\n* [`map.set(key, value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set) – stores the value by the key.\n* [`map.get(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) – returns the value by the key, `undefined` if `key` doesn’t exist in map.\n* [`map.has(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) – returns `true` if the `key` exists, `false` otherwise.\n* [`map.delete(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete) – removes the element (the key/value pair) by the key.\n* [`map.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear) – removes everything from the map.\n* [`map.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size) – returns the current element count.\n* [`map.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys) – returns an iterable for keys,\n* [`map.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values) – returns an iterable for values,\n* [`map.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries) – returns an iterable for entries `[key, value]`, it’s used by default in `for..of`.\n* ``.forEach(value,key,map)``",536870919]],["^15",[799,"^O","^16",536870919]],["^15",[799,"^F",798,536870919]],["^15",[799,"^X",597,536870919]],["^15",[799,"^V",597,536870919]],["^15",[799,"^U",597,536870919]],["^15",[799,"^;","~u655b7379-9fd6-45af-bcbb-69abe364c382",536870919]],["^15",[800,"^Q","Map can be created like so as well\n```js\nlet map = new Map([\n  ['1',  'str1'],\n  [1,    'num1'],\n  [true, 'bool1']\n]);\n```",536870919]],["^15",[800,"^O","^16",536870919]],["^15",[800,"^F",799,536870919]],["^15",[800,"^X",597,536870919]],["^15",[800,"^V",597,536870919]],["^15",[800,"^U",597,536870919]],["^15",[800,"^;","~u655b7379-bb95-409a-aa70-af0c68b70f3d",536870919]],["^15",[801,"^Q","[[Object]] has a method ``Object.entries(<obj>)`` that returns an array of K:V pairs. This can be used to directly create a Map from an Object.",536870919]],["^15",[801,"^O","^16",536870919]],["^15",[801,"^F",800,536870919]],["^15",[801,"^X",597,536870919]],["^15",[801,"^V",597,536870919]],["^15",[801,"^U",299,536870919]],["^15",[801,"^U",597,536870919]],["^15",[801,"^H",299,536870919]],["^15",[801,"^;","~u655b7379-ffa8-42c4-a6b3-023749d6cc7b",536870919]],["^15",[802,"^Q","Similarly, [[Object]] also has an ``Object.fromEntries(<array of K:V pairs>)`` that returns an Object from the given K:V pairs. Using a ``<map>.entries()``, we can directly convert a Map to an Object.",536870919]],["^15",[802,"^O","^16",536870919]],["^15",[802,"^F",801,536870919]],["^15",[802,"^X",597,536870919]],["^15",[802,"^V",597,536870919]],["^15",[802,"^U",299,536870919]],["^15",[802,"^U",597,536870919]],["^15",[802,"^H",299,536870919]],["^15",[802,"^;","~u655b7379-8d62-431d-9763-faa8e71e6cb3",536870919]],["^15",[803,"^Q","",536870919]],["^15",[803,"^O","^16",536870919]],["^15",[803,"^F",802,536870919]],["^15",[803,"^X",597,536870919]],["^15",[803,"^V",597,536870919]],["^15",[803,"^U",597,536870919]],["^15",[803,"^;","~u655b7379-b58e-4fd3-b968-155feb9c2c5e",536870919]],["^15",[804,"^3","- As JS is a single-threaded language, tasks need to be managed in different queues depending on if they are [[Asynchronous]] or not. [[Scheduling]] also makes use of these queues.\n- ``Event Loop``\n  In JS, all tasks are put in an infinite loop known as Event Loop and processed sequentially. \n  The engine waits for tasks in this loop, then executes them FIFO whilst more tasks are appended to the end. If there's no task in the event loop, sleep.\n  The queue is aka ``Macrotask Queue`` and the flow looks like so\n  ![image.png](../assets/image_1687018885768_0.png)\n  \n  This includes everything, even things like [[Rendering]] the changes to [[DOM]] as that task is appended in it too and only after the tasks before it are processed is the DOM modified and rendered. However, Rendering is done after a certain point in macrotask queue when the microtask queue is started and finished.\n  \n  This means, if a task takes too long in the macrotask queue, it puts the entire [[WebPage]] on a pause, even [[Browser Event]]s can't be handled as the event handlers are also in this queue.\n  \n  This is why [[Asynchronous]] tasks are put in a separate queue with only their callers in the macrotask queue, like we can see ``setTimeout`` above. So the macrotask ``setTimeout`` puts stuff in the other queue and finishes then the macrotask queue continues.\n- ``Microtask Queue``\n  aka PromiseJobs\n  This is the queue [[Scheduling]] tasks like ``setTimeout`` and [[Asynchronous]] Promises and the like use. \n  Immediately after finishing the macrotask queue until a certain point, the microtask queue is starts getting processed. Further macrotask queue tasks are appended to it as normal but until the microtask queue finishes, the event loop doesn't switch back to the macrotask queue, yes just like the macrotask queue if there are any more tasks added to the microtask queue then they wouldn't be processed until the next switchover from macrotask queue.\n  For ex.:\n  ```js\n  setTimeout(() => console.log(\"timeout\"));\n  \n  Promise.resolve()\n    .then(() => console.log(\"promise\"));\n  \n  console.log(\"code\");\n  //will prints code then timeout then promise\n  ```\n  So the event loop with microtasks and [[Rendering]] look like so \n  ![image.png](../assets/image_1687019511714_0.png)\n  \n  * We can directly add tasks to the microtask queue with ``queueMicrotask(<function>)``\n- [[Web Worker]]s can be used if we don't want to block the main thread. They don't use either of the queues.",536870919]],["^15",[804,"^17",1700492153085,536870919]],["^15",[804,"^Z","JS/pages/Message Queue.md",536870919]],["^15",[805,"^K",1700492153084,536870919]],["^15",[805,"^@",false,536870919]],["^15",[805,"^Y","webpage",536870919]],["^15",[805,"^11","WebPage",536870919]],["^15",[805,"^B",1700492153084,536870919]],["^15",[805,"^;","~u655b7379-ba44-47ab-aa18-eae102a4ee79",536870919]],["^15",[806,"^K",1700492153085,536870919]],["^15",[806,"^[",1602,536870920]],["^15",[806,"^@",false,536870919]],["^15",[806,"^Y","rendering",536870919]],["^15",[806,"^11","Rendering",536870919]],["^15",[806,"^B",1700492153085,536870919]],["^15",[806,"^;","~u655b737c-9c7e-4654-b17f-f32594479039",536870920]],["^15",[807,"^Q","As JS is a single-threaded language, tasks need to be managed in different queues depending on if they are [[Asynchronous]] or not. [[Scheduling]] also makes use of these queues.",536870919]],["^15",[807,"^O","^16",536870919]],["^15",[807,"^F",343,536870919]],["^15",[807,"^X",343,536870919]],["^15",[807,"^V",343,536870919]],["^15",[807,"^U",343,536870919]],["^15",[807,"^U",346,536870919]],["^15",[807,"^U",403,536870919]],["^15",[807,"^H",346,536870919]],["^15",[807,"^H",403,536870919]],["^15",[807,"^;","~u655b7379-7c6b-4d64-988b-8c1576fa6a68",536870919]],["^15",[808,"^Q","~``Event Loop``\nIn JS, all tasks are put in an infinite loop known as Event Loop and processed sequentially. \nThe engine waits for tasks in this loop, then executes them FIFO whilst more tasks are appended to the end. If there's no task in the event loop, sleep.\nThe queue is aka ``Macrotask Queue`` and the flow looks like so\n![image.png](../assets/image_1687018885768_0.png)\n\nThis includes everything, even things like [[Rendering]] the changes to [[DOM]] as that task is appended in it too and only after the tasks before it are processed is the DOM modified and rendered. However, Rendering is done after a certain point in macrotask queue when the microtask queue is started and finished.\n\nThis means, if a task takes too long in the macrotask queue, it puts the entire [[WebPage]] on a pause, even [[Browser Event]]s can't be handled as the event handlers are also in this queue.\n\nThis is why [[Asynchronous]] tasks are put in a separate queue with only their callers in the macrotask queue, like we can see ``setTimeout`` above. So the macrotask ``setTimeout`` puts stuff in the other queue and finishes then the macrotask queue continues.",536870919]],["^15",[808,"^O","^16",536870919]],["^15",[808,"^F",807,536870919]],["^15",[808,"^X",343,536870919]],["^15",[808,"^V",343,536870919]],["^15",[808,"^U",285,536870919]],["^15",[808,"^U",288,536870919]],["^15",[808,"^U",343,536870919]],["^15",[808,"^U",346,536870919]],["^15",[808,"^U",805,536870919]],["^15",[808,"^U",806,536870919]],["^15",[808,"^H",285,536870919]],["^15",[808,"^H",288,536870919]],["^15",[808,"^H",346,536870919]],["^15",[808,"^H",805,536870919]],["^15",[808,"^H",806,536870919]],["^15",[808,"^;","~u655b7379-bfbb-48ee-834d-a0377b835119",536870919]],["^15",[809,"^Q","~``Microtask Queue``\naka PromiseJobs\nThis is the queue [[Scheduling]] tasks like ``setTimeout`` and [[Asynchronous]] Promises and the like use. \nImmediately after finishing the macrotask queue until a certain point, the microtask queue is starts getting processed. Further macrotask queue tasks are appended to it as normal but until the microtask queue finishes, the event loop doesn't switch back to the macrotask queue, yes just like the macrotask queue if there are any more tasks added to the microtask queue then they wouldn't be processed until the next switchover from macrotask queue.\nFor ex.:\n```js\nsetTimeout(() => console.log(\"timeout\"));\n\nPromise.resolve()\n  .then(() => console.log(\"promise\"));\n\nconsole.log(\"code\");\n//will prints code then timeout then promise\n```\nSo the event loop with microtasks and [[Rendering]] look like so \n![image.png](../assets/image_1687019511714_0.png)\n\n* We can directly add tasks to the microtask queue with ``queueMicrotask(<function>)``",536870919]],["^15",[809,"^O","^16",536870919]],["^15",[809,"^F",808,536870919]],["^15",[809,"^X",343,536870919]],["^15",[809,"^V",343,536870919]],["^15",[809,"^U",343,536870919]],["^15",[809,"^U",346,536870919]],["^15",[809,"^U",403,536870919]],["^15",[809,"^U",806,536870919]],["^15",[809,"^H",346,536870919]],["^15",[809,"^H",403,536870919]],["^15",[809,"^H",806,536870919]],["^15",[809,"^;","~u655b7379-a7cf-4a02-93d5-79932bb785fc",536870919]],["^15",[810,"^Q","[[Web Worker]]s can be used if we don't want to block the main thread. They don't use either of the queues.",536870919]],["^15",[810,"^O","^16",536870919]],["^15",[810,"^F",809,536870919]],["^15",[810,"^X",343,536870919]],["^15",[810,"^V",343,536870919]],["^15",[810,"^U",342,536870919]],["^15",[810,"^U",343,536870919]],["^15",[810,"^H",342,536870919]],["^15",[810,"^;","~u655b7379-844c-4127-87e0-eafda8658854",536870919]],["^15",[811,"^3","- It's a special program meant to space extra space by removing characters from everywhere possible in the code resulting in smaller script sizes which is crucial for the web as the same script has to be downloaded by multiple users. \n  \n  It removes comments, extra spaces, shortens variable names, function names etc. like ``name mangling`` in [[C++]] etc in a smart manner to not affect the execution at all.",536870919]],["^15",[811,"^17",1700492153098,536870919]],["^15",[811,"^Z","JS/pages/Minifier.md",536870919]],["^15",[812,"^Q","It's a special program meant to space extra space by removing characters from everywhere possible in the code resulting in smaller script sizes which is crucial for the web as the same script has to be downloaded by multiple users. \n\nIt removes comments, extra spaces, shortens variable names, function names etc. like ``name mangling`` in [[C++]] etc in a smart manner to not affect the execution at all.",536870919]],["^15",[812,"^O","^16",536870919]],["^15",[812,"^F",668,536870919]],["^15",[812,"^X",668,536870919]],["^15",[812,"^V",668,536870919]],["^15",[812,"^U",301,536870919]],["^15",[812,"^U",668,536870919]],["^15",[812,"^H",301,536870919]],["^15",[812,"^;","~u655b7379-866a-4391-becf-9412491e7a29",536870919]],["^15",[813,"^3","- A module is simply another JS file, a single module is a single [[<script>]]. Modules can call each other by importing/exporting Variables,[[Function]]s, [[Class]]es, [[Object]]s etc. .\n- For ex.:\n  In a folder X/ \n  file 1.js\n  ```js\n  export function yo() {\n   return 2;\n  }\n  ```\n  file 2.js\n  ```js\n  import {yo} from './1.js';\n  \n  yo(); //works, return 2\n  ```\n  The import path must be either absolute or relative but not bare, so just ``'1.js'`` wouldn't work in [[Browser]]s. It would work in Node though.\n- Export and Import\n  Export can export multiple declarations at once\n  ```js\n  function uo(){}\n  class X{}\n  \n  export {uo,X}; //ok\n  ```\n  \n  * Import also has features like * and ``as``  and they work like expected.\n  ```js\n  import * as x from './1.js';\n  ```\n  Whilst it pollutes the scope at development time, at runtime, tools like [[Webpack]] do [[Optimization]] and remove unused members.\n  \n  Also supported by export, ``export {x as y};``\n  \n  * Default export\n  A module can choose to export just a single entity, to do so we use\n  ``export default ...`` anything, this allows us to use ``import X from '...';``\n  where X is any name we wish, the entity will be referred by this name here.\n  ![image.png](../assets/image_1687059161793_0.png)\n  \n  Default exported entities don't need a name in exporting module,\n  For ex.:\n  In 1.js\n  ```js\n  export class {...}\n  ```\n  In 2.js\n  ```js\n  import X from '...'; \n  //and X would have that class.\n  ```\n  We can only have at most 1 default export per file and can mix named exports (normal export) as well but its unrecommended.\n  \n  We can also use the ``as`` keyword to make a default,\n  ``export {x as default};``\n  Similarly, we can import default and named exports at the same time\n  ```js\n  import {default as X, y} from '...'; //ok\n  ```\n  And it becomes a property  if * is used,\n  ```js\n  import * as X from '...';\n  \n  let x = X.default; //ok\n  ```\n- Re-export\n  We can re-export modules too\n  ```js\n  export {X, default as Y} from '...'; //this syntax is required for default exports being re-exported\n  export * from '...'; //works, but it ignores default export.\n  ```\n- Modules only work in browsers being served on HTTP(s), not locally.\n  To load a module on in a [[<script>]] in browser we set type attribute to module,  \n  For ex.:\n  ```html\n  <!doctype html>\n  <script type=\"module\">\n    import {yo} from './1.js';\n  \n    document.body.innerHTML = yo();\n  </script>\n  ```\n  And the browser automatically loads the modules.\n  \n  This is also to say, only modules can import/export each other. Normal JS scripts can't use modules.\n- Modules have their own top-level [[Scope]]s called ``Module Level Scopes``. Meaning anything `outside` in a module is still [[Scope]]d. This allows MLS to have some cool features like they are always in ``Strict`` mode and can use [[Asynchronous]] ``await`` as-is. This also prohibits other modules from having direct access to their variables/ [[Function]]s/etc.\n  For ex.:\n  \n  ```html\n  <!doctype html>\n  <script type=\"module\">\n    function yo(){}\n    window.yoo= function(){}\n  </script>\n  <script>\n    function no() {}\n  </script>\n  <script type=\"module\">\n    yo();                   //fails as it can't find yo\n    no();                   //works\n    yoo();                  //also works\n  </script>\n  ```\n  In [[Browser]]s we can still make a variable global by directly assigning it to a [[window]] property.\n  \n  [[this]] is undefined in MLS.\n- Modules are evaluated only once. They have a single [[Global]] State as well. This means, if we modify a module from one file, then use it in another then the changes are persistent.\n  For ex.:\n  In 1.js\n  ```js\n  export let x = {\n   \n  };\n  \n  console.log(\"yo\");\n  ```\n  \n  In 2.js\n  ```js\n  import {x} from './1.js'; //module 1 is evaluated completely, prints yo\n  \n  x[\"naa\"]=2;\n  ```\n  \n  In 3.js\n  ```js\n  import {x} from '1.js'; //already evaluated\n  \n  console.log(x[\"naa\"]); //prints 2\n  ```\n  The order of which file is evaluated first depends on which [[<script>]] tag appears first in the [[HTML]] Document. However, if a file has an import on another module, then it is not evaluated until that file is.\n  Here, 1.js is evaluated first, ``yo`` is printed, then 2.js starts and sees 1.js already evaluated, then 2.js is evaluated and lastly 3.js.\n- ``import.meta``\n  This [[Object]] provides metadata about the current module. In [[Browser]]s has a property ``.url`` which has the url of the script if the script is imported from a url.\n- Modules scripts are  [[Defer]]red in JS. \n  First the entirety of the [[HTML]] is loaded, then any normal [[<script>]]s then finally modules are loaded, despite the order in which the tags appear in the HTML document. Being deferred means they are loaded parallelly by the browser, but they are executed later.\n- External Module [[<script>]]s with the same src tag are ran only once.\n- External Module [[<script>]]s that are fetched from another origin must be supplied with the [[CORS]] header with value ``Access-Control-Allow-Origin`` by the remote server. This ensure the remote server's modules are only executed on trusted domains.\n-",536870919]],["^15",[813,"^17",1700492153134,536870919]],["^15",[813,"^Z","JS/pages/Module.md",536870919]],["^15",[814,"^K",1700492153564,536870919]],["^15",[814,"^[",989,536870919]],["^15",[814,"^@",false,536870919]],["^15",[814,"^Y","webpack",536870919]],["^15",[814,"^11","Webpack",536870919]],["^15",[814,"^B",1700492153564,536870919]],["^15",[814,"^;","~u655b7379-6ac1-4b24-9e77-250be8b7eb3c",536870919]],["^15",[821,"^Q","",536870919]],["^15",[821,"^O","^16",536870919]],["^15",[821,"^F",1727,536870952]],["^15",[821,"^X",287,536870919]],["^15",[821,"^V",287,536870919]],["^15",[821,"^U",287,536870919]],["^15",[821,"^;","~u655b7379-5958-4bbf-8dac-ec3dba67cd31",536870919]],["^15",[826,"^Q","~``mod``\nA module allows us to group and organize code within a [[Crate]] for easy reusability and readability. It also puts [[Access Modifier]]s on its items, which is private by default. Module definitions need to be at the top of an ``.rs`` file.\n\nSyntax:\n``\n<access modifier> mod <name> {\n //stuff\n} \n\n//or\n<access modifier> mod <name>;\n``\n\nFor ex.:\nIn main.rs,\n```rust\nmod x { //module names must be in snake-case\n pub fn yo() {}\n}\n\nfn main() {\n crate::x::yo(); //to access it\n}\n```",536870952]],["^15",[826,"^O","^16",536870919]],["^15",[826,"^F",287,536870919]],["^15",[826,"^X",287,536870919]],["^15",[826,"^V",287,536870919]],["^15",[826,"^U",163,536870919]],["^15",[826,"^U",283,536870919]],["^15",[826,"^U",287,536870919]],["^15",[826,"^U",299,536870919]],["^15",[826,"^U",332,536870919]],["^15",[826,"^U",1062,536870952]],["^15",[826,"^U",1063,536870952]],["^15",[826,"^H",1062,536870952]],["^15",[826,"^H",1063,536870952]],["^15",[826,"^;","~u655b7379-f173-44ab-99d8-acd54af42f38",536870919]],["^15",[827,"^3","- This is a built-in [[Object]] that observes a given [[DOM]] node and triggers a callback [[Function]] when it detects a change in the node.\n  \n  We can create an instance with ``let observer= new MutationObserver(<callback function>)`` then attach it to a node with ``<observer Object>.observe(<node>, <optional config Object>)`` where the config Object is an Object with properties\n  ``childList``: Boolean, should observe changes on direct child of node\n  ``subtree``: Boolean, should observe changes on any level child of node\n  ``attributes``: Boolean, should observe changes on attributes of node\n  ``attributeFilter``: an [[Array]] of attribute names, to observe only selected ones.\n  ``characterData``: Boolean, should observe ``<node>.data`` (text content)\n  \n  The callback receives an Object of ``MutationRecord`` class. This instance has some useful properties like \n  ![image.png](../assets/image_1688010111752_0.png)\n  as given in the [spec](https://dom.spec.whatwg.org/#mutationrecord) \n  \n  Then to stop observing we can use ``<observer Object>.disconnect()`` .\n  * We can use ``<observer Object>.takeRecords()`` to get a list of unprocessed records for which the callback hasn't been executed yet. These records are removed from the active processing queue.\n  \n  * [[Garbage Collection]] isn't affected by MutationObserver.\n-\n-",536870919]],["^15",[827,"^17",1700492153177,536870919]],["^15",[827,"^Z","JS/pages/MutationObserver.md",536870919]],["^15",[828,"^Q","This is a built-in [[Object]] that observes a given [[DOM]] node and triggers a callback [[Function]] when it detects a change in the node.\n\nWe can create an instance with ``let observer= new MutationObserver(<callback function>)`` then attach it to a node with ``<observer Object>.observe(<node>, <optional config Object>)`` where the config Object is an Object with properties\n``childList``: Boolean, should observe changes on direct child of node\n``subtree``: Boolean, should observe changes on any level child of node\n``attributes``: Boolean, should observe changes on attributes of node\n``attributeFilter``: an [[Array]] of attribute names, to observe only selected ones.\n``characterData``: Boolean, should observe ``<node>.data`` (text content)\n\nThe callback receives an Object of ``MutationRecord`` class. This instance has some useful properties like \n![image.png](../assets/image_1688010111752_0.png)\nas given in the [spec](https://dom.spec.whatwg.org/#mutationrecord) \n\nThen to stop observing we can use ``<observer Object>.disconnect()`` .\n* We can use ``<observer Object>.takeRecords()`` to get a list of unprocessed records for which the callback hasn't been executed yet. These records are removed from the active processing queue.\n\n* [[Garbage Collection]] isn't affected by MutationObserver.",536870919]],["^15",[828,"^O","^16",536870919]],["^15",[828,"^F",539,536870919]],["^15",[828,"^X",539,536870919]],["^15",[828,"^V",539,536870919]],["^15",[828,"^U",163,536870919]],["^15",[828,"^U",288,536870919]],["^15",[828,"^U",299,536870919]],["^15",[828,"^U",305,536870919]],["^15",[828,"^U",539,536870919]],["^15",[828,"^U",606,536870919]],["^15",[828,"^H",163,536870919]],["^15",[828,"^H",288,536870919]],["^15",[828,"^H",299,536870919]],["^15",[828,"^H",305,536870919]],["^15",[828,"^H",606,536870919]],["^15",[828,"^;","~u655b7379-1882-4d38-88c9-0d3b9cf705e6",536870919]],["^15",[829,"^Q","",536870919]],["^15",[829,"^O","^16",536870919]],["^15",[829,"^F",828,536870919]],["^15",[829,"^X",539,536870919]],["^15",[829,"^V",539,536870919]],["^15",[829,"^U",539,536870919]],["^15",[829,"^;","~u655b7379-8214-4ed6-9778-605542b10bbb",536870919]],["^15",[830,"^Q","",536870919]],["^15",[830,"^O","^16",536870919]],["^15",[830,"^F",829,536870919]],["^15",[830,"^X",539,536870919]],["^15",[830,"^V",539,536870919]],["^15",[830,"^U",539,536870919]],["^15",[830,"^;","~u655b7379-fc21-40b2-bfb6-77da5e0bcdad",536870919]],["^15",[831,"^3","- Special [[Number]] value that always returns false when compared against any other Number.",536870919]],["^15",[831,"^17",1700492153192,536870919]],["^15",[831,"^Z","JS/pages/NaN.md",536870919]],["^15",[832,"^Q","Special [[Number]] value that always returns false when compared against any other Number.",536870919]],["^15",[832,"^O","^16",536870919]],["^15",[832,"^F",485,536870919]],["^15",[832,"^X",485,536870919]],["^15",[832,"^V",485,536870919]],["^15",[832,"^U",162,536870919]],["^15",[832,"^U",485,536870919]],["^15",[832,"^H",162,536870919]],["^15",[832,"^;","~u655b7379-9dfd-4df6-b3a7-df2d315a4f53",536870919]],["^15",[833,"^3","- This operator takes 2 [[Operand]]s and checks if the first operand is [[null]] or [[undefined]], if it is either then the second Operand is returned.\n  For ex.:\n  ```js\n  let x= null ?? 2; //returns 2\n  ```\n- It's kind of like the Logical Operator OR, but where OR returns the first truthy value, i.e., value that is not false (like 0), this [[Operator]] returns the first defined value (like 0).\n  For ex.:\n  ```js\n  let x= 0 || 1; //returns 1 \n  x= 0 ?? 1; //returns 0\n  ```\n-",536870919]],["^15",[833,"^17",1700492153201,536870919]],["^15",[833,"^Z","JS/pages/Nullish-Coalescing Operator.md",536870919]],["^15",[834,"^K",1700492153337,536870919]],["^15",[834,"^[",892,536870919]],["^15",[834,"^@",false,536870919]],["^15",[834,"^Y","operand",536870919]],["^15",[834,"^11","Operand",536870919]],["^15",[834,"^B",1700492153337,536870919]],["^15",[834,"^;","~u655b7379-4072-4c28-847f-cb4ead3c1151",536870919]],["^15",[835,"^Q","This operator takes 2 [[Operand]]s and checks if the first operand is [[null]] or [[undefined]], if it is either then the second Operand is returned.\nFor ex.:\n```js\nlet x= null ?? 2; //returns 2\n```",536870919]],["^15",[835,"^O","^16",536870919]],["^15",[835,"^F",681,536870919]],["^15",[835,"^X",681,536870919]],["^15",[835,"^V",681,536870919]],["^15",[835,"^U",303,536870919]],["^15",[835,"^U",484,536870919]],["^15",[835,"^U",681,536870919]],["^15",[835,"^U",834,536870919]],["^15",[835,"^H",303,536870919]],["^15",[835,"^H",484,536870919]],["^15",[835,"^H",834,536870919]],["^15",[835,"^;","~u655b7379-843c-4985-af3e-ac994c5d55e7",536870919]],["^15",[836,"^Q","It's kind of like the Logical Operator OR, but where OR returns the first truthy value, i.e., value that is not false (like 0), this [[Operator]] returns the first defined value (like 0).\nFor ex.:\n```js\nlet x= 0 || 1; //returns 1 \nx= 0 ?? 1; //returns 0\n```",536870919]],["^15",[836,"^O","^16",536870919]],["^15",[836,"^F",835,536870919]],["^15",[836,"^X",681,536870919]],["^15",[836,"^V",681,536870919]],["^15",[836,"^U",339,536870919]],["^15",[836,"^U",681,536870919]],["^15",[836,"^H",339,536870919]],["^15",[836,"^;","~u655b7379-c02e-469e-8f08-4e2a426cfe23",536870919]],["^15",[837,"^Q","",536870919]],["^15",[837,"^O","^16",536870919]],["^15",[837,"^F",836,536870919]],["^15",[837,"^X",681,536870919]],["^15",[837,"^V",681,536870919]],["^15",[837,"^U",681,536870919]],["^15",[837,"^;","~u655b7379-1722-44af-9571-90b2a8b6e4fb",536870919]],["^15",[838,"^3","- [[Object]] wrapper for primitive type ``number``\n- Regular Numbers are stored in 64-bit format so there are always 64 bits to store any number, 52 bits are for the actual value of the number, 11 bits for the decimal position and 1 bit for the sign.\n- Includes Integer and Floating-Point Numbers\n  There are some special values also stored in Numeric type,\n  ``Infinity``, ``-Infinity``, ``NaN``\n- For  ex.:\n  ```js\n  let x = 2/0; // stores Infinity in x\n  x= Infinity //same\n  x= \"yo\"/3; //error, stores NaN in x\n  x= x*3; //still NaN\n  ```\n  NaN is a result of any computational error and any mathematical operation with NaN results back in NaN. This is also to say, ``maths is safe`` in JS as it would never crash the script, just store NaN in the worst case.\n- Integers: $$\\pm {(2^{53} - 3)}$$\n  BigInt: Implementation-Defined Range, For chrome it is >1 billion bits\n- Ints don't wrap around in JS, this means\n  ```js\n  console.log(9007199254740991 + 1); // 9007199254740992\n  console.log(9007199254740991 + 2); // 9007199254740992\n  ```\n  [[BigInt]]s have a much larger limit, however, using them is not safe as there may be precision errors the more bits we use.\n  To create a BigInt we append literal ``n`` to a Number.\n  For ex.:\n  ```js\n  let x = 234n; //BigInt\n  ```\n- Numbers can use ``e`` which is the same as in [[C++]].\n  ```js\n  let x = 1e3; //1 * 1000\n  ```\n- Numbers can use ``_`` to break up larger values.\n- By default, numbers are in decimal. To write other systems we prefix the number:\n  Octal: ``0o``\n  Hex: ``0x``\n  Binary: ``0b``\n- ``.toString(<optional base>)`` converts a number to int and returns a string.\n  The method accepts a number between 2 to 36 and converts the number to that base and returns the value in string.\n  For ex.:\n  ```js\n  let x = 255;\n  x.toString(16); //returns \"ff\"\n  ```\n- The ``Math`` [[Object]] is an inbuilt JS Object that contains many important Math functions like ``Math.trunc(<num>)``. \n  Reference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)\n- ``.toFixed(<num>)`` rounds a number to given number of digits.\n- ``Infinity`` is greater than any other Number in [[Comparison]] to a Number, similarly ``-Infinity`` is smaller.\n- IsNaN(<value>) converts given arg to Number and returns true if it is equal to NaN. We can't compare [[NaN]] to anything, not even itself. This is why we need to use this special [[Function]] to check if a Number is NaN.\n- isFinite(<value>) returns false if the value is ``Infinity``/``-Infinity``/``NaN``.\n- Both isNaN and isFinite also exist in ``Number`` [[Object]], these are more stricter variants that only accept number type as argument.\n- -0 and 0 can be both stored as Numbers in JS.\n- ``parseInt(<value>,<optional base>)`` and ``parseFloat(<value>,<optional base>)`` read the value for a number until a character that isn't a Number is found, then returns the result. This is better than ``+\"num\"`` or ``Number()`` which requires value to be strictly a number or returns NaN. \n  \n  The optional base called ``radix``  specifies which base the value is of. Default value is 10.\n-",536870919]],["^15",[838,"^17",1700492153222,536870919]],["^15",[838,"^Z","JS/pages/Number.md",536870919]],["^15",[850,"^Q","integers: Numbers without fractional components.\n![image.png](../assets/image_1688833118249_0.png)\n\nFor n bits,\n* Signed ints are the ints that care for the sign, + or -. These can store -ve as well as +ve values. Stored using 2’s complement representation. \nValue range: $$-2^{n-1}$$ < $$2^{n-1}$$\n\n* Unsigned ints can only be +ve. \nValue range: 0 < $$2^n-1$$\n\n* The ``isize`` and ``usize`` are used to denote size of collections and depend on the architecture of the program, i.e. 64 bits on x64 and 32 bit on x86.",536870954]],["^15",[850,"^O","^16",536870919]],["^15",[850,"^F",162,536870919]],["^15",[850,"^X",162,536870919]],["^15",[850,"^V",162,536870919]],["^15",[850,"^U",162,536870919]],["^15",[850,"^U",299,536870919]],["^15",[850,"^;","~u655b7379-aa6a-4c9a-932c-db67f03ec01e",536870919]],["^15",[854,"^Q","",536870919]],["^15",[854,"^O","^16",536870919]],["^15",[854,"^F",1732,536870954]],["^15",[854,"^X",162,536870919]],["^15",[854,"^V",162,536870919]],["^15",[854,"^U",162,536870919]],["^15",[854,"^;","~u655b7379-3732-4f07-8874-4f7f3dceea1c",536870919]],["^15",[858,"^3","- The signature ``object`` type.\n  It's a non-primitive type that can contain collections of data with multiple entities, think of them as \"Map\" or \"Dictionary\" from other languages but with the extensibility of \"Classes\". They are used everywhere in JS, and almost everything in JS is an Object or uses Object.\n  For ex.:\n  ```js\n  let obj= new Object();  //Object Ctor Syntax \n  let obj2 = { }; //same thing, Object Literal Syntax, implicitly calls new Object()\n  ```\n- Objects store ``Key:Value`` pairs, each pair is called a ``Property`` and the key is called the ``Property Name`` whilst the ``Value`` is just called the ``Value``.\n  \n  For ex.:\n  ```js\n  let obj = {\n   name: \"YOo\",\n   age: 200,\n   \"yoo yoo\": 20, //This is a multi-word property name\n  }\n  ```\n  Objects in JS are hash tables, so the Time Complexity of accessing a key is $$\\Theta\\text{(1)}$$ and O(n).\n  \n  To create/update a property\n  ```js\n  obj.name= 2;\n  //or  \n  obj[\"yoo yoo\"] =\"yo\";\n  ```\n  \n  To retrieve\n  ```js\n  console.log(obj.name); //works\n  //or  \n  console.log( obj[\"yoo yoo\"] );\n  ```\n  \n  To delete\n  ```js\n  delete obj.name; \n  //or\n  delete obj[\"name\"]; \n  ```\n  Multi-word Properties can only be accessed with [...] and not the Dot [[Operator]].\n-\n- [...] access also supports variables inside them.\n  For ex.:\n  ```js\n  let x= \"yo\";\n  let y= {...};\n  y[x]; //ok \n  ```\n- Computed Properties\n  We can use variables as property names too.\n  For ex.:\n  \n  ```js\n  let x= \"yo\";\n  let y= {\n     [x]: 2,\n     [x+\"X\"]: 34,\n  };\n  y[x]; //works, returns 2\n  y[\"yo\"]; //also works\n  y.yo; //works!\n  y.yoX; //same\n  \n  ```\n- To check if a key exists in an Object we can use the ``in`` [[Operator]]\n  ``if \"x\" in myobj``\n  We can also use ``if myobj[\"x\"]===undefined`` but this also returns true if \"x\" does exist and stores a value of [[undefined]] in it.\n- Property Value Shorthand\n  If a key name and variable holding its value has the same name, we can omit the value and it will pick it up from the variable.\n  For ex.:\n  ```js\n  let name = \"yo\";\n  let y= {\n     name, //that's it.\n  }\n  y.name; //works and returns \"yo\"\n  ```\n- Keys / Property Names can be either strings or [[Symbol]]s only, the other type are converted to strings. There is no restriction to a property's name as well. We don't need to use ``\" \"`` for strings for property names, it is automatically inserted.\n  For ex.:\n  ```js\n  let x= { \n    return: 2, //ok\n    \"yo\": 23, //  using string syntax\n    0: 2, //0 is of type Number, so it is converted to \"0\"\n    b() {\n      this.y=2; //works too, sets y to 2 for ``this`` Object, which can be x.\n    }\n  }\n  x.return; //works, returns 2\n  x[\"0\"]; //returns 2 \n  console.log(x.y); //prints undefined\n  x.b();\n  console.log(x.y); //prints 2\n  ```\n  There's a widely accepted convention that property names that start with \"_\" are ``hidden`` properties and hence mustn't be accessed by outside code. JS doesn't enforce it by default.\n-\n- Methods\n  * [Object.keys(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) – returns an [[Array]] of keys (doesn't include [[Symbol]] properties or [[Prototype Object]] properties).\n  * [Object.values(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) – returns an array of values.\n  * [Object.entries(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) – returns an array of `[key, value]` pairs.\n  ``Object.getOwnPropertySymbols(obj)`` to get array of Symbol Keys.\n  ``Reflect.ownKeys(obj)`` to get array of all keys, including Symbol properties.\n-\n- for..in [[Loop]] can be used with [[Object]], and also with the various methods of Object that return arrays.\n  This loop doesn't iterate over Symbol Keys.\n  This loop even iterates over properties of the [[Prototype Object]].\n- Integer Properties and Ordering\n  When we loop over keys of an Object, they appear in the order they were created unless they are Integer Properties.\n  \n  Integer properties are property names that are integers or strings that are directly and fully convertible to integers. Integer properties are sorted automatically.\n  For ex.:\n  ```js\n  let x= {\n    \"24\": \"yp\",\n    \"2\": \"aa\"\n  }\n  let y= {\n    \"+24\": \"yp\",  //Whilst it can be directly converted to number 24, it is not fully convertible as + is lost\n    \"abc\": \"aa\"\n  }\n  \n  for (let key in x) {...} //key is 2 then 24 \n  for (let key in y) {...} //key is +24 then abc\n  ```\n- Variables storing [[Primitives]] store their value directly, i.e., the variable of a primitive is a memory location holding the value directly. However [[Object]]s are always stored by reference.\n  For ex.:\n  \n  ```js\n  let user = {\n    name: \"x\"\n  }\n  ```\n  Here user actually stores the address of the Object.\n  ![image.png](../assets/image_1685705623118_0.png){:height 272, :width 371}\n  \n  This is also to say, if we copy an object by assignment operator, we actually copy the address and not the actual object and hence we copy by reference.\n  ```js\n  let x = {...}\n  let y= x; \n  //any change on y or x will be visible to both\n  ```\n- Comparison\n  To compare objects we can use the simple ``==`` Operator. It compares the address pointed by the variable.\n  ```js\n  let x= { };\n  let y= { };\n  x==y; //false\n  y= x;\n  x==y; //true\n  ```\n- To copy an Object,\n  Shallow Copy: Copy using assignment operator\n  Deep Copy: Iterate over keys and assign each primitive to the other Object. \n  Or\n  use ``Object.assign(dest, ...sources)``\n  This method returns the dest Object back as well. This method also copies over [[Symbol]] properties.\n  However it is still only a single level copy, if there are multiple levels to an Object, i.e., it has nested Objects then it will shallow copy the further levels. \n  \n  To deep copy all levels of an Object, we can iterate over keys and check if a key is an Object and if it is we recursively go in it and copy all the primitives\n  Or\n  use ``let dest =structuredClone(source)`` which does the same.\n  ``structuredClone`` also solves circular reference correctly.\n  That is,\n  ```js\n  let x= { };\n  x.me= x;\n  \n  let y= structuredClone(x);\n  y===y.me; //returns true\n  ```\n  However, it can't copy functions defined in an object so either custom loop or using an external library is required.\n  \n  Anoher way of copying an Object is \n  ```js\n  let x={};\n  let clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(x));\n  ```\n  This works because ``Object.defineProperties(...)`` defines properties with their descriptors on an empty object and returns it, and ``Object.getOwnPropertyDescriptors(...)`` gets all properties with their descriptors. Even copies other Objects such as [[Function]]s.\n  \n  Similarly, there's yet another way of cloning an Object with everything, including its [[Prototype Object]]\n  ```js\n  let obj = {};\n  let clone = Object.create(\n    Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj)\n  );\n  ```\n  This uses ``Object.create(<prototype object>, <descriptors>)`` to create an object and even sets the same ``[[Prototype]]`` as the original Object.\n-\n- Methods\n  Properties of Objects that hold [[Function]]s.\n  For ex.:\n  ```js\n  let x= { \n    bo: function() {...}, \n    bow() {...},    //method shorthand\n  \n  };\n  x.yo= function() {...};\n  \n  x.yo(); //works\n  ```\n  These are the 3 ways to create a method in an Object.\n  \n  To access the properties of the object inside the function property, we can use the [[this]] keyword.\n-\n-\n- Optional Chaining [[Operator]]\n  If a property is [[undefined]] for an object, using this operator we can get undefined instead of an error and if it's not undefined, we can get that property's value instead. \n  ``?.``\n  For ex.:\n  ```js\n  let x= {...};\n  console.log(x?.name?.yo); \n  ```\n  If x.name exists then get it then if name.yo exists get that. If x.name doesn't exist immediately return undefined, this is also a [[Short-circuit Evaluation]] . This also avoids an error if a property that doesn't exist is accessed using the dot operator.\n  \n  For methods, we can use the ``?.()``variant.\n  That is,\n  ```js\n  let y= {};\n  console.log(y?.yo()); //error\n  console.log(y.yo?.()); //ok, returns undefined\n  ```\n  Similarly, if we are using ``[]`` to access properties, we can use the ``?.[]`` variant.\n  ``y?.[\"abc\"]`` works.\n  \n  And this also Op also works with delete,\n  ``delete y?.name;``\n- [[Object]] Wrapper:\n  Primitive types have no properties/methods, they only have values as they are meant to be fast and lightweight. This is why JS provides Object wrappers for almost all primitive types, as these Objects provide the utility methods and also store the type and its value.\n  A key principle of Object wrappers is to never return the Object wrapper itself, always the primitive value associated with it. \n  For ex.:\n  ```js\n  let x = String(\"yo\") //is an Object Wrapper String(), but it returns the primitive type string.\n  ```\n  \n  We can get the Object wrapper back from an Object Wrapper using [[new]], however it is highly unrecommended.\n  ```js\n  let x = new Number(2) //returns an Object\n  ```\n  This is only valid as it is meant for internal use only.\n  \n  As for properties and methods on primitive values, they come from the Object Wrappers, but JS simply inserts the methods/properties automatically.\n  ```js\n  let x = 2;\n  x.toString();\n  ```\n  Here .toString() is added automatically by JS later.\n  For [[Number]] specifically, if we want to call a method/property on a direct value, we have to use 2 dot [[Operator]] ``..``, this is to avoid ambiguity we'd have with a single dot which also stands for decimal.\n  For ex.:\n  ```js\n  123..toString(); //ok\n  //or\n  (123).toString();\n  ```\n-\n- [[null]] and [[undefined]] have no Object Wrappers associated with them.\n- ``Object.is(a,b)`` is the same as ``a===b`` for [[Comparison]]. However it also handles 2 edge cases, if a and b are NaN, it returns true as [[NaN]] returns false by direct comparison. Secondly it returns false if a is -0 and b is 0 (or the other way around).\n- Object properties aren't simply just ``Key:Value`` pairs, they also have other sub-properties/attributes, known as ``flags``. There's 3 of them and these are all boolean ``Key:Value`` pairs,\n  \n  * ``writable``: if the property's value is writable(true)/read-only(false)\n  * ``enumerable``: if the property is enumerated in loops/Object.keys and the like (true), or not (false)\n  * ``configurable``: If true, allows these attributes to be modifiable and the property to be deletable. Regardless of this attribute, the value itself is mutable if it is writable. This is a one-way road, an attribute set to false configurable can't be reverted back. However we can modify writable attribute if it is true and set it to false if configurable is false.\n  All 3 are true for properties by default. \n  \n  In [[Old Mode]], flag violations (such as writing value when ``writable`` is )are silently ignored and the changes not applies. In ``Strict Mode``, flag violations result in an [[Error]] and the changes aren't applied. \n  \n  To get these attributes we use ``Object.getOwnPropertyDescriptor(<obj>, <prop name>)``\n  For ex.:\n  ```js\n  let x= {\n   a:2,\n   b() {\n    }\n  };\n  let descriptor = Object.getOwnPropertyDescriptor(x, \"a\"); //descriptor is a normal Object representing //the attributes\n  console.log(descriptor)\n  //prints { value: 2, writable: true, enumerable: true, configurable: true }\n  \n  console.log(Object.getOwnPropertyDescriptor(x, \"b\")); \n  //prints { value: [Function: b], writable: true, enumerable: true, configurable: true }\n  ```\n  Similarly, we have ``Object.getOwnPropertyDescriptors(<obj>)`` which returns all the properties with their descriptors from an Object.\n  \n  We can set/update these attributes using ``Object.defineProperty(<obj>,<prop name>, <descriptor obj>)``\n  For ex.:\n  ```js\n  let x= {\n   a:2,\n  };\n  Object.defineProperty(x, \"b\", { value: 4, writable: false });\n  console.log(Object.getOwnPropertyDescriptor(x, \"b\"));\n  //prints { value: 4, writable: false, enumerable: false, configurable: false}\n  ```\n  If the property doesn't exist, it is created. Then for it's attributes, if an attribute is supplied it is set to the given value, otherwise it is set to false. \n  \n  Similarly, we have ``Object.defineProperties(<obj>, <Object like so {\n  <prop 1 name>: <descriptor1>, \n  <prop 2 name>: <descriptor2>, \n  ...\n  }>)``\n  to set multiple properties with their descriptors at once. Attributes not set are false for any property here as well.``Object.defineProperties(...)`` also returns the modified Object.\n  \n  This is why combining ``Object.defineProperties(...)``and ``Object.getOwnPropertyDescriptors(...)`` allows for another type of copy. As properties with their attributes are copied over, even properties that aren't ``enumerable`` are copied over this way.\n- Sealing an Object:\n  \n  * [Object.preventExtensions(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n  : Forbids the addition of new properties to the object.\n  * [Object.seal(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n  : Forbids adding/removing of properties. Sets `configurable: false` for all existing properties.\n  * [Object.freeze(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n  : Forbids adding/removing/changing of properties. Sets `configurable: false, writable: false` for all existing properties.\n  \n  And also there are tests for them:\n   * [Object.isExtensible(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n  : Returns `false` if adding properties is forbidden, otherwise `true`.\n  * [Object.isSealed(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n  : Returns `true` if adding/removing properties is forbidden, and all existing properties have `configurable: false`.\n  * [Object.isFrozen(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n  : Returns `true` if adding/removing/changing properties is forbidden, and all current properties are `configurable: false, writable: false`.\n- Getter/Setter [[Function]]s (Methods):\n  Implemented using ``Accessor Properties`` which have syntax almost like a function with special keyword ``get`` and ``set`` which get/set value of/for a property.\n  For ex.:\n  ```js\n  let x = {\n   a: 2,\n   b: 3,\n   get ab() {\n    return a+b;\n  }\n  set ab(value) {\n   this.a= value/2;\n   this.b= value/2;\n  }\n   \n  };\n  console.log(x.ab); //prints 5\n  x.ab(4); //sets a and b to 2.\n  ```\n  Properties like a and b are called ``data properties`` whilst methods like these are called ``accessor properties``. There's only these 2, so if any property uses get/set it is an ``Accessor Property``.\n  \n  As we saw above, ``ab(...)`` isn't a normal method/function as there's 2 of it. So the accessor property is ``ab``.\n  \n  G/Setters can't have the same name as any other property/method, just like normal methods/properties.\n- Accessor properties have a different Object for descriptors, it has\n  `get` – a function without arguments, that works when a property is read,\n  `set` – a function with one argument, that is called when the property is set,\n  `enumerable`– same as for data properties,\n  `configurable` – same as for data properties.\n- There is a special property [[__proto__]] which can't be set for an Object to a non-Object value, that is ``x.__proto__= 2; `` will work but retrieving ``x.__proto__`` will return ``[object] [object]``.\n  This is because, [[Prototype Object]] is a property for any Object that defines its ``Prototypal Inheritance``.\n- ``Object.toString()``\n  This is quite a powerful method as it can be extracted and then used to identify Object type.\n  For ex.:\n  ```js\n  let s = Object.prototype.toString;\n  \n  console.log( s.call(123) ); // [object Number]\n  console.log( s.call(null) ); // [object Null]\n  console.log( s.call(alert) ); // [object Function]\n  ```\n  It examines the [[this]] Object and returns a string.\n  \n  If our Object has a special [[Symbol]] property [Symbol.toStringTag] set with a value of a string, then toString() gets that value instead.\n  For ex.:\n  ```js\n  let x = {\n   [Symbol.toStringTag]: \"Yo\",\n  };\n  console.log({}.toString(x)); //prints Yo\n  console.log(window[Symbol.toStringTag]); //prints window\n  ```",536870919]],["^15",[858,"^17",1700492153298,536870919]],["^15",[858,"^Z","JS/pages/Object.md",536870919]],["^15",[859,"^5",455,536870919]],["^15",[859,"^K",1700492153607,536870919]],["^15",[859,"^[",994,536870919]],["^15",[859,"^@",false,536870919]],["^15",[859,"^Y","__proto__",536870919]],["^15",[859,"^11","__proto__",536870919]],["^15",[859,"^?",["^ ","^18",["^19",["Prototype Object"]]],536870919]],["^15",[859,"^4",["^ ","^18","Prototype Object"],536870919]],["^15",[859,"^B",1700492153607,536870919]],["^15",[859,"^;","~u655b7379-59a1-4544-9d47-0596904f740f",536870919]],["^15",[860,"^K",1700492153338,536870919]],["^15",[860,"^@",false,536870919]],["^15",[860,"^Y","short-circuit evaluation",536870919]],["^15",[860,"^11","Short-Circuit Evaluation",536870919]],["^15",[860,"^B",1700492153338,536870919]],["^15",[860,"^;","~u655b7379-954c-4f49-9e8c-08ecce5af370",536870919]],["^15",[861,"^Q","Computed Properties\nWe can use variables as property names too.\nFor ex.:\n\n```js\nlet x= \"yo\";\nlet y= {\n   [x]: 2,\n   [x+\"X\"]: 34,\n};\ny[x]; //works, returns 2\ny[\"yo\"]; //also works\ny.yo; //works!\ny.yoX; //same\n\n```",536870919]],["^15",[861,"^O","^16",536870919]],["^15",[861,"^F",869,536870919]],["^15",[861,"^X",299,536870919]],["^15",[861,"^V",299,536870919]],["^15",[861,"^U",299,536870919]],["^15",[861,"^;","~u655b7379-ff1c-478c-9e06-ce062f135a1d",536870919]],["^15",[862,"^Q","To check if a key exists in an Object we can use the ``in`` [[Operator]]\n``if \"x\" in myobj``\nWe can also use ``if myobj[\"x\"]===undefined`` but this also returns true if \"x\" does exist and stores a value of [[undefined]] in it.",536870919]],["^15",[862,"^O","^16",536870919]],["^15",[862,"^F",861,536870919]],["^15",[862,"^X",299,536870919]],["^15",[862,"^V",299,536870919]],["^15",[862,"^U",299,536870919]],["^15",[862,"^U",303,536870919]],["^15",[862,"^U",339,536870919]],["^15",[862,"^H",303,536870919]],["^15",[862,"^H",339,536870919]],["^15",[862,"^;","~u655b7379-7510-458f-a3a9-39a3222c5dbd",536870919]],["^15",[863,"^Q","Accessor properties have a different Object for descriptors, it has\n`get` – a function without arguments, that works when a property is read,\n`set` – a function with one argument, that is called when the property is set,\n`enumerable`– same as for data properties,\n`configurable` – same as for data properties.",536870919]],["^15",[863,"^O","^16",536870919]],["^15",[863,"^F",866,536870919]],["^15",[863,"^X",299,536870919]],["^15",[863,"^V",299,536870919]],["^15",[863,"^U",299,536870919]],["^15",[863,"^;","~u655b7379-67bd-45d2-984a-cfd3e12ea1c1",536870919]],["^15",[864,"^Q","Variables storing [[Primitives]] store their value directly, i.e., the variable of a primitive is a memory location holding the value directly. However [[Object]]s are always stored by reference.\nFor ex.:\n\n```js\nlet user = {\n  name: \"x\"\n}\n```\nHere user actually stores the address of the Object.\n![image.png](../assets/image_1685705623118_0.png){:height 272, :width 371}\n\nThis is also to say, if we copy an object by assignment operator, we actually copy the address and not the actual object and hence we copy by reference.\n```js\nlet x = {...}\nlet y= x; \n//any change on y or x will be visible to both\n```",536870919]],["^15",[864,"^O","^16",536870919]],["^15",[864,"^F",891,536870919]],["^15",[864,"^X",299,536870919]],["^15",[864,"^V",299,536870919]],["^15",[864,"^U",299,536870919]],["^15",[864,"^U",600,536870919]],["^15",[864,"^H",299,536870919]],["^15",[864,"^H",600,536870919]],["^15",[864,"^;","~u655b7379-f3ed-4c86-b83c-3f9d067b46b4",536870919]],["^15",[865,"^Q","",536870919]],["^15",[865,"^O","^16",536870919]],["^15",[865,"^F",871,536870919]],["^15",[865,"^X",299,536870919]],["^15",[865,"^V",299,536870919]],["^15",[865,"^U",299,536870919]],["^15",[865,"^;","~u655b7379-02b3-4660-9c69-d61f7501b69d",536870919]],["^15",[866,"^Q","Getter/Setter [[Function]]s (Methods):\nImplemented using ``Accessor Properties`` which have syntax almost like a function with special keyword ``get`` and ``set`` which get/set value of/for a property.\nFor ex.:\n```js\nlet x = {\n a: 2,\n b: 3,\n get ab() {\n  return a+b;\n}\nset ab(value) {\n this.a= value/2;\n this.b= value/2;\n}\n \n};\nconsole.log(x.ab); //prints 5\nx.ab(4); //sets a and b to 2.\n```\nProperties like a and b are called ``data properties`` whilst methods like these are called ``accessor properties``. There's only these 2, so if any property uses get/set it is an ``Accessor Property``.\n\nAs we saw above, ``ab(...)`` isn't a normal method/function as there's 2 of it. So the accessor property is ``ab``.\n\nG/Setters can't have the same name as any other property/method, just like normal methods/properties.",536870919]],["^15",[866,"^O","^16",536870919]],["^15",[866,"^F",877,536870919]],["^15",[866,"^X",299,536870919]],["^15",[866,"^V",299,536870919]],["^15",[866,"^U",163,536870919]],["^15",[866,"^U",299,536870919]],["^15",[866,"^H",163,536870919]],["^15",[866,"^;","~u655b7379-8563-4ce5-a750-e906559cd435",536870919]],["^15",[867,"^Q","[[Object]] Wrapper:\nPrimitive types have no properties/methods, they only have values as they are meant to be fast and lightweight. This is why JS provides Object wrappers for almost all primitive types, as these Objects provide the utility methods and also store the type and its value.\nA key principle of Object wrappers is to never return the Object wrapper itself, always the primitive value associated with it. \nFor ex.:\n```js\nlet x = String(\"yo\") //is an Object Wrapper String(), but it returns the primitive type string.\n```\n\nWe can get the Object wrapper back from an Object Wrapper using [[new]], however it is highly unrecommended.\n```js\nlet x = new Number(2) //returns an Object\n```\nThis is only valid as it is meant for internal use only.\n\nAs for properties and methods on primitive values, they come from the Object Wrappers, but JS simply inserts the methods/properties automatically.\n```js\nlet x = 2;\nx.toString();\n```\nHere .toString() is added automatically by JS later.\nFor [[Number]] specifically, if we want to call a method/property on a direct value, we have to use 2 dot [[Operator]] ``..``, this is to avoid ambiguity we'd have with a single dot which also stands for decimal.\nFor ex.:\n```js\n123..toString(); //ok\n//or\n(123).toString();\n```",536870919]],["^15",[867,"^O","^16",536870919]],["^15",[867,"^F",875,536870919]],["^15",[867,"^X",299,536870919]],["^15",[867,"^V",299,536870919]],["^15",[867,"^U",162,536870919]],["^15",[867,"^U",299,536870919]],["^15",[867,"^U",339,536870919]],["^15",[867,"^U",456,536870919]],["^15",[867,"^H",162,536870919]],["^15",[867,"^H",299,536870919]],["^15",[867,"^H",339,536870919]],["^15",[867,"^H",456,536870919]],["^15",[867,"^;","~u655b7379-f33f-4706-9f7e-897956414a5f",536870919]],["^15",[868,"^Q","for..in [[Loop]] can be used with [[Object]], and also with the various methods of Object that return arrays.\nThis loop doesn't iterate over Symbol Keys.\nThis loop even iterates over properties of the [[Prototype Object]].",536870919]],["^15",[868,"^O","^16",536870919]],["^15",[868,"^F",879,536870919]],["^15",[868,"^X",299,536870919]],["^15",[868,"^V",299,536870919]],["^15",[868,"^U",299,536870919]],["^15",[868,"^U",300,536870919]],["^15",[868,"^U",455,536870919]],["^15",[868,"^H",299,536870919]],["^15",[868,"^H",300,536870919]],["^15",[868,"^H",455,536870919]],["^15",[868,"^;","~u655b7379-b5ae-4f39-a493-27fbd8a7cb7a",536870919]],["^15",[869,"^Q","[...] access also supports variables inside them.\nFor ex.:\n```js\nlet x= \"yo\";\nlet y= {...};\ny[x]; //ok \n```",536870919]],["^15",[869,"^O","^16",536870919]],["^15",[869,"^F",876,536870919]],["^15",[869,"^X",299,536870919]],["^15",[869,"^V",299,536870919]],["^15",[869,"^U",299,536870919]],["^15",[869,"^;","~u655b7379-b8eb-49c9-8a62-fb1f4a8ff194",536870919]],["^15",[870,"^Q","To copy an Object,\nShallow Copy: Copy using assignment operator\nDeep Copy: Iterate over keys and assign each primitive to the other Object. \nOr\nuse ``Object.assign(dest, ...sources)``\nThis method returns the dest Object back as well. This method also copies over [[Symbol]] properties.\nHowever it is still only a single level copy, if there are multiple levels to an Object, i.e., it has nested Objects then it will shallow copy the further levels. \n\nTo deep copy all levels of an Object, we can iterate over keys and check if a key is an Object and if it is we recursively go in it and copy all the primitives\nOr\nuse ``let dest =structuredClone(source)`` which does the same.\n``structuredClone`` also solves circular reference correctly.\nThat is,\n```js\nlet x= { };\nx.me= x;\n\nlet y= structuredClone(x);\ny===y.me; //returns true\n```\nHowever, it can't copy functions defined in an object so either custom loop or using an external library is required.\n\nAnoher way of copying an Object is \n```js\nlet x={};\nlet clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(x));\n```\nThis works because ``Object.defineProperties(...)`` defines properties with their descriptors on an empty object and returns it, and ``Object.getOwnPropertyDescriptors(...)`` gets all properties with their descriptors. Even copies other Objects such as [[Function]]s.\n\nSimilarly, there's yet another way of cloning an Object with everything, including its [[Prototype Object]]\n```js\nlet obj = {};\nlet clone = Object.create(\n  Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj)\n);\n```\nThis uses ``Object.create(<prototype object>, <descriptors>)`` to create an object and even sets the same ``[[Prototype]]`` as the original Object.",536870919]],["^15",[870,"^O","^16",536870919]],["^15",[870,"^F",890,536870919]],["^15",[870,"^X",299,536870919]],["^15",[870,"^V",299,536870919]],["^15",[870,"^U",163,536870919]],["^15",[870,"^U",299,536870919]],["^15",[870,"^U",302,536870919]],["^15",[870,"^U",455,536870919]],["^15",[870,"^H",163,536870919]],["^15",[870,"^H",302,536870919]],["^15",[870,"^H",455,536870919]],["^15",[870,"^;","~u655b7379-80e5-410a-ade7-788537c3b589",536870919]],["^15",[871,"^Q","Keys / Property Names can be either strings or [[Symbol]]s only, the other type are converted to strings. There is no restriction to a property's name as well. We don't need to use ``\" \"`` for strings for property names, it is automatically inserted.\nFor ex.:\n```js\nlet x= { \n  return: 2, //ok\n  \"yo\": 23, //  using string syntax\n  0: 2, //0 is of type Number, so it is converted to \"0\"\n  b() {\n    this.y=2; //works too, sets y to 2 for ``this`` Object, which can be x.\n  }\n}\nx.return; //works, returns 2\nx[\"0\"]; //returns 2 \nconsole.log(x.y); //prints undefined\nx.b();\nconsole.log(x.y); //prints 2\n```\nThere's a widely accepted convention that property names that start with \"_\" are ``hidden`` properties and hence mustn't be accessed by outside code. JS doesn't enforce it by default.",536870919]],["^15",[871,"^O","^16",536870919]],["^15",[871,"^F",872,536870919]],["^15",[871,"^X",299,536870919]],["^15",[871,"^V",299,536870919]],["^15",[871,"^U",299,536870919]],["^15",[871,"^U",302,536870919]],["^15",[871,"^H",302,536870919]],["^15",[871,"^;","~u655b7379-1ed4-43d4-b1fc-ff74042caee3",536870919]],["^15",[872,"^Q","Property Value Shorthand\nIf a key name and variable holding its value has the same name, we can omit the value and it will pick it up from the variable.\nFor ex.:\n```js\nlet name = \"yo\";\nlet y= {\n   name, //that's it.\n}\ny.name; //works and returns \"yo\"\n```",536870919]],["^15",[872,"^O","^16",536870919]],["^15",[872,"^F",862,536870919]],["^15",[872,"^X",299,536870919]],["^15",[872,"^V",299,536870919]],["^15",[872,"^U",299,536870919]],["^15",[872,"^;","~u655b7379-26f2-442f-b6d9-d1c02485ecaf",536870919]],["^15",[873,"^Q","~``Object.toString()``\nThis is quite a powerful method as it can be extracted and then used to identify Object type.\nFor ex.:\n```js\nlet s = Object.prototype.toString;\n\nconsole.log( s.call(123) ); // [object Number]\nconsole.log( s.call(null) ); // [object Null]\nconsole.log( s.call(alert) ); // [object Function]\n```\nIt examines the [[this]] Object and returns a string.\n\nIf our Object has a special [[Symbol]] property [Symbol.toStringTag] set with a value of a string, then toString() gets that value instead.\nFor ex.:\n```js\nlet x = {\n [Symbol.toStringTag]: \"Yo\",\n};\nconsole.log({}.toString(x)); //prints Yo\nconsole.log(window[Symbol.toStringTag]); //prints window\n```",536870919]],["^15",[873,"^O","^16",536870919]],["^15",[873,"^F",880,536870919]],["^15",[873,"^X",299,536870919]],["^15",[873,"^V",299,536870919]],["^15",[873,"^U",299,536870919]],["^15",[873,"^U",302,536870919]],["^15",[873,"^U",400,536870919]],["^15",[873,"^H",302,536870919]],["^15",[873,"^H",400,536870919]],["^15",[873,"^;","~u655b7379-3ff4-4b11-ba2c-db2d9aece46b",536870919]],["^15",[874,"^Q","[[null]] and [[undefined]] have no Object Wrappers associated with them.",536870919]],["^15",[874,"^O","^16",536870919]],["^15",[874,"^F",886,536870919]],["^15",[874,"^X",299,536870919]],["^15",[874,"^V",299,536870919]],["^15",[874,"^U",299,536870919]],["^15",[874,"^U",303,536870919]],["^15",[874,"^U",484,536870919]],["^15",[874,"^H",303,536870919]],["^15",[874,"^H",484,536870919]],["^15",[874,"^;","~u655b7379-082d-42c0-8adc-0dbfc13011d4",536870919]],["^15",[875,"^Q","Optional Chaining [[Operator]]\nIf a property is [[undefined]] for an object, using this operator we can get undefined instead of an error and if it's not undefined, we can get that property's value instead. \n``?.``\nFor ex.:\n```js\nlet x= {...};\nconsole.log(x?.name?.yo); \n```\nIf x.name exists then get it then if name.yo exists get that. If x.name doesn't exist immediately return undefined, this is also a [[Short-circuit Evaluation]] . This also avoids an error if a property that doesn't exist is accessed using the dot operator.\n\nFor methods, we can use the ``?.()``variant.\nThat is,\n```js\nlet y= {};\nconsole.log(y?.yo()); //error\nconsole.log(y.yo?.()); //ok, returns undefined\n```\nSimilarly, if we are using ``[]`` to access properties, we can use the ``?.[]`` variant.\n``y?.[\"abc\"]`` works.\n\nAnd this also Op also works with delete,\n``delete y?.name;``",536870919]],["^15",[875,"^O","^16",536870919]],["^15",[875,"^F",887,536870919]],["^15",[875,"^X",299,536870919]],["^15",[875,"^V",299,536870919]],["^15",[875,"^U",299,536870919]],["^15",[875,"^U",303,536870919]],["^15",[875,"^U",339,536870919]],["^15",[875,"^U",860,536870919]],["^15",[875,"^H",303,536870919]],["^15",[875,"^H",339,536870919]],["^15",[875,"^H",860,536870919]],["^15",[875,"^;","~u655b7379-e078-4309-a7f5-e2ae0858899b",536870919]],["^15",[876,"^Q","",536870919]],["^15",[876,"^O","^16",536870919]],["^15",[876,"^F",882,536870919]],["^15",[876,"^X",299,536870919]],["^15",[876,"^V",299,536870919]],["^15",[876,"^U",299,536870919]],["^15",[876,"^;","~u655b7379-46a8-40b0-972d-c9f43d36d3c0",536870919]],["^15",[877,"^Q","Sealing an Object:\n\n* [Object.preventExtensions(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n: Forbids the addition of new properties to the object.\n* [Object.seal(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n: Forbids adding/removing of properties. Sets `configurable: false` for all existing properties.\n* [Object.freeze(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n: Forbids adding/removing/changing of properties. Sets `configurable: false, writable: false` for all existing properties.\n\nAnd also there are tests for them:\n * [Object.isExtensible(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n: Returns `false` if adding properties is forbidden, otherwise `true`.\n* [Object.isSealed(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n: Returns `true` if adding/removing properties is forbidden, and all existing properties have `configurable: false`.\n* [Object.isFrozen(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n: Returns `true` if adding/removing/changing properties is forbidden, and all current properties are `configurable: false, writable: false`.",536870919]],["^15",[877,"^O","^16",536870919]],["^15",[877,"^F",889,536870919]],["^15",[877,"^X",299,536870919]],["^15",[877,"^V",299,536870919]],["^15",[877,"^U",299,536870919]],["^15",[877,"^;","~u655b7379-919d-4c52-9573-cf26d643a8ab",536870919]],["^15",[878,"^Q","",536870919]],["^15",[878,"^O","^16",536870919]],["^15",[878,"^F",870,536870919]],["^15",[878,"^X",299,536870919]],["^15",[878,"^V",299,536870919]],["^15",[878,"^U",299,536870919]],["^15",[878,"^;","~u655b7379-5f46-408e-bc3d-6b24a99539aa",536870919]],["^15",[879,"^Q","",536870919]],["^15",[879,"^O","^16",536870919]],["^15",[879,"^F",888,536870919]],["^15",[879,"^X",299,536870919]],["^15",[879,"^V",299,536870919]],["^15",[879,"^U",299,536870919]],["^15",[879,"^;","~u655b7379-b385-419e-9027-6da02b49abb4",536870919]],["^15",[880,"^Q","There is a special property [[__proto__]] which can't be set for an Object to a non-Object value, that is ``x.__proto__= 2; `` will work but retrieving ``x.__proto__`` will return ``[object] [object]``.\nThis is because, [[Prototype Object]] is a property for any Object that defines its ``Prototypal Inheritance``.",536870919]],["^15",[880,"^O","^16",536870919]],["^15",[880,"^F",863,536870919]],["^15",[880,"^X",299,536870919]],["^15",[880,"^V",299,536870919]],["^15",[880,"^U",299,536870919]],["^15",[880,"^U",455,536870919]],["^15",[880,"^U",859,536870919]],["^15",[880,"^H",455,536870919]],["^15",[880,"^H",859,536870919]],["^15",[880,"^;","~u655b7379-114f-4b49-84eb-beacbcaccff6",536870919]],["^15",[881,"^Q","",536870919]],["^15",[881,"^O","^16",536870919]],["^15",[881,"^F",884,536870919]],["^15",[881,"^X",299,536870919]],["^15",[881,"^V",299,536870919]],["^15",[881,"^U",299,536870919]],["^15",[881,"^;","~u655b7379-37e6-4b72-8ae1-84019c449fdc",536870919]],["^15",[882,"^Q","Objects store ``Key:Value`` pairs, each pair is called a ``Property`` and the key is called the ``Property Name`` whilst the ``Value`` is just called the ``Value``.\n\nFor ex.:\n```js\nlet obj = {\n name: \"YOo\",\n age: 200,\n \"yoo yoo\": 20, //This is a multi-word property name\n}\n```\nObjects in JS are hash tables, so the Time Complexity of accessing a key is $$\\Theta\\text{(1)}$$ and O(n).\n\nTo create/update a property\n```js\nobj.name= 2;\n//or  \nobj[\"yoo yoo\"] =\"yo\";\n```\n\nTo retrieve\n```js\nconsole.log(obj.name); //works\n//or  \nconsole.log( obj[\"yoo yoo\"] );\n```\n\nTo delete\n```js\ndelete obj.name; \n//or\ndelete obj[\"name\"]; \n```\nMulti-word Properties can only be accessed with [...] and not the Dot [[Operator]].",536870919]],["^15",[882,"^O","^16",536870919]],["^15",[882,"^F",885,536870919]],["^15",[882,"^X",299,536870919]],["^15",[882,"^V",299,536870919]],["^15",[882,"^U",299,536870919]],["^15",[882,"^U",339,536870919]],["^15",[882,"^H",339,536870919]],["^15",[882,"^;","~u655b7379-7cef-4aa2-bdd2-30773411e458",536870919]],["^15",[883,"^Q","~``Object.is(a,b)`` is the same as ``a===b`` for [[Comparison]]. However it also handles 2 edge cases, if a and b are NaN, it returns true as [[NaN]] returns false by direct comparison. Secondly it returns false if a is -0 and b is 0 (or the other way around).",536870919]],["^15",[883,"^O","^16",536870919]],["^15",[883,"^F",874,536870919]],["^15",[883,"^X",299,536870919]],["^15",[883,"^V",299,536870919]],["^15",[883,"^U",299,536870919]],["^15",[883,"^U",482,536870919]],["^15",[883,"^U",485,536870919]],["^15",[883,"^H",482,536870919]],["^15",[883,"^H",485,536870919]],["^15",[883,"^;","~u655b7379-e773-4293-a662-7036e36a2223",536870919]],["^15",[884,"^Q","Methods\nProperties of Objects that hold [[Function]]s.\nFor ex.:\n```js\nlet x= { \n  bo: function() {...}, \n  bow() {...},    //method shorthand\n\n};\nx.yo= function() {...};\n\nx.yo(); //works\n```\nThese are the 3 ways to create a method in an Object.\n\nTo access the properties of the object inside the function property, we can use the [[this]] keyword.",536870919]],["^15",[884,"^O","^16",536870919]],["^15",[884,"^F",878,536870919]],["^15",[884,"^X",299,536870919]],["^15",[884,"^V",299,536870919]],["^15",[884,"^U",163,536870919]],["^15",[884,"^U",299,536870919]],["^15",[884,"^U",400,536870919]],["^15",[884,"^H",163,536870919]],["^15",[884,"^H",400,536870919]],["^15",[884,"^;","~u655b7379-7a5b-4097-8904-cac937f52f3e",536870919]],["^15",[885,"^Q","The signature ``object`` type.\nIt's a non-primitive type that can contain collections of data with multiple entities, think of them as \"Map\" or \"Dictionary\" from other languages but with the extensibility of \"Classes\". They are used everywhere in JS, and almost everything in JS is an Object or uses Object.\nFor ex.:\n```js\nlet obj= new Object();  //Object Ctor Syntax \nlet obj2 = { }; //same thing, Object Literal Syntax, implicitly calls new Object()\n```",536870919]],["^15",[885,"^O","^16",536870919]],["^15",[885,"^F",299,536870919]],["^15",[885,"^X",299,536870919]],["^15",[885,"^V",299,536870919]],["^15",[885,"^U",299,536870919]],["^15",[885,"^;","~u655b7379-4b4a-411b-bd27-dceda0dd327f",536870919]],["^15",[886,"^Q","",536870919]],["^15",[886,"^O","^16",536870919]],["^15",[886,"^F",867,536870919]],["^15",[886,"^X",299,536870919]],["^15",[886,"^V",299,536870919]],["^15",[886,"^U",299,536870919]],["^15",[886,"^;","~u655b7379-ca38-4d6f-a43e-986c092f84c3",536870919]],["^15",[887,"^Q","",536870919]],["^15",[887,"^O","^16",536870919]],["^15",[887,"^F",881,536870919]],["^15",[887,"^X",299,536870919]],["^15",[887,"^V",299,536870919]],["^15",[887,"^U",299,536870919]],["^15",[887,"^;","~u655b7379-68d5-42bc-bfa3-ffc482251bb6",536870919]],["^15",[888,"^Q","Methods\n* [Object.keys(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) – returns an [[Array]] of keys (doesn't include [[Symbol]] properties or [[Prototype Object]] properties).\n* [Object.values(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) – returns an array of values.\n* [Object.entries(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) – returns an array of `[key, value]` pairs.\n``Object.getOwnPropertySymbols(obj)`` to get array of Symbol Keys.\n``Reflect.ownKeys(obj)`` to get array of all keys, including Symbol properties.",536870919]],["^15",[888,"^O","^16",536870919]],["^15",[888,"^F",865,536870919]],["^15",[888,"^X",299,536870919]],["^15",[888,"^V",299,536870919]],["^15",[888,"^U",299,536870919]],["^15",[888,"^U",302,536870919]],["^15",[888,"^U",305,536870919]],["^15",[888,"^U",455,536870919]],["^15",[888,"^H",302,536870919]],["^15",[888,"^H",305,536870919]],["^15",[888,"^H",455,536870919]],["^15",[888,"^;","~u655b7379-f2b9-49b5-92c9-7fa188bcf937",536870919]],["^15",[889,"^Q","Object properties aren't simply just ``Key:Value`` pairs, they also have other sub-properties/attributes, known as ``flags``. There's 3 of them and these are all boolean ``Key:Value`` pairs,\n\n* ``writable``: if the property's value is writable(true)/read-only(false)\n* ``enumerable``: if the property is enumerated in loops/Object.keys and the like (true), or not (false)\n* ``configurable``: If true, allows these attributes to be modifiable and the property to be deletable. Regardless of this attribute, the value itself is mutable if it is writable. This is a one-way road, an attribute set to false configurable can't be reverted back. However we can modify writable attribute if it is true and set it to false if configurable is false.\nAll 3 are true for properties by default. \n\nIn [[Old Mode]], flag violations (such as writing value when ``writable`` is )are silently ignored and the changes not applies. In ``Strict Mode``, flag violations result in an [[Error]] and the changes aren't applied. \n\nTo get these attributes we use ``Object.getOwnPropertyDescriptor(<obj>, <prop name>)``\nFor ex.:\n```js\nlet x= {\n a:2,\n b() {\n  }\n};\nlet descriptor = Object.getOwnPropertyDescriptor(x, \"a\"); //descriptor is a normal Object representing //the attributes\nconsole.log(descriptor)\n//prints { value: 2, writable: true, enumerable: true, configurable: true }\n\nconsole.log(Object.getOwnPropertyDescriptor(x, \"b\")); \n//prints { value: [Function: b], writable: true, enumerable: true, configurable: true }\n```\nSimilarly, we have ``Object.getOwnPropertyDescriptors(<obj>)`` which returns all the properties with their descriptors from an Object.\n\nWe can set/update these attributes using ``Object.defineProperty(<obj>,<prop name>, <descriptor obj>)``\nFor ex.:\n```js\nlet x= {\n a:2,\n};\nObject.defineProperty(x, \"b\", { value: 4, writable: false });\nconsole.log(Object.getOwnPropertyDescriptor(x, \"b\"));\n//prints { value: 4, writable: false, enumerable: false, configurable: false}\n```\nIf the property doesn't exist, it is created. Then for it's attributes, if an attribute is supplied it is set to the given value, otherwise it is set to false. \n\nSimilarly, we have ``Object.defineProperties(<obj>, <Object like so {\n<prop 1 name>: <descriptor1>, \n<prop 2 name>: <descriptor2>, \n...\n}>)``\nto set multiple properties with their descriptors at once. Attributes not set are false for any property here as well.``Object.defineProperties(...)`` also returns the modified Object.\n\nThis is why combining ``Object.defineProperties(...)``and ``Object.getOwnPropertyDescriptors(...)`` allows for another type of copy. As properties with their attributes are copied over, even properties that aren't ``enumerable`` are copied over this way.",536870919]],["^15",[889,"^O","^16",536870919]],["^15",[889,"^F",883,536870919]],["^15",[889,"^X",299,536870919]],["^15",[889,"^V",299,536870919]],["^15",[889,"^U",299,536870919]],["^15",[889,"^U",340,536870919]],["^15",[889,"^U",599,536870919]],["^15",[889,"^H",340,536870919]],["^15",[889,"^H",599,536870919]],["^15",[889,"^;","~u655b7379-47db-4f74-933d-860015c75a67",536870919]],["^15",[890,"^Q","Comparison\nTo compare objects we can use the simple ``==`` Operator. It compares the address pointed by the variable.\n```js\nlet x= { };\nlet y= { };\nx==y; //false\ny= x;\nx==y; //true\n```",536870919]],["^15",[890,"^O","^16",536870919]],["^15",[890,"^F",864,536870919]],["^15",[890,"^X",299,536870919]],["^15",[890,"^V",299,536870919]],["^15",[890,"^U",299,536870919]],["^15",[890,"^;","~u655b7379-dc9d-4feb-81bf-36fec5bfb012",536870919]],["^15",[891,"^Q","Integer Properties and Ordering\nWhen we loop over keys of an Object, they appear in the order they were created unless they are Integer Properties.\n\nInteger properties are property names that are integers or strings that are directly and fully convertible to integers. Integer properties are sorted automatically.\nFor ex.:\n```js\nlet x= {\n  \"24\": \"yp\",\n  \"2\": \"aa\"\n}\nlet y= {\n  \"+24\": \"yp\",  //Whilst it can be directly converted to number 24, it is not fully convertible as + is lost\n  \"abc\": \"aa\"\n}\n\nfor (let key in x) {...} //key is 2 then 24 \nfor (let key in y) {...} //key is +24 then abc\n```",536870919]],["^15",[891,"^O","^16",536870919]],["^15",[891,"^F",868,536870919]],["^15",[891,"^X",299,536870919]],["^15",[891,"^V",299,536870919]],["^15",[891,"^U",299,536870919]],["^15",[891,"^;","~u655b7379-4644-460a-9d87-b251a9122442",536870919]],["^15",[892,"^3","- Basically the terms around a single [[Operator]] are called [[Operand]]s.\n  For ex.:\n  ```js\n  6+2\n  ```\n  Here 6 and 2 are operands.\n-",536870919]],["^15",[892,"^17",1700492153307,536870919]],["^15",[892,"^Z","JS/pages/Operand.md",536870919]],["^15",[893,"^Q","Basically the terms around a single [[Operator]] are called [[Operand]]s.\nFor ex.:\n```js\n6+2\n```\nHere 6 and 2 are operands.",536870919]],["^15",[893,"^O","^16",536870919]],["^15",[893,"^F",834,536870919]],["^15",[893,"^X",834,536870919]],["^15",[893,"^V",834,536870919]],["^15",[893,"^U",339,536870919]],["^15",[893,"^U",834,536870919]],["^15",[893,"^H",339,536870919]],["^15",[893,"^H",834,536870919]],["^15",[893,"^;","~u655b7379-84b7-410a-aec8-1f08629a66de",536870919]],["^15",[894,"^Q","",536870919]],["^15",[894,"^O","^16",536870919]],["^15",[894,"^F",893,536870919]],["^15",[894,"^X",834,536870919]],["^15",[894,"^V",834,536870919]],["^15",[894,"^U",834,536870919]],["^15",[894,"^;","~u655b7379-1de4-4b36-9ee1-7b7ab92ed1c0",536870919]],["^15",[895,"^3","- [[Operand]]s and [[Operator]]s make a mathematical expression.\n- 2 types: Unary and Binary. Unary means the operator accepts a single operand, binary means 2.\n- Supported Operators in [[ECMAScript]]\n  ![image.png](../assets/image_1685373168911_0.png)\n- [[String]] concatenation adds 2 strings together.\n- The binary \"+\" is the only operator that supports strings in such a way. Other ops don't.\n  For ex.:\n  ```js\n  let x=6-'2'; //stores 4\n  ```\n- The unary \"+\" is a bit different too.\n  If applied to [[Number]], does nothing. But if applied to other types, converts them to [[Number]]s.\n  Works like ``Number(<var/val>)``\n  \n  For ex.:\n  ```js\n  let x=2;\n  x= +x; //returns 2\n  x = -2;\n  x = +x; //returns -2\n  x= \"1\";\n  x= +x; //converts \"1\" to int.\n  ```\n- Precedence\n  Basic precedency list\n  ![image.png](../assets/image_1685374105624_0.png)\n  If every operator has the same precedency then it is solved left to right (unless the operator is '=')\n   \n  \n  Reference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n- All operators in [[ECMAScript]] return a value.\n  Even '=' with a precedency value of 2.\n  The '=' operator writes a value of the right operand into the left and then returns the value on the right.\n  For ex.:\n  ```js\n  let x= 3;\n  let y= (x=5); //solves '=' and then returns 5\n  \n  ```\n  This allows us to do ``chain assignment``, which is evaluated from right to left if everything has same precedence.\n- The ',' (comma) operator has a precedency of 1. This operator only returns the value of its right operand.\n  For ex.:\n  ```js\n  let x= (2+3,4+5); //returns 9\n  ```\n  + has a higher precedence than ',' so it is solved first and 2+3 becomes 5, 4+5 becomes 9. Then the comma operator returns the right operand, 9.\n- [[ECMAScript]] supports pre/post increment/decrement operators on variables.\n- [[ECMAScript]] also supports modify-then-assign operators like ``+=``.\n- [[Bitwise]] Operators\n  [[ECMAScript]] also supports these.\n  ![image.png](../assets/image_1685374441877_0.png)\n  \n  Reference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators)\n- [[Comparison]] operators always returns a [[Boolean]] value. \n  There's ``'<','>','<=','>=','!=','==' and '==='``\n  For ex.:\n  ```js\n  let x= 2 > 3; //returns true\n  let y= \"A\" > \"Z\"; //returns false\n  ```\n  [[String]]s are compared using lexicographical (letter by letter unicode value) comparison.\n  \n  When values of different types are compared, they are converted to [[Number]]s. \n  For ex.:\n  ```js\n  let x= \"A\" > true; //converts A to Number and gets NaN and compares NaN to 1. Returns false.\n  let y= false == \"0\"; //returns true, because false becomes 0 and \"0\" also becomes 0.\n  ```\n  All implicit conversion behaviors can be avoided using [[Strict Equality]] operators.\n-\n- [[Conditional]] Operator\n  Always returns a value, which is given by one of its expressions.\n  Combination of ``<bool> ? <expr on true> : <expr on false>``\n  For ex.:\n  ```js\n  let x= 2>3 ? 2 : 3; //returns 3 to x \n  ```\n  \n  Yes we can nest multiple Conditional Operators.\n- Logical Operator\n  AND``&&`` OR``||`` NOT``!`` and [[Nullish-Coalescing Operator]]``??``\n  \n  Unlike in other langs, they can be applied to non-[[Boolean]]s as well and they implicitly convert the value to Boolean and then apply the logical operations.\n  For ex.:\n  ```js\n  let x= null || 1; //converts null to Boolean, gets false, then converts 1 to Boolean, gets true and returns true.\n  ```\n  \n  [[Short-Circuit Evaluation]] is used. That is, in a logical operation the expression is solved from left-to-right converting all non-Boolean values to Boolean and checking them right away. For AND, the first ``false`` terminates/short-circuits the expression and false is returned, for OR the first ``true`` terminates the expression right away.\n- dot Operator\n  It is used to access whatever is on its left with whatever is on its right.\n  For ex.:\n  ```js\n  let x ={\n   a:2,\n   yo() {\n     console.log(this.a);\n    }\n   no() {\n   }\n  };\n  \n  x.yo(); //prints 2\n  let y = x.yo();\n  y(); //fails as ``this`` is undefined\n  \n  //Similarly\n  (x.a==2 ? x.yo: x.no)(); //fails as ``this`` is undefined\n  ```\n  [[this]] is [[undefined]] in these calls because whenever a [[Function]] is called using the dot Operator, the dot Op. doesn't return a function but a special [Reference Type](https://tc39.es/ecma262/#sec-reference-specification-type) which is an internal type from the spec.\n  It returns a 3 value combination ``(<base obj>, <prop name>, <is strict mode>)`` so ``x.yo()`` is actually ``(x,'yo',true)``, this allows JS to assign the correct ``this`` to the method. But when we explicitly copy just the function, the [[this]] is lost and hence the function, if relying on ``this``, fails.\n  \n  The ``[ ]`` access Operator works similarly in this case.\n-",536870919]],["^15",[895,"^17",1700492153338,536870919]],["^15",[895,"^Z","JS/pages/Operator.md",536870919]],["^15",[896,"^K",1700492153338,536870919]],["^15",[896,"^@",false,536870919]],["^15",[896,"^Y","bitwise",536870919]],["^15",[896,"^11","Bitwise",536870919]],["^15",[896,"^B",1700492153338,536870919]],["^15",[896,"^;","~u655b7379-7b1d-4f75-bd25-658ed55bf63c",536870919]],["^15",[901,"^Q","Operator Overloading\nRust doesn’t allow operator overloading like *C++*. \nHowever we can define operator behavior using [[Trait]]s, these traits are defined in ``std::ops`` [[Module]] with the name of the operation they do.\n\nFor ex.:\n```rust\nuse std::ops::Add;\n\nstruct X {\n    Y: i32,\n}\nimpl Add for X {\n    type Output = i32;\n    fn add(self, other: X) -> Self::Output {\n        self.Y + other.Y\n    }\n}\nfn main() {\n    let a = X { Y: 2 };\n    let b = X { Y: 3 };\n    let c = a + b; //works\n}\n```",536870956]],["^15",[901,"^O","^16",536870919]],["^15",[901,"^F",339,536870919]],["^15",[901,"^X",339,536870919]],["^15",[901,"^V",339,536870919]],["^15",[901,"^U",287,536870956]],["^15",[901,"^U",339,536870919]],["^15",[901,"^U",834,536870919]],["^15",[901,"^U",1073,536870956]],["^15",[901,"^H",287,536870956]],["^15",[901,"^H",1073,536870956]],["^15",[901,"^;","~u655b7379-8935-47e1-ac5b-aeefc1a65637",536870919]],["^15",[915,"^3","- Just like the [[Transpiler]] except instead of converting new syntax into compatible older syntax, it adds missing functions. So if a new JS version includes a new method and we target an old one, then polyfill will simply define that function. [core js](https://github.com/zloirock/core-js) and [polyfill.io](https://polyfill.io/v3/) are good polyfill tools.\n-",536870919]],["^15",[915,"^17",1700492153347,536870919]],["^15",[915,"^Z","JS/pages/Polyfill.md",536870919]],["^15",[916,"^Q","Just like the [[Transpiler]] except instead of converting new syntax into compatible older syntax, it adds missing functions. So if a new JS version includes a new method and we target an old one, then polyfill will simply define that function. [core js](https://github.com/zloirock/core-js) and [polyfill.io](https://polyfill.io/v3/) are good polyfill tools.",536870919]],["^15",[916,"^O","^16",536870919]],["^15",[916,"^F",363,536870919]],["^15",[916,"^X",363,536870919]],["^15",[916,"^V",363,536870919]],["^15",[916,"^U",363,536870919]],["^15",[916,"^U",613,536870919]],["^15",[916,"^H",613,536870919]],["^15",[916,"^;","~u655b7379-0ffd-4108-9d2e-b7d45346074d",536870919]],["^15",[917,"^Q","",536870919]],["^15",[917,"^O","^16",536870919]],["^15",[917,"^F",916,536870919]],["^15",[917,"^X",363,536870919]],["^15",[917,"^V",363,536870919]],["^15",[917,"^U",363,536870919]],["^15",[917,"^;","~u655b7379-e6b5-4661-9d4e-59b15380fb20",536870919]],["^15",[918,"^3","alias:: Proxy Object\n\n- A PO is a special [[Object]] in JS that wraps over another Object and whatever operation is performed on it, it is passed over to the wrapped Object called its ``target``.\n- We use the ``Proxy`` class to do so, the syntax being ``Proxy(<target obj>, <handler object>)`` where handler is an [[Object]] that intercepts calls to given methods. \n  For ex.:\n  ```js\n  let x ={};\n  let proxy = new Proxy(x, {});\n  proxy.yo= 2; //ok\n  console.log(x.yo); //prints 2\n  console.log(proxy.yo); //also prints 2\n  ```\n  It looks like so\n  ![image.png](../assets/image_1687183225812_0.png)\n  \n  We can iterate over proxy keys too, which return the target Object's Keys returned as [[Iterable]].\n  It is ideal to replace the original [[Object]] with the Proxy Object.\n- Internal [[Object]] methods\n  Objects in JS have internal methods that define its behavior and behavior of its properties/methods, these internal methods can only be called internally and not through our code. Similarly, we also have Internal Properties like [[Environment Object]], ``[[HomeObject]]``, [[Prototype Object]] etc.. \n  The ``Proxy`` Class hooks into these methods of a target Object and can intercept these calls, provided they are defined in the handler object with the mapped name.\n  They are:\n  ![image.png](../assets/image_1687192358700_0.png)\n  When we create an intercept for an internal method in the proxy handler, it is known as a trap.\n  \n  * Invariant: JS enforces some rules to be followed when working with traps to ensure consistent behavior of Objects. The [Spec](https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots) defines these.\n  \n  * Each trap is a method with its params.\n  For ex.\n  The ``get`` trap has 3 params, ``get(<target obj>,<prop name>,<reciever obj>)`` where reciever obj is the obj passed as [[this]] to the intercepted method ``[[GET]]`` if the target property is a getter accessor property. So this trap is called for read access to any property (Remember there is no [[Function]] overloading in JS as methods are identified by name alone, so there can only be 1 method of a name)\n  ```js\n  \n  let x = {\n    a: 2,\n  };\n  \n  let proxy = new Proxy(x, {\n    get(x, prop) {\n      if (prop == \"a\") {\n        return 1;\n      } else return x[prop];\n    },\n  });\n  \n  console.log(proxy.a);\n  ```\n  \n  Similarly we have set, ``set(target, property, value, receiver)``, this method returns a bool which should be true on a successful updating of the Object, and false otherwise as this is said by an ``Invariant``. \n  Similarly we have other traps like ``apply(target, thisArg, args)`` that wraps functions and is called when the proxy object is called as a function.\n  \n  * Despite that [[Strict Equality]] differentiates between an [[Object]] and its Proxy.\n  An Object is strictly equal to itself only and that can't be intercepted.\n  For ex.:\n  ```js\n  let x= {\n   a:2,\n  };\n  let y = new Set();\n  y.add(x);\n  console.log(y.has(x)); //true\n  x = new Proxy(x, {});\n  console.log(y.has(x)); //false\n  ```\n- ``Reflect``\n  This special [[Object]] wraps over all internal methods that the ``Proxy`` Object does, with the same name as the trap method and same args.\n  ![image.png](../assets/image_1687202127438_0.png)\n  It provides a way to directly access the object's internal methods without a Proxy.\n  For ex.:\n  ```js\n  let x ={};\n  Reflect.set(x,'a',2);\n  console.log(x[a]); //prints 2\n  ```\n- Not all inbuilt [[Object]] can be Proxied similarly, this is because apart from internal methods and properties, Objects also have  ``internal slot``s. These are special internal properties reserved for internal use, like [[Map]] has ``[MapData]``, these are not trapped by the ``Proxy`` Object so the operations fail on proxy objects. \n  For ex.:\n  ```js\n  let map = new Map();\n  \n  let proxy = new Proxy(map, {});\n  \n  proxy.set('test', 1); // Error\n  ```\n  A simple trick to fix these errors is\n  \n  ```js\n  let map = new Map();\n  \n  let proxy = new Proxy(map, {\n    get(target, prop, receiver) {\n      let value = Reflect.get(...arguments);\n      return typeof value == 'function' ? value.bind(target) : value;\n    }\n  });\n  \n  proxy.set('test', 1); //works\n  ```\n  This works because get call here binds the ``this`` of Map's internal methods with the Map Object and so when an object of Map tries to access ``[MapData]`` using [[this]] it gets the binded Map object and not Proxy.\n  \n  [[Array]] uses no ``internal slot``s. [[Class]]es do use them for private properties/[[Function]]s.\n- Revocable Proxy\n  A proxy that can be revoked/disabled at any time.\n  ```js\n  let x = {\n  a:2,\n  };\n  let {proxy, revoke} = new Proxy.revocable(x, {});\n  \n  console.log(proxy.a); //prints 2\n  revoke();\n  console.log(proxy.a); //error, proxy is revoked\n  ```\n  Uses [[Destructuring Assignment]].\n-\n-",536870919]],["^15",[918,"^17",1700492153382,536870919]],["^15",[918,"^Z","JS/pages/Proxy.md",536870919]],["^15",[919,"^5",611,536870919]],["^15",[919,"^K",1700492153381,536870919]],["^15",[919,"^@",false,536870919]],["^15",[919,"^Y","proxy object",536870919]],["^15",[919,"^11","Proxy Object",536870919]],["^15",[919,"^B",1700492153381,536870919]],["^15",[919,"^;","~u655b7379-7f90-443a-9cd5-99470cf09d1b",536870919]],["^15",[920,"^Q","Internal [[Object]] methods\nObjects in JS have internal methods that define its behavior and behavior of its properties/methods, these internal methods can only be called internally and not through our code. Similarly, we also have Internal Properties like [[Environment Object]], ``[[HomeObject]]``, [[Prototype Object]] etc.. \nThe ``Proxy`` Class hooks into these methods of a target Object and can intercept these calls, provided they are defined in the handler object with the mapped name.\nThey are:\n![image.png](../assets/image_1687192358700_0.png)\nWhen we create an intercept for an internal method in the proxy handler, it is known as a trap.\n\n* Invariant: JS enforces some rules to be followed when working with traps to ensure consistent behavior of Objects. The [Spec](https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots) defines these.\n\n* Each trap is a method with its params.\nFor ex.\nThe ``get`` trap has 3 params, ``get(<target obj>,<prop name>,<reciever obj>)`` where reciever obj is the obj passed as [[this]] to the intercepted method ``[[GET]]`` if the target property is a getter accessor property. So this trap is called for read access to any property (Remember there is no [[Function]] overloading in JS as methods are identified by name alone, so there can only be 1 method of a name)\n```js\n\nlet x = {\n  a: 2,\n};\n\nlet proxy = new Proxy(x, {\n  get(x, prop) {\n    if (prop == \"a\") {\n      return 1;\n    } else return x[prop];\n  },\n});\n\nconsole.log(proxy.a);\n```\n\nSimilarly we have set, ``set(target, property, value, receiver)``, this method returns a bool which should be true on a successful updating of the Object, and false otherwise as this is said by an ``Invariant``. \nSimilarly we have other traps like ``apply(target, thisArg, args)`` that wraps functions and is called when the proxy object is called as a function.\n\n* Despite that [[Strict Equality]] differentiates between an [[Object]] and its Proxy.\nAn Object is strictly equal to itself only and that can't be intercepted.\nFor ex.:\n```js\nlet x= {\n a:2,\n};\nlet y = new Set();\ny.add(x);\nconsole.log(y.has(x)); //true\nx = new Proxy(x, {});\nconsole.log(y.has(x)); //false\n```",536870919]],["^15",[920,"^O","^16",536870919]],["^15",[920,"^F",923,536870919]],["^15",[920,"^X",611,536870919]],["^15",[920,"^V",611,536870919]],["^15",[920,"^U",163,536870919]],["^15",[920,"^U",299,536870919]],["^15",[920,"^U",400,536870919]],["^15",[920,"^U",455,536870919]],["^15",[920,"^U",483,536870919]],["^15",[920,"^U",611,536870919]],["^15",[920,"^U",653,536870919]],["^15",[920,"^H",163,536870919]],["^15",[920,"^H",299,536870919]],["^15",[920,"^H",400,536870919]],["^15",[920,"^H",455,536870919]],["^15",[920,"^H",483,536870919]],["^15",[920,"^H",653,536870919]],["^15",[920,"^;","~u655b7379-566a-43ef-8faf-ea14b460aab2",536870919]],["^15",[921,"^Q","Revocable Proxy\nA proxy that can be revoked/disabled at any time.\n```js\nlet x = {\na:2,\n};\nlet {proxy, revoke} = new Proxy.revocable(x, {});\n\nconsole.log(proxy.a); //prints 2\nrevoke();\nconsole.log(proxy.a); //error, proxy is revoked\n```\nUses [[Destructuring Assignment]].",536870919]],["^15",[921,"^O","^16",536870919]],["^15",[921,"^F",928,536870919]],["^15",[921,"^X",611,536870919]],["^15",[921,"^V",611,536870919]],["^15",[921,"^U",573,536870919]],["^15",[921,"^U",611,536870919]],["^15",[921,"^H",573,536870919]],["^15",[921,"^;","~u655b7379-3d7a-41d9-a4c7-cfc0a06d9097",536870919]],["^15",[922,"^Q","A PO is a special [[Object]] in JS that wraps over another Object and whatever operation is performed on it, it is passed over to the wrapped Object called its ``target``.",536870919]],["^15",[922,"^O","^16",536870919]],["^15",[922,"^F",925,536870919]],["^15",[922,"^X",611,536870919]],["^15",[922,"^V",611,536870919]],["^15",[922,"^U",299,536870919]],["^15",[922,"^U",611,536870919]],["^15",[922,"^H",299,536870919]],["^15",[922,"^;","~u655b7379-ec6d-48af-854f-8f0d057689f1",536870919]],["^15",[923,"^Q","We use the ``Proxy`` class to do so, the syntax being ``Proxy(<target obj>, <handler object>)`` where handler is an [[Object]] that intercepts calls to given methods. \nFor ex.:\n```js\nlet x ={};\nlet proxy = new Proxy(x, {});\nproxy.yo= 2; //ok\nconsole.log(x.yo); //prints 2\nconsole.log(proxy.yo); //also prints 2\n```\nIt looks like so\n![image.png](../assets/image_1687183225812_0.png)\n\nWe can iterate over proxy keys too, which return the target Object's Keys returned as [[Iterable]].\nIt is ideal to replace the original [[Object]] with the Proxy Object.",536870919]],["^15",[923,"^O","^16",536870919]],["^15",[923,"^F",922,536870919]],["^15",[923,"^X",611,536870919]],["^15",[923,"^V",611,536870919]],["^15",[923,"^U",299,536870919]],["^15",[923,"^U",304,536870919]],["^15",[923,"^U",611,536870919]],["^15",[923,"^H",299,536870919]],["^15",[923,"^H",304,536870919]],["^15",[923,"^;","~u655b7379-fbf9-4834-b1b5-c3f12102f140",536870919]],["^15",[924,"^Q","~``Reflect``\nThis special [[Object]] wraps over all internal methods that the ``Proxy`` Object does, with the same name as the trap method and same args.\n![image.png](../assets/image_1687202127438_0.png)\nIt provides a way to directly access the object's internal methods without a Proxy.\nFor ex.:\n```js\nlet x ={};\nReflect.set(x,'a',2);\nconsole.log(x[a]); //prints 2\n```",536870919]],["^15",[924,"^O","^16",536870919]],["^15",[924,"^F",920,536870919]],["^15",[924,"^X",611,536870919]],["^15",[924,"^V",611,536870919]],["^15",[924,"^U",299,536870919]],["^15",[924,"^U",611,536870919]],["^15",[924,"^H",299,536870919]],["^15",[924,"^;","~u655b7379-a6fa-4126-96b9-38c7b20f73b3",536870919]],["^15",[925,"^Q","alias:: Proxy Object\n\n",536870919]],["^15",[925,"^O","^16",536870919]],["^15",[925,"^1;",["^19",[]],536870919]],["^15",[925,"^F",611,536870919]],["^15",[925,"^X",611,536870919]],["^15",[925,"^V",611,536870919]],["^15",[925,"^U",611,536870919]],["^15",[925,"^U",919,536870919]],["^15",[925,"^:",true,536870919]],["^15",[925,"^?",["^ ","^18",["^19",["Proxy Object"]]],536870919]],["^15",[925,"^J",["^18"],536870919]],["^15",[925,"^4",["^ ","^18","Proxy Object"],536870919]],["^15",[925,"^H",919,536870919]],["^15",[925,"^;","~u655b7379-5846-46eb-8c3f-9ad2529af599",536870919]],["^15",[926,"^Q","",536870919]],["^15",[926,"^O","^16",536870919]],["^15",[926,"^F",921,536870919]],["^15",[926,"^X",611,536870919]],["^15",[926,"^V",611,536870919]],["^15",[926,"^U",611,536870919]],["^15",[926,"^;","~u655b7379-4189-4d3d-aa5d-7f02e17f70d0",536870919]],["^15",[927,"^Q","",536870919]],["^15",[927,"^O","^16",536870919]],["^15",[927,"^F",926,536870919]],["^15",[927,"^X",611,536870919]],["^15",[927,"^V",611,536870919]],["^15",[927,"^U",611,536870919]],["^15",[927,"^;","~u655b7379-d414-4bd9-92e7-fd2a94c04b3e",536870919]],["^15",[928,"^Q","Not all inbuilt [[Object]] can be Proxied similarly, this is because apart from internal methods and properties, Objects also have  ``internal slot``s. These are special internal properties reserved for internal use, like [[Map]] has ``[MapData]``, these are not trapped by the ``Proxy`` Object so the operations fail on proxy objects. \nFor ex.:\n```js\nlet map = new Map();\n\nlet proxy = new Proxy(map, {});\n\nproxy.set('test', 1); // Error\n```\nA simple trick to fix these errors is\n\n```js\nlet map = new Map();\n\nlet proxy = new Proxy(map, {\n  get(target, prop, receiver) {\n    let value = Reflect.get(...arguments);\n    return typeof value == 'function' ? value.bind(target) : value;\n  }\n});\n\nproxy.set('test', 1); //works\n```\nThis works because get call here binds the ``this`` of Map's internal methods with the Map Object and so when an object of Map tries to access ``[MapData]`` using [[this]] it gets the binded Map object and not Proxy.\n\n[[Array]] uses no ``internal slot``s. [[Class]]es do use them for private properties/[[Function]]s.",536870919]],["^15",[928,"^O","^16",536870919]],["^15",[928,"^F",924,536870919]],["^15",[928,"^X",611,536870919]],["^15",[928,"^V",611,536870919]],["^15",[928,"^U",163,536870919]],["^15",[928,"^U",299,536870919]],["^15",[928,"^U",305,536870919]],["^15",[928,"^U",332,536870919]],["^15",[928,"^U",400,536870919]],["^15",[928,"^U",597,536870919]],["^15",[928,"^U",611,536870919]],["^15",[928,"^H",163,536870919]],["^15",[928,"^H",299,536870919]],["^15",[928,"^H",305,536870919]],["^15",[928,"^H",332,536870919]],["^15",[928,"^H",400,536870919]],["^15",[928,"^H",597,536870919]],["^15",[928,"^;","~u655b7379-967e-4f43-b8e5-81dec7d24e46",536870919]],["^15",[929,"^3","alias:: Same Site Policy\n\n- This policy is enforced by the [[Brower]]s to protect users from having data of one window/frame  being stolen by other windows/frames. \n  Browsers enforce this by only allowing windows/frames from same origin to be able to access other windows/frames. \n  Same origin requires 2 windows to have the same\n  ``protocol://domain:port``\n  \n  * The only exception is when a popup is opened or [[iframe]] is created, the popup/iframe's  ``<window>.location`` property on the [[window]] can be set to another Object, this Object has a ``.href`` property which can be set to another ``\"<url>\"``, it can only be set not read. This effectively redirects the popup window or the iframe.\n  \n  * If 2 sites have the same Second-Level-[[Domain]] then they may bypass Same Origin.\n  For ex.:\n  ``x.site.com`` and ``y.site.com`` have the same SLDs, but by default Same Origin policy still restricts it, \n  To bypass it\n  ``document.domain=site.com`` on both the windows will lift this restriction.\n  \n  This [[DOM Class Property]] on the ``document`` is going to be deprecated soon.\n-\n-\n-\n-",536870919]],["^15",[929,"^17",1700492153405,536870919]],["^15",[929,"^Z","JS/pages/Same Origin.md",536870919]],["^15",[930,"^5",376,536870919]],["^15",[930,"^K",1700492153401,536870919]],["^15",[930,"^@",false,536870919]],["^15",[930,"^Y","same site policy",536870919]],["^15",[930,"^11","Same Site Policy",536870919]],["^15",[930,"^B",1700492153401,536870919]],["^15",[930,"^;","~u655b7379-3484-4ff5-9312-4e37194bd303",536870919]],["^15",[931,"^K",1700492153403,536870919]],["^15",[931,"^@",false,536870919]],["^15",[931,"^Y","domain",536870919]],["^15",[931,"^11","Domain",536870919]],["^15",[931,"^B",1700492153403,536870919]],["^15",[931,"^;","~u655b7379-f48e-47c7-b076-78323d99dd2d",536870919]],["^15",[932,"^K",1700492153640,536870919]],["^15",[932,"^[",1014,536870919]],["^15",[932,"^@",false,536870919]],["^15",[932,"^Y","iframe",536870919]],["^15",[932,"^11","iframe",536870919]],["^15",[932,"^B",1700492153640,536870919]],["^15",[932,"^;","~u655b7379-d3a7-4cd0-bd4b-cbf77848c2d5",536870919]],["^15",[933,"^Q","alias:: Same Site Policy\n\n",536870919]],["^15",[933,"^O","^16",536870919]],["^15",[933,"^1;",["^19",[]],536870919]],["^15",[933,"^F",376,536870919]],["^15",[933,"^X",376,536870919]],["^15",[933,"^V",376,536870919]],["^15",[933,"^U",376,536870919]],["^15",[933,"^U",930,536870919]],["^15",[933,"^:",true,536870919]],["^15",[933,"^?",["^ ","^18",["^19",["Same Site Policy"]]],536870919]],["^15",[933,"^J",["^18"],536870919]],["^15",[933,"^4",["^ ","^18","Same Site Policy"],536870919]],["^15",[933,"^H",930,536870919]],["^15",[933,"^;","~u655b7379-783a-4ee8-8dc5-ccd22f44b9c9",536870919]],["^15",[934,"^Q","This policy is enforced by the [[Brower]]s to protect users from having data of one window/frame  being stolen by other windows/frames. \nBrowsers enforce this by only allowing windows/frames from same origin to be able to access other windows/frames. \nSame origin requires 2 windows to have the same\n``protocol://domain:port``\n\n* The only exception is when a popup is opened or [[iframe]] is created, the popup/iframe's  ``<window>.location`` property on the [[window]] can be set to another Object, this Object has a ``.href`` property which can be set to another ``\"<url>\"``, it can only be set not read. This effectively redirects the popup window or the iframe.\n\n* If 2 sites have the same Second-Level-[[Domain]] then they may bypass Same Origin.\nFor ex.:\n``x.site.com`` and ``y.site.com`` have the same SLDs, but by default Same Origin policy still restricts it, \nTo bypass it\n``document.domain=site.com`` on both the windows will lift this restriction.\n\nThis [[DOM Class Property]] on the ``document`` is going to be deprecated soon.",536870919]],["^15",[934,"^O","^16",536870919]],["^15",[934,"^F",933,536870919]],["^15",[934,"^X",376,536870919]],["^15",[934,"^V",376,536870919]],["^15",[934,"^U",374,536870919]],["^15",[934,"^U",375,536870919]],["^15",[934,"^U",376,536870919]],["^15",[934,"^U",520,536870919]],["^15",[934,"^U",931,536870919]],["^15",[934,"^U",932,536870919]],["^15",[934,"^H",374,536870919]],["^15",[934,"^H",375,536870919]],["^15",[934,"^H",520,536870919]],["^15",[934,"^H",931,536870919]],["^15",[934,"^H",932,536870919]],["^15",[934,"^;","~u655b7379-e29e-4126-af67-794a5ee79fd3",536870919]],["^15",[935,"^Q","",536870919]],["^15",[935,"^O","^16",536870919]],["^15",[935,"^F",934,536870919]],["^15",[935,"^X",376,536870919]],["^15",[935,"^V",376,536870919]],["^15",[935,"^U",376,536870919]],["^15",[935,"^;","~u655b7379-912d-4cfc-84f5-c2ad084e4fa6",536870919]],["^15",[936,"^Q","",536870919]],["^15",[936,"^O","^16",536870919]],["^15",[936,"^F",935,536870919]],["^15",[936,"^X",376,536870919]],["^15",[936,"^V",376,536870919]],["^15",[936,"^U",376,536870919]],["^15",[936,"^;","~u655b7379-0b5f-426a-8495-2c2e47793ea3",536870919]],["^15",[937,"^Q","",536870919]],["^15",[937,"^O","^16",536870919]],["^15",[937,"^F",936,536870919]],["^15",[937,"^X",376,536870919]],["^15",[937,"^V",376,536870919]],["^15",[937,"^U",376,536870919]],["^15",[937,"^;","~u655b7379-bc9a-4e8a-aee8-aa955ad17791",536870919]],["^15",[938,"^Q","",536870919]],["^15",[938,"^O","^16",536870919]],["^15",[938,"^F",937,536870919]],["^15",[938,"^X",376,536870919]],["^15",[938,"^V",376,536870919]],["^15",[938,"^U",376,536870919]],["^15",[938,"^;","~u655b7379-2167-42fb-8a20-4bd16b796029",536870919]],["^15",[939,"^3","- In JS, we have special functions to schedule given functions or expressions after a set time period.\n- We do so using [timers](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers) in JS. Some of them are:\n  ``setTimeout``: Runs the given expression or [[Function]] after given milliseconds of delay, also passing it given args if it accepts.\n  ```js\n  let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)\n  ```\n  (Note when passing a function x, pass it's value with x not execute it right away with x())\n  \n  ``setInterval``: Runs the given expr./function after given delay, then repeats the same.\n  ```js\n  let timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)\n  ```\n  \n  ``clearTimeout(<id>)``: If we pass a setTimeout's/setInterval's returned id to it, it clears the timeout.\n  \n  We can  nest setTimeout to create a loop much like setInterval. The difference between the 2 execution methodologies is that in setInterval, the timer is already running by the time function execution starts so the function's execution eats into the waiting time and so the actual time difference between calls is always less than the given delay. However, in setTimeout if we set the timer again at the end, it will only start the timer when the execution ends giving closer to given delay between each call.\n  For ex.:\n  ![image.png](../assets/image_1686239861758_0.png)\n  setTimeout with 100ms delay\n  vs.\n  ![image.png](../assets/image_1686239876001_0.png)\n  setInterval with 100ms delay\n  \n  No matter how much delay we choose, even 0, it will run set...'s code after the synchronous code has finished executing in the [[Message Queue]]. \n  For ex.:\n  ```js\n  setTimeout(() => console.log(\"World\"));\n  \n  console.log(\"Hello\"); //prints \"Hello World\"\n  ```\n  That is also to say, 0-delay is also not quite 0 in web browsers, because according to [[HTML]] spec, after 5 nested 0-delay set... calls, the minimum delay between the next call will be at-least 4ms.\n  \n  The functions passed to these functions lose their ``this``, as we see in Caching in [[Function]]s. However, in browsers, ``set...`` sets their passed function's ``this`` to  the [[window]] [[Object]], for Node.js, ``this`` is set to the timer [[Object]].\n-\n-",536870919]],["^15",[939,"^17",1700492153420,536870919]],["^15",[939,"^Z","JS/pages/Scheduling.md",536870919]],["^15",[940,"^Q","In JS, we have special functions to schedule given functions or expressions after a set time period.",536870919]],["^15",[940,"^O","^16",536870919]],["^15",[940,"^F",403,536870919]],["^15",[940,"^X",403,536870919]],["^15",[940,"^V",403,536870919]],["^15",[940,"^U",403,536870919]],["^15",[940,"^;","~u655b7379-83c5-4efc-b4eb-c1c6e7410475",536870919]],["^15",[941,"^Q","We do so using [timers](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers) in JS. Some of them are:\n``setTimeout``: Runs the given expression or [[Function]] after given milliseconds of delay, also passing it given args if it accepts.\n```js\nlet timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)\n```\n(Note when passing a function x, pass it's value with x not execute it right away with x())\n\n``setInterval``: Runs the given expr./function after given delay, then repeats the same.\n```js\nlet timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)\n```\n\n``clearTimeout(<id>)``: If we pass a setTimeout's/setInterval's returned id to it, it clears the timeout.\n\nWe can  nest setTimeout to create a loop much like setInterval. The difference between the 2 execution methodologies is that in setInterval, the timer is already running by the time function execution starts so the function's execution eats into the waiting time and so the actual time difference between calls is always less than the given delay. However, in setTimeout if we set the timer again at the end, it will only start the timer when the execution ends giving closer to given delay between each call.\nFor ex.:\n![image.png](../assets/image_1686239861758_0.png)\nsetTimeout with 100ms delay\nvs.\n![image.png](../assets/image_1686239876001_0.png)\nsetInterval with 100ms delay\n\nNo matter how much delay we choose, even 0, it will run set...'s code after the synchronous code has finished executing in the [[Message Queue]]. \nFor ex.:\n```js\nsetTimeout(() => console.log(\"World\"));\n\nconsole.log(\"Hello\"); //prints \"Hello World\"\n```\nThat is also to say, 0-delay is also not quite 0 in web browsers, because according to [[HTML]] spec, after 5 nested 0-delay set... calls, the minimum delay between the next call will be at-least 4ms.\n\nThe functions passed to these functions lose their ``this``, as we see in Caching in [[Function]]s. However, in browsers, ``set...`` sets their passed function's ``this`` to  the [[window]] [[Object]], for Node.js, ``this`` is set to the timer [[Object]].",536870919]],["^15",[941,"^O","^16",536870919]],["^15",[941,"^F",940,536870919]],["^15",[941,"^X",403,536870919]],["^15",[941,"^V",403,536870919]],["^15",[941,"^U",163,536870919]],["^15",[941,"^U",284,536870919]],["^15",[941,"^U",299,536870919]],["^15",[941,"^U",343,536870919]],["^15",[941,"^U",375,536870919]],["^15",[941,"^U",403,536870919]],["^15",[941,"^H",163,536870919]],["^15",[941,"^H",284,536870919]],["^15",[941,"^H",299,536870919]],["^15",[941,"^H",343,536870919]],["^15",[941,"^H",375,536870919]],["^15",[941,"^;","~u655b7379-1594-4cca-842d-2b9ccd1099c3",536870919]],["^15",[942,"^Q","",536870919]],["^15",[942,"^O","^16",536870919]],["^15",[942,"^F",941,536870919]],["^15",[942,"^X",403,536870919]],["^15",[942,"^V",403,536870919]],["^15",[942,"^U",403,536870919]],["^15",[942,"^;","~u655b7379-05fd-4edf-8fa5-77333237e90c",536870919]],["^15",[943,"^Q","",536870919]],["^15",[943,"^O","^16",536870919]],["^15",[943,"^F",942,536870919]],["^15",[943,"^X",403,536870919]],["^15",[943,"^V",403,536870919]],["^15",[943,"^U",403,536870919]],["^15",[943,"^;","~u655b7379-0380-4c63-a553-a5404c172641",536870919]],["^15",[944,"^3","- A code block, i.e. anything between ``{...}`` where the ``{...}`` is used to hold multiple statements and lines, has its own scope and can access variables of the parent scope. A scope is a boundary within which identifiers are valid, the lifetime of any variable/function/etc. is limited to the scope/boundary they are in (and ones below them).\n  \n  For ex.:\n  ```js\n  {\n   let x =2;\n  }\n  //x is not accessible anymore.\n  \n  {\n   let x =2;\n   {\n    console.log(x); //works because x is in a parent scope.\n   }\n  }\n  ```\n- However, identifiers in scopes are passed around, this is because of [[Lexical Environment]].\n-",536870919]],["^15",[944,"^17",1700492153426,536870919]],["^15",[944,"^Z","JS/pages/Scope.md",536870919]],["^15",[945,"^Q","A scope is the range within a program for which an item is valid. There's a single global scope and many local scopes in any program. A new custom scope can be created with {…}.\ntitle:: Scope\n\nFor ex.:\n```rust\nfn xyz() {\n\t{\n\t\tlet y:i32=2;\n\t}\n\tprintln!(y); //will throw error as y is not in the same scope, it is also already dropped.\n}\n```",536870958]],["^15",[945,"^O","^16",536870919]],["^15",[945,"^F",345,536870919]],["^15",[945,"^X",345,536870919]],["^15",[945,"^V",345,536870919]],["^15",[945,"^U",345,536870919]],["^15",[945,"^?",["^ ","~:title","Scope"],536870958]],["^15",[945,"^J",["^1>"],536870958]],["^15",[945,"^4",["^ ","^1>","Scope"],536870958]],["^15",[945,"^;","~u655b7379-e13d-4d2a-8255-6d625c95cc11",536870919]],["^15",[948,"^3","- In JS, a Set is less like an [[Array]] and more like a [[Map]] as it is still an [[Object]] and hence we need to use its methods to CRUD values in it.\n- Main methods\n  * [`new Set([iterable])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set) – creates the set, and if an `iterable` object is provided (usually an array), copies values from it into the set.\n  * [`set.add(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add) – adds a value, returns the set itself.\n  * [`set.delete(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete) – removes the value, returns `true` if `value` existed at the moment of the call, otherwise `false`.\n  * [`set.has(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) – returns `true` if the value exists in the set, otherwise `false`.\n  * [`set.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear) – removes everything from the set.\n  * [`set.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size) – is the elements count.\n  * [`set.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys) – returns an iterable object for values,\n  * [`set.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) – same as `set.keys()`, for compatibility with `Map`,\n  * [`set.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries) – returns an iterable object for entries `[value, value]`, exists for compatibility with `Map`.\n- Just like a map, a set can take value of any type.",536870919]],["^15",[948,"^17",1700492153440,536870919]],["^15",[948,"^Z","JS/pages/Set.md",536870919]],["^15",[949,"^Q","In JS, a Set is less like an [[Array]] and more like a [[Map]] as it is still an [[Object]] and hence we need to use its methods to CRUD values in it.",536870919]],["^15",[949,"^O","^16",536870919]],["^15",[949,"^F",140,536870919]],["^15",[949,"^X",140,536870919]],["^15",[949,"^V",140,536870919]],["^15",[949,"^U",140,536870919]],["^15",[949,"^U",299,536870919]],["^15",[949,"^U",305,536870919]],["^15",[949,"^U",597,536870919]],["^15",[949,"^H",299,536870919]],["^15",[949,"^H",305,536870919]],["^15",[949,"^H",597,536870919]],["^15",[949,"^;","~u655b7379-b039-4d14-977b-887b0257c238",536870919]],["^15",[950,"^Q","Main methods\n* [`new Set([iterable])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set) – creates the set, and if an `iterable` object is provided (usually an array), copies values from it into the set.\n* [`set.add(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add) – adds a value, returns the set itself.\n* [`set.delete(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete) – removes the value, returns `true` if `value` existed at the moment of the call, otherwise `false`.\n* [`set.has(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) – returns `true` if the value exists in the set, otherwise `false`.\n* [`set.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear) – removes everything from the set.\n* [`set.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size) – is the elements count.\n* [`set.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys) – returns an iterable object for values,\n* [`set.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) – same as `set.keys()`, for compatibility with `Map`,\n* [`set.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries) – returns an iterable object for entries `[value, value]`, exists for compatibility with `Map`.",536870919]],["^15",[950,"^O","^16",536870919]],["^15",[950,"^F",949,536870919]],["^15",[950,"^X",140,536870919]],["^15",[950,"^V",140,536870919]],["^15",[950,"^U",140,536870919]],["^15",[950,"^;","~u655b7379-347a-43d2-81e5-8cf2ecdebd5a",536870919]],["^15",[951,"^Q","Just like a map, a set can take value of any type.",536870919]],["^15",[951,"^O","^16",536870919]],["^15",[951,"^F",950,536870919]],["^15",[951,"^X",140,536870919]],["^15",[951,"^V",140,536870919]],["^15",[951,"^U",140,536870919]],["^15",[951,"^;","~u655b7379-7a96-45a0-af3e-05900bca25d7",536870919]],["^15",[952,"^3","alias:: Variable Shadowing\n\n- If an inner [[Scope]] declares a variable with the same name as the outer scope, then the inner scope variable will be accessed in this scope and scopes below it.\n  For ex.:\n  ```js\n  let x=2;\n  function xyz(){\n      let x =3; \n     console.log(x); //prints 3\n  }\n  ```\n-",536870919]],["^15",[952,"^17",1700492153453,536870919]],["^15",[952,"^Z","JS/pages/Shadowed.md",536870919]],["^15",[953,"^5",458,536870919]],["^15",[953,"^K",1700492153452,536870919]],["^15",[953,"^@",false,536870919]],["^15",[953,"^Y","variable shadowing",536870919]],["^15",[953,"^11","Variable Shadowing",536870919]],["^15",[953,"^B",1700492153452,536870919]],["^15",[953,"^;","~u655b7379-7278-4816-8a7a-9a26bbd10aa3",536870919]],["^15",[954,"^Q","alias:: Variable Shadowing\n\n",536870919]],["^15",[954,"^O","^16",536870919]],["^15",[954,"^1;",["^19",[]],536870919]],["^15",[954,"^F",458,536870919]],["^15",[954,"^X",458,536870919]],["^15",[954,"^V",458,536870919]],["^15",[954,"^U",458,536870919]],["^15",[954,"^U",953,536870919]],["^15",[954,"^:",true,536870919]],["^15",[954,"^?",["^ ","^18",["^19",["Variable Shadowing"]]],536870919]],["^15",[954,"^J",["^18"],536870919]],["^15",[954,"^4",["^ ","^18","Variable Shadowing"],536870919]],["^15",[954,"^H",953,536870919]],["^15",[954,"^;","~u655b7379-53a7-438b-aaa3-43d632ceb7de",536870919]],["^15",[955,"^Q","If an inner [[Scope]] declares a variable with the same name as the outer scope, then the inner scope variable will be accessed in this scope and scopes below it.\nFor ex.:\n```js\nlet x=2;\nfunction xyz(){\n    let x =3; \n   console.log(x); //prints 3\n}\n```",536870919]],["^15",[955,"^O","^16",536870919]],["^15",[955,"^F",954,536870919]],["^15",[955,"^X",458,536870919]],["^15",[955,"^V",458,536870919]],["^15",[955,"^U",345,536870919]],["^15",[955,"^U",458,536870919]],["^15",[955,"^H",345,536870919]],["^15",[955,"^;","~u655b7379-90a8-4802-aec7-c2232034419b",536870919]],["^15",[956,"^Q","",536870919]],["^15",[956,"^O","^16",536870919]],["^15",[956,"^F",955,536870919]],["^15",[956,"^X",458,536870919]],["^15",[956,"^V",458,536870919]],["^15",[956,"^U",458,536870919]],["^15",[956,"^;","~u655b7379-f292-47f2-a84d-bd6dc662e738",536870919]],["^15",[957,"^3","- Here, comparison checks the type and the value. If either of them is not same, the value returned by this comparison operator is false.\n  For ex.:\n  ```js\n  let x= 0==false; //true\n  let y= 0===false; //false\n  \n  ```\n-",536870919]],["^15",[957,"^17",1700492153462,536870919]],["^15",[957,"^Z","JS/pages/Strict Equality.md",536870919]],["^15",[958,"^Q","Here, comparison checks the type and the value. If either of them is not same, the value returned by this comparison operator is false.\nFor ex.:\n```js\nlet x= 0==false; //true\nlet y= 0===false; //false\n\n```",536870919]],["^15",[958,"^O","^16",536870919]],["^15",[958,"^F",483,536870919]],["^15",[958,"^X",483,536870919]],["^15",[958,"^V",483,536870919]],["^15",[958,"^U",483,536870919]],["^15",[958,"^;","~u655b7379-c5e4-47b2-895f-8e8bd9140c41",536870919]],["^15",[959,"^Q","",536870919]],["^15",[959,"^O","^16",536870919]],["^15",[959,"^F",958,536870919]],["^15",[959,"^X",483,536870919]],["^15",[959,"^V",483,536870919]],["^15",[959,"^U",483,536870919]],["^15",[959,"^;","~u655b7379-d879-47e9-8590-8e8b3af2c99b",536870919]],["^15",[960,"^3","- [[Object]] wrapper for primitive type ``symbol``\n- A ``symbol`` represents a unique identifier in JS.\n  For ex.:\n  ```js\n  let x = Symbol(\"yoo\");\n  ```\n  The \"yoo\" is the symbol's description(aka Symbol name), it is optional but helps in debugging.\n  We can get the description of a Symbol with the ``.description`` property.\n- Symbols are always unique, that is 2 symbols are always inequal, even if they have the same description.\n  ```js\n  let x= Symbol();\n  let y= Symbol();\n  x==y; //false\n  ```\n- Symbols are the only type that don't implicitly get converted to another type.\n  So if we call ``alert(...)`` with a Symbol, it will give an error. We can explicitly convert a Symbol to a string with ``.toString()`` method of the Symbol.\n- Since Symbols are always unique, they are meant to be used as unique property names for [[Object]]s. This way we never overwrite any pre-existing Object property.\n  ```js\n  let x= Symbol(\"id\");\n  let y= {...};\n  y[x]= \"yo\";\n  y[\"id\"]= \"abc\";\n  \n  y[x]; //returns \"yo\"\n  \n  //To use a Symbol inside the Object declaration,\n  let z= {\n    [x]: \"yo\", //we use this special [<Symbol>] syntax.\n  }\n  ```\n- Global Symbol Registry\n  Since Symbols are always unique, sometimes we may need Symbols properties to be accessible even outside the scope of the variable holding the Symbol.\n  To achieve this we can use the Global Symbol Registry which stores Symbols and these symbols are called ``Global Symbols``.\n  \n  To create a symbol in the GS, if it doesn't already exist \n  ```js\n  let x = Symbol.for(\"yo\");\n  ```\n  Creates a Symbol with the \"yo\" key, if it doesn't already exist in the GS. If it does exist, it simply returns it, otherwise it creates it, stores it in the GS and returns it to x.\n  \n  If we wish to check if a Symbol with the given key/description exists in the GS, we can use ``Symbol.keyFor(<symbol>)``. It returns undefined if the Symbol with the same key isn't found in the GS, otherwise it returns the Symbol's key/description\n  For ex.:\n  ```js\n  let s= Symbol(\"id\");\n  Symbol.keyFor(s); //returns undefined\n  ```\n-\n- There are various other Symbols, that can be used to fine-tune [[Object]]s.\n  They are known as [System Symbols](https://tc39.es/ecma262/#sec-well-known-symbols).\n-",536870919]],["^15",[960,"^17",1700492153499,536870919]],["^15",[960,"^Z","JS/pages/Symbol.md",536870919]],["^15",[961,"^Q","Since Symbols are always unique, they are meant to be used as unique property names for [[Object]]s. This way we never overwrite any pre-existing Object property.\n```js\nlet x= Symbol(\"id\");\nlet y= {...};\ny[x]= \"yo\";\ny[\"id\"]= \"abc\";\n\ny[x]; //returns \"yo\"\n\n//To use a Symbol inside the Object declaration,\nlet z= {\n  [x]: \"yo\", //we use this special [<Symbol>] syntax.\n}\n```",536870919]],["^15",[961,"^O","^16",536870919]],["^15",[961,"^F",964,536870919]],["^15",[961,"^X",302,536870919]],["^15",[961,"^V",302,536870919]],["^15",[961,"^U",299,536870919]],["^15",[961,"^U",302,536870919]],["^15",[961,"^H",299,536870919]],["^15",[961,"^;","~u655b7379-386d-452a-84f0-d2a87e5d7f46",536870919]],["^15",[962,"^Q","There are various other Symbols, that can be used to fine-tune [[Object]]s.\nThey are known as [System Symbols](https://tc39.es/ecma262/#sec-well-known-symbols).",536870919]],["^15",[962,"^O","^16",536870919]],["^15",[962,"^F",968,536870919]],["^15",[962,"^X",302,536870919]],["^15",[962,"^V",302,536870919]],["^15",[962,"^U",299,536870919]],["^15",[962,"^U",302,536870919]],["^15",[962,"^H",299,536870919]],["^15",[962,"^;","~u655b7379-966f-4e16-b088-6d2d9e4471f2",536870919]],["^15",[963,"^Q","[[Object]] wrapper for primitive type ``symbol``",536870919]],["^15",[963,"^O","^16",536870919]],["^15",[963,"^F",302,536870919]],["^15",[963,"^X",302,536870919]],["^15",[963,"^V",302,536870919]],["^15",[963,"^U",299,536870919]],["^15",[963,"^U",302,536870919]],["^15",[963,"^H",299,536870919]],["^15",[963,"^;","~u655b7379-7f9f-4ce6-b9f1-ad5e42b1e02f",536870919]],["^15",[964,"^Q","Symbols are the only type that don't implicitly get converted to another type.\nSo if we call ``alert(...)`` with a Symbol, it will give an error. We can explicitly convert a Symbol to a string with ``.toString()`` method of the Symbol.",536870919]],["^15",[964,"^O","^16",536870919]],["^15",[964,"^F",969,536870919]],["^15",[964,"^X",302,536870919]],["^15",[964,"^V",302,536870919]],["^15",[964,"^U",302,536870919]],["^15",[964,"^;","~u655b7379-a118-427c-b9a6-ff5d9af74d77",536870919]],["^15",[965,"^Q","",536870919]],["^15",[965,"^O","^16",536870919]],["^15",[965,"^F",962,536870919]],["^15",[965,"^X",302,536870919]],["^15",[965,"^V",302,536870919]],["^15",[965,"^U",302,536870919]],["^15",[965,"^;","~u655b7379-afc6-40b7-bc78-61842b07c560",536870919]],["^15",[966,"^Q","Global Symbol Registry\nSince Symbols are always unique, sometimes we may need Symbols properties to be accessible even outside the scope of the variable holding the Symbol.\nTo achieve this we can use the Global Symbol Registry which stores Symbols and these symbols are called ``Global Symbols``.\n\nTo create a symbol in the GS, if it doesn't already exist \n```js\nlet x = Symbol.for(\"yo\");\n```\nCreates a Symbol with the \"yo\" key, if it doesn't already exist in the GS. If it does exist, it simply returns it, otherwise it creates it, stores it in the GS and returns it to x.\n\nIf we wish to check if a Symbol with the given key/description exists in the GS, we can use ``Symbol.keyFor(<symbol>)``. It returns undefined if the Symbol with the same key isn't found in the GS, otherwise it returns the Symbol's key/description\nFor ex.:\n```js\nlet s= Symbol(\"id\");\nSymbol.keyFor(s); //returns undefined\n```",536870919]],["^15",[966,"^O","^16",536870919]],["^15",[966,"^F",961,536870919]],["^15",[966,"^X",302,536870919]],["^15",[966,"^V",302,536870919]],["^15",[966,"^U",302,536870919]],["^15",[966,"^;","~u655b7379-71ba-4ada-826f-18d292e6b56a",536870919]],["^15",[967,"^Q","A ``symbol`` represents a unique identifier in JS.\nFor ex.:\n```js\nlet x = Symbol(\"yoo\");\n```\nThe \"yoo\" is the symbol's description(aka Symbol name), it is optional but helps in debugging.\nWe can get the description of a Symbol with the ``.description`` property.",536870919]],["^15",[967,"^O","^16",536870919]],["^15",[967,"^F",963,536870919]],["^15",[967,"^X",302,536870919]],["^15",[967,"^V",302,536870919]],["^15",[967,"^U",302,536870919]],["^15",[967,"^;","~u655b7379-ad85-49ef-88c6-a83b3b6ee20a",536870919]],["^15",[968,"^Q","",536870919]],["^15",[968,"^O","^16",536870919]],["^15",[968,"^F",966,536870919]],["^15",[968,"^X",302,536870919]],["^15",[968,"^V",302,536870919]],["^15",[968,"^U",302,536870919]],["^15",[968,"^;","~u655b7379-66f6-4246-a2bd-1b137f9cc453",536870919]],["^15",[969,"^Q","Symbols are always unique, that is 2 symbols are always inequal, even if they have the same description.\n```js\nlet x= Symbol();\nlet y= Symbol();\nx==y; //false\n```",536870919]],["^15",[969,"^O","^16",536870919]],["^15",[969,"^F",967,536870919]],["^15",[969,"^X",302,536870919]],["^15",[969,"^V",302,536870919]],["^15",[969,"^U",302,536870919]],["^15",[969,"^;","~u655b7379-d83d-4f44-b2dd-e7d130411d6c",536870919]],["^15",[970,"^3","- It is recommended to do ``Behavior Driven Development`` (BDD) which means we should write Tests, Documentation and Examples for all functions/features.\n- For ex.:\n  ```js\n  describe(\"pow\", function() {\n  \n    it(\"raises to n-th power\", function() {\n      assert.equal(pow(2, 3), 8);\n    });\n  \n  });\n  ```\n  Using ``Mocha`` for ``describe`` and ``it``, ``Chai`` for ``assert.equal`` and ``Sinon`` to inject into functions.",536870919]],["^15",[970,"^17",1700492153521,536870919]],["^15",[970,"^Z","JS/pages/Testing.md",536870919]],["^15",[971,"^Q","It is recommended to do ``Behavior Driven Development`` (BDD) which means we should write Tests, Documentation and Examples for all functions/features.",536870919]],["^15",[971,"^O","^16",536870919]],["^15",[971,"^F",598,536870919]],["^15",[971,"^X",598,536870919]],["^15",[971,"^V",598,536870919]],["^15",[971,"^U",598,536870919]],["^15",[971,"^;","~u655b7379-c80e-4cdb-8d19-1625155de391",536870919]],["^15",[972,"^Q","For ex.:\n```js\ndescribe(\"pow\", function() {\n\n  it(\"raises to n-th power\", function() {\n    assert.equal(pow(2, 3), 8);\n  });\n\n});\n```\nUsing ``Mocha`` for ``describe`` and ``it``, ``Chai`` for ``assert.equal`` and ``Sinon`` to inject into functions.",536870919]],["^15",[972,"^O","^16",536870919]],["^15",[972,"^F",971,536870919]],["^15",[972,"^X",598,536870919]],["^15",[972,"^V",598,536870919]],["^15",[972,"^U",598,536870919]],["^15",[972,"^;","~u655b7379-1eec-4175-b96a-6282b84e7a9a",536870919]],["^15",[973,"^3","- New features to JS are added regularly, such as the [[Nullish-Coalescing Operator]] added in 2020. To maintain compatibility with older browser versions, a process called Transpilation is used, done through a Transpiler such as [[Babel]] or [[Webpack]] (Implicitly). This tool converts new JS code into code that the target version can understand, so for Null-Coalescing Operator ``??`` it might generate a simple ``x !== undefined && x!== null``.\n-",536870919]],["^15",[973,"^17",1700492153530,536870919]],["^15",[973,"^Z","JS/pages/Transpiler.md",536870919]],["^15",[974,"^Q","New features to JS are added regularly, such as the [[Nullish-Coalescing Operator]] added in 2020. To maintain compatibility with older browser versions, a process called Transpilation is used, done through a Transpiler such as [[Babel]] or [[Webpack]] (Implicitly). This tool converts new JS code into code that the target version can understand, so for Null-Coalescing Operator ``??`` it might generate a simple ``x !== undefined && x!== null``.",536870919]],["^15",[974,"^O","^16",536870919]],["^15",[974,"^F",613,536870919]],["^15",[974,"^X",613,536870919]],["^15",[974,"^V",613,536870919]],["^15",[974,"^U",357,536870919]],["^15",[974,"^U",613,536870919]],["^15",[974,"^U",681,536870919]],["^15",[974,"^U",814,536870919]],["^15",[974,"^H",357,536870919]],["^15",[974,"^H",681,536870919]],["^15",[974,"^H",814,536870919]],["^15",[974,"^;","~u655b7379-be0c-4f23-b99c-bea084a026b4",536870919]],["^15",[975,"^Q","",536870919]],["^15",[975,"^O","^16",536870919]],["^15",[975,"^F",974,536870919]],["^15",[975,"^X",613,536870919]],["^15",[975,"^V",613,536870919]],["^15",[975,"^U",613,536870919]],["^15",[975,"^;","~u655b7379-fa35-4ce7-9668-f02cfede8822",536870919]],["^15",[976,"^3","- A weaker variant of the [[Map]].\n- Methods:\n  ``new WeakMap()``\n  * [`weakMap.set(key, value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set)\n  * [`weakMap.get(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get)\n  * [`weakMap.delete(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete)\n  * [`weakMap.has(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has)\n- Only accepts [[Object]]s as keys and doesn't prevent [[Garbage Collection]].\n  That is,\n  ```js\n  let x = new Map();\n  let y = {};\n  x.set(y,2);\n  y=null;\n  \n  //y still exists in Map x\n  ```\n  Now even though we can never explicitly get y again, it's still a reachable reference and is hence not Garbage Collected. This is also because we can iterate over Map keys and then get it again.\n  A weakMap prevents that as it is not [[Iterable]] and once an Object is removed, it is unreachable and is hence removed from the WeakMap as well.\n  That is,\n  ```js\n  let x = new WeakMap();\n  let y = {};\n  x.set(y,2);\n  y=null;\n  \n  //y doesn't exist anymore in WeakMap x\n  \n  ```\n  The GC can occur at any time, it is upto the JS engine and is not automatically triggered when an Object loses reference.\n-",536870919]],["^15",[976,"^17",1700492153543,536870919]],["^15",[976,"^Z","JS/pages/WeakMap.md",536870919]],["^15",[977,"^Q","A weaker variant of the [[Map]].",536870919]],["^15",[977,"^O","^16",536870919]],["^15",[977,"^F",610,536870919]],["^15",[977,"^X",610,536870919]],["^15",[977,"^V",610,536870919]],["^15",[977,"^U",597,536870919]],["^15",[977,"^U",610,536870919]],["^15",[977,"^H",597,536870919]],["^15",[977,"^;","~u655b7379-087d-42c0-99d6-f00396d80054",536870919]],["^15",[978,"^Q","Methods:\n``new WeakMap()``\n* [`weakMap.set(key, value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set)\n* [`weakMap.get(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get)\n* [`weakMap.delete(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete)\n* [`weakMap.has(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has)",536870919]],["^15",[978,"^O","^16",536870919]],["^15",[978,"^F",977,536870919]],["^15",[978,"^X",610,536870919]],["^15",[978,"^V",610,536870919]],["^15",[978,"^U",610,536870919]],["^15",[978,"^;","~u655b7379-8550-445d-abed-82aae43c0dd8",536870919]],["^15",[979,"^Q","Only accepts [[Object]]s as keys and doesn't prevent [[Garbage Collection]].\nThat is,\n```js\nlet x = new Map();\nlet y = {};\nx.set(y,2);\ny=null;\n\n//y still exists in Map x\n```\nNow even though we can never explicitly get y again, it's still a reachable reference and is hence not Garbage Collected. This is also because we can iterate over Map keys and then get it again.\nA weakMap prevents that as it is not [[Iterable]] and once an Object is removed, it is unreachable and is hence removed from the WeakMap as well.\nThat is,\n```js\nlet x = new WeakMap();\nlet y = {};\nx.set(y,2);\ny=null;\n\n//y doesn't exist anymore in WeakMap x\n\n```\nThe GC can occur at any time, it is upto the JS engine and is not automatically triggered when an Object loses reference.",536870919]],["^15",[979,"^O","^16",536870919]],["^15",[979,"^F",978,536870919]],["^15",[979,"^X",610,536870919]],["^15",[979,"^V",610,536870919]],["^15",[979,"^U",299,536870919]],["^15",[979,"^U",304,536870919]],["^15",[979,"^U",606,536870919]],["^15",[979,"^U",610,536870919]],["^15",[979,"^H",299,536870919]],["^15",[979,"^H",304,536870919]],["^15",[979,"^H",606,536870919]],["^15",[979,"^;","~u655b7379-56f2-4f7c-a860-dd4f8f6e01b9",536870919]],["^15",[980,"^Q","",536870919]],["^15",[980,"^O","^16",536870919]],["^15",[980,"^F",979,536870919]],["^15",[980,"^X",610,536870919]],["^15",[980,"^V",610,536870919]],["^15",[980,"^U",610,536870919]],["^15",[980,"^;","~u655b7379-cee7-42de-90d2-45892c6597a4",536870919]],["^15",[981,"^3","- Just like [[Map]] has [[WeakMap]], a [[Set]] has WeakSet.\n- Methods:\n  ``.add(key,value)``\n  ``.has(key)``\n  ``.delete(key)``\n- Everything is the same as in a [[WeakMap]], that a WeakSet is not [[Iterable]] and only accepts Objects as Keys.\n-",536870919]],["^15",[981,"^17",1700492153549,536870919]],["^15",[981,"^Z","JS/pages/WeakSet.md",536870919]],["^15",[982,"^Q","Just like [[Map]] has [[WeakMap]], a [[Set]] has WeakSet.",536870919]],["^15",[982,"^O","^16",536870919]],["^15",[982,"^F",608,536870919]],["^15",[982,"^X",608,536870919]],["^15",[982,"^V",608,536870919]],["^15",[982,"^U",140,536870919]],["^15",[982,"^U",597,536870919]],["^15",[982,"^U",608,536870919]],["^15",[982,"^U",610,536870919]],["^15",[982,"^H",140,536870919]],["^15",[982,"^H",597,536870919]],["^15",[982,"^H",610,536870919]],["^15",[982,"^;","~u655b7379-eb52-46bf-884a-2c323a5629f8",536870919]],["^15",[983,"^Q","Methods:\n``.add(key,value)``\n``.has(key)``\n``.delete(key)``",536870919]],["^15",[983,"^O","^16",536870919]],["^15",[983,"^F",982,536870919]],["^15",[983,"^X",608,536870919]],["^15",[983,"^V",608,536870919]],["^15",[983,"^U",608,536870919]],["^15",[983,"^;","~u655b7379-071a-40c3-877c-dbff829fa948",536870919]],["^15",[984,"^Q","Everything is the same as in a [[WeakMap]], that a WeakSet is not [[Iterable]] and only accepts Objects as Keys.",536870919]],["^15",[984,"^O","^16",536870919]],["^15",[984,"^F",983,536870919]],["^15",[984,"^X",608,536870919]],["^15",[984,"^V",608,536870919]],["^15",[984,"^U",304,536870919]],["^15",[984,"^U",608,536870919]],["^15",[984,"^U",610,536870919]],["^15",[984,"^H",304,536870919]],["^15",[984,"^H",610,536870919]],["^15",[984,"^;","~u655b7379-b634-4418-bf17-df0426609a0d",536870919]],["^15",[985,"^Q","",536870919]],["^15",[985,"^O","^16",536870919]],["^15",[985,"^F",984,536870919]],["^15",[985,"^X",608,536870919]],["^15",[985,"^V",608,536870919]],["^15",[985,"^U",608,536870919]],["^15",[985,"^;","~u655b7379-30f8-43cd-82c3-a6ceee5a7a53",536870919]],["^15",[986,"^3","- A [[Module]] in NodeJS.\n-",536870919]],["^15",[986,"^17",1700492153555,536870919]],["^15",[986,"^Z","JS/pages/Web Worker.md",536870919]],["^15",[987,"^Q","A [[Module]] in NodeJS.",536870919]],["^15",[987,"^O","^16",536870919]],["^15",[987,"^F",342,536870919]],["^15",[987,"^X",342,536870919]],["^15",[987,"^V",342,536870919]],["^15",[987,"^U",287,536870919]],["^15",[987,"^U",342,536870919]],["^15",[987,"^H",287,536870919]],["^15",[987,"^;","~u655b7379-7ea3-4758-8486-bc24bc17786c",536870919]],["^15",[988,"^Q","",536870919]],["^15",[988,"^O","^16",536870919]],["^15",[988,"^F",987,536870919]],["^15",[988,"^X",342,536870919]],["^15",[988,"^V",342,536870919]],["^15",[988,"^U",342,536870919]],["^15",[988,"^;","~u655b7379-bfb6-41c5-a5cb-1e9ab8f440f9",536870919]],["^15",[989,"^3","- [Webpack](https://webpack.js.org/)\n- Bundles assets and content for better serving website to client browsers.\n- They do something like so\n  \n  * Take a “main” module, the one intended to be put in `<script type=\"module\">` in HTML.\n  * Analyze its dependencies: imports and then imports of imports etc.\n  * Build a single file with all modules (or multiple files, that’s tunable), replacing native `import` calls with bundler functions, so that it works. “Special” module types like HTML/CSS modules are also supported.\n  * In the process, other transformations and optimizations may be applied like\n  Unreachable code removed.\n  Unused exports removed (“tree-shaking”).\n  Development-specific statements like `console` and `debugger` removed.\n  Modern, bleeding-edge JavaScript syntax may be transformed to older one with similar functionality using [Babel](https://babeljs.io/).\n  The resulting file is minified (spaces removed, variables replaced with shorter names, etc).\n  \n  So we get something like this\n  ```html\n  <!-- Assuming we got bundle.js from a tool like Webpack -->\n  <script src=\"bundle.js\"></script>\n  ```\n  \n  The generated bundle.js has all the [[Module]]s and [[Optimization]]s and can be directly used without the module type in the [[<script>]].\n-",536870919]],["^15",[989,"^17",1700492153565,536870919]],["^15",[989,"^Z","JS/pages/Webpack.md",536870919]],["^15",[990,"^Q","[Webpack](https://webpack.js.org/)",536870919]],["^15",[990,"^O","^16",536870919]],["^15",[990,"^F",814,536870919]],["^15",[990,"^X",814,536870919]],["^15",[990,"^V",814,536870919]],["^15",[990,"^U",814,536870919]],["^15",[990,"^;","~u655b7379-7676-48cc-aef8-a657d8679503",536870919]],["^15",[991,"^Q","Bundles assets and content for better serving website to client browsers.",536870919]],["^15",[991,"^O","^16",536870919]],["^15",[991,"^F",990,536870919]],["^15",[991,"^X",814,536870919]],["^15",[991,"^V",814,536870919]],["^15",[991,"^U",814,536870919]],["^15",[991,"^;","~u655b7379-a934-480a-9548-c5ee6268f687",536870919]],["^15",[992,"^Q","They do something like so\n\n* Take a “main” module, the one intended to be put in `<script type=\"module\">` in HTML.\n* Analyze its dependencies: imports and then imports of imports etc.\n* Build a single file with all modules (or multiple files, that’s tunable), replacing native `import` calls with bundler functions, so that it works. “Special” module types like HTML/CSS modules are also supported.\n* In the process, other transformations and optimizations may be applied like\nUnreachable code removed.\nUnused exports removed (“tree-shaking”).\nDevelopment-specific statements like `console` and `debugger` removed.\nModern, bleeding-edge JavaScript syntax may be transformed to older one with similar functionality using [Babel](https://babeljs.io/).\nThe resulting file is minified (spaces removed, variables replaced with shorter names, etc).\n\nSo we get something like this\n```html\n<!-- Assuming we got bundle.js from a tool like Webpack -->\n<script src=\"bundle.js\"></script>\n```\n\nThe generated bundle.js has all the [[Module]]s and [[Optimization]]s and can be directly used without the module type in the [[<script>]].",536870919]],["^15",[992,"^O","^16",536870919]],["^15",[992,"^F",991,536870919]],["^15",[992,"^X",814,536870919]],["^15",[992,"^V",814,536870919]],["^15",[992,"^U",283,536870919]],["^15",[992,"^U",287,536870919]],["^15",[992,"^U",347,536870919]],["^15",[992,"^U",814,536870919]],["^15",[992,"^H",283,536870919]],["^15",[992,"^H",287,536870919]],["^15",[992,"^H",347,536870919]],["^15",[992,"^;","~u655b7379-132f-4a03-81b0-0d1436101a2e",536870919]],["^15",[993,"^Q","",536870919]],["^15",[993,"^O","^16",536870919]],["^15",[993,"^F",992,536870919]],["^15",[993,"^X",814,536870919]],["^15",[993,"^V",814,536870919]],["^15",[993,"^U",814,536870919]],["^15",[993,"^;","~u655b7379-b254-4843-807d-01b824d62445",536870919]],["^15",[994,"^3","alias:: Prototype Object\n\n- In JS, much like ``classes`` in [[C++]], an [[Object]] can inherit another Object. This is done using an inbuilt Object property known as ``[[Prototype]]`` of an Object by the spec. In Implementation, this property can be accessed using the getter/setter ``__proto__``. This is not the same as directly accessing the ``[[Prototype]]`` property. This getter/setter is historical, modern JS recommends using ``Object.getPrototypeOf(<obj>)`` and ``Object.setPrototypeOf(<obj>, <prototype object>)`` instead. We can also use ``Object.create(<prototype object>, <descriptor object>)`` to create an Object with a prototype set.\n  \n  This property can have either the value of [[null]] or another Object.  \n  ![image.png](../assets/image_1686622520624_0.png)\n  \n  If set, it acts like inheritance. So if we access a property and it is not present in the ``child`` Object, it is looked for in the ``parent`` Object. And if it is in both then the child Object's property has the parent's property [[Shadowed]].\n  \n  For ex.:\n  ```js\n  let x= {\n    run: true,\n    cow: \"noo\"\n  };\n  \n  let y= {\n    cow: \"nyaa\"\n  };\n  y.__proto__ = x;\n  console.log(y.run); //prints true\n  console.log(y.cow); //prints nyaa\n  console.log(y.__proto__ == x); //true\n  ```\n  \n  We can directly use ``__proto__`` in an Object too.\n  ```js\n  let x ={};\n  let y = {\n   __proto__: x, //works\n  };\n  ```\n  but all these ways of getting/setting/initializing the `` [[Prototype]]`` have their modern equivalents\n  ```js\n  let y ={}\n  let x = Object.create(y, {\n   yo: {value: 2}\n  });\n  console.log(Object.getPrototypeOf(x) == y); //true\n  let z ={};\n  Object.setPrototypeOf(x,z);\n  console.log(Object.getPrototypeOf(x) == z); //true\n  ```\n  \n  However, it is unrecommended to get/set ``[[Prototype]]`` often, it is acceptable for one time but not anymore as each operation is slow. The JS engine has many optimizations on Objects and they break if we modify``[[Prototype]]`` hence leading to performance loss.\n- There can only ever be a single ``[[Prototype]]`` of an Object, so this is akin to ``Single Inheritance`` in other languages, we can have chain/hierarchy, and modify the parent Object at any time, but there can only be 1 parent to any Object.\n- The whole ``prototypal chain`` is traversed to look for a property, that means even if we have longer inheritance chains, it will work similarly. \n  The only limitations are, if there's a cycle in this chain then that causes an error and that the value of ``[[Prototype]]`` must always be either null or another Object.\n  \n  For ex.:\n  ```js\n  let x= {\n    run: true,\n    cow: \"noo\"\n  };\n  \n  let y= {\n    cow: \"nyaa\"\n  };\n  y.__proto__ = x;\n  console.log(y.run); //prints true\n  console.log(y.cow); //prints nyaa\n  ```\n  \n  This only works for reading, for writing, the given [[Object]] is the one used. The only exception is when we set a value using an accessor [[Function]] like so\n  ```js\n  let x= {\n    a:2,\n    b: 5,\n   get ap() {return this.a;},\n    set ap(value) { this.a = value; },\n    bp() {return this.b;},\n  };\n  \n  let y ={\n   __proto__: x,\n  };\n  \n  y.a=4; \n  console.log(x.a); //prints 2\n  \n  console.log(y.a); //prints 4\n  console.log(y.bp()); //prints 5\n  ```\n  Here [[this]] is ``y`` and not ``x``, this is because ``this`` gets the Object that called the method, not the ``this`` that refers to the same Object i.e. ``x``. Here, even though ``this`` is y, when we get b through ``bp()``, it gets b from x as it follows the inheritance chain for reading b (remember, ``this`` is just an Object so it's not doing anything special here).\n- In [[Object]], ``<obj>.hasOwnProperty(<prop name>)`` returns true if a property belongs to the Object and is not inherited.\n- ``Object.prototype`` [[Object]]\n  \n  Every Object in JS inherits this special Object, this is the Object that defines methods like ``.hasOwnProperty(...)`` on Objects. All its properties have their attributes ``enumerable`` as false so they don't appear in any loops, similarly ``Object.keys`` and other methods also ignore this Object's properties. \n  \n  So\n  ![image.png](../assets/image_1686686755458_0.png)\n  Assume rabbit and animal are any object and rabbit inherits animal, then as we can see, even animal implicitly inherits from this special Object.\n  \n  We can even check it,\n  ```js\n  let obj = {};\n  \n  console.log(obj.__proto__ === Object.prototype); // true\n  ```\n- [[Function]]'s ``<func>.prototype``:\n  Every Function has a ``.prototype`` property, that assigns an Object to the ``[[Prototype]]`` of the newly created Object when using [[new]]. \n  For ex.:\n  ```js\n  let animal = {\n    eats: true\n  };\n  \n  function Rabbit(name) {\n    this.name = name;\n    console.log(this.eats); //works if the .prototype is set before this function is ran\n  }\n  \n  Rabbit.prototype = animal;\n  \n  let rabbit = new Rabbit(\"White Rabbit\"); \n  \n  console.log( rabbit.eats ); //prints true\n  ```\n  \n  The ``<func>.prototype`` is a property and not the ``[[Prototype]]`` itself, \n  ![image.png](../assets/image_1686787038439_0.png)\n  We can also access ``animal``'s properties in the function ``Rabbit(...)`` as well, as [[this]] Object inherits it first then passes this Object back to the caller. This is to say, ``.prototype`` does nothing but sets the ``[[Prototype]]`` of the ``this`` Object and the rest works as expected.\n  \n  * If we change the ``.prototype`` then it changes the ``[[Prototype]]`` for the Object's created after that assignment, but not for Object's created before it. \n  \n  * ``.prototype`` is only passed when the function is called with ``new <func>(...)``. However, it is always set to some value so it always exists.\n  \n  * Default ``<func>.prototype``:\n  Every function has a  default ``.prototype`` set, this is set to an Object that has a single property named ``constructor`` which points back to the function. \n  For ex.:\n  ```js\n  function yo() {}\n  // yo.prototype = { constructor: yo };  implicitly\n  \n  console.log( yo.prototype.constructor == yo); //prints true\n  \n  let x = new Yo();\n  console.log( x..constructor == yo); //also true because the prototype is always inherited with new <func>(...)\n  \n  //so we can do this too\n  let y= new x.constructor(); //works\n  ```\n  We can work with this ``constructor`` property however we want and JS has no check against it, so we can set it to other functions, have it in our custom Object and then use that Object as ``[[Prototype]]`` etc.\n- As we know, **all** [[Object]]s inherit from ``Object.prototype``, this is true for [[Array]], [[Function]], [[Number]] etc.\n  \n  ![image.png](../assets/image_1686712608418_0.png)\n  \n  These Object's also have their own `.prototype` Objects, called ``native prototypes`` which then define helper properties/methods, and when we create their ``<object>``'s using either literal syntax or [[new]] syntax (recall that they are the same thing, ``new Object()`` is always called), the ``<object>``'s actually inherit ``native prototypes`` which all inherit the ``Object.prototype``\n  Like so\n  ![image.png](../assets/image_1686789747813_0.png)\n  \n  Basically, all data types ([[String]], [[Number]] and [[Boolean]]) except [[null]] and [[undefined]] have their helper functions/properties defined in special Object's, these are known as ``wrapper objects`` and whilst the value theirselves are primitives, the ``new String()``, ``new Number()``, etc. use these Object wrappers aka ``native prototypes`` which have their ``.prototype`` set to these Objects with the helper functions.\n  null and undefined are special as they have no wrappers, hence they have no properties either.\n-\n- We can modify the native prototypes to extend [[String]]/ [[Number]]/[[Boolean]]/[[Array]] etc.\n  Like so\n  ```js\n  String.prototype.yo = function() {\n   console.log(this);\n  };\n  \n  \"hayo\".yo(); //prints \"hayo\"\n  ```\n  It's unrecommended to modify native prototypes as it may be overwritten by some external script if we use one, and secondly other developers may not be aware if a given function is inbuilt or custom making it harder to maintain the code. \n  However, it is acceptable to modify the native prototype to [[Polyfill]] some functionality, i.e., the property exists in some other versions so to make sure your own script has it we can do so.\n- We can borrow prototypal methods too, \n  For ex.:\n  ```js\n  let x = {\n   0: \"Yo\",\n   1: \"ayo\",\n   length: 2,\n  };\n  x.prototype = Array.prototype.join;\n  console.log(x.join(\" \")); //prints Yo ayo\n  ```\n  We can make ``x`` an [[Array]] or some other Object Wrapper too given we set it's ``[[Prototype]]`` to the appropriate native prototype.\n- [[null]] ``[[Prototype]]``\n  As we know\n  ```js\n  let x = {};\n  x.__proto__  =2 ; //ignored\n  console.log(x.__proto__); //prints [object object]\n  ```\n  This is because ``__proto__`` is an accessor property to get/set the ``[[Prototype]]`` and the actual ``[[Prototype]]`` comes from ``Object.prototype`` which is implicitly set for all Objects. That is, ``x.__proto__`` above is ignored because ``x``'s ``[[Prototype]]`` is already set and now ``x.__proto__`` is accessing the ``Object.prototype``'s accessor property ``__proto__`` so we are essentially calling the accessor property in ``Object.prototype``method, which looks like so ``x.__proto__.__proto__=2`` .\n  To circumvent this, we can use a trick\n  ```js\n  let x = {__proto__=null};\n  //or let x = Object.create(null);\n  x.__proto__=2\n  console.log(x.__proto__); //prints 2\n  \n  //or\n  \n  let z ={};\n  Object.setPrototypeOf(z, null);\n  z.__proto__= 2;\n  console.log(z.__proto__); //works\n  \n  ```\n  By setting the property explicitly to null already, JS doesn't implicitly set the ``__proto__`` to ``Object.prototype`` which has an accessor property named ``.__proto__``. The ``Object.setPrototypeOf(...)`` is also smart enough to correctly do it.\n-",536870919]],["^15",[994,"^17",1700492153609,536870919]],["^15",[994,"^Z","JS/pages/__proto__.md",536870919]],["^15",[995,"^Q","~``Object.prototype`` [[Object]]\n\nEvery Object in JS inherits this special Object, this is the Object that defines methods like ``.hasOwnProperty(...)`` on Objects. All its properties have their attributes ``enumerable`` as false so they don't appear in any loops, similarly ``Object.keys`` and other methods also ignore this Object's properties. \n\nSo\n![image.png](../assets/image_1686686755458_0.png)\nAssume rabbit and animal are any object and rabbit inherits animal, then as we can see, even animal implicitly inherits from this special Object.\n\nWe can even check it,\n```js\nlet obj = {};\n\nconsole.log(obj.__proto__ === Object.prototype); // true\n```",536870919]],["^15",[995,"^O","^16",536870919]],["^15",[995,"^F",1005,536870919]],["^15",[995,"^X",859,536870919]],["^15",[995,"^V",859,536870919]],["^15",[995,"^U",299,536870919]],["^15",[995,"^U",859,536870919]],["^15",[995,"^H",299,536870919]],["^15",[995,"^;","~u655b7379-97fa-408e-8d1f-f4f4bb27dabc",536870919]],["^15",[996,"^Q","In JS, much like ``classes`` in [[C++]], an [[Object]] can inherit another Object. This is done using an inbuilt Object property known as ``[[Prototype]]`` of an Object by the spec. In Implementation, this property can be accessed using the getter/setter ``__proto__``. This is not the same as directly accessing the ``[[Prototype]]`` property. This getter/setter is historical, modern JS recommends using ``Object.getPrototypeOf(<obj>)`` and ``Object.setPrototypeOf(<obj>, <prototype object>)`` instead. We can also use ``Object.create(<prototype object>, <descriptor object>)`` to create an Object with a prototype set.\n\nThis property can have either the value of [[null]] or another Object.  \n![image.png](../assets/image_1686622520624_0.png)\n\nIf set, it acts like inheritance. So if we access a property and it is not present in the ``child`` Object, it is looked for in the ``parent`` Object. And if it is in both then the child Object's property has the parent's property [[Shadowed]].\n\nFor ex.:\n```js\nlet x= {\n  run: true,\n  cow: \"noo\"\n};\n\nlet y= {\n  cow: \"nyaa\"\n};\ny.__proto__ = x;\nconsole.log(y.run); //prints true\nconsole.log(y.cow); //prints nyaa\nconsole.log(y.__proto__ == x); //true\n```\n\nWe can directly use ``__proto__`` in an Object too.\n```js\nlet x ={};\nlet y = {\n __proto__: x, //works\n};\n```\nbut all these ways of getting/setting/initializing the `` [[Prototype]]`` have their modern equivalents\n```js\nlet y ={}\nlet x = Object.create(y, {\n yo: {value: 2}\n});\nconsole.log(Object.getPrototypeOf(x) == y); //true\nlet z ={};\nObject.setPrototypeOf(x,z);\nconsole.log(Object.getPrototypeOf(x) == z); //true\n```\n\nHowever, it is unrecommended to get/set ``[[Prototype]]`` often, it is acceptable for one time but not anymore as each operation is slow. The JS engine has many optimizations on Objects and they break if we modify``[[Prototype]]`` hence leading to performance loss.",536870919]],["^15",[996,"^O","^16",536870919]],["^15",[996,"^F",1006,536870919]],["^15",[996,"^X",859,536870919]],["^15",[996,"^V",859,536870919]],["^15",[996,"^U",299,536870919]],["^15",[996,"^U",301,536870919]],["^15",[996,"^U",458,536870919]],["^15",[996,"^U",484,536870919]],["^15",[996,"^U",859,536870919]],["^15",[996,"^H",299,536870919]],["^15",[996,"^H",301,536870919]],["^15",[996,"^H",458,536870919]],["^15",[996,"^H",484,536870919]],["^15",[996,"^;","~u655b7379-7c94-4325-a262-6dd14283e8cf",536870919]],["^15",[997,"^Q","As we know, **all** [[Object]]s inherit from ``Object.prototype``, this is true for [[Array]], [[Function]], [[Number]] etc.\n\n![image.png](../assets/image_1686712608418_0.png)\n\nThese Object's also have their own `.prototype` Objects, called ``native prototypes`` which then define helper properties/methods, and when we create their ``<object>``'s using either literal syntax or [[new]] syntax (recall that they are the same thing, ``new Object()`` is always called), the ``<object>``'s actually inherit ``native prototypes`` which all inherit the ``Object.prototype``\nLike so\n![image.png](../assets/image_1686789747813_0.png)\n\nBasically, all data types ([[String]], [[Number]] and [[Boolean]]) except [[null]] and [[undefined]] have their helper functions/properties defined in special Object's, these are known as ``wrapper objects`` and whilst the value theirselves are primitives, the ``new String()``, ``new Number()``, etc. use these Object wrappers aka ``native prototypes`` which have their ``.prototype`` set to these Objects with the helper functions.\nnull and undefined are special as they have no wrappers, hence they have no properties either.",536870919]],["^15",[997,"^O","^16",536870919]],["^15",[997,"^F",1002,536870919]],["^15",[997,"^X",859,536870919]],["^15",[997,"^V",859,536870919]],["^15",[997,"^U",80,536870919]],["^15",[997,"^U",162,536870919]],["^15",[997,"^U",163,536870919]],["^15",[997,"^U",299,536870919]],["^15",[997,"^U",303,536870919]],["^15",[997,"^U",305,536870919]],["^15",[997,"^U",362,536870919]],["^15",[997,"^U",456,536870919]],["^15",[997,"^U",484,536870919]],["^15",[997,"^U",859,536870919]],["^15",[997,"^H",80,536870919]],["^15",[997,"^H",162,536870919]],["^15",[997,"^H",163,536870919]],["^15",[997,"^H",299,536870919]],["^15",[997,"^H",303,536870919]],["^15",[997,"^H",305,536870919]],["^15",[997,"^H",362,536870919]],["^15",[997,"^H",456,536870919]],["^15",[997,"^H",484,536870919]],["^15",[997,"^;","~u655b7379-1384-457b-96c1-1ae5dfb64d75",536870919]],["^15",[998,"^Q","",536870919]],["^15",[998,"^O","^16",536870919]],["^15",[998,"^F",1000,536870919]],["^15",[998,"^X",859,536870919]],["^15",[998,"^V",859,536870919]],["^15",[998,"^U",859,536870919]],["^15",[998,"^;","~u655b7379-1ada-43a1-b404-0c102dcf67f0",536870919]],["^15",[999,"^Q","We can borrow prototypal methods too, \nFor ex.:\n```js\nlet x = {\n 0: \"Yo\",\n 1: \"ayo\",\n length: 2,\n};\nx.prototype = Array.prototype.join;\nconsole.log(x.join(\" \")); //prints Yo ayo\n```\nWe can make ``x`` an [[Array]] or some other Object Wrapper too given we set it's ``[[Prototype]]`` to the appropriate native prototype.",536870919]],["^15",[999,"^O","^16",536870919]],["^15",[999,"^F",1004,536870919]],["^15",[999,"^X",859,536870919]],["^15",[999,"^V",859,536870919]],["^15",[999,"^U",305,536870919]],["^15",[999,"^U",859,536870919]],["^15",[999,"^H",305,536870919]],["^15",[999,"^;","~u655b7379-e097-42a4-a371-6490675b41a6",536870919]],["^15",[1000,"^Q","[[null]] ``[[Prototype]]``\nAs we know\n```js\nlet x = {};\nx.__proto__  =2 ; //ignored\nconsole.log(x.__proto__); //prints [object object]\n```\nThis is because ``__proto__`` is an accessor property to get/set the ``[[Prototype]]`` and the actual ``[[Prototype]]`` comes from ``Object.prototype`` which is implicitly set for all Objects. That is, ``x.__proto__`` above is ignored because ``x``'s ``[[Prototype]]`` is already set and now ``x.__proto__`` is accessing the ``Object.prototype``'s accessor property ``__proto__`` so we are essentially calling the accessor property in ``Object.prototype``method, which looks like so ``x.__proto__.__proto__=2`` .\nTo circumvent this, we can use a trick\n```js\nlet x = {__proto__=null};\n//or let x = Object.create(null);\nx.__proto__=2\nconsole.log(x.__proto__); //prints 2\n\n//or\n\nlet z ={};\nObject.setPrototypeOf(z, null);\nz.__proto__= 2;\nconsole.log(z.__proto__); //works\n\n```\nBy setting the property explicitly to null already, JS doesn't implicitly set the ``__proto__`` to ``Object.prototype`` which has an accessor property named ``.__proto__``. The ``Object.setPrototypeOf(...)`` is also smart enough to correctly do it.",536870919]],["^15",[1000,"^O","^16",536870919]],["^15",[1000,"^F",999,536870919]],["^15",[1000,"^X",859,536870919]],["^15",[1000,"^V",859,536870919]],["^15",[1000,"^U",484,536870919]],["^15",[1000,"^U",859,536870919]],["^15",[1000,"^H",484,536870919]],["^15",[1000,"^;","~u655b7379-4b7d-40e1-9df2-5acbf612283b",536870919]],["^15",[1001,"^Q","There can only ever be a single ``[[Prototype]]`` of an Object, so this is akin to ``Single Inheritance`` in other languages, we can have chain/hierarchy, and modify the parent Object at any time, but there can only be 1 parent to any Object.",536870919]],["^15",[1001,"^O","^16",536870919]],["^15",[1001,"^F",996,536870919]],["^15",[1001,"^X",859,536870919]],["^15",[1001,"^V",859,536870919]],["^15",[1001,"^U",859,536870919]],["^15",[1001,"^;","~u655b7379-b385-47e1-9dad-afe179d503be",536870919]],["^15",[1002,"^Q","[[Function]]'s ``<func>.prototype``:\nEvery Function has a ``.prototype`` property, that assigns an Object to the ``[[Prototype]]`` of the newly created Object when using [[new]]. \nFor ex.:\n```js\nlet animal = {\n  eats: true\n};\n\nfunction Rabbit(name) {\n  this.name = name;\n  console.log(this.eats); //works if the .prototype is set before this function is ran\n}\n\nRabbit.prototype = animal;\n\nlet rabbit = new Rabbit(\"White Rabbit\"); \n\nconsole.log( rabbit.eats ); //prints true\n```\n\nThe ``<func>.prototype`` is a property and not the ``[[Prototype]]`` itself, \n![image.png](../assets/image_1686787038439_0.png)\nWe can also access ``animal``'s properties in the function ``Rabbit(...)`` as well, as [[this]] Object inherits it first then passes this Object back to the caller. This is to say, ``.prototype`` does nothing but sets the ``[[Prototype]]`` of the ``this`` Object and the rest works as expected.\n\n* If we change the ``.prototype`` then it changes the ``[[Prototype]]`` for the Object's created after that assignment, but not for Object's created before it. \n\n* ``.prototype`` is only passed when the function is called with ``new <func>(...)``. However, it is always set to some value so it always exists.\n\n* Default ``<func>.prototype``:\nEvery function has a  default ``.prototype`` set, this is set to an Object that has a single property named ``constructor`` which points back to the function. \nFor ex.:\n```js\nfunction yo() {}\n// yo.prototype = { constructor: yo };  implicitly\n\nconsole.log( yo.prototype.constructor == yo); //prints true\n\nlet x = new Yo();\nconsole.log( x..constructor == yo); //also true because the prototype is always inherited with new <func>(...)\n\n//so we can do this too\nlet y= new x.constructor(); //works\n```\nWe can work with this ``constructor`` property however we want and JS has no check against it, so we can set it to other functions, have it in our custom Object and then use that Object as ``[[Prototype]]`` etc.",536870919]],["^15",[1002,"^O","^16",536870919]],["^15",[1002,"^F",995,536870919]],["^15",[1002,"^X",859,536870919]],["^15",[1002,"^V",859,536870919]],["^15",[1002,"^U",163,536870919]],["^15",[1002,"^U",400,536870919]],["^15",[1002,"^U",456,536870919]],["^15",[1002,"^U",859,536870919]],["^15",[1002,"^H",163,536870919]],["^15",[1002,"^H",400,536870919]],["^15",[1002,"^H",456,536870919]],["^15",[1002,"^;","~u655b7379-6357-4bb8-81da-01f2b7a317f6",536870919]],["^15",[1003,"^Q","",536870919]],["^15",[1003,"^O","^16",536870919]],["^15",[1003,"^F",997,536870919]],["^15",[1003,"^X",859,536870919]],["^15",[1003,"^V",859,536870919]],["^15",[1003,"^U",859,536870919]],["^15",[1003,"^;","~u655b7379-7cce-4a2a-904e-d3445d0fbcd6",536870919]],["^15",[1004,"^Q","We can modify the native prototypes to extend [[String]]/ [[Number]]/[[Boolean]]/[[Array]] etc.\nLike so\n```js\nString.prototype.yo = function() {\n console.log(this);\n};\n\n\"hayo\".yo(); //prints \"hayo\"\n```\nIt's unrecommended to modify native prototypes as it may be overwritten by some external script if we use one, and secondly other developers may not be aware if a given function is inbuilt or custom making it harder to maintain the code. \nHowever, it is acceptable to modify the native prototype to [[Polyfill]] some functionality, i.e., the property exists in some other versions so to make sure your own script has it we can do so.",536870919]],["^15",[1004,"^O","^16",536870919]],["^15",[1004,"^F",1003,536870919]],["^15",[1004,"^X",859,536870919]],["^15",[1004,"^V",859,536870919]],["^15",[1004,"^U",80,536870919]],["^15",[1004,"^U",162,536870919]],["^15",[1004,"^U",305,536870919]],["^15",[1004,"^U",362,536870919]],["^15",[1004,"^U",363,536870919]],["^15",[1004,"^U",859,536870919]],["^15",[1004,"^H",80,536870919]],["^15",[1004,"^H",162,536870919]],["^15",[1004,"^H",305,536870919]],["^15",[1004,"^H",362,536870919]],["^15",[1004,"^H",363,536870919]],["^15",[1004,"^;","~u655b7379-beaa-4aab-8148-4af675e97bd9",536870919]],["^15",[1005,"^Q","In [[Object]], ``<obj>.hasOwnProperty(<prop name>)`` returns true if a property belongs to the Object and is not inherited.",536870919]],["^15",[1005,"^O","^16",536870919]],["^15",[1005,"^F",1007,536870919]],["^15",[1005,"^X",859,536870919]],["^15",[1005,"^V",859,536870919]],["^15",[1005,"^U",299,536870919]],["^15",[1005,"^U",859,536870919]],["^15",[1005,"^H",299,536870919]],["^15",[1005,"^;","~u655b7379-4574-49bb-bb09-e00520fe19f8",536870919]],["^15",[1006,"^Q","alias:: Prototype Object\n\n",536870919]],["^15",[1006,"^O","^16",536870919]],["^15",[1006,"^1;",["^19",[]],536870919]],["^15",[1006,"^F",859,536870919]],["^15",[1006,"^X",859,536870919]],["^15",[1006,"^V",859,536870919]],["^15",[1006,"^U",455,536870919]],["^15",[1006,"^U",859,536870919]],["^15",[1006,"^:",true,536870919]],["^15",[1006,"^?",["^ ","^18",["^19",["Prototype Object"]]],536870919]],["^15",[1006,"^J",["^18"],536870919]],["^15",[1006,"^4",["^ ","^18","Prototype Object"],536870919]],["^15",[1006,"^H",455,536870919]],["^15",[1006,"^;","~u655b7379-97a9-4904-bb38-94d9c6679710",536870919]],["^15",[1007,"^Q","The whole ``prototypal chain`` is traversed to look for a property, that means even if we have longer inheritance chains, it will work similarly. \nThe only limitations are, if there's a cycle in this chain then that causes an error and that the value of ``[[Prototype]]`` must always be either null or another Object.\n\nFor ex.:\n```js\nlet x= {\n  run: true,\n  cow: \"noo\"\n};\n\nlet y= {\n  cow: \"nyaa\"\n};\ny.__proto__ = x;\nconsole.log(y.run); //prints true\nconsole.log(y.cow); //prints nyaa\n```\n\nThis only works for reading, for writing, the given [[Object]] is the one used. The only exception is when we set a value using an accessor [[Function]] like so\n```js\nlet x= {\n  a:2,\n  b: 5,\n get ap() {return this.a;},\n  set ap(value) { this.a = value; },\n  bp() {return this.b;},\n};\n\nlet y ={\n __proto__: x,\n};\n\ny.a=4; \nconsole.log(x.a); //prints 2\n\nconsole.log(y.a); //prints 4\nconsole.log(y.bp()); //prints 5\n```\nHere [[this]] is ``y`` and not ``x``, this is because ``this`` gets the Object that called the method, not the ``this`` that refers to the same Object i.e. ``x``. Here, even though ``this`` is y, when we get b through ``bp()``, it gets b from x as it follows the inheritance chain for reading b (remember, ``this`` is just an Object so it's not doing anything special here).",536870919]],["^15",[1007,"^O","^16",536870919]],["^15",[1007,"^F",1001,536870919]],["^15",[1007,"^X",859,536870919]],["^15",[1007,"^V",859,536870919]],["^15",[1007,"^U",163,536870919]],["^15",[1007,"^U",299,536870919]],["^15",[1007,"^U",400,536870919]],["^15",[1007,"^U",859,536870919]],["^15",[1007,"^H",163,536870919]],["^15",[1007,"^H",299,536870919]],["^15",[1007,"^H",400,536870919]],["^15",[1007,"^;","~u655b7379-90fd-40e8-a70d-bc7f91a9fa17",536870919]],["^15",[1008,"^3","alias:: ASI\n",536870919]],["^15",[1008,"^17",1700492153616,536870919]],["^15",[1008,"^Z","JS/pages/automatic semicolon insertion.md",536870919]],["^15",[1009,"^Q","alias:: ASI\n",536870919]],["^15",[1009,"^O","^16",536870919]],["^15",[1009,"^1;",["^19",[]],536870919]],["^15",[1009,"^F",603,536870919]],["^15",[1009,"^X",603,536870919]],["^15",[1009,"^V",603,536870919]],["^15",[1009,"^U",603,536870919]],["^15",[1009,"^U",612,536870919]],["^15",[1009,"^:",true,536870919]],["^15",[1009,"^?",["^ ","^18",["^19",["ASI"]]],536870919]],["^15",[1009,"^J",["^18"],536870919]],["^15",[1009,"^4",["^ ","^18","ASI"],536870919]],["^15",[1009,"^H",612,536870919]],["^15",[1009,"^;","~u655b7379-3f39-4325-bcb1-c832060eea8f",536870919]],["^15",[1010,"^3","- ``break;``\n- [[ECMAScript]] also supports Labelled Breaks\n  For ex.:\n  ```js\n  xy: while(...) {\n       while(...) {\n           break xy;\n         }\n  }\n  ```\n  breaks to the labelled loop xy.\n  The label can be used anywhere, only requirement is for a label to be declared before it is used in the code.\n  For ex.:\n  ```js\n  xy: {\n    break xy; //works\n  }\n  ```\n-",536870919]],["^15",[1010,"^17",1700492153625,536870919]],["^15",[1010,"^Z","JS/pages/break.md",536870919]],["^15",[1011,"^Q","~``break;``",536870919]],["^15",[1011,"^O","^16",536870919]],["^15",[1011,"^F",496,536870919]],["^15",[1011,"^X",496,536870919]],["^15",[1011,"^V",496,536870919]],["^15",[1011,"^U",496,536870919]],["^15",[1011,"^;","~u655b7379-0876-40d2-bfdb-e14ceaf78ca0",536870919]],["^15",[1012,"^Q","[[ECMAScript]] also supports Labelled Breaks\nFor ex.:\n```js\nxy: while(...) {\n     while(...) {\n         break xy;\n       }\n}\n```\nbreaks to the labelled loop xy.\nThe label can be used anywhere, only requirement is for a label to be declared before it is used in the code.\nFor ex.:\n```js\nxy: {\n  break xy; //works\n}\n```",536870919]],["^15",[1012,"^O","^16",536870919]],["^15",[1012,"^F",1011,536870919]],["^15",[1012,"^X",496,536870919]],["^15",[1012,"^V",496,536870919]],["^15",[1012,"^U",401,536870919]],["^15",[1012,"^U",496,536870919]],["^15",[1012,"^H",401,536870919]],["^15",[1012,"^;","~u655b7379-1392-4291-b9ca-28c29e2d71e7",536870919]],["^15",[1013,"^Q","",536870919]],["^15",[1013,"^O","^16",536870919]],["^15",[1013,"^F",1012,536870919]],["^15",[1013,"^X",496,536870919]],["^15",[1013,"^V",496,536870919]],["^15",[1013,"^U",496,536870919]],["^15",[1013,"^;","~u655b7379-be68-4342-aa6d-74cc4103e90d",536870919]],["^15",[1014,"^3","- This [[HTML Element]] is a special element as it allows embedding other [[HTML]] Documents in a Document.\n  \n  For ex.:\n  ```html\n  <iframe src=\"https://example.com\" id=\"iframe\"></iframe>\n  \n  <script>\n    iframe.onload = function() { //has the load event\n      let iframeWindow = iframe.contentWindow; // to get the iframe's window Object\n      try {\n        let doc = iframe.contentDocument; //shorthand for .contentWindow.document, to get the iframe's html Document, this may give error if Same Origin is not followed\n      } catch(e) {\n        alert(e); // Security Error (another origin)\n      }\n  \n      \n      try {\n        let href = iframe.contentWindow.location.href; // can be set not read if not Same Origin\n      } catch(e) {\n        alert(e); // Security Error\n      }\n  \n      iframe.contentWindow.location = '/'; //works\n  \n      iframe.onload = null; // clear the handler, not to run it after the location change\n    };\n  </script>\n  ```\n  There's the ``load`` [[Browser Event]] just like popup window does and just like the popup window or normal [[window]] we can directly set the handler on ``iframe.contentWindow.load`` too but this is inaccessible if the iframe is not of same origin. The [[Same Origin]] policy is also followed by iframes.\n  \n  * iframe Documents are not loaded right away, the initial document is different from the final one, however the final one is there when the ``load`` event is triggered.\n  \n  * Navigation\n  The iframe opener [[window]] can access its iframes directly with ``<window Object>.iframes`` which is a named and ordered collection. \n  The iframe can access its parent window with ``<iframe's window Object>.parent`` or ``<iframe's window Object>.top`` to get the topmost parent window directly. \n  \n  * The ``sandbox`` attribute\n  The attribute, if provided without any values, applies the strictest restrictions on the iframe such as not being able to have executable [[<script>]]s, forms etc.\n  We can provide a space separated list of allowed properties as given on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) such as ``sandbox=\"allow-scripts allow-forms\"`` and so on.\n-",536870919]],["^15",[1014,"^17",1700492153641,536870919]],["^15",[1014,"^Z","JS/pages/iframe.md",536870919]],["^15",[1015,"^Q","This [[HTML Element]] is a special element as it allows embedding other [[HTML]] Documents in a Document.\n\nFor ex.:\n```html\n<iframe src=\"https://example.com\" id=\"iframe\"></iframe>\n\n<script>\n  iframe.onload = function() { //has the load event\n    let iframeWindow = iframe.contentWindow; // to get the iframe's window Object\n    try {\n      let doc = iframe.contentDocument; //shorthand for .contentWindow.document, to get the iframe's html Document, this may give error if Same Origin is not followed\n    } catch(e) {\n      alert(e); // Security Error (another origin)\n    }\n\n    \n    try {\n      let href = iframe.contentWindow.location.href; // can be set not read if not Same Origin\n    } catch(e) {\n      alert(e); // Security Error\n    }\n\n    iframe.contentWindow.location = '/'; //works\n\n    iframe.onload = null; // clear the handler, not to run it after the location change\n  };\n</script>\n```\nThere's the ``load`` [[Browser Event]] just like popup window does and just like the popup window or normal [[window]] we can directly set the handler on ``iframe.contentWindow.load`` too but this is inaccessible if the iframe is not of same origin. The [[Same Origin]] policy is also followed by iframes.\n\n* iframe Documents are not loaded right away, the initial document is different from the final one, however the final one is there when the ``load`` event is triggered.\n\n* Navigation\nThe iframe opener [[window]] can access its iframes directly with ``<window Object>.iframes`` which is a named and ordered collection. \nThe iframe can access its parent window with ``<iframe's window Object>.parent`` or ``<iframe's window Object>.top`` to get the topmost parent window directly. \n\n* The ``sandbox`` attribute\nThe attribute, if provided without any values, applies the strictest restrictions on the iframe such as not being able to have executable [[<script>]]s, forms etc.\nWe can provide a space separated list of allowed properties as given on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) such as ``sandbox=\"allow-scripts allow-forms\"`` and so on.",536870919]],["^15",[1015,"^O","^16",536870919]],["^15",[1015,"^F",932,536870919]],["^15",[1015,"^X",932,536870919]],["^15",[1015,"^V",932,536870919]],["^15",[1015,"^U",283,536870919]],["^15",[1015,"^U",284,536870919]],["^15",[1015,"^U",285,536870919]],["^15",[1015,"^U",375,536870919]],["^15",[1015,"^U",376,536870919]],["^15",[1015,"^U",383,536870919]],["^15",[1015,"^U",932,536870919]],["^15",[1015,"^H",283,536870919]],["^15",[1015,"^H",284,536870919]],["^15",[1015,"^H",285,536870919]],["^15",[1015,"^H",375,536870919]],["^15",[1015,"^H",376,536870919]],["^15",[1015,"^H",383,536870919]],["^15",[1015,"^;","~u655b7379-4031-4358-9634-10c6044489a8",536870919]],["^15",[1016,"^Q","",536870919]],["^15",[1016,"^O","^16",536870919]],["^15",[1016,"^F",1015,536870919]],["^15",[1016,"^X",932,536870919]],["^15",[1016,"^V",932,536870919]],["^15",[1016,"^U",932,536870919]],["^15",[1016,"^;","~u655b7379-a5b2-472a-94b8-dc0d0736bd6c",536870919]],["^15",[1017,"^3","- new.target\n  Returns a bool which is true if the parent function was called with new.\n  For ex.:\n  ```js\n  function Yo() {\n   if(!new.target){\n   return new Yo();\n   }\n   this.name = \"yo\";\n  }\n  \n  let x = Yo(); //works\n  ```\n  This is unadvised.\n- A Ctor [[Function]] call can omit the ``()`` if it doesn't take any params. \n  So ``let x = new Yo`` is valid syntax if ctor fn Yo exists. It is the equivalent of ``let x = new Yo()``.\n-",536870919]],["^15",[1017,"^17",1700492153650,536870919]],["^15",[1017,"^Z","JS/pages/new.md",536870919]],["^15",[1018,"^Q","new.target\nReturns a bool which is true if the parent function was called with new.\nFor ex.:\n```js\nfunction Yo() {\n if(!new.target){\n return new Yo();\n }\n this.name = \"yo\";\n}\n\nlet x = Yo(); //works\n```\nThis is unadvised.",536870919]],["^15",[1018,"^O","^16",536870919]],["^15",[1018,"^F",456,536870919]],["^15",[1018,"^X",456,536870919]],["^15",[1018,"^V",456,536870919]],["^15",[1018,"^U",456,536870919]],["^15",[1018,"^;","~u655b7379-3a96-4dd3-ad98-d2933e108fc7",536870919]],["^15",[1019,"^Q","A Ctor [[Function]] call can omit the ``()`` if it doesn't take any params. \nSo ``let x = new Yo`` is valid syntax if ctor fn Yo exists. It is the equivalent of ``let x = new Yo()``.",536870919]],["^15",[1019,"^O","^16",536870919]],["^15",[1019,"^F",1018,536870919]],["^15",[1019,"^X",456,536870919]],["^15",[1019,"^V",456,536870919]],["^15",[1019,"^U",163,536870919]],["^15",[1019,"^U",456,536870919]],["^15",[1019,"^H",163,536870919]],["^15",[1019,"^;","~u655b7379-2bd6-4011-a012-2207fe9c2b00",536870919]],["^15",[1020,"^Q","",536870919]],["^15",[1020,"^O","^16",536870919]],["^15",[1020,"^F",1019,536870919]],["^15",[1020,"^X",456,536870919]],["^15",[1020,"^V",456,536870919]],["^15",[1020,"^U",456,536870919]],["^15",[1020,"^;","~u655b7379-84d6-43d2-9f2c-d9fba1b4b5b1",536870919]],["^15",[1021,"^3","- null has no Object wrapper, and this type has only 1 value, ``null``.\n- Unlike other langs, null is a type of its own and the only value this type takes is ``null``.\n  For ex.:\n  ```js\n  let x = null; //null type and null value\n  ```\n  Represents \"Nothing\".",536870919]],["^15",[1021,"^17",1700492153654,536870919]],["^15",[1021,"^Z","JS/pages/null.md",536870919]],["^15",[1022,"^Q","null has no Object wrapper, and this type has only 1 value, ``null``.",536870919]],["^15",[1022,"^O","^16",536870919]],["^15",[1022,"^F",484,536870919]],["^15",[1022,"^X",484,536870919]],["^15",[1022,"^V",484,536870919]],["^15",[1022,"^U",484,536870919]],["^15",[1022,"^;","~u655b7379-cc77-4602-9dd7-2d59773f368c",536870919]],["^15",[1023,"^Q","Unlike other langs, null is a type of its own and the only value this type takes is ``null``.\nFor ex.:\n```js\nlet x = null; //null type and null value\n```\nRepresents \"Nothing\".",536870919]],["^15",[1023,"^O","^16",536870919]],["^15",[1023,"^F",1022,536870919]],["^15",[1023,"^X",484,536870919]],["^15",[1023,"^V",484,536870919]],["^15",[1023,"^U",484,536870919]],["^15",[1023,"^;","~u655b7379-75d6-48d4-87f9-02462380aaf7",536870919]],["^15",[1024,"^3","- This keyword is special in JS and is not evaluated until runtime.\n- It is not bound to any construct in [[ECMAScript]] either, i.e., it can be used anywhere.\n  For ex.:\n  In an [[Object]]\n  ```js\n  let x ={\n   age:2,\n  };\n  function bobo() {\n    return this.age;  \n   }\n  \n  x.yo= bobo; \n  x.yo(); //returns 2\n  \n  bobo(); //error as 'this' is undefined. Here 'this' is called unbound.\n  ```\n  In [[Old Mode]] an unbound this refers to the parent object, such as in a browser JS script if the function is global then the unbound this will refer to the [[window]] object.\n- Arrow [[Function]]s have no context so they don't bind a this. Instead they allow ``this`` to reference the outer [[Scope]].\n  For ex.:\n  ```js\n  let x= {\n   name: \"aa\",\n    yo() {\n      let a= () => {console.log(this.name)};\n    }\n  };\n  \n  x.yo(); //works, prints aa\n  ```\n-",536870919]],["^15",[1024,"^17",1700492153666,536870919]],["^15",[1024,"^Z","JS/pages/this.md",536870919]],["^15",[1025,"^Q","This keyword is special in JS and is not evaluated until runtime.",536870919]],["^15",[1025,"^O","^16",536870919]],["^15",[1025,"^F",400,536870919]],["^15",[1025,"^X",400,536870919]],["^15",[1025,"^V",400,536870919]],["^15",[1025,"^U",400,536870919]],["^15",[1025,"^;","~u655b7379-b6fc-4313-97a8-3057dd796482",536870919]],["^15",[1026,"^Q","It is not bound to any construct in [[ECMAScript]] either, i.e., it can be used anywhere.\nFor ex.:\nIn an [[Object]]\n```js\nlet x ={\n age:2,\n};\nfunction bobo() {\n  return this.age;  \n }\n\nx.yo= bobo; \nx.yo(); //returns 2\n\nbobo(); //error as 'this' is undefined. Here 'this' is called unbound.\n```\nIn [[Old Mode]] an unbound this refers to the parent object, such as in a browser JS script if the function is global then the unbound this will refer to the [[window]] object.",536870919]],["^15",[1026,"^O","^16",536870919]],["^15",[1026,"^F",1025,536870919]],["^15",[1026,"^X",400,536870919]],["^15",[1026,"^V",400,536870919]],["^15",[1026,"^U",299,536870919]],["^15",[1026,"^U",375,536870919]],["^15",[1026,"^U",400,536870919]],["^15",[1026,"^U",401,536870919]],["^15",[1026,"^U",599,536870919]],["^15",[1026,"^H",299,536870919]],["^15",[1026,"^H",375,536870919]],["^15",[1026,"^H",401,536870919]],["^15",[1026,"^H",599,536870919]],["^15",[1026,"^;","~u655b7379-a997-4c94-bca5-c630df427772",536870919]],["^15",[1027,"^Q","Arrow [[Function]]s have no context so they don't bind a this. Instead they allow ``this`` to reference the outer [[Scope]].\nFor ex.:\n```js\nlet x= {\n name: \"aa\",\n  yo() {\n    let a= () => {console.log(this.name)};\n  }\n};\n\nx.yo(); //works, prints aa\n```",536870919]],["^15",[1027,"^O","^16",536870919]],["^15",[1027,"^F",1026,536870919]],["^15",[1027,"^X",400,536870919]],["^15",[1027,"^V",400,536870919]],["^15",[1027,"^U",163,536870919]],["^15",[1027,"^U",345,536870919]],["^15",[1027,"^U",400,536870919]],["^15",[1027,"^H",163,536870919]],["^15",[1027,"^H",345,536870919]],["^15",[1027,"^;","~u655b7379-6006-466c-9bf9-04c744a8c25e",536870919]],["^15",[1028,"^Q","",536870919]],["^15",[1028,"^O","^16",536870919]],["^15",[1028,"^F",1027,536870919]],["^15",[1028,"^X",400,536870919]],["^15",[1028,"^V",400,536870919]],["^15",[1028,"^U",400,536870919]],["^15",[1028,"^;","~u655b7379-8b97-49d0-b561-061e15366e75",536870919]],["^15",[1029,"^3","- An [[Operator]] . Returns the type of a value/variable in string.\n- For ex.:\n  ```js\n  typeof 2 //\"Integer\"\n  - typeof null //\"object\"\n  - typeof Symbol(\"id\") //\"symbol\"\n  - typeof alert //\"Function\"\n  ```\n  The typeof null is not \"Object\", this is a known error with typeof.\n  [[Function]]s are not a type in JS, they belong to [[object]] but typeof returns \"Function\" for the sake of convenience.\n- There's also the function variant of ``typeof(...)``, it's the same but uses a [[Function]] instead.",536870919]],["^15",[1029,"^17",1700492153673,536870919]],["^15",[1029,"^Z","JS/pages/typeOf.md",536870919]],["^15",[1030,"^Q","An [[Operator]] . Returns the type of a value/variable in string.",536870919]],["^15",[1030,"^O","^16",536870919]],["^15",[1030,"^F",298,536870919]],["^15",[1030,"^X",298,536870919]],["^15",[1030,"^V",298,536870919]],["^15",[1030,"^U",298,536870919]],["^15",[1030,"^U",339,536870919]],["^15",[1030,"^H",339,536870919]],["^15",[1030,"^;","~u655b7379-f533-41f3-98d5-6f75cebf64bf",536870919]],["^15",[1031,"^Q","For ex.:\n```js\ntypeof 2 //\"Integer\"\n- typeof null //\"object\"\n- typeof Symbol(\"id\") //\"symbol\"\n- typeof alert //\"Function\"\n```\nThe typeof null is not \"Object\", this is a known error with typeof.\n[[Function]]s are not a type in JS, they belong to [[object]] but typeof returns \"Function\" for the sake of convenience.",536870919]],["^15",[1031,"^O","^16",536870919]],["^15",[1031,"^F",1030,536870919]],["^15",[1031,"^X",298,536870919]],["^15",[1031,"^V",298,536870919]],["^15",[1031,"^U",163,536870919]],["^15",[1031,"^U",298,536870919]],["^15",[1031,"^U",299,536870919]],["^15",[1031,"^H",163,536870919]],["^15",[1031,"^H",299,536870919]],["^15",[1031,"^;","~u655b7379-99f9-4c26-8e9a-6b73ce093991",536870919]],["^15",[1032,"^Q","There's also the function variant of ``typeof(...)``, it's the same but uses a [[Function]] instead.",536870919]],["^15",[1032,"^O","^16",536870919]],["^15",[1032,"^F",1031,536870919]],["^15",[1032,"^X",298,536870919]],["^15",[1032,"^V",298,536870919]],["^15",[1032,"^U",163,536870919]],["^15",[1032,"^U",298,536870919]],["^15",[1032,"^H",163,536870919]],["^15",[1032,"^;","~u655b7379-78ff-49f6-b754-c1be83f23a0b",536870919]],["^15",[1033,"^3","- Just like [[null]], ``undefined`` has no [[Object]] wrapper and has only 1 value to its type, ``undefined``.\n- Represents an un-assigned value. We can assign manually or it can be a result of not initializing a variable either because of a non-assignment or because of an error that itself returns undefined.\n  For ex.:\n  ```js\n  let x= undefined; //Not recommended but works\n  let y; //value is 'undefined' until assigned\n  ```",536870919]],["^15",[1033,"^17",1700492153681,536870919]],["^15",[1033,"^Z","JS/pages/undefined.md",536870919]],["^15",[1034,"^Q","Just like [[null]], ``undefined`` has no [[Object]] wrapper and has only 1 value to its type, ``undefined``.",536870919]],["^15",[1034,"^O","^16",536870919]],["^15",[1034,"^F",303,536870919]],["^15",[1034,"^X",303,536870919]],["^15",[1034,"^V",303,536870919]],["^15",[1034,"^U",299,536870919]],["^15",[1034,"^U",303,536870919]],["^15",[1034,"^U",484,536870919]],["^15",[1034,"^H",299,536870919]],["^15",[1034,"^H",484,536870919]],["^15",[1034,"^;","~u655b7379-cdac-47eb-a63a-69cb75dca3df",536870919]],["^15",[1035,"^Q","Represents an un-assigned value. We can assign manually or it can be a result of not initializing a variable either because of a non-assignment or because of an error that itself returns undefined.\nFor ex.:\n```js\nlet x= undefined; //Not recommended but works\nlet y; //value is 'undefined' until assigned\n```",536870919]],["^15",[1035,"^O","^16",536870919]],["^15",[1035,"^F",1034,536870919]],["^15",[1035,"^X",303,536870919]],["^15",[1035,"^V",303,536870919]],["^15",[1035,"^U",303,536870919]],["^15",[1035,"^;","~u655b7379-0347-45f9-ab12-98b378c6268d",536870919]],["^15",[1036,"^3","- An old way of declaring variables, it is unrecommended to be used in modern JS.\n- Variables declared with var are only either [[Function]] [[Scope]]d or Global Scoped\n  For ex.:\n  ```js\n  {\n   var yo= 2;\n  }\n  console.log(yo); //works, prints 2\n  ```\n  Here yo became Global Scoped and that allows it to be visible in any other scope.\n  var can be redeclared. The redeclaration is simply ignored and if there's initialization with redeclaration, that is assigned to the variable.\n  For ex.:\n  ```js\n  var x=2;\n  var x=3;\n  console.log(x); //prints 3\n  ```\n- Variables declared with var are ``hoisted``, aka ``raised`` to the top of the function/global [[Scope]].\n  However, their assignments are not, they occur only where they are made.\n  That is,\n  ```js\n  function sayHi() {\n  console.log(phrase); // is not an error, prints undefined\n  phrase = \"Hello\"; // is not an error\n  \n    if (false) {\n      var phrase= \"yo\";\n    }\n  \n    console.log(phrase);\n  }\n  sayHi();\n  ```\n  Works. ``phrase`` is undefined, but declared in the first line inside the function. The declaration from below ``hoists``, pierces through the code block and gets declared at function start. This is how var declares variables.\n-",536870919]],["^15",[1036,"^17",1700492153692,536870919]],["^15",[1036,"^Z","JS/pages/var.md",536870919]],["^15",[1037,"^Q","An old way of declaring variables, it is unrecommended to be used in modern JS.",536870919]],["^15",[1037,"^O","^16",536870919]],["^15",[1037,"^F",602,536870919]],["^15",[1037,"^X",602,536870919]],["^15",[1037,"^V",602,536870919]],["^15",[1037,"^U",602,536870919]],["^15",[1037,"^;","~u655b7379-996e-456e-8c0f-8ca87faaba32",536870919]],["^15",[1038,"^Q","Variables declared with var are only either [[Function]] [[Scope]]d or Global Scoped\nFor ex.:\n```js\n{\n var yo= 2;\n}\nconsole.log(yo); //works, prints 2\n```\nHere yo became Global Scoped and that allows it to be visible in any other scope.\nvar can be redeclared. The redeclaration is simply ignored and if there's initialization with redeclaration, that is assigned to the variable.\nFor ex.:\n```js\nvar x=2;\nvar x=3;\nconsole.log(x); //prints 3\n```",536870919]],["^15",[1038,"^O","^16",536870919]],["^15",[1038,"^F",1037,536870919]],["^15",[1038,"^X",602,536870919]],["^15",[1038,"^V",602,536870919]],["^15",[1038,"^U",163,536870919]],["^15",[1038,"^U",345,536870919]],["^15",[1038,"^U",602,536870919]],["^15",[1038,"^H",163,536870919]],["^15",[1038,"^H",345,536870919]],["^15",[1038,"^;","~u655b7379-64a1-48d4-a699-782db9152d84",536870919]],["^15",[1039,"^Q","Variables declared with var are ``hoisted``, aka ``raised`` to the top of the function/global [[Scope]].\nHowever, their assignments are not, they occur only where they are made.\nThat is,\n```js\nfunction sayHi() {\nconsole.log(phrase); // is not an error, prints undefined\nphrase = \"Hello\"; // is not an error\n\n  if (false) {\n    var phrase= \"yo\";\n  }\n\n  console.log(phrase);\n}\nsayHi();\n```\nWorks. ``phrase`` is undefined, but declared in the first line inside the function. The declaration from below ``hoists``, pierces through the code block and gets declared at function start. This is how var declares variables.",536870919]],["^15",[1039,"^O","^16",536870919]],["^15",[1039,"^F",1038,536870919]],["^15",[1039,"^X",602,536870919]],["^15",[1039,"^V",602,536870919]],["^15",[1039,"^U",345,536870919]],["^15",[1039,"^U",602,536870919]],["^15",[1039,"^H",345,536870919]],["^15",[1039,"^;","~u655b7379-c8b6-4b49-aab4-758949cfd333",536870919]],["^15",[1040,"^Q","",536870919]],["^15",[1040,"^O","^16",536870919]],["^15",[1040,"^F",1039,536870919]],["^15",[1040,"^X",602,536870919]],["^15",[1040,"^V",602,536870919]],["^15",[1040,"^U",602,536870919]],["^15",[1040,"^;","~u655b7379-471f-441e-977b-b8bbe94a9cae",536870919]],["^15",[1041,"^3","- In [[Browser]]s , this Object provides the functionality required for JS to run, then interact with the [[DOM]] and the [[BOM]]\n  ![image.png](../assets/image_1687263712458_0.png)\n  \n  So the window [[Object]] has 2 roles, it is the [[Global]] Object and secondly it provides interactivity with the BOM and DOM.\n-\n-",536870919]],["^15",[1041,"^17",1700492153701,536870919]],["^15",[1041,"^Z","JS/pages/window.md",536870919]],["^15",[1042,"^Q","In [[Browser]]s , this Object provides the functionality required for JS to run, then interact with the [[DOM]] and the [[BOM]]\n![image.png](../assets/image_1687263712458_0.png)\n\nSo the window [[Object]] has 2 roles, it is the [[Global]] Object and secondly it provides interactivity with the BOM and DOM.",536870919]],["^15",[1042,"^O","^16",536870919]],["^15",[1042,"^F",375,536870919]],["^15",[1042,"^X",375,536870919]],["^15",[1042,"^V",375,536870919]],["^15",[1042,"^U",288,536870919]],["^15",[1042,"^U",289,536870919]],["^15",[1042,"^U",299,536870919]],["^15",[1042,"^U",375,536870919]],["^15",[1042,"^U",601,536870919]],["^15",[1042,"^U",609,536870919]],["^15",[1042,"^H",288,536870919]],["^15",[1042,"^H",289,536870919]],["^15",[1042,"^H",299,536870919]],["^15",[1042,"^H",601,536870919]],["^15",[1042,"^H",609,536870919]],["^15",[1042,"^;","~u655b7379-cace-48e9-9193-68ad3dee78f7",536870919]],["^15",[1043,"^Q","",536870919]],["^15",[1043,"^O","^16",536870919]],["^15",[1043,"^F",1042,536870919]],["^15",[1043,"^X",375,536870919]],["^15",[1043,"^V",375,536870919]],["^15",[1043,"^U",375,536870919]],["^15",[1043,"^;","~u655b7379-a731-4fa0-812c-48d9d601c7f7",536870919]],["^15",[1044,"^Q","",536870919]],["^15",[1044,"^O","^16",536870919]],["^15",[1044,"^F",1043,536870919]],["^15",[1044,"^X",375,536870919]],["^15",[1044,"^V",375,536870919]],["^15",[1044,"^U",375,536870919]],["^15",[1044,"^;","~u655b7379-8ab8-450e-8a07-b7627762eaf2",536870919]],["^15",[1045,"^3","- \"Field of study that gives the computer the ability to learn without being explicitly programmed\" - Arthur Samuel\n  \n  Basically we program the computer in such a way that allows it to solve other problems without being explicitly being told how to solve them. Such as the ability to identify people in an image or chat with people like [ChatGPT](chat.openai.com) etc.\n- 4 type of ML Algorithms\n  [[Supervised Learning Algorithms]]: Most commonly used.\n  [[Unsupervised Learning Algorithms]]\n  [[Recommender System Algorithms]]\n  [[Reinforcement Learning Algorithms]]\n-\n-",536870919]],["^15",[1045,"^17",1700492153712,536870919]],["^15",[1045,"^Z","ML/pages/Machine Learning.md",536870919]],["^15",[1046,"^K",1700492153709,536870919]],["^15",[1046,"^@",false,536870919]],["^15",[1046,"^Y","reinforcement learning algorithms",536870919]],["^15",[1046,"^11","Reinforcement Learning Algorithms",536870919]],["^15",[1046,"^B",1700492153709,536870919]],["^15",[1046,"^;","~u655b7379-300f-41be-b5d5-346a976f57a5",536870919]],["^15",[1047,"^K",1700492153710,536870919]],["^15",[1047,"^@",false,536870919]],["^15",[1047,"^Y","recommender system algorithms",536870919]],["^15",[1047,"^11","Recommender System Algorithms",536870919]],["^15",[1047,"^B",1700492153710,536870919]],["^15",[1047,"^;","~u655b7379-9072-45d0-aa60-a3f174155550",536870919]],["^15",[1048,"^K",1700492153711,536870919]],["^15",[1048,"^@",false,536870919]],["^15",[1048,"^Y","unsupervised learning algorithms",536870919]],["^15",[1048,"^11","Unsupervised Learning Algorithms",536870919]],["^15",[1048,"^B",1700492153711,536870919]],["^15",[1048,"^;","~u655b7379-21cd-411f-a4cf-f6c0066dfdf1",536870919]],["^15",[1049,"^K",1700492153720,536870919]],["^15",[1049,"^[",1054,536870919]],["^15",[1049,"^@",false,536870919]],["^15",[1049,"^Y","supervised learning algorithms",536870919]],["^15",[1049,"^11","Supervised Learning Algorithms",536870919]],["^15",[1049,"^B",1700492153720,536870919]],["^15",[1049,"^;","~u655b7379-8450-4f55-900c-0da804c584d4",536870919]],["^15",[1050,"^Q","\"Field of study that gives the computer the ability to learn without being explicitly programmed\" - Arthur Samuel\n\nBasically we program the computer in such a way that allows it to solve other problems without being explicitly being told how to solve them. Such as the ability to identify people in an image or chat with people like [ChatGPT](chat.openai.com) etc.",536870919]],["^15",[1050,"^O","^16",536870919]],["^15",[1050,"^F",34,536870919]],["^15",[1050,"^X",34,536870919]],["^15",[1050,"^V",34,536870919]],["^15",[1050,"^U",34,536870919]],["^15",[1050,"^;","~u655b7379-852f-46ab-91fa-fdbb0788d945",536870919]],["^15",[1051,"^Q","4 type of ML Algorithms\n[[Supervised Learning Algorithms]]: Most commonly used.\n[[Unsupervised Learning Algorithms]]\n[[Recommender System Algorithms]]\n[[Reinforcement Learning Algorithms]]",536870919]],["^15",[1051,"^O","^16",536870919]],["^15",[1051,"^F",1050,536870919]],["^15",[1051,"^X",34,536870919]],["^15",[1051,"^V",34,536870919]],["^15",[1051,"^U",34,536870919]],["^15",[1051,"^U",1046,536870919]],["^15",[1051,"^U",1047,536870919]],["^15",[1051,"^U",1048,536870919]],["^15",[1051,"^U",1049,536870919]],["^15",[1051,"^H",1046,536870919]],["^15",[1051,"^H",1047,536870919]],["^15",[1051,"^H",1048,536870919]],["^15",[1051,"^H",1049,536870919]],["^15",[1051,"^;","~u655b7379-7277-4360-bc7a-46bb58010c8e",536870919]],["^15",[1052,"^Q","",536870919]],["^15",[1052,"^O","^16",536870919]],["^15",[1052,"^F",1051,536870919]],["^15",[1052,"^X",34,536870919]],["^15",[1052,"^V",34,536870919]],["^15",[1052,"^U",34,536870919]],["^15",[1052,"^;","~u655b7379-a7b3-4f4b-b935-0c48c716533f",536870919]],["^15",[1053,"^Q","",536870919]],["^15",[1053,"^O","^16",536870919]],["^15",[1053,"^F",1052,536870919]],["^15",[1053,"^X",34,536870919]],["^15",[1053,"^V",34,536870919]],["^15",[1053,"^U",34,536870919]],["^15",[1053,"^;","~u655b7379-6436-42e3-bdef-3bc85f6e13d9",536870919]],["^15",[1054,"^3","- Algorithms that learn input to output mappings, they are given each input X and its correct output Y and they ``learn`` them and are able to then predict what a correct output should be for a given input.\n  \n  For ex.:\n  ![image.png](../assets/image_1688396076353_0.png)\n  \n  Given these inputs in X, they output Y.\n-\n-",536870919]],["^15",[1054,"^17",1700492153721,536870919]],["^15",[1054,"^Z","ML/pages/Supervised Learning Algorithms.md",536870919]],["^15",[1055,"^Q","Algorithms that learn input to output mappings, they are given each input X and its correct output Y and they ``learn`` them and are able to then predict what a correct output should be for a given input.\n\nFor ex.:\n![image.png](../assets/image_1688396076353_0.png)\n\nGiven these inputs in X, they output Y.",536870919]],["^15",[1055,"^O","^16",536870919]],["^15",[1055,"^F",1049,536870919]],["^15",[1055,"^X",1049,536870919]],["^15",[1055,"^V",1049,536870919]],["^15",[1055,"^U",1049,536870919]],["^15",[1055,"^;","~u655b7379-ffae-4e98-875a-65a36d1e241c",536870919]],["^15",[1056,"^Q","",536870919]],["^15",[1056,"^O","^16",536870919]],["^15",[1056,"^F",1055,536870919]],["^15",[1056,"^X",1049,536870919]],["^15",[1056,"^V",1049,536870919]],["^15",[1056,"^U",1049,536870919]],["^15",[1056,"^;","~u655b7379-8b51-44a6-8dc4-966878bfc110",536870919]],["^15",[1057,"^Q","",536870919]],["^15",[1057,"^O","^16",536870919]],["^15",[1057,"^F",1056,536870919]],["^15",[1057,"^X",1049,536870919]],["^15",[1057,"^V",1049,536870919]],["^15",[1057,"^U",1049,536870919]],["^15",[1057,"^;","~u655b7379-e6cc-4199-b4e4-3aefa11b0425",536870919]],["^15",[1058,"^3","# Notes",536870919]],["^15",[1058,"^17",1700492153725,536870919]],["^15",[1058,"^Z","README.md",536870919]],["^15",[1059,"^K",1700492153725,536870919]],["^15",[1059,"^[",1058,536870919]],["^15",[1059,"^@",false,536870919]],["^15",[1059,"^Y","readme",536870919]],["^15",[1059,"^11","README",536870919]],["^15",[1059,"^B",1700492153725,536870919]],["^15",[1059,"^;","~u655b7379-9280-43b1-b063-88159204deb4",536870919]],["^15",[1060,"^Q","# Notes",536870919]],["^15",[1060,"^O","^16",536870919]],["^15",[1060,"^F",1059,536870919]],["^15",[1060,"^X",1059,536870919]],["^15",[1060,"^V",1059,536870919]],["^15",[1060,"^U",1059,536870919]],["^15",[1060,"^?",["^ ","~:heading",1],536870919]],["^15",[1060,"^J",[],536870919]],["^15",[1060,"^;","~u655b7379-5faa-490e-ac38-904256752651",536870919]],["^15",[1061,"^3","- [[Module]]s theirselves, and items within them are *private* by default, which in Rust means, that parent modules can't access these modules or their items. We use the ``pub`` keyword to turn them to *public* and hence allow external modules to access them.\n  This isn't just true for modules, but all items, [[Struct]]s/ [[Function]]s etc. either outside a [[Module]] or inside, in a [[Crate]]. Items in the open in a crate, are available directly from the crate's namespace.\n  \n  For ex.:\n  ```rust\n  mod x{\n   pub mod y {\n    pub fn yo(){}\n   }\n  }\n  \n  fn main() {\n   crate::x::y::yo(); //works\n  }\n  ```\n  * The only exception to the access modifiers are the top-level modules in a [[Crate]] Root, they can be accessed by the rest of the [[Crate]] Root's contents even if they are not public and the top-level modules are submodule to the [[Crate]] Root ``crate`` Module/the ``<crate-name>`` Module.\n   \n  * Even if a module is made *public*, its items must be made explicitly *public* to be accessible.\n  \n  * Parent modules can't access child modules and/or their contents if they are not public, but the child modules can access the sibling modules and items despite the access modifiers. Similarly, the items inside the modules can access each other if they are inside the same module without getting affected by the [[Access Modifier]]s.\n  For ex.:\n  ```rust\n  mod x {\n      pub mod y {\n          pub fn ayo() {\n              super::yo();\n          }\n      }\n      fn yo() {}\n  \n      mod z {\n          pub fn a() {}\n      }\n  \n      mod k {\n          pub fn b() {\n              crate::x::z::a();\n          }\n      }\n  \n      pub mod m {\n          pub fn c() {\n              crate::x::k::b();\n          }\n      }\n  }\n  \n  fn main() {\n      crate::x::y::ayo();\n      crate::x::m::c();\n    \t//works\n    \t//but crate::x::z::a(); won't work \n  } \n  \n  ```\n- All the items just need a ``pub`` before their definition to be made public.\n  \n  * [[Struct]] fields and [[Method]]s are private unless explicitly made public with pub. \n  For ex.:\n  ```rust\n  struct X {\n   pub Y:i32,\n  }\n  ```\n  \n  * For [[Enum]]s , we just need to make the enum definition ``pub <enum-name>`` to make all its fields and [[Method]]s public.\n-",536870919]],["^15",[1061,"^17",1700492153751,536870919]],["^15",[1061,"^Z","Rust/pages/Access Modifier.md",536870919]],["^15",[1062,"^K",1700492154622,536870919]],["^15",[1062,"^[",1061,536870919]],["^15",[1062,"^@",false,536870919]],["^15",[1062,"^Y","access modifier",536870919]],["^15",[1062,"^11","Access Modifier",536870919]],["^15",[1062,"^B",1700492154622,536870919]],["^15",[1062,"^;","~u656462fe-010c-4c94-9d0e-1b893160f594",536870952]],["^15",[1063,"^K",1700492154622,536870919]],["^15",[1063,"^[",1211,536870919]],["^15",[1063,"^@",false,536870919]],["^15",[1063,"^Y","crate",536870919]],["^15",[1063,"^11","Crate",536870919]],["^15",[1063,"^B",1700492154622,536870919]],["^15",[1063,"^;","~u656462fe-5a0c-4c77-9647-b7e60d1b0ee9",536870952]],["^15",[1064,"^K",1700492154621,536870919]],["^15",[1064,"^[",1462,536870920]],["^15",[1064,"^@",false,536870919]],["^15",[1064,"^Y","struct",536870919]],["^15",[1064,"^11","Struct",536870919]],["^15",[1064,"^B",1700492154621,536870919]],["^15",[1064,"^;","~u656462fd-325d-40ec-b821-301c8e7ea1b6",536870946]],["^15",[1065,"^5",1326,536870919]],["^15",[1065,"^K",1700492154583,536870919]],["^15",[1065,"^[",1325,536870919]],["^15",[1065,"^@",false,536870919]],["^15",[1065,"^Y","method",536870919]],["^15",[1065,"^11","Method",536870919]],["^15",[1065,"^?",["^ ","^18",["^19",["Associated Function"]]],536870919]],["^15",[1065,"^4",["^ ","^18","Associated Function"],536870919]],["^15",[1065,"^B",1700492154583,536870919]],["^15",[1065,"^;","~u656462fe-9e3e-4c15-85aa-4e037b08335b",536870960]],["^15",[1066,"^5",1252,536870919]],["^15",[1066,"^K",1700492154675,536870919]],["^15",[1066,"^@",false,536870919]],["^15",[1066,"^Y","enum",536870919]],["^15",[1066,"^11","Enum",536870919]],["^15",[1066,"^B",1700492154675,536870919]],["^15",[1066,"^;","~u656462fe-bc6f-40c2-8154-7274e272ac88",536870948]],["^15",[1067,"^Q","[[Module]]s theirselves, and items within them are *private* by default, which in Rust means, that parent modules can't access these modules or their items. We use the ``pub`` keyword to turn them to *public* and hence allow external modules to access them.\nThis isn't just true for modules, but all items, [[Struct]]s/ [[Function]]s etc. either outside a [[Module]] or inside, in a [[Crate]]. Items in the open in a crate, are available directly from the crate's namespace.\n\nFor ex.:\n```rust\nmod x{\n pub mod y {\n  pub fn yo(){}\n }\n}\n\nfn main() {\n crate::x::y::yo(); //works\n}\n```\n* The only exception to the access modifiers are the top-level modules in a [[Crate]] Root, they can be accessed by the rest of the [[Crate]] Root's contents even if they are not public and the top-level modules are submodule to the [[Crate]] Root ``crate`` Module/the ``<crate-name>`` Module.\n \n* Even if a module is made *public*, its items must be made explicitly *public* to be accessible.\n\n* Parent modules can't access child modules and/or their contents if they are not public, but the child modules can access the sibling modules and items despite the access modifiers. Similarly, the items inside the modules can access each other if they are inside the same module without getting affected by the [[Access Modifier]]s.\nFor ex.:\n```rust\nmod x {\n    pub mod y {\n        pub fn ayo() {\n            super::yo();\n        }\n    }\n    fn yo() {}\n\n    mod z {\n        pub fn a() {}\n    }\n\n    mod k {\n        pub fn b() {\n            crate::x::z::a();\n        }\n    }\n\n    pub mod m {\n        pub fn c() {\n            crate::x::k::b();\n        }\n    }\n}\n\nfn main() {\n    crate::x::y::ayo();\n    crate::x::m::c();\n  \t//works\n  \t//but crate::x::z::a(); won't work \n} \n\n```",536870919]],["^15",[1067,"^O","^16",536870919]],["^15",[1067,"^F",1062,536870919]],["^15",[1067,"^X",1062,536870919]],["^15",[1067,"^V",1062,536870919]],["^15",[1067,"^U",163,536870919]],["^15",[1067,"^U",287,536870919]],["^15",[1067,"^U",1062,536870919]],["^15",[1067,"^U",1063,536870919]],["^15",[1067,"^U",1064,536870919]],["^15",[1067,"^H",163,536870919]],["^15",[1067,"^H",287,536870919]],["^15",[1067,"^H",1062,536870919]],["^15",[1067,"^H",1063,536870919]],["^15",[1067,"^H",1064,536870919]],["^15",[1067,"^;","~u655b7379-a707-4728-a3f2-956f6790ebe9",536870919]],["^15",[1068,"^Q","All the items just need a ``pub`` before their definition to be made public.\n\n* [[Struct]] fields and [[Method]]s are private unless explicitly made public with pub. \nFor ex.:\n```rust\nstruct X {\n pub Y:i32,\n}\n```\n\n* For [[Enum]]s , we just need to make the enum definition ``pub <enum-name>`` to make all its fields and [[Method]]s public.",536870919]],["^15",[1068,"^O","^16",536870919]],["^15",[1068,"^F",1067,536870919]],["^15",[1068,"^X",1062,536870919]],["^15",[1068,"^V",1062,536870919]],["^15",[1068,"^U",1062,536870919]],["^15",[1068,"^U",1064,536870919]],["^15",[1068,"^U",1065,536870919]],["^15",[1068,"^U",1066,536870919]],["^15",[1068,"^H",1064,536870919]],["^15",[1068,"^H",1065,536870919]],["^15",[1068,"^H",1066,536870919]],["^15",[1068,"^;","~u655b7379-b84f-49a5-80aa-9da836094e8b",536870919]],["^15",[1069,"^Q","",536870919]],["^15",[1069,"^O","^16",536870919]],["^15",[1069,"^F",1068,536870919]],["^15",[1069,"^X",1062,536870919]],["^15",[1069,"^V",1062,536870919]],["^15",[1069,"^U",1062,536870919]],["^15",[1069,"^;","~u655b7379-b5e6-48a3-b3ef-2a1b5f2c2aa6",536870919]],["^15",[1070,"^3","- Just like [[Rc<T>]] but can be shared across [[Thread]]s safely as it implements the ``Send`` [[Trait]] and ``Sync`` trait, and uses [[Atomic]]s to handle its internal reference counters.",536870919]],["^15",[1070,"^17",1700492153760,536870919]],["^15",[1070,"^Z","Rust/pages/Arc%3CT%3E.md",536870919]],["^15",[1071,"^K",1700492154676,536870919]],["^15",[1071,"^[",1070,536870919]],["^15",[1071,"^@",false,536870919]],["^15",[1071,"^Y","arc<t>",536870919]],["^15",[1071,"^11","Arc<T>",536870919]],["^15",[1071,"^B",1700492154676,536870919]],["^15",[1071,"^;","~u655b737b-7d8a-40bc-ae8f-07138355a90c",536870920]],["^15",[1072,"^K",1700492153857,536870919]],["^15",[1072,"^[",1109,536870919]],["^15",[1072,"^@",false,536870919]],["^15",[1072,"^Y","atomic",536870919]],["^15",[1072,"^11","Atomic",536870919]],["^15",[1072,"^B",1700492153857,536870919]],["^15",[1072,"^;","~u655b7379-2012-4ef4-949a-ff3e4de6048d",536870919]],["^15",[1073,"^K",1700492154675,536870919]],["^15",[1073,"^[",1498,536870920]],["^15",[1073,"^@",false,536870919]],["^15",[1073,"^Y","trait",536870919]],["^15",[1073,"^11","Trait",536870919]],["^15",[1073,"^B",1700492154675,536870919]],["^15",[1073,"^;","~u656462fe-108a-41c4-b6a7-85a85a7dc3a6",536870956]],["^15",[1074,"^K",1700492154676,536870919]],["^15",[1074,"^[",1490,536870920]],["^15",[1074,"^@",false,536870919]],["^15",[1074,"^Y","thread",536870919]],["^15",[1074,"^11","Thread",536870919]],["^15",[1074,"^B",1700492154676,536870919]],["^15",[1074,"^;","~u655b737b-2bed-496f-b6e9-6dd3871127ee",536870920]],["^15",[1075,"^K",1700492153846,536870919]],["^15",[1075,"^[",1402,536870920]],["^15",[1075,"^@",false,536870919]],["^15",[1075,"^Y","rc<t>",536870919]],["^15",[1075,"^11","Rc<T>",536870919]],["^15",[1075,"^B",1700492153846,536870919]],["^15",[1075,"^;","~u655b737b-cd43-4524-b0ef-b42252639429",536870920]],["^15",[1076,"^Q","Just like [[Rc<T>]] but can be shared across [[Thread]]s safely as it implements the ``Send`` [[Trait]] and ``Sync`` trait, and uses [[Atomic]]s to handle its internal reference counters.",536870919]],["^15",[1076,"^O","^16",536870919]],["^15",[1076,"^F",1071,536870919]],["^15",[1076,"^X",1071,536870919]],["^15",[1076,"^V",1071,536870919]],["^15",[1076,"^U",1071,536870919]],["^15",[1076,"^U",1072,536870919]],["^15",[1076,"^U",1073,536870919]],["^15",[1076,"^U",1074,536870919]],["^15",[1076,"^U",1075,536870919]],["^15",[1076,"^H",1072,536870919]],["^15",[1076,"^H",1073,536870919]],["^15",[1076,"^H",1074,536870919]],["^15",[1076,"^H",1075,536870919]],["^15",[1076,"^;","~u655b7379-2046-42cf-9bb2-c2d878e595a3",536870919]],["^15",[1077,"^3","- An assert is simply a requirement, that the condition being checked must be true. If it isn't, this leads to a [[Panic]].\n  \n  We use asserts using the ``assert!`` [[Macro]].\n  \n  For ex.:\n  ```rust\n      fn exploration() {\n          assert!(2 + 2 == 4);\n      }\n  ```\n- Similarly there are other variants \n  * ``assert_eq!(<obj 1>,<obj 2>)``: If ``obj 1`` == ``obj 2``.\n  * ``assert_ne!(<obj 1>,<obj 2>)``: If ``obj 1`` != ``obj 2``.\n- Custom failure text\n  After the required arguments to all ``assert`` [[Macro]]s , the [[String]] passed is given to ``format!`` [[Macro]] and it prints the given string.\n-",536870919]],["^15",[1077,"^17",1700492153784,536870919]],["^15",[1077,"^Z","Rust/pages/Assert.md",536870919]],["^15",[1078,"^K",1700492153783,536870919]],["^15",[1078,"^[",1077,536870919]],["^15",[1078,"^@",false,536870919]],["^15",[1078,"^Y","assert",536870919]],["^15",[1078,"^11","Assert",536870919]],["^15",[1078,"^B",1700492153783,536870919]],["^15",[1078,"^;","~u655b737b-282f-4ea4-99c3-e764b1232976",536870920]],["^15",[1079,"^K",1700492154531,536870919]],["^15",[1079,"^[",1315,536870919]],["^15",[1079,"^@",false,536870919]],["^15",[1079,"^Y","macro",536870919]],["^15",[1079,"^11","Macro",536870919]],["^15",[1079,"^B",1700492154531,536870919]],["^15",[1079,"^;","~u656462fe-9291-46b9-b352-d2b7b30c1854",536870960]],["^15",[1080,"^K",1700492154675,536870919]],["^15",[1080,"^[",1364,536870920]],["^15",[1080,"^@",false,536870919]],["^15",[1080,"^Y","panic",536870919]],["^15",[1080,"^11","Panic",536870919]],["^15",[1080,"^B",1700492154675,536870919]],["^15",[1080,"^;","~u656462fe-debf-47e6-b409-f7e4441472f3",536870960]],["^15",[1081,"^Q","An assert is simply a requirement, that the condition being checked must be true. If it isn't, this leads to a [[Panic]].\n\nWe use asserts using the ``assert!`` [[Macro]].\n\nFor ex.:\n```rust\n    fn exploration() {\n        assert!(2 + 2 == 4);\n    }\n```",536870919]],["^15",[1081,"^O","^16",536870919]],["^15",[1081,"^F",1078,536870919]],["^15",[1081,"^X",1078,536870919]],["^15",[1081,"^V",1078,536870919]],["^15",[1081,"^U",1078,536870919]],["^15",[1081,"^U",1079,536870919]],["^15",[1081,"^U",1080,536870919]],["^15",[1081,"^H",1079,536870919]],["^15",[1081,"^H",1080,536870919]],["^15",[1081,"^;","~u655b7379-9ec3-496d-9678-fda115487801",536870919]],["^15",[1082,"^Q","Similarly there are other variants \n* ``assert_eq!(<obj 1>,<obj 2>)``: If ``obj 1`` == ``obj 2``.\n* ``assert_ne!(<obj 1>,<obj 2>)``: If ``obj 1`` != ``obj 2``.",536870919]],["^15",[1082,"^O","^16",536870919]],["^15",[1082,"^F",1081,536870919]],["^15",[1082,"^X",1078,536870919]],["^15",[1082,"^V",1078,536870919]],["^15",[1082,"^U",1078,536870919]],["^15",[1082,"^;","~u655b7379-3f85-4b8e-b415-4dacdd2dd855",536870919]],["^15",[1083,"^Q","Custom failure text\nAfter the required arguments to all ``assert`` [[Macro]]s , the [[String]] passed is given to ``format!`` [[Macro]] and it prints the given string.",536870919]],["^15",[1083,"^O","^16",536870919]],["^15",[1083,"^F",1082,536870919]],["^15",[1083,"^X",1078,536870919]],["^15",[1083,"^V",1078,536870919]],["^15",[1083,"^U",80,536870919]],["^15",[1083,"^U",1078,536870919]],["^15",[1083,"^U",1079,536870919]],["^15",[1083,"^H",80,536870919]],["^15",[1083,"^H",1079,536870919]],["^15",[1083,"^;","~u655b7379-d60b-419d-87e2-ba8604c17fcf",536870919]],["^15",[1084,"^Q","",536870919]],["^15",[1084,"^O","^16",536870919]],["^15",[1084,"^F",1083,536870919]],["^15",[1084,"^X",1078,536870919]],["^15",[1084,"^V",1078,536870919]],["^15",[1084,"^U",1078,536870919]],["^15",[1084,"^;","~u655b7379-ef32-4e47-bf39-f702ddfebc3c",536870919]],["^15",[1085,"^3","- Just like [[Generic Type]]s on [[Trait]]s, we can define types in trait definitions which the implementors would then define and hence we get something similar to a generic type but without using generics and a more concise trait definition.\n  \n  Syntax:\n  ``\n  trait <trait name> {\n   type <some type name 1>;\n   type <some type name 2>; \n    //and so on\n    //then use them as types in any following methods, as they are part of Self, we need to use Self::<some type name> \n  }\n  \n  impl <trait name> for <type name> {\n     type <some type name 1> = <some type>;\n     type <some type name 2> = <some type>;\n    //and define the methods with either <some type> or Self::<some type name> \n  }\n  ``\n  [[Method]] definitions can use ``Self::<type name>`` in trait definition.\n  \n  For ex.:\n  ```rust\n  trait X {\n      type A;\n      type B;\n      fn yo(a: Self::A, b: Self::B);\n      fn no(&self, a: Self::A, b: Self::B);\n  }\n  \n  struct M {}\n  \n  impl X for M {\n      type A = i32;\n      type B = f64;\n      fn yo(a: Self::A, b: f64) {}\n      fn no(&self, a: Self::A, b: Self::B) {}\n  }\n  \n  fn main() {\n      let m = M {};\n      M::yo(2, 4.0);\n      m.no(5, 6.0);\n  } \n  ```",536870919]],["^15",[1085,"^17",1700492153804,536870919]],["^15",[1085,"^Z","Rust/pages/Associated Type.md",536870919]],["^15",[1086,"^K",1700492154429,536870919]],["^15",[1086,"^[",1085,536870919]],["^15",[1086,"^@",false,536870919]],["^15",[1086,"^Y","associated type",536870919]],["^15",[1086,"^11","Associated Type",536870919]],["^15",[1086,"^B",1700492154429,536870919]],["^15",[1086,"^;","~u655b737b-fdf2-4d26-9206-86e6bc87724a",536870920]],["^15",[1087,"^K",1700492154458,536870919]],["^15",[1087,"^[",1277,536870919]],["^15",[1087,"^@",false,536870919]],["^15",[1087,"^Y","generic type",536870919]],["^15",[1087,"^11","Generic Type",536870919]],["^15",[1087,"^B",1700492154458,536870919]],["^15",[1087,"^;","~u656462fe-cfc6-4964-9948-8814d6034a87",536870956]],["^15",[1088,"^Q","Just like [[Generic Type]]s on [[Trait]]s, we can define types in trait definitions which the implementors would then define and hence we get something similar to a generic type but without using generics and a more concise trait definition.\n\nSyntax:\n``\ntrait <trait name> {\n type <some type name 1>;\n type <some type name 2>; \n  //and so on\n  //then use them as types in any following methods, as they are part of Self, we need to use Self::<some type name> \n}\n\nimpl <trait name> for <type name> {\n   type <some type name 1> = <some type>;\n   type <some type name 2> = <some type>;\n  //and define the methods with either <some type> or Self::<some type name> \n}\n``\n[[Method]] definitions can use ``Self::<type name>`` in trait definition.\n\nFor ex.:\n```rust\ntrait X {\n    type A;\n    type B;\n    fn yo(a: Self::A, b: Self::B);\n    fn no(&self, a: Self::A, b: Self::B);\n}\n\nstruct M {}\n\nimpl X for M {\n    type A = i32;\n    type B = f64;\n    fn yo(a: Self::A, b: f64) {}\n    fn no(&self, a: Self::A, b: Self::B) {}\n}\n\nfn main() {\n    let m = M {};\n    M::yo(2, 4.0);\n    m.no(5, 6.0);\n} \n```",536870919]],["^15",[1088,"^O","^16",536870919]],["^15",[1088,"^F",1086,536870919]],["^15",[1088,"^X",1086,536870919]],["^15",[1088,"^V",1086,536870919]],["^15",[1088,"^U",1065,536870919]],["^15",[1088,"^U",1073,536870919]],["^15",[1088,"^U",1086,536870919]],["^15",[1088,"^U",1087,536870919]],["^15",[1088,"^H",1065,536870919]],["^15",[1088,"^H",1073,536870919]],["^15",[1088,"^H",1087,536870919]],["^15",[1088,"^;","~u655b7379-a8ef-409d-854d-554f36d94425",536870919]],["^15",[1089,"^3","- Async/Await model in other languages is a high level method of working with concurrency. \n  Unlike OS [[Thread]]s,  this model allows for things like Coroutines, Event driven programming (Callbacks) and the like. \n  In rust, Async/Await model is natively supported and has its own features. But it lacks a runtime, which is left upto community [[Crate]]s, meaning a model to actually handle async/await paradigm in rust at runtime has to be added manually.\n  \n  Rust uses [[Future]]s, \n  async in Rust has 0 cost, meaning we have no dynamic dispatch or heap allocations for async [[Function]]s,\n  and Futures are inert, meaning they are lazy and only execute when polled and don't use up additional resources until needed, and drop everything if they are dropped without going to completion.\n  \n  * Async vs [[Thread]]s: Threads incur a memory and CPU overhead when they have to be spawned, and they consume the same even at runtime and even they are idle. \n  Async overcomes this by having a few threads and managed by a state machine, this means the binary size is greater as this added construct handles tasks at runtime but the overhead is smaller and that allows for greater number of concurrent tasks. \n  Hence, Async paradigm is better than thread paradigm but also more complex, introduces more sources for bugs and requires a slightly different programming model than synchronous code which goes well even with threads.\n  \n  * Async/Await and ``Future`` [[Trait]] are provided by Rust and its [[Standard Library]]. However, many utility [[Data Type]]s, [[Macro]]s and [[Function]]s to work with these are provided by the ``futures`` [[Crate]]. Then the execution of async code, IO and task spawning is provided by the async runtime which is provided by any external crate, such as ``Tokio``.\n- Async [[Function]]: ``async`` on functions turn them into state machines, and they implement the ``Future`` [[Trait]] automatically. [[Future]] are like normal functions but they don't block the caller [[Thread]] like normal functions when they are called, they yield the control back and are continued by the async runtime when the value from the future is needed.\n  \n  For ex.:\n  First we add ``Future`` trait as a dependency in [[cargo.toml]] ,\n  ```toml\n  [dependencies]\n  futures = \"0.3\"\n  ```\n  Then we can use ``block_on``, \n  ```rust\n  // `block_on` blocks the current thread until the provided future has run to\n  // completion. Other executors provide more complex behavior, like scheduling\n  // multiple futures onto the same thread.\n  use futures::executor::block_on;\n  \n  async fn hello_world() {\n      println!(\"hello, world!\");  \n  }\n  \n  fn main() {\n      let future = hello_world(); // Immediately returns a future but doesn't execute the function.\n      block_on(future); // `future` is run and \"hello, world!\" is printed\n  }\n  ```\n  ``block_on`` is an [[Executor]], meaning it executes the given future [[Data Type]].\n  \n  * ``.await``: Awaits a future concurrently, as we know a ``Future<T>`` [[Data Type]] is returned immediately when an async function is called, ``await`` on the ``Future<T>`` concurrently waits on the ``Future`` and executes the function whenever the async runtime has time to do so or if the return value is required.\n  For ex.:\n  ```rust\n  async fn learn_song() -> i32 {\n   2\n   }\n  async fn sing_song(x: i32) {  }\n  async fn dance() { }\n  \n  async fn learn_and_sing() {\n      \n      // We use `.await` here rather than `block_on` to prevent blocking the\n      // thread, which makes it possible to `dance` at the same time.\n      let song = learn_song().await; //returns a future, then await on it returns the value i32\n      sing_song(song).await; //ok, whilst both are started at same time, since this needs the return value of learn_song, it is ran to completion\n  }\n  \n  async fn async_main() {\n      let f1 = learn_and_sing();\n      let f2 = dance();\n  \n      // `join!` is like `.await` but can wait for multiple futures concurrently.\n      // If we're temporarily blocked in the `learn_and_sing` future, the `dance`\n      // future will take over the current thread. If `dance` becomes blocked,\n      // `learn_and_sing` can take back over. If both futures are blocked, then\n      // `async_main` is blocked and will yield to the executor.\n      futures::join!(f1, f2);\n  }\n  \n  fn main() {\n      block_on(async_main());\n  }\n  ```\n- Async [[Function]]s with explicit return type and async block\n  Async functions are normal functions that return a ``Future<T>``, it is optional to write the whole syntax as we can just write ``T`` for the return and it means the same thing.\n  \n  Async can also be applied to [[Scope]] blocks, these blocks also return a ``Future<T>``. \n  For ex.:\n  ```rust\n  // `foo()` returns a type that implements `Future<Output = u8>`.\n  // `foo().await` will result in a value of type `u8`.\n  async fn foo() -> u8 { 5 }\n   \n  fn bar() -> impl Future<Output = u8> {\n      // This `async` block results in a type that implements\n      // `Future<Output = u8>`.\n      async {\n          let x: u8 = foo().await;\n          x + 5\n      }\n  }\n  \n  \n  fn main() {\n   block_on(bar());\n  }\n  \n  ```\n  \n  * Async [[Lifetime]]\n  \n  Async [[Function]]s that take [[Reference Type]]s (with non static lifetimes) and have no explicit return type automatically use the lifetime of the return type.\n  \n  For ex.:\n  ```rust\n  // This function:\n  async fn foo(x: &u8) -> u8 { *x }\n  \n  // Is equivalent to this function:\n  fn foo_expanded<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n      async move { *x }\n  }\n  ```\n  Here, if the ``Future<T>`` returned from ``foo_expanded`` used reference ``x`` and passed it as a reference again to the async block, then the async block won't have access to x as the rest of the function scope is over and future's aren't executed right away, so ``x`` is automatically ``move``d into the returned ``Future<T>``. And since the returned ``Future<T>`` uses a reference, it needs to define the lifetime as well.\n  \n  This also means, that if our async function passes a reference created inside it to another async function/block and returns it, then it must move it otherwise the same issue would occur.\n  \n  For ex.:\n  ```rust\n  async fn borrow_x(x: &i32) -> u8 {\n   2\n  }\n  \n  fn bad() -> impl Future<Output = u8> {\n      let x = 5;\n      //borrow_x(&x) // ERROR: `x` does not live long enough\n  }\n  \n  fn good() -> impl Future<Output = u8> {\n      async {\n          let x = 5;\n          borrow_x(&x).await //ok, since the async block has the reference and doesn't rely on the body of good() to be in scope\n      }\n  }\n  ```\n- Async ``move``\n  Used async blocks.\n  Just like the ``move`` in [[Closure]]s. Moves the references into the block.\n  \n  For ex.:\n  ```rust\n  fn yo() -> impl Future<Output= i32>{\n    let x= 20;\n  async move{\n     *(&x) //moves x into this closure\n    }\n  }\n  ```\n- [[Pointer]]s from the [[Standard Library]] such as [[Rc<T>]], [[Mutex<T>]] etc. don't necessarily implement the ``Send`` [[Trait]]. This can cause one thread to lock up a value and another to request it when using [[Future]]s. \n  This is why it is recommended to use ``Future``-aware [[Pointer]]s such as ``Mutex`` from ``futures::lock`` [[Module]] instead of ``std::sync``.\n- ``async_std`` is in [[Standard Library]]\n  It provides some async features such as ``async_std::task::spawn``. This allows task spawning. Meaning, we can pass a [[Future]] to ``spawn(...)`` [[Function]] and it is executed asynchronously, it returns a ``JoinHandle`` which can be ``.await``ed.\n- ``?`` with ``await`` on [[Result Type]]s\n  For ex.:\n  ```rust\n  let fut = async {\n      foo().await?;\n      bar().await?;\n      //Ok(()) //error\n      Ok::<(), MyError>(()) // <- note the explicit type annotation here\n  };\n  ```\n  We need to use the ``Turbofish`` [[Operator]] to explicitly define the return type with ``?``. This is a known limitation with Rust's compiler.",536870919]],["^15",[1089,"^17",1700492153847,536870919]],["^15",[1089,"^Z","Rust/pages/Async and Await.md",536870919]],["^15",[1090,"^K",1700492154693,536870919]],["^15",[1090,"^[",1222,536870919]],["^15",[1090,"^@",false,536870919]],["^15",[1090,"^Y","data type",536870919]],["^15",[1090,"^11","Data Type",536870919]],["^15",[1090,"^B",1700492154693,536870919]],["^15",[1090,"^;","~u656462fe-6959-48e7-962d-3d8d09881635",536870960]],["^15",[1091,"^K",1700492154584,536870919]],["^15",[1091,"^[",1412,536870920]],["^15",[1091,"^@",false,536870919]],["^15",[1091,"^Y","reference type",536870919]],["^15",[1091,"^11","Reference Type",536870919]],["^15",[1091,"^B",1700492154584,536870919]],["^15",[1091,"^;","~u656462fe-4248-4652-afdc-c8f265567d23",536870960]],["^15",[1092,"^K",1700492154676,536870919]],["^15",[1092,"^[",1342,536870919]],["^15",[1092,"^@",false,536870919]],["^15",[1092,"^Y","mutex<t>",536870919]],["^15",[1092,"^11","Mutex<T>",536870919]],["^15",[1092,"^B",1700492154676,536870919]],["^15",[1092,"^;","~u655b737b-fbc6-4df9-bf10-6d96d8f98681",536870920]],["^15",[1093,"^K",1700492154676,536870919]],["^15",[1093,"^[",1170,536870919]],["^15",[1093,"^@",false,536870919]],["^15",[1093,"^Y","closure",536870919]],["^15",[1093,"^11","Closure",536870919]],["^15",[1093,"^B",1700492154676,536870919]],["^15",[1093,"^;","~u656462fe-cdab-47db-bfdc-99787a2cd8ac",536870948]],["^15",[1094,"^K",1700492154676,536870919]],["^15",[1094,"^[",1387,536870920]],["^15",[1094,"^@",false,536870919]],["^15",[1094,"^Y","pointer",536870919]],["^15",[1094,"^11","Pointer",536870919]],["^15",[1094,"^B",1700492154676,536870919]],["^15",[1094,"^;","~u656462fe-7a8d-4b11-8c5b-d50dd0c51cb5",536870948]],["^15",[1095,"^K",1700492153842,536870919]],["^15",[1095,"^@",false,536870919]],["^15",[1095,"^Y","executor",536870919]],["^15",[1095,"^11","Executor",536870919]],["^15",[1095,"^B",1700492153842,536870919]],["^15",[1095,"^;","~u655b737b-8395-498f-9d8b-660527ca9ad5",536870920]],["^15",[1096,"^K",1700492154389,536870919]],["^15",[1096,"^@",false,536870919]],["^15",[1096,"^Y","standard library",536870919]],["^15",[1096,"^11","Standard Library",536870919]],["^15",[1096,"^B",1700492154389,536870919]],["^15",[1096,"^;","~u656462fe-e8f1-41a6-b3bb-3e90044dbf97",536870960]],["^15",[1097,"^K",1700492154046,536870919]],["^15",[1097,"^[",1089,536870919]],["^15",[1097,"^@",false,536870919]],["^15",[1097,"^Y","async and await",536870919]],["^15",[1097,"^11","Async and Await",536870919]],["^15",[1097,"^B",1700492154046,536870919]],["^15",[1097,"^;","~u655b737b-7b67-480b-a7b1-4c8bc001bbea",536870920]],["^15",[1098,"^K",1700492154675,536870919]],["^15",[1098,"^[",1424,536870920]],["^15",[1098,"^@",false,536870919]],["^15",[1098,"^Y","result type",536870919]],["^15",[1098,"^11","Result Type",536870919]],["^15",[1098,"^B",1700492154675,536870919]],["^15",[1098,"^;","~u656462fd-bb1f-4687-bf6c-af022c8b87e6",536870946]],["^15",[1099,"^K",1700492154622,536870919]],["^15",[1099,"^@",false,536870919]],["^15",[1099,"^Y","cargo.toml",536870919]],["^15",[1099,"^11","cargo.toml",536870919]],["^15",[1099,"^B",1700492154622,536870919]],["^15",[1099,"^;","~u655b737c-020f-4ac9-ba2b-1e903c41823b",536870920]],["^15",[1100,"^K",1700492154319,536870919]],["^15",[1100,"^[",1273,536870919]],["^15",[1100,"^@",false,536870919]],["^15",[1100,"^Y","future",536870919]],["^15",[1100,"^11","Future",536870919]],["^15",[1100,"^B",1700492154319,536870919]],["^15",[1100,"^;","~u655b737b-9603-47dd-b679-1f96e0822604",536870920]],["^15",[1101,"^K",1700492154457,536870919]],["^15",[1101,"^[",1304,536870919]],["^15",[1101,"^@",false,536870919]],["^15",[1101,"^Y","lifetime",536870919]],["^15",[1101,"^11","Lifetime",536870919]],["^15",[1101,"^B",1700492154457,536870919]],["^15",[1101,"^;","~u656462fe-fa36-46f4-be2c-c4c2b6b1ef0a",536870960]],["^15",[1102,"^Q","Async/Await model in other languages is a high level method of working with concurrency. \nUnlike OS [[Thread]]s,  this model allows for things like Coroutines, Event driven programming (Callbacks) and the like. \nIn rust, Async/Await model is natively supported and has its own features. But it lacks a runtime, which is left upto community [[Crate]]s, meaning a model to actually handle async/await paradigm in rust at runtime has to be added manually.\n\nRust uses [[Future]]s, \nasync in Rust has 0 cost, meaning we have no dynamic dispatch or heap allocations for async [[Function]]s,\nand Futures are inert, meaning they are lazy and only execute when polled and don't use up additional resources until needed, and drop everything if they are dropped without going to completion.\n\n* Async vs [[Thread]]s: Threads incur a memory and CPU overhead when they have to be spawned, and they consume the same even at runtime and even they are idle. \nAsync overcomes this by having a few threads and managed by a state machine, this means the binary size is greater as this added construct handles tasks at runtime but the overhead is smaller and that allows for greater number of concurrent tasks. \nHence, Async paradigm is better than thread paradigm but also more complex, introduces more sources for bugs and requires a slightly different programming model than synchronous code which goes well even with threads.\n\n* Async/Await and ``Future`` [[Trait]] are provided by Rust and its [[Standard Library]]. However, many utility [[Data Type]]s, [[Macro]]s and [[Function]]s to work with these are provided by the ``futures`` [[Crate]]. Then the execution of async code, IO and task spawning is provided by the async runtime which is provided by any external crate, such as ``Tokio``.",536870919]],["^15",[1102,"^O","^16",536870919]],["^15",[1102,"^F",1097,536870919]],["^15",[1102,"^X",1097,536870919]],["^15",[1102,"^V",1097,536870919]],["^15",[1102,"^U",163,536870919]],["^15",[1102,"^U",1063,536870919]],["^15",[1102,"^U",1073,536870919]],["^15",[1102,"^U",1074,536870919]],["^15",[1102,"^U",1079,536870919]],["^15",[1102,"^U",1090,536870919]],["^15",[1102,"^U",1096,536870919]],["^15",[1102,"^U",1097,536870919]],["^15",[1102,"^U",1100,536870919]],["^15",[1102,"^H",163,536870919]],["^15",[1102,"^H",1063,536870919]],["^15",[1102,"^H",1073,536870919]],["^15",[1102,"^H",1074,536870919]],["^15",[1102,"^H",1079,536870919]],["^15",[1102,"^H",1090,536870919]],["^15",[1102,"^H",1096,536870919]],["^15",[1102,"^H",1100,536870919]],["^15",[1102,"^;","~u655b7379-979c-4814-9f6f-e051d4d716e4",536870919]],["^15",[1103,"^Q","Async [[Function]]: ``async`` on functions turn them into state machines, and they implement the ``Future`` [[Trait]] automatically. [[Future]] are like normal functions but they don't block the caller [[Thread]] like normal functions when they are called, they yield the control back and are continued by the async runtime when the value from the future is needed.\n\nFor ex.:\nFirst we add ``Future`` trait as a dependency in [[cargo.toml]] ,\n```toml\n[dependencies]\nfutures = \"0.3\"\n```\nThen we can use ``block_on``, \n```rust\n// `block_on` blocks the current thread until the provided future has run to\n// completion. Other executors provide more complex behavior, like scheduling\n// multiple futures onto the same thread.\nuse futures::executor::block_on;\n\nasync fn hello_world() {\n    println!(\"hello, world!\");  \n}\n\nfn main() {\n    let future = hello_world(); // Immediately returns a future but doesn't execute the function.\n    block_on(future); // `future` is run and \"hello, world!\" is printed\n}\n```\n``block_on`` is an [[Executor]], meaning it executes the given future [[Data Type]].\n\n* ``.await``: Awaits a future concurrently, as we know a ``Future<T>`` [[Data Type]] is returned immediately when an async function is called, ``await`` on the ``Future<T>`` concurrently waits on the ``Future`` and executes the function whenever the async runtime has time to do so or if the return value is required.\nFor ex.:\n```rust\nasync fn learn_song() -> i32 {\n 2\n }\nasync fn sing_song(x: i32) {  }\nasync fn dance() { }\n\nasync fn learn_and_sing() {\n    \n    // We use `.await` here rather than `block_on` to prevent blocking the\n    // thread, which makes it possible to `dance` at the same time.\n    let song = learn_song().await; //returns a future, then await on it returns the value i32\n    sing_song(song).await; //ok, whilst both are started at same time, since this needs the return value of learn_song, it is ran to completion\n}\n\nasync fn async_main() {\n    let f1 = learn_and_sing();\n    let f2 = dance();\n\n    // `join!` is like `.await` but can wait for multiple futures concurrently.\n    // If we're temporarily blocked in the `learn_and_sing` future, the `dance`\n    // future will take over the current thread. If `dance` becomes blocked,\n    // `learn_and_sing` can take back over. If both futures are blocked, then\n    // `async_main` is blocked and will yield to the executor.\n    futures::join!(f1, f2);\n}\n\nfn main() {\n    block_on(async_main());\n}\n```",536870919]],["^15",[1103,"^O","^16",536870919]],["^15",[1103,"^F",1102,536870919]],["^15",[1103,"^X",1097,536870919]],["^15",[1103,"^V",1097,536870919]],["^15",[1103,"^U",163,536870919]],["^15",[1103,"^U",1073,536870919]],["^15",[1103,"^U",1074,536870919]],["^15",[1103,"^U",1090,536870919]],["^15",[1103,"^U",1095,536870919]],["^15",[1103,"^U",1097,536870919]],["^15",[1103,"^U",1099,536870919]],["^15",[1103,"^U",1100,536870919]],["^15",[1103,"^H",163,536870919]],["^15",[1103,"^H",1073,536870919]],["^15",[1103,"^H",1074,536870919]],["^15",[1103,"^H",1090,536870919]],["^15",[1103,"^H",1095,536870919]],["^15",[1103,"^H",1099,536870919]],["^15",[1103,"^H",1100,536870919]],["^15",[1103,"^;","~u655b7379-1b41-44fa-8dfc-814a822ea3d1",536870919]],["^15",[1104,"^Q","Async [[Function]]s with explicit return type and async block\nAsync functions are normal functions that return a ``Future<T>``, it is optional to write the whole syntax as we can just write ``T`` for the return and it means the same thing.\n\nAsync can also be applied to [[Scope]] blocks, these blocks also return a ``Future<T>``. \nFor ex.:\n```rust\n// `foo()` returns a type that implements `Future<Output = u8>`.\n// `foo().await` will result in a value of type `u8`.\nasync fn foo() -> u8 { 5 }\n \nfn bar() -> impl Future<Output = u8> {\n    // This `async` block results in a type that implements\n    // `Future<Output = u8>`.\n    async {\n        let x: u8 = foo().await;\n        x + 5\n    }\n}\n\n\nfn main() {\n block_on(bar());\n}\n\n```\n\n* Async [[Lifetime]]\n\nAsync [[Function]]s that take [[Reference Type]]s (with non static lifetimes) and have no explicit return type automatically use the lifetime of the return type.\n\nFor ex.:\n```rust\n// This function:\nasync fn foo(x: &u8) -> u8 { *x }\n\n// Is equivalent to this function:\nfn foo_expanded<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n    async move { *x }\n}\n```\nHere, if the ``Future<T>`` returned from ``foo_expanded`` used reference ``x`` and passed it as a reference again to the async block, then the async block won't have access to x as the rest of the function scope is over and future's aren't executed right away, so ``x`` is automatically ``move``d into the returned ``Future<T>``. And since the returned ``Future<T>`` uses a reference, it needs to define the lifetime as well.\n\nThis also means, that if our async function passes a reference created inside it to another async function/block and returns it, then it must move it otherwise the same issue would occur.\n\nFor ex.:\n```rust\nasync fn borrow_x(x: &i32) -> u8 {\n 2\n}\n\nfn bad() -> impl Future<Output = u8> {\n    let x = 5;\n    //borrow_x(&x) // ERROR: `x` does not live long enough\n}\n\nfn good() -> impl Future<Output = u8> {\n    async {\n        let x = 5;\n        borrow_x(&x).await //ok, since the async block has the reference and doesn't rely on the body of good() to be in scope\n    }\n}\n```",536870919]],["^15",[1104,"^O","^16",536870919]],["^15",[1104,"^F",1103,536870919]],["^15",[1104,"^X",1097,536870919]],["^15",[1104,"^V",1097,536870919]],["^15",[1104,"^U",163,536870919]],["^15",[1104,"^U",345,536870919]],["^15",[1104,"^U",1091,536870919]],["^15",[1104,"^U",1097,536870919]],["^15",[1104,"^U",1101,536870919]],["^15",[1104,"^H",163,536870919]],["^15",[1104,"^H",345,536870919]],["^15",[1104,"^H",1091,536870919]],["^15",[1104,"^H",1101,536870919]],["^15",[1104,"^;","~u655b7379-e762-4530-8edb-701e29e8c7c9",536870919]],["^15",[1105,"^Q","Async ``move``\nUsed async blocks.\nJust like the ``move`` in [[Closure]]s. Moves the references into the block.\n\nFor ex.:\n```rust\nfn yo() -> impl Future<Output= i32>{\n  let x= 20;\nasync move{\n   *(&x) //moves x into this closure\n  }\n}\n```",536870919]],["^15",[1105,"^O","^16",536870919]],["^15",[1105,"^F",1104,536870919]],["^15",[1105,"^X",1097,536870919]],["^15",[1105,"^V",1097,536870919]],["^15",[1105,"^U",1093,536870919]],["^15",[1105,"^U",1097,536870919]],["^15",[1105,"^H",1093,536870919]],["^15",[1105,"^;","~u655b7379-b6fd-4282-9f8d-1a7124dc407c",536870919]],["^15",[1106,"^Q","[[Pointer]]s from the [[Standard Library]] such as [[Rc<T>]], [[Mutex<T>]] etc. don't necessarily implement the ``Send`` [[Trait]]. This can cause one thread to lock up a value and another to request it when using [[Future]]s. \nThis is why it is recommended to use ``Future``-aware [[Pointer]]s such as ``Mutex`` from ``futures::lock`` [[Module]] instead of ``std::sync``.",536870919]],["^15",[1106,"^O","^16",536870919]],["^15",[1106,"^F",1105,536870919]],["^15",[1106,"^X",1097,536870919]],["^15",[1106,"^V",1097,536870919]],["^15",[1106,"^U",287,536870919]],["^15",[1106,"^U",1073,536870919]],["^15",[1106,"^U",1075,536870919]],["^15",[1106,"^U",1092,536870919]],["^15",[1106,"^U",1094,536870919]],["^15",[1106,"^U",1096,536870919]],["^15",[1106,"^U",1097,536870919]],["^15",[1106,"^U",1100,536870919]],["^15",[1106,"^H",287,536870919]],["^15",[1106,"^H",1073,536870919]],["^15",[1106,"^H",1075,536870919]],["^15",[1106,"^H",1092,536870919]],["^15",[1106,"^H",1094,536870919]],["^15",[1106,"^H",1096,536870919]],["^15",[1106,"^H",1100,536870919]],["^15",[1106,"^;","~u655b7379-6bc5-4007-a0f9-2a6fb3451f8d",536870919]],["^15",[1107,"^Q","~``async_std`` is in [[Standard Library]]\nIt provides some async features such as ``async_std::task::spawn``. This allows task spawning. Meaning, we can pass a [[Future]] to ``spawn(...)`` [[Function]] and it is executed asynchronously, it returns a ``JoinHandle`` which can be ``.await``ed.",536870919]],["^15",[1107,"^O","^16",536870919]],["^15",[1107,"^F",1106,536870919]],["^15",[1107,"^X",1097,536870919]],["^15",[1107,"^V",1097,536870919]],["^15",[1107,"^U",163,536870919]],["^15",[1107,"^U",1096,536870919]],["^15",[1107,"^U",1097,536870919]],["^15",[1107,"^U",1100,536870919]],["^15",[1107,"^H",163,536870919]],["^15",[1107,"^H",1096,536870919]],["^15",[1107,"^H",1100,536870919]],["^15",[1107,"^;","~u655b7379-6e95-4636-8b7c-a83a6e50d859",536870919]],["^15",[1108,"^Q","~``?`` with ``await`` on [[Result Type]]s\nFor ex.:\n```rust\nlet fut = async {\n    foo().await?;\n    bar().await?;\n    //Ok(()) //error\n    Ok::<(), MyError>(()) // <- note the explicit type annotation here\n};\n```\nWe need to use the ``Turbofish`` [[Operator]] to explicitly define the return type with ``?``. This is a known limitation with Rust's compiler.",536870919]],["^15",[1108,"^O","^16",536870919]],["^15",[1108,"^F",1107,536870919]],["^15",[1108,"^X",1097,536870919]],["^15",[1108,"^V",1097,536870919]],["^15",[1108,"^U",339,536870919]],["^15",[1108,"^U",1097,536870919]],["^15",[1108,"^U",1098,536870919]],["^15",[1108,"^H",339,536870919]],["^15",[1108,"^H",1098,536870919]],["^15",[1108,"^;","~u655b7379-4346-4e9b-bb67-1686cf81a28b",536870919]],["^15",[1109,"^3","- Atomic [[Data Type]]s are safe to be shared across [[Thread]]s and are meant to be handled by multiple threads at once in [[Concurrency or Parallelism]]. \n  They are defined in [``std::sync::atomic``](https://doc.rust-lang.org/std/sync/atomic/index.html).\n  However, the cost is atomic types have a huge performance overhead with all the concurrency checks in place so they must only be used when they are required.",536870919]],["^15",[1109,"^17",1700492153857,536870919]],["^15",[1109,"^Z","Rust/pages/Atomic.md",536870919]],["^15",[1110,"^K",1700492154045,536870919]],["^15",[1110,"^[",1195,536870919]],["^15",[1110,"^@",false,536870919]],["^15",[1110,"^Y","concurrency or parallelism",536870919]],["^15",[1110,"^11","Concurrency or Parallelism",536870919]],["^15",[1110,"^B",1700492154045,536870919]],["^15",[1110,"^;","~u655b737b-1965-44d0-9046-31181794e345",536870920]],["^15",[1111,"^Q","Atomic [[Data Type]]s are safe to be shared across [[Thread]]s and are meant to be handled by multiple threads at once in [[Concurrency or Parallelism]]. \nThey are defined in [``std::sync::atomic``](https://doc.rust-lang.org/std/sync/atomic/index.html).\nHowever, the cost is atomic types have a huge performance overhead with all the concurrency checks in place so they must only be used when they are required.",536870919]],["^15",[1111,"^O","^16",536870919]],["^15",[1111,"^F",1072,536870919]],["^15",[1111,"^X",1072,536870919]],["^15",[1111,"^V",1072,536870919]],["^15",[1111,"^U",1072,536870919]],["^15",[1111,"^U",1074,536870919]],["^15",[1111,"^U",1090,536870919]],["^15",[1111,"^U",1110,536870919]],["^15",[1111,"^H",1074,536870919]],["^15",[1111,"^H",1090,536870919]],["^15",[1111,"^H",1110,536870919]],["^15",[1111,"^;","~u655b7379-9659-4e00-ab19-af732f025a31",536870919]],["^15",[1112,"^3","- ``bool``\n  Take up 1 byte of memory, and store either ``true`` or ``false`` as value.\n- Why 1 byte and not 1 bit ? \n  ![image.png](../assets/image_1688888379719_0.png)",536870919]],["^15",[1112,"^17",1700492153862,536870919]],["^15",[1112,"^Z","Rust/pages/Bool.md",536870919]],["^15",[1113,"^K",1700492154154,536870919]],["^15",[1113,"^[",1112,536870919]],["^15",[1113,"^@",false,536870919]],["^15",[1113,"^Y","bool",536870919]],["^15",[1113,"^11","Bool",536870919]],["^15",[1113,"^B",1700492154154,536870919]],["^15",[1113,"^;","~u656462fd-e6cb-40ce-a234-a6651a3826b1",536870942]],["^15",[1114,"^Q","~``bool``\nTake up 1 byte of memory, and store either ``true`` or ``false`` as value.",536870919]],["^15",[1114,"^O","^16",536870919]],["^15",[1114,"^F",1113,536870919]],["^15",[1114,"^X",1113,536870919]],["^15",[1114,"^V",1113,536870919]],["^15",[1114,"^U",1113,536870919]],["^15",[1114,"^;","~u655b7379-4708-4362-80c1-a1bb1ed0dd3a",536870919]],["^15",[1115,"^Q","Why 1 byte and not 1 bit ? \n![image.png](../assets/image_1688888379719_0.png)",536870919]],["^15",[1115,"^O","^16",536870919]],["^15",[1115,"^F",1114,536870919]],["^15",[1115,"^X",1113,536870919]],["^15",[1115,"^V",1113,536870919]],["^15",[1115,"^U",1113,536870919]],["^15",[1115,"^;","~u655b7379-1e6a-4215-bf34-f10fa166a7f7",536870919]],["^15",[1116,"^3","- [[Interior Mutability Pattern]]\n-\n-",536870919]],["^15",[1116,"^17",1700492153873,536870919]],["^15",[1116,"^Z","Rust/pages/Borrow.md",536870919]],["^15",[1117,"^K",1700492154458,536870919]],["^15",[1117,"^[",1116,536870919]],["^15",[1117,"^@",false,536870919]],["^15",[1117,"^Y","borrow",536870919]],["^15",[1117,"^11","Borrow",536870919]],["^15",[1117,"^B",1700492154458,536870919]],["^15",[1117,"^;","~u655b737b-3a67-46b2-9c68-808a0a3fb816",536870920]],["^15",[1118,"^K",1700492154675,536870919]],["^15",[1118,"^[",1295,536870919]],["^15",[1118,"^@",false,536870919]],["^15",[1118,"^Y","interior mutability pattern",536870919]],["^15",[1118,"^11","Interior Mutability Pattern",536870919]],["^15",[1118,"^B",1700492154675,536870919]],["^15",[1118,"^;","~u655b737b-92f5-4338-a734-8a42a897719c",536870920]],["^15",[1119,"^Q","[[Interior Mutability Pattern]]",536870919]],["^15",[1119,"^O","^16",536870919]],["^15",[1119,"^F",1117,536870919]],["^15",[1119,"^X",1117,536870919]],["^15",[1119,"^V",1117,536870919]],["^15",[1119,"^U",1117,536870919]],["^15",[1119,"^U",1118,536870919]],["^15",[1119,"^H",1118,536870919]],["^15",[1119,"^;","~u655b7379-9639-4bfb-bfbc-428d9b306428",536870919]],["^15",[1120,"^Q","",536870919]],["^15",[1120,"^O","^16",536870919]],["^15",[1120,"^F",1119,536870919]],["^15",[1120,"^X",1117,536870919]],["^15",[1120,"^V",1117,536870919]],["^15",[1120,"^U",1117,536870919]],["^15",[1120,"^;","~u655b7379-e6c8-4c8d-94b1-0f768fb51a31",536870919]],["^15",[1121,"^Q","",536870919]],["^15",[1121,"^O","^16",536870919]],["^15",[1121,"^F",1120,536870919]],["^15",[1121,"^X",1117,536870919]],["^15",[1121,"^V",1117,536870919]],["^15",[1121,"^U",1117,536870919]],["^15",[1121,"^;","~u655b7379-ad3a-4c44-9d1c-2d393529effd",536870919]],["^15",[1122,"^3","- The simplest Smart [[Pointer]] in Rust. It has the least overhead and provides a simple way to store a value on the heap whilst the pointer remains on the stack.\n  \n  For ex.:\n  ```rust\n  fn main() {\n      let b = Box::new(5);\n      println!(\"b = {}\", b); //prints 5\n  } //automatically gets deallocated (along with the value) at the end of the scope.\n  ```\n- *Recursive [[Data Type]]s*\n  A recursive data type is one which has its own type in its fields. \n  For ex.:\n  A *Cons List*, this is a data structure in *Lisp* and in Rust could be represented through this [[Enum]]\n  \n  ```rust\n  enum List {\n   Cons(i32, List),\n   Nil\n  }\n  \n  fn main() {\n   let x = List::Cons(1, List::Cons(2, List::Cons(3, List::Nil));\n  }\n  ```\n  This is a recursive data type, however such types are an error in Rust as the compiler needs to know exactly how much size each type takes. However, here if it tries to figure out the size it will go into an infinite loop like so\n  ![image.png](../assets/image_1689962545952_0.png)\n  \n  A simple fix to store such types is by using the ``Box`` [[Pointer]] as Rust knows the size of a pointer at compile time and hence does not need to recurse the type definition.\n  ![A finite Cons list](https://doc.rust-lang.org/book/img/trpl15-02.svg)\n  Making our code like so\n  \n  ```rust\n  enum List {\n   Cons(i32, Box<List>),\n   Nil\n  }\n  \n  fn main() {\n   let x = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Cons(3, List::Nil)))));\n  }\n  ```\n-\n-",536870919]],["^15",[1122,"^17",1700492153883,536870919]],["^15",[1122,"^Z","Rust/pages/Box%3CT%3E.md",536870919]],["^15",[1123,"^K",1700492153882,536870919]],["^15",[1123,"^[",1122,536870919]],["^15",[1123,"^@",false,536870919]],["^15",[1123,"^Y","box<t>",536870919]],["^15",[1123,"^11","Box<T>",536870919]],["^15",[1123,"^B",1700492153882,536870919]],["^15",[1123,"^;","~u655b737b-ccf9-43a8-b0f5-d21937c91cc3",536870920]],["^15",[1124,"^Q","The simplest Smart [[Pointer]] in Rust. It has the least overhead and provides a simple way to store a value on the heap whilst the pointer remains on the stack.\n\nFor ex.:\n```rust\nfn main() {\n    let b = Box::new(5);\n    println!(\"b = {}\", b); //prints 5\n} //automatically gets deallocated (along with the value) at the end of the scope.\n```",536870919]],["^15",[1124,"^O","^16",536870919]],["^15",[1124,"^F",1123,536870919]],["^15",[1124,"^X",1123,536870919]],["^15",[1124,"^V",1123,536870919]],["^15",[1124,"^U",1094,536870919]],["^15",[1124,"^U",1123,536870919]],["^15",[1124,"^H",1094,536870919]],["^15",[1124,"^;","~u655b7379-fc98-4ac5-82ca-7d0b4dd8ea78",536870919]],["^15",[1125,"^Q","*Recursive [[Data Type]]s*\nA recursive data type is one which has its own type in its fields. \nFor ex.:\nA *Cons List*, this is a data structure in *Lisp* and in Rust could be represented through this [[Enum]]\n\n```rust\nenum List {\n Cons(i32, List),\n Nil\n}\n\nfn main() {\n let x = List::Cons(1, List::Cons(2, List::Cons(3, List::Nil));\n}\n```\nThis is a recursive data type, however such types are an error in Rust as the compiler needs to know exactly how much size each type takes. However, here if it tries to figure out the size it will go into an infinite loop like so\n![image.png](../assets/image_1689962545952_0.png)\n\nA simple fix to store such types is by using the ``Box`` [[Pointer]] as Rust knows the size of a pointer at compile time and hence does not need to recurse the type definition.\n![A finite Cons list](https://doc.rust-lang.org/book/img/trpl15-02.svg)\nMaking our code like so\n\n```rust\nenum List {\n Cons(i32, Box<List>),\n Nil\n}\n\nfn main() {\n let x = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Cons(3, List::Nil)))));\n}\n```",536870919]],["^15",[1125,"^O","^16",536870919]],["^15",[1125,"^F",1124,536870919]],["^15",[1125,"^X",1123,536870919]],["^15",[1125,"^V",1123,536870919]],["^15",[1125,"^U",1066,536870919]],["^15",[1125,"^U",1090,536870919]],["^15",[1125,"^U",1094,536870919]],["^15",[1125,"^U",1123,536870919]],["^15",[1125,"^H",1066,536870919]],["^15",[1125,"^H",1090,536870919]],["^15",[1125,"^H",1094,536870919]],["^15",[1125,"^;","~u655b7379-70e2-4156-ad0c-90b8712aadd7",536870919]],["^15",[1126,"^Q","",536870919]],["^15",[1126,"^O","^16",536870919]],["^15",[1126,"^F",1125,536870919]],["^15",[1126,"^X",1123,536870919]],["^15",[1126,"^V",1123,536870919]],["^15",[1126,"^U",1123,536870919]],["^15",[1126,"^;","~u655b7379-52d9-4917-ab18-e6630687e995",536870919]],["^15",[1127,"^Q","",536870919]],["^15",[1127,"^O","^16",536870919]],["^15",[1127,"^F",1126,536870919]],["^15",[1127,"^X",1123,536870919]],["^15",[1127,"^V",1123,536870919]],["^15",[1127,"^U",1123,536870919]],["^15",[1127,"^;","~u655b7379-5e83-417e-be7e-fe04a4ef086e",536870919]],["^15",[1128,"^3","- ``cargo``\n  Rust's package manager and build system. Whilst the Rust files are compiled with [[rustc]], cargo builds the rest of the project.\n- ``cargo new``\n  We can create a new project with ``cargo new <folder/projectname>``.\n  We can then build the project with ``cargo build``. And then run it with ``cargo run``.\n  \n  * Library [[Crate]] can be created with ``cargo new <name> --lib``.\n- ``cargo build``\n  Builds the project and creates an executable in ``src/debug/`` . Use ``--release`` flag to build in release mode. A general difference between debug build and release build is that debug build is compiled faster but runs slower whereas release compiles slower but runs faster.\n- ``cargo run``\n  Builds the project or skips it if there already exists a latest build and then runs the executable.\n- ``cargo check``\n  Checks the project by building it but not creating an executable, faster than cargo build.\n- [crates.io](https://crates.io) is the Rust community’s central crate repository. [[Cargo]] searches for dependencies here by default.\n- To add a crate to our project,\n  * Find the crate version and name on crates.io \n  * Add ``<packge-name>=”<version>”`` to the [[cargo.toml]]\n  * Then open the items of the package in the [[Scope]] with [[use]]\n  \n  The [[Standard Library]] crates are already present in most Rust installations, we don’t need to specify its crates in the cargo.toml but we do need to open the items in the scope (using [[use]]) for easy access.\n- Cargo projects, by default, needs their ``.rs`` files inside an ``src`` folder, this folder must be at the same level as the [[cargo.toml]] file.\n- Release Profile\n  Cargo has 2 main profiles, ``dev`` and ``release`` profile. These profile define the configs applied to the compilation of the project. The ``dev`` profile is used when using ``cargo build`` by default and the ``release`` profile is used when we use ``cargo build --release``. \n  The primary difference between the 2 is the level of optimization applied to the executable (using ``opt-level = <number>`` in [[cargo.toml]]), the higher the level the greater the runtime performance but greater compile time too. This is why ``release`` is intended for release mode.\n  \n  To further configure them, in [[cargo.toml]]\n  ```toml\n  [profile.dev]\n  opt-level = 0\n  \n  [profile.release]\n  opt-level = 3\n  ```\n  This is their default optimization level.\n- Publishing a [[Crate]]\n  Check [here](https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html)\n- Workspace\n  By using workspace, which is a cargo feature, we can have multiple [[Package]]s in a single project. They share the same [[cargo.lock]] and ``target/`` folder, which is from common parent which is a ``workspace``.\n  \n  For ex.:\n  ```sh\n  mkdir x\n  touch cargo.toml\n  # creates a new folder x and a cargo.toml in it\n  ```\n  \n  Then we make ``x``  a Workspace by modifying its [[cargo.toml]]\n  ```toml\n  [workspace]\n  \n  members = [\n    y,\n    z,\n  ]\n  ```\n  By replacing the ``[package]`` block with ``[workspace]`` we make a ``cargo.toml``'s folder a workspace. Here ``y`` and ``z`` are its child [[Package]]s.\n  \n  To create them,\n  ```sh\n  cd x\n  cargo new y\n  # creates crate y inside x with x being its workspace and hence a cargo.lock and target/ isn't created inside y/\n  cargo new z --lib\n  ```\n  \n  Finally, we get this structure\n  ```\n  x\n  ├── Cargo.lock\n  ├── Cargo.toml\n  ├── y\n  │   ├── Cargo.toml\n  │   └── src\n  │       └── main.rs\n  ├── z\n  │   ├── Cargo.toml\n  │   └── src\n  │       └── lib.rs\n  └── target\n  ```\n  The reason they share the ``target`` directory is because the packages in a workspace are  meant to depend on each other, by sharing the ``target`` folder they keep track of which package has been already built and hence avoid rebuilding each dependent package each time for each package.\n  \n  * To use a package like ``z`` in ``y`` we would do something like so\n  In ``lib.rs`` in ``z``,\n  ```rust\n  pub fn yo() {}\n  ```\n  Now to use ``yo`` in ``y``,\n  modify ``y``'s [[cargo.toml]],\n  ```toml\n  [dependencies]\n  z = { path = \"../z\" }\n  ```\n  \n  Now we can use ``z``'s items in ``y``, like so\n  ```rust\n  use z;\n  \n  fn main() {\n   yo(); //works\n  }\n  ```\n  \n  * ``cargo test -p <package name>``\n  By default cargo runs test on all crates inside a workspace, we can select a specific package with this arg.\n- ``cargo install``\n  Installs a binary to be used directly. By default ``cargo install`` installs a binary to ``$Home/.cargo/bin`` so we have to add that path to ``$PATH``. Only packages on crates.io that are a binary crate can be installed like this. \n  For ex.:\n  ```sh\n  cargo install ripgrep\n  #installs rigrep, a rust package for searching files.\n  ```\n-\n-",536870919]],["^15",[1128,"^17",1700492153921,536870919]],["^15",[1128,"^Z","Rust/pages/Cargo.md",536870919]],["^15",[1129,"^K",1700492154136,536870919]],["^15",[1129,"^@",false,536870919]],["^15",[1129,"^Y","package",536870919]],["^15",[1129,"^11","Package",536870919]],["^15",[1129,"^B",1700492154136,536870919]],["^15",[1129,"^;","~u655b737b-f397-45eb-8ec7-4b9776eee87e",536870920]],["^15",[1130,"^K",1700492154135,536870919]],["^15",[1130,"^[",1570,536870920]],["^15",[1130,"^@",false,536870919]],["^15",[1130,"^Y","rustc",536870919]],["^15",[1130,"^11","rustc",536870919]],["^15",[1130,"^B",1700492154135,536870919]],["^15",[1130,"^;","~u655b737b-0ca5-4818-b01c-75ff080c0d9e",536870920]],["^15",[1131,"^K",1700492153920,536870919]],["^15",[1131,"^@",false,536870919]],["^15",[1131,"^Y","cargo.lock",536870919]],["^15",[1131,"^11","cargo.lock",536870919]],["^15",[1131,"^B",1700492153920,536870919]],["^15",[1131,"^;","~u655b7379-fe79-4d41-9089-118e5f8401ed",536870919]],["^15",[1132,"^K",1700492154622,536870919]],["^15",[1132,"^[",1128,536870919]],["^15",[1132,"^@",false,536870919]],["^15",[1132,"^Y","cargo",536870919]],["^15",[1132,"^11","Cargo",536870919]],["^15",[1132,"^B",1700492154622,536870919]],["^15",[1132,"^;","~u655b737c-4fe6-432f-895a-f6eb2a295a6a",536870920]],["^15",[1133,"^K",1700492154621,536870919]],["^15",[1133,"^[",1586,536870920]],["^15",[1133,"^@",false,536870919]],["^15",[1133,"^Y","use",536870919]],["^15",[1133,"^11","use",536870919]],["^15",[1133,"^B",1700492154621,536870919]],["^15",[1133,"^;","~u656462fe-20a7-49c3-839b-adcd95ead431",536870952]],["^15",[1134,"^Q","~``cargo build``\nBuilds the project and creates an executable in ``src/debug/`` . Use ``--release`` flag to build in release mode. A general difference between debug build and release build is that debug build is compiled faster but runs slower whereas release compiles slower but runs faster.",536870919]],["^15",[1134,"^O","^16",536870919]],["^15",[1134,"^F",1143,536870919]],["^15",[1134,"^X",1132,536870919]],["^15",[1134,"^V",1132,536870919]],["^15",[1134,"^U",1132,536870919]],["^15",[1134,"^;","~u655b7379-e5db-4c1e-9826-6b187a1caa58",536870919]],["^15",[1135,"^Q","To add a crate to our project,\n* Find the crate version and name on crates.io \n* Add ``<packge-name>=”<version>”`` to the [[cargo.toml]]\n* Then open the items of the package in the [[Scope]] with [[use]]\n\nThe [[Standard Library]] crates are already present in most Rust installations, we don’t need to specify its crates in the cargo.toml but we do need to open the items in the scope (using [[use]]) for easy access.",536870919]],["^15",[1135,"^O","^16",536870919]],["^15",[1135,"^F",1136,536870919]],["^15",[1135,"^X",1132,536870919]],["^15",[1135,"^V",1132,536870919]],["^15",[1135,"^U",345,536870919]],["^15",[1135,"^U",1096,536870919]],["^15",[1135,"^U",1099,536870919]],["^15",[1135,"^U",1132,536870919]],["^15",[1135,"^U",1133,536870919]],["^15",[1135,"^H",345,536870919]],["^15",[1135,"^H",1096,536870919]],["^15",[1135,"^H",1099,536870919]],["^15",[1135,"^H",1133,536870919]],["^15",[1135,"^;","~u655b7379-e50b-4279-8717-83fb61bf690a",536870919]],["^15",[1136,"^Q","[crates.io](https://crates.io) is the Rust community’s central crate repository. [[Cargo]] searches for dependencies here by default.",536870919]],["^15",[1136,"^O","^16",536870919]],["^15",[1136,"^F",1137,536870919]],["^15",[1136,"^X",1132,536870919]],["^15",[1136,"^V",1132,536870919]],["^15",[1136,"^U",1132,536870919]],["^15",[1136,"^H",1132,536870919]],["^15",[1136,"^;","~u655b7379-fda6-46ba-ac63-a59e4d97472a",536870919]],["^15",[1137,"^Q","~``cargo check``\nChecks the project by building it but not creating an executable, faster than cargo build.",536870919]],["^15",[1137,"^O","^16",536870919]],["^15",[1137,"^F",1147,536870919]],["^15",[1137,"^X",1132,536870919]],["^15",[1137,"^V",1132,536870919]],["^15",[1137,"^U",1132,536870919]],["^15",[1137,"^;","~u655b7379-4d83-471e-a9eb-163ed54c7d28",536870919]],["^15",[1138,"^Q","",536870919]],["^15",[1138,"^O","^16",536870919]],["^15",[1138,"^F",1140,536870919]],["^15",[1138,"^X",1132,536870919]],["^15",[1138,"^V",1132,536870919]],["^15",[1138,"^U",1132,536870919]],["^15",[1138,"^;","~u655b7379-66ce-44ef-8aa0-bde7309720ce",536870919]],["^15",[1139,"^Q","~``cargo``\nRust's package manager and build system. Whilst the Rust files are compiled with [[rustc]], cargo builds the rest of the project.",536870919]],["^15",[1139,"^O","^16",536870919]],["^15",[1139,"^F",1132,536870919]],["^15",[1139,"^X",1132,536870919]],["^15",[1139,"^V",1132,536870919]],["^15",[1139,"^U",1130,536870919]],["^15",[1139,"^U",1132,536870919]],["^15",[1139,"^H",1130,536870919]],["^15",[1139,"^;","~u655b7379-4307-40b6-bb5b-d03cbd24e932",536870919]],["^15",[1140,"^Q","",536870919]],["^15",[1140,"^O","^16",536870919]],["^15",[1140,"^F",1145,536870919]],["^15",[1140,"^X",1132,536870919]],["^15",[1140,"^V",1132,536870919]],["^15",[1140,"^U",1132,536870919]],["^15",[1140,"^;","~u655b7379-ffa5-47b8-8ec5-32b2cbdda30c",536870919]],["^15",[1141,"^Q","Workspace\nBy using workspace, which is a cargo feature, we can have multiple [[Package]]s in a single project. They share the same [[cargo.lock]] and ``target/`` folder, which is from common parent which is a ``workspace``.\n\nFor ex.:\n```sh\nmkdir x\ntouch cargo.toml\n# creates a new folder x and a cargo.toml in it\n```\n\nThen we make ``x``  a Workspace by modifying its [[cargo.toml]]\n```toml\n[workspace]\n\nmembers = [\n  y,\n  z,\n]\n```\nBy replacing the ``[package]`` block with ``[workspace]`` we make a ``cargo.toml``'s folder a workspace. Here ``y`` and ``z`` are its child [[Package]]s.\n\nTo create them,\n```sh\ncd x\ncargo new y\n# creates crate y inside x with x being its workspace and hence a cargo.lock and target/ isn't created inside y/\ncargo new z --lib\n```\n\nFinally, we get this structure\n```\nx\n├── Cargo.lock\n├── Cargo.toml\n├── y\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n├── z\n│   ├── Cargo.toml\n│   └── src\n│       └── lib.rs\n└── target\n```\nThe reason they share the ``target`` directory is because the packages in a workspace are  meant to depend on each other, by sharing the ``target`` folder they keep track of which package has been already built and hence avoid rebuilding each dependent package each time for each package.\n\n* To use a package like ``z`` in ``y`` we would do something like so\nIn ``lib.rs`` in ``z``,\n```rust\npub fn yo() {}\n```\nNow to use ``yo`` in ``y``,\nmodify ``y``'s [[cargo.toml]],\n```toml\n[dependencies]\nz = { path = \"../z\" }\n```\n\nNow we can use ``z``'s items in ``y``, like so\n```rust\nuse z;\n\nfn main() {\n yo(); //works\n}\n```\n\n* ``cargo test -p <package name>``\nBy default cargo runs test on all crates inside a workspace, we can select a specific package with this arg.",536870919]],["^15",[1141,"^O","^16",536870919]],["^15",[1141,"^F",1142,536870919]],["^15",[1141,"^X",1132,536870919]],["^15",[1141,"^V",1132,536870919]],["^15",[1141,"^U",1099,536870919]],["^15",[1141,"^U",1129,536870919]],["^15",[1141,"^U",1131,536870919]],["^15",[1141,"^U",1132,536870919]],["^15",[1141,"^H",1099,536870919]],["^15",[1141,"^H",1129,536870919]],["^15",[1141,"^H",1131,536870919]],["^15",[1141,"^;","~u655b7379-125e-4def-9579-92fb7b6fca94",536870919]],["^15",[1142,"^Q","Publishing a [[Crate]]\nCheck [here](https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html)",536870919]],["^15",[1142,"^O","^16",536870919]],["^15",[1142,"^F",1146,536870919]],["^15",[1142,"^X",1132,536870919]],["^15",[1142,"^V",1132,536870919]],["^15",[1142,"^U",1063,536870919]],["^15",[1142,"^U",1132,536870919]],["^15",[1142,"^H",1063,536870919]],["^15",[1142,"^;","~u655b7379-cfb5-4ee0-ade8-ca7462c0702d",536870919]],["^15",[1143,"^Q","~``cargo new``\nWe can create a new project with ``cargo new <folder/projectname>``.\nWe can then build the project with ``cargo build``. And then run it with ``cargo run``.\n\n* Library [[Crate]] can be created with ``cargo new <name> --lib``.",536870919]],["^15",[1143,"^O","^16",536870919]],["^15",[1143,"^F",1139,536870919]],["^15",[1143,"^X",1132,536870919]],["^15",[1143,"^V",1132,536870919]],["^15",[1143,"^U",1063,536870919]],["^15",[1143,"^U",1132,536870919]],["^15",[1143,"^H",1063,536870919]],["^15",[1143,"^;","~u655b7379-558d-42af-bd31-1a2ebf1f4fa4",536870919]],["^15",[1144,"^Q","Cargo projects, by default, needs their ``.rs`` files inside an ``src`` folder, this folder must be at the same level as the [[cargo.toml]] file.",536870919]],["^15",[1144,"^O","^16",536870919]],["^15",[1144,"^F",1135,536870919]],["^15",[1144,"^X",1132,536870919]],["^15",[1144,"^V",1132,536870919]],["^15",[1144,"^U",1099,536870919]],["^15",[1144,"^U",1132,536870919]],["^15",[1144,"^H",1099,536870919]],["^15",[1144,"^;","~u655b7379-30d6-43b5-b54a-08a35dc107e7",536870919]],["^15",[1145,"^Q","~``cargo install``\nInstalls a binary to be used directly. By default ``cargo install`` installs a binary to ``$Home/.cargo/bin`` so we have to add that path to ``$PATH``. Only packages on crates.io that are a binary crate can be installed like this. \nFor ex.:\n```sh\ncargo install ripgrep\n#installs rigrep, a rust package for searching files.\n```",536870919]],["^15",[1145,"^O","^16",536870919]],["^15",[1145,"^F",1141,536870919]],["^15",[1145,"^X",1132,536870919]],["^15",[1145,"^V",1132,536870919]],["^15",[1145,"^U",1132,536870919]],["^15",[1145,"^;","~u655b7379-ca32-401e-a941-0bc8f27085e4",536870919]],["^15",[1146,"^Q","Release Profile\nCargo has 2 main profiles, ``dev`` and ``release`` profile. These profile define the configs applied to the compilation of the project. The ``dev`` profile is used when using ``cargo build`` by default and the ``release`` profile is used when we use ``cargo build --release``. \nThe primary difference between the 2 is the level of optimization applied to the executable (using ``opt-level = <number>`` in [[cargo.toml]]), the higher the level the greater the runtime performance but greater compile time too. This is why ``release`` is intended for release mode.\n\nTo further configure them, in [[cargo.toml]]\n```toml\n[profile.dev]\nopt-level = 0\n\n[profile.release]\nopt-level = 3\n```\nThis is their default optimization level.",536870919]],["^15",[1146,"^O","^16",536870919]],["^15",[1146,"^F",1144,536870919]],["^15",[1146,"^X",1132,536870919]],["^15",[1146,"^V",1132,536870919]],["^15",[1146,"^U",1099,536870919]],["^15",[1146,"^U",1132,536870919]],["^15",[1146,"^H",1099,536870919]],["^15",[1146,"^;","~u655b7379-2514-4303-a597-4cfedad2bdbf",536870919]],["^15",[1147,"^Q","~``cargo run``\nBuilds the project or skips it if there already exists a latest build and then runs the executable.",536870919]],["^15",[1147,"^O","^16",536870919]],["^15",[1147,"^F",1134,536870919]],["^15",[1147,"^X",1132,536870919]],["^15",[1147,"^V",1132,536870919]],["^15",[1147,"^U",1132,536870919]],["^15",[1147,"^;","~u655b7379-c7a3-433e-bdf2-15fec18db868",536870919]],["^15",[1148,"^3","- Rust doesn't implicitly cast any [[Data Type]]s.\n  \n  Explicit type conversion can be done with [[as]].\n  For ex.:\n  ```rust\n  // Suppress all warnings from casts which overflow.\n  #![allow(overflowing_literals)]\n  \n  fn main() {\n      let decimal = 65.4321_f32;\n  \n      // Error! No implicit conversion\n      let integer: u8 = decimal;\n      // FIXME ^ Comment out this line\n  \n      // Explicit conversion\n      let integer = decimal as u8;\n      let character = integer as char;\n  \n      // The results might overflow and\n      // return **unsound values**. Use these methods wisely:\n       unsafe {\n          // 300.0 as u8 is 44\n          println!(\" 300.0 as u8 is : {}\", 300.0_f32.to_int_unchecked::<u8>());\n          // -100.0 as u8 is 156\n          println!(\"-100.0 as u8 is : {}\", (-100.0_f32).to_int_unchecked::<u8>());\n          // nan as u8 is 0\n          println!(\"   nan as u8 is : {}\", f32::NAN.to_int_unchecked::<u8>());\n      }\n  }\n  ```\n-",536870919]],["^15",[1148,"^17",1700492153930,536870919]],["^15",[1148,"^Z","Rust/pages/Cast.md",536870919]],["^15",[1149,"^K",1700492154286,536870919]],["^15",[1149,"^[",1148,536870919]],["^15",[1149,"^@",false,536870919]],["^15",[1149,"^Y","cast",536870919]],["^15",[1149,"^11","Cast",536870919]],["^15",[1149,"^B",1700492154286,536870919]],["^15",[1149,"^;","~u655b737b-95e8-4aaf-9b85-966f59f02b4d",536870920]],["^15",[1150,"^K",1700492154286,536870919]],["^15",[1150,"^@",false,536870919]],["^15",[1150,"^Y","as",536870919]],["^15",[1150,"^11","as",536870919]],["^15",[1150,"^B",1700492154286,536870919]],["^15",[1150,"^;","~u655b737b-485b-4a2d-8005-31cb3e8dd043",536870920]],["^15",[1151,"^Q","Rust doesn't implicitly cast any [[Data Type]]s.\n\nExplicit type conversion can be done with [[as]].\nFor ex.:\n```rust\n// Suppress all warnings from casts which overflow.\n#![allow(overflowing_literals)]\n\nfn main() {\n    let decimal = 65.4321_f32;\n\n    // Error! No implicit conversion\n    let integer: u8 = decimal;\n    // FIXME ^ Comment out this line\n\n    // Explicit conversion\n    let integer = decimal as u8;\n    let character = integer as char;\n\n    // The results might overflow and\n    // return **unsound values**. Use these methods wisely:\n     unsafe {\n        // 300.0 as u8 is 44\n        println!(\" 300.0 as u8 is : {}\", 300.0_f32.to_int_unchecked::<u8>());\n        // -100.0 as u8 is 156\n        println!(\"-100.0 as u8 is : {}\", (-100.0_f32).to_int_unchecked::<u8>());\n        // nan as u8 is 0\n        println!(\"   nan as u8 is : {}\", f32::NAN.to_int_unchecked::<u8>());\n    }\n}\n```",536870919]],["^15",[1151,"^O","^16",536870919]],["^15",[1151,"^F",1149,536870919]],["^15",[1151,"^X",1149,536870919]],["^15",[1151,"^V",1149,536870919]],["^15",[1151,"^U",1090,536870919]],["^15",[1151,"^U",1149,536870919]],["^15",[1151,"^U",1150,536870919]],["^15",[1151,"^H",1090,536870919]],["^15",[1151,"^H",1150,536870919]],["^15",[1151,"^;","~u655b7379-01cf-4965-b0da-39c9096f152e",536870919]],["^15",[1152,"^Q","",536870919]],["^15",[1152,"^O","^16",536870919]],["^15",[1152,"^F",1151,536870919]],["^15",[1152,"^X",1149,536870919]],["^15",[1152,"^V",1149,536870919]],["^15",[1152,"^U",1149,536870919]],["^15",[1152,"^;","~u655b7379-f095-43d2-866c-b620c9680b82",536870919]],["^15",[1153,"^3","- Just like [[RefCell<T>]] but instead of a [[Reference Type]] to the same data, it internally creates new copies instead.",536870919]],["^15",[1153,"^17",1700492153943,536870919]],["^15",[1153,"^Z","Rust/pages/Cell%3CT%3E.md",536870919]],["^15",[1154,"^K",1700492153943,536870919]],["^15",[1154,"^[",1153,536870919]],["^15",[1154,"^@",false,536870919]],["^15",[1154,"^Y","cell<t>",536870919]],["^15",[1154,"^11","Cell<T>",536870919]],["^15",[1154,"^B",1700492153943,536870919]],["^15",[1154,"^;","~u655b737b-f006-4688-821e-62596e9228b6",536870920]],["^15",[1155,"^K",1700492153943,536870919]],["^15",[1155,"^[",1408,536870920]],["^15",[1155,"^@",false,536870919]],["^15",[1155,"^Y","refcell<t>",536870919]],["^15",[1155,"^11","RefCell<T>",536870919]],["^15",[1155,"^B",1700492153943,536870919]],["^15",[1155,"^;","~u655b737b-51aa-4add-8aec-a6fe003f0197",536870920]],["^15",[1156,"^Q","Just like [[RefCell<T>]] but instead of a [[Reference Type]] to the same data, it internally creates new copies instead.",536870919]],["^15",[1156,"^O","^16",536870919]],["^15",[1156,"^F",1154,536870919]],["^15",[1156,"^X",1154,536870919]],["^15",[1156,"^V",1154,536870919]],["^15",[1156,"^U",1091,536870919]],["^15",[1156,"^U",1154,536870919]],["^15",[1156,"^U",1155,536870919]],["^15",[1156,"^H",1091,536870919]],["^15",[1156,"^H",1155,536870919]],["^15",[1156,"^;","~u655b7379-c51a-4e8d-8055-4e6086bf6985",536870919]],["^15",[1157,"^3","- Just like Go, Rust has the concept of passing messages between [[Thread]]s using channels. These are defined in ``std::sync``. Every channel has 2 ends, a *Transmitter* (let's call it tx) which we use to send some data and a *Receiver* (rx), which we use to receive the sent data.\n- ``mpsc``\n  ``mpsc`` is a multiple-producer single-consumer channel. It allows multiple txs but only a single rx. \n  \n  For ex.:\n  ```rust\n  use std::sync::mpsc;\n  use std::thread;\n  \n  fn main() {\n      let (tx, rx) = mpsc::channel();\n  \n      thread::spawn(move || {\n          let val = String::from(\"hi\");\n          tx.send(val).unwrap();\n      });\n       let received = rx.recv().unwrap();\n      println!(\"Got: {}\", received);\n  }\n  ```\n  We use [[Destructuring]] here to get them from the [[Tuple]] returned by ``channel()`` [[Method]].\n  \n  * The sender thread needs [[Ownership]] of both the tx and the value it is sending.\n  ``<tx>.send(<obj>)`` returns a [[Result Type]] which has denotes if the sending was successful or not.\n  \n  Similarly, the receiver thread needs ownership of the rx. Calling ``<rx>.recv()`` pauses the thread until the receiver receives the data. It then returns a [[Result Type]] if it got a value or an error (when a tx dies, all rx's receive an err attached to those tx's). There's a ``try_recv()`` variant which checks the channel and immediately returns without pausing the thread, it's receives an err if there was no value.\n  \n  * ``mpsc`` allows multiple tx's, these can be passed to different threads. But the same single receiver would receive them. We get multiple txs by calling ``<tx>.clone()`` on any tx.\n- Multiple values in the channel\n  For ex.:\n  ```rust\n  use std::sync::mpsc;\n  use std::{thread, time::Duration};\n  fn main() {\n      let (tx, rx) = mpsc::channel();\n      thread::spawn(move || {\n          for i in 1..10 {\n              tx.send(i).unwrap();\n              thread::sleep(Duration::from_millis(10))\n          }\n      });\n      for i in rx {\n          println!(\"{}\", i);\n     }\n  } \n  \n  ```\n  tx's and rx's of Rust channels implement [[Iterator]] and the rx loop waits for all values being sent to it. Then when the tx dies, the rx loop also finishes.\n-",536870919]],["^15",[1157,"^17",1700492153963,536870919]],["^15",[1157,"^Z","Rust/pages/Channel.md",536870919]],["^15",[1158,"^K",1700492154046,536870919]],["^15",[1158,"^[",1157,536870919]],["^15",[1158,"^@",false,536870919]],["^15",[1158,"^Y","channel",536870919]],["^15",[1158,"^11","Channel",536870919]],["^15",[1158,"^B",1700492154046,536870919]],["^15",[1158,"^;","~u655b737a-718e-47f3-aeab-59a061da2c55",536870919]],["^15",[1159,"^K",1700492154390,536870919]],["^15",[1159,"^[",1522,536870920]],["^15",[1159,"^@",false,536870919]],["^15",[1159,"^Y","tuple",536870919]],["^15",[1159,"^11","Tuple",536870919]],["^15",[1159,"^B",1700492154390,536870919]],["^15",[1159,"^;","~u655b737b-a035-496b-98dc-19136258b057",536870920]],["^15",[1160,"^K",1700492154676,536870919]],["^15",[1160,"^[",1356,536870920]],["^15",[1160,"^@",false,536870919]],["^15",[1160,"^Y","ownership",536870919]],["^15",[1160,"^11","Ownership",536870919]],["^15",[1160,"^B",1700492154676,536870919]],["^15",[1160,"^;","~u656462fe-f4ce-4992-ac19-c8b8135a734e",536870960]],["^15",[1161,"^K",1700492154428,536870919]],["^15",[1161,"^[",1298,536870919]],["^15",[1161,"^@",false,536870919]],["^15",[1161,"^Y","iterator",536870919]],["^15",[1161,"^11","Iterator",536870919]],["^15",[1161,"^B",1700492154428,536870919]],["^15",[1161,"^;","~u656462fe-8533-43f5-ad34-f01ae4450bf8",536870950]],["^15",[1162,"^Q","Just like Go, Rust has the concept of passing messages between [[Thread]]s using channels. These are defined in ``std::sync``. Every channel has 2 ends, a *Transmitter* (let's call it tx) which we use to send some data and a *Receiver* (rx), which we use to receive the sent data.",536870919]],["^15",[1162,"^O","^16",536870919]],["^15",[1162,"^F",1158,536870919]],["^15",[1162,"^X",1158,536870919]],["^15",[1162,"^V",1158,536870919]],["^15",[1162,"^U",1074,536870919]],["^15",[1162,"^U",1158,536870919]],["^15",[1162,"^H",1074,536870919]],["^15",[1162,"^;","~u655b7379-1828-4422-a760-503c721a0ce9",536870919]],["^15",[1163,"^Q","~``mpsc``\n``mpsc`` is a multiple-producer single-consumer channel. It allows multiple txs but only a single rx. \n\nFor ex.:\n```rust\nuse std::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from(\"hi\");\n        tx.send(val).unwrap();\n    });\n     let received = rx.recv().unwrap();\n    println!(\"Got: {}\", received);\n}\n```\nWe use [[Destructuring]] here to get them from the [[Tuple]] returned by ``channel()`` [[Method]].\n\n* The sender thread needs [[Ownership]] of both the tx and the value it is sending.\n``<tx>.send(<obj>)`` returns a [[Result Type]] which has denotes if the sending was successful or not.\n\nSimilarly, the receiver thread needs ownership of the rx. Calling ``<rx>.recv()`` pauses the thread until the receiver receives the data. It then returns a [[Result Type]] if it got a value or an error (when a tx dies, all rx's receive an err attached to those tx's). There's a ``try_recv()`` variant which checks the channel and immediately returns without pausing the thread, it's receives an err if there was no value.\n\n* ``mpsc`` allows multiple tx's, these can be passed to different threads. But the same single receiver would receive them. We get multiple txs by calling ``<tx>.clone()`` on any tx.",536870919]],["^15",[1163,"^O","^16",536870919]],["^15",[1163,"^F",1162,536870919]],["^15",[1163,"^X",1158,536870919]],["^15",[1163,"^V",1158,536870919]],["^15",[1163,"^U",574,536870919]],["^15",[1163,"^U",1065,536870919]],["^15",[1163,"^U",1098,536870919]],["^15",[1163,"^U",1158,536870919]],["^15",[1163,"^U",1159,536870919]],["^15",[1163,"^U",1160,536870919]],["^15",[1163,"^H",574,536870919]],["^15",[1163,"^H",1065,536870919]],["^15",[1163,"^H",1098,536870919]],["^15",[1163,"^H",1159,536870919]],["^15",[1163,"^H",1160,536870919]],["^15",[1163,"^;","~u655b7379-bd3f-4ec0-bbc1-7c3101891d86",536870919]],["^15",[1164,"^Q","Multiple values in the channel\nFor ex.:\n```rust\nuse std::sync::mpsc;\nuse std::{thread, time::Duration};\nfn main() {\n    let (tx, rx) = mpsc::channel();\n    thread::spawn(move || {\n        for i in 1..10 {\n            tx.send(i).unwrap();\n            thread::sleep(Duration::from_millis(10))\n        }\n    });\n    for i in rx {\n        println!(\"{}\", i);\n   }\n} \n\n```\ntx's and rx's of Rust channels implement [[Iterator]] and the rx loop waits for all values being sent to it. Then when the tx dies, the rx loop also finishes.",536870919]],["^15",[1164,"^O","^16",536870919]],["^15",[1164,"^F",1163,536870919]],["^15",[1164,"^X",1158,536870919]],["^15",[1164,"^V",1158,536870919]],["^15",[1164,"^U",1158,536870919]],["^15",[1164,"^U",1161,536870919]],["^15",[1164,"^H",1161,536870919]],["^15",[1164,"^;","~u655b7379-33ac-4dca-9f19-40b656e153a8",536870919]],["^15",[1165,"^Q","",536870919]],["^15",[1165,"^O","^16",536870919]],["^15",[1165,"^F",1164,536870919]],["^15",[1165,"^X",1158,536870919]],["^15",[1165,"^V",1158,536870919]],["^15",[1165,"^U",1158,536870919]],["^15",[1165,"^;","~u655b7379-3fb3-44c5-abb8-b57d76198897",536870919]],["^15",[1166,"^3","- ``char``\n  A primitive type to store alphabetic values, A character in rust is a 4 byte Unicode Scalar Value stored inside ‘ ‘ (and not “ “, which is used for [[String]]s). Since it is Unicode, it can store ASCII but also other language characters and even emojis,\n  in the range U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive. So a value ‘❤️’ is a single char in rust.\n-",536870919]],["^15",[1166,"^17",1700492153969,536870919]],["^15",[1166,"^Z","Rust/pages/Char.md",536870919]],["^15",[1167,"^K",1700492154154,536870919]],["^15",[1167,"^[",1166,536870919]],["^15",[1167,"^@",false,536870919]],["^15",[1167,"^Y","char",536870919]],["^15",[1167,"^11","Char",536870919]],["^15",[1167,"^B",1700492154154,536870919]],["^15",[1167,"^;","~u656462fe-7ec1-4d23-8a51-555c2899f1e4",536870960]],["^15",[1168,"^Q","~``char``\nA primitive type to store alphabetic values, A character in rust is a 4 byte Unicode Scalar Value stored inside ‘ ‘ (and not “ “, which is used for [[String]]s). Since it is Unicode, it can store ASCII but also other language characters and even emojis,\nin the range U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive. So a value ‘❤️’ is a single char in rust.",536870919]],["^15",[1168,"^O","^16",536870919]],["^15",[1168,"^F",1167,536870919]],["^15",[1168,"^X",1167,536870919]],["^15",[1168,"^V",1167,536870919]],["^15",[1168,"^U",80,536870919]],["^15",[1168,"^U",1167,536870919]],["^15",[1168,"^H",80,536870919]],["^15",[1168,"^;","~u655b7379-6437-4646-ae66-5eaf58c75ab6",536870919]],["^15",[1169,"^Q","",536870919]],["^15",[1169,"^O","^16",536870919]],["^15",[1169,"^F",1168,536870919]],["^15",[1169,"^X",1167,536870919]],["^15",[1169,"^V",1167,536870919]],["^15",[1169,"^U",1167,536870919]],["^15",[1169,"^;","~u655b7379-71b5-4ed4-af84-6da28e8ae858",536870919]],["^15",[1170,"^3","- Anonymous [[Function]]s\n  Can be stored, passed around, capture the values of their context and even be ran in different contexts.\n  For ex.:\n  ```rust\n  fn yo()-> i32 {\n   2\n  }\n  \n  fn main() {\n  let someOption= Option::Some(\"ya\");\n  let value=someOption.unwrap_or_else(|| yo());\n  }\n  ```\n  Here the body of the closure calls ``yo()`` and returns its return value when the [[Unwrap]] gets a ``None``.\n- Syntax\n  Closely resembles that of a [[Function]] but closures can omit most of the explicit [[Data Type]] definitions as they are able to infer them from the context.\n  Closures are short-lived, context-dependent and narrow-use [[Function]]s\n  \n  ``\n  let <variable name> = <optional move> |<param name>: <optional param type>, ... , <more params>| -> <optional return type> { <body that returns the value of the return type> }\n  ``\n  If there's a single statement/expression in the closure we can even omit the [[Scope]] Blocks.\n  Then we can call a closure with ``<variable name>()``, just like [[Function]]s. \n  \n  For ex.:\n  ```rust\n  fn  add_function  (x: u32) -> u32 { x + 1 } //A function\n  \n  fn main() {\n  let add_closure1 = |x: u32| -> u32 { x + 1 }; //A verbose closure\n  let add_closure2 = |x|             { x + 1 }; // Return type and param type is inferred\n  let add_closure3 = |x|               x + 1  ; // Single expression so the block can be omitted\n  //All these are valid definitions\n  add_closure2(2); //required\n  add_closure3(4);  //required\n  }\n  ```\n  As we can see, unlike functions, closures can even infer the return types. However, for the parameter's [[Data Type]]s, we need to call the closures at-least once otherwise the compiler won't be able to infer the type of the params, just like [[Variable]] declarations. This is also to say, closure params aren't dynamically typed, they are statically typed and hence they must have a single concrete type, which the Rust compiler can infer if we call them once.\n- Capturing [[Variable]]s\n  Closures can capture variables, but unlike *C++* where the captured variables need to be explicitly defined, closures automatically capture them if their body uses them and they do so in 3 ways, just like [[Function]]s. They either do immutable [[Borrow]] or mutable [[Borrow]] or take [[Ownership]].\n  \n  For ex.:\n  ```rust\n  fn main() {\n      let mut list = vec![1, 2, 3];\n      let x = || println!(\"{}\", list[0]); //borrows list immutably.\n      x();\n      let mut y = || list.push(4); //borrows list mutably\n      y();\n  }\n  ```\n  The [[Variable]]s are borrowed from the point of closure creation till the last time the closure is invoked (*Nox-Lexical Lifetimes* [[Lifetime]]).\n  \n  * We can force the closure to take [[Ownership]] of all captured variables with the ``move`` keyword making [[Copy or Move]] always move the captured values.\n  \n  For ex.:\n  \n  ```rust\n  fn main() {\n      let mut list = vec![1, 2, 3];\n      let mut y = move || list.push(4); //moves list's ownership to the closure\n      y();\n  }\n  ```\n  \n  This is sometimes required, such as in [[Thread]]s\n  For ex.:\n  ```rust\n  use std::thread;\n  \n  fn main() {\n      let list = vec![1, 2, 3];\n      println!(\"Before defining closure: {:?}\", list);\n  \n      thread::spawn(move || println!(\"From thread: {:?}\", list))\n          .join()\n          .unwrap();\n  }\n  ```\n  Here, since the closure runs in a separate thread, it is not guaranteed if the main thread or the child thread will finish first, but if main has the ownership and it dies first then the ``list`` will be deallocated rendering an immutable reference passed to the child thread as a dangling [[Reference Type]]. To avoid this, rust compiler itself ensures we ``move`` the captured variables.\n  \n  A closure can then ``move`` the variable to another closure or [[Function]] or etc passing the [[Ownership]] to something else. This is called moving a variable outside a closure.\n- Capture [[Trait]]s and passing closures around\n  All closures implement some traits depending on what they do with their captured [[Variable]]s. \n  There are 4 cases, \n  \n  * A closure captures a variable but doesn't mutate it, nor moves it outside.\n  * Mutates the value.\n  * Moves it outside.\n  * Doesn't capture any variable, so no moving outside nor mutating.\n  \n  Based on these cases, it automatically implements 1 or more of these traits\n  \n  * ``FnOnce``: Applies to all closures that can be called at-least once. All closures implement this. Ones that move captured references outside their body implement only this because they can be called only once as they move the references outside so they can’t be used again.\n  \n  * ``FnMut``: Applies to closures that mutate references but don’t move them outside.\n  \n  * ``Fn``: Applies to closures that don’t mutate references and don’t move references outside. It is also applied to closures that don’t capture anything.\n  \n  We can then use these traits with the [[Generic Type]]s too. The type of [[Function]]s/ [[Method]]s and Closures is ``( )`` for using with Generics and they also automatically implement these traits. This is why we can pass a function/method to params that accept a closure.\n  For ex.:\n  ```rust\n  fn yo<T>(a: T) -> String \n  where\n      T: Fn() -> i32,  //defining the type of T as function with (), then the trait with Fn and return type of the closure/function passed to T\n  {\n      a();\n      return String::from(\"ya\");\n  }\n  fn ya() -> i32 {\n      return 2;\n  }\n  \n  fn yo2<T>(a: T) -> String\n  where\n      T: Fn() -> i32 + FnMut() -> i32, //We use this syntax for multiple Fn traits.\n  {\n      a();\n      return String::from(\"ya\");\n  }\n  \n  \n  fn main() {\n      let x = || 2;\n      yo(x); //works\n      yo(ya); //also works!\n      yo2(x); //works too\n  }\n  \n  ```\n- Returning Closures\n  Closures are represented by [[Trait]]s, which is why they are [[DST]]s. \n  So to return a closure we need to use [[Trait Object]]s.\n  \n  For ex.:\n  ```rust\n  fn returns_closure() -> Box<dyn Fn(i32) -> i32> {\n      Box::new(|x| x + 1)\n  } //works\n  ```",536870919]],["^15",[1170,"^17",1700492154006,536870919]],["^15",[1170,"^Z","Rust/pages/Closure.md",536870919]],["^15",[1171,"^K",1700492154584,536870919]],["^15",[1171,"^[",1206,536870919]],["^15",[1171,"^@",false,536870919]],["^15",[1171,"^Y","copy or move",536870919]],["^15",[1171,"^11","Copy or Move",536870919]],["^15",[1171,"^B",1700492154584,536870919]],["^15",[1171,"^;","~u656462fd-7da4-468b-9893-745bcbb232fc",536870946]],["^15",[1172,"^5",1223,536870919]],["^15",[1172,"^K",1700492154190,536870919]],["^15",[1172,"^@",false,536870919]],["^15",[1172,"^Y","dst",536870919]],["^15",[1172,"^11","DST",536870919]],["^15",[1172,"^B",1700492154190,536870919]],["^15",[1172,"^;","~u655b737a-f2b0-4bdc-9226-78b5599c4254",536870919]],["^15",[1173,"^K",1700492154389,536870919]],["^15",[1173,"^[",1532,536870920]],["^15",[1173,"^@",false,536870919]],["^15",[1173,"^Y","unwrap",536870919]],["^15",[1173,"^11","Unwrap",536870919]],["^15",[1173,"^B",1700492154389,536870919]],["^15",[1173,"^;","~u656462fd-0a3e-4d3e-be64-a3de1e7f2183",536870946]],["^15",[1174,"^K",1700492154584,536870919]],["^15",[1174,"^[",1494,536870920]],["^15",[1174,"^@",false,536870919]],["^15",[1174,"^Y","trait object",536870919]],["^15",[1174,"^11","Trait Object",536870919]],["^15",[1174,"^B",1700492154584,536870919]],["^15",[1174,"^;","~u656462fd-cf39-4453-9215-dc17c4ea8648",536870946]],["^15",[1175,"^Q","Anonymous [[Function]]s\nCan be stored, passed around, capture the values of their context and even be ran in different contexts.\nFor ex.:\n```rust\nfn yo()-> i32 {\n 2\n}\n\nfn main() {\nlet someOption= Option::Some(\"ya\");\nlet value=someOption.unwrap_or_else(|| yo());\n}\n```\nHere the body of the closure calls ``yo()`` and returns its return value when the [[Unwrap]] gets a ``None``.",536870919]],["^15",[1175,"^O","^16",536870919]],["^15",[1175,"^F",1093,536870919]],["^15",[1175,"^X",1093,536870919]],["^15",[1175,"^V",1093,536870919]],["^15",[1175,"^U",163,536870919]],["^15",[1175,"^U",1093,536870919]],["^15",[1175,"^U",1173,536870919]],["^15",[1175,"^H",163,536870919]],["^15",[1175,"^H",1173,536870919]],["^15",[1175,"^;","~u655b737a-32ff-4ba8-bfe8-ecbf069377f4",536870919]],["^15",[1176,"^Q","Syntax\nClosely resembles that of a [[Function]] but closures can omit most of the explicit [[Data Type]] definitions as they are able to infer them from the context.\nClosures are short-lived, context-dependent and narrow-use [[Function]]s\n\n``\nlet <variable name> = <optional move> |<param name>: <optional param type>, ... , <more params>| -> <optional return type> { <body that returns the value of the return type> }\n``\nIf there's a single statement/expression in the closure we can even omit the [[Scope]] Blocks.\nThen we can call a closure with ``<variable name>()``, just like [[Function]]s. \n\nFor ex.:\n```rust\nfn  add_function  (x: u32) -> u32 { x + 1 } //A function\n\nfn main() {\nlet add_closure1 = |x: u32| -> u32 { x + 1 }; //A verbose closure\nlet add_closure2 = |x|             { x + 1 }; // Return type and param type is inferred\nlet add_closure3 = |x|               x + 1  ; // Single expression so the block can be omitted\n//All these are valid definitions\nadd_closure2(2); //required\nadd_closure3(4);  //required\n}\n```\nAs we can see, unlike functions, closures can even infer the return types. However, for the parameter's [[Data Type]]s, we need to call the closures at-least once otherwise the compiler won't be able to infer the type of the params, just like [[Variable]] declarations. This is also to say, closure params aren't dynamically typed, they are statically typed and hence they must have a single concrete type, which the Rust compiler can infer if we call them once.",536870919]],["^15",[1176,"^O","^16",536870919]],["^15",[1176,"^F",1175,536870919]],["^15",[1176,"^X",1093,536870919]],["^15",[1176,"^V",1093,536870919]],["^15",[1176,"^U",161,536870919]],["^15",[1176,"^U",163,536870919]],["^15",[1176,"^U",345,536870919]],["^15",[1176,"^U",1090,536870919]],["^15",[1176,"^U",1093,536870919]],["^15",[1176,"^H",161,536870919]],["^15",[1176,"^H",163,536870919]],["^15",[1176,"^H",345,536870919]],["^15",[1176,"^H",1090,536870919]],["^15",[1176,"^;","~u655b7379-5d62-442f-ba81-71c342a54287",536870919]],["^15",[1177,"^Q","Capturing [[Variable]]s\nClosures can capture variables, but unlike *C++* where the captured variables need to be explicitly defined, closures automatically capture them if their body uses them and they do so in 3 ways, just like [[Function]]s. They either do immutable [[Borrow]] or mutable [[Borrow]] or take [[Ownership]].\n\nFor ex.:\n```rust\nfn main() {\n    let mut list = vec![1, 2, 3];\n    let x = || println!(\"{}\", list[0]); //borrows list immutably.\n    x();\n    let mut y = || list.push(4); //borrows list mutably\n    y();\n}\n```\nThe [[Variable]]s are borrowed from the point of closure creation till the last time the closure is invoked (*Nox-Lexical Lifetimes* [[Lifetime]]).\n\n* We can force the closure to take [[Ownership]] of all captured variables with the ``move`` keyword making [[Copy or Move]] always move the captured values.\n\nFor ex.:\n\n```rust\nfn main() {\n    let mut list = vec![1, 2, 3];\n    let mut y = move || list.push(4); //moves list's ownership to the closure\n    y();\n}\n```\n\nThis is sometimes required, such as in [[Thread]]s\nFor ex.:\n```rust\nuse std::thread;\n\nfn main() {\n    let list = vec![1, 2, 3];\n    println!(\"Before defining closure: {:?}\", list);\n\n    thread::spawn(move || println!(\"From thread: {:?}\", list))\n        .join()\n        .unwrap();\n}\n```\nHere, since the closure runs in a separate thread, it is not guaranteed if the main thread or the child thread will finish first, but if main has the ownership and it dies first then the ``list`` will be deallocated rendering an immutable reference passed to the child thread as a dangling [[Reference Type]]. To avoid this, rust compiler itself ensures we ``move`` the captured variables.\n\nA closure can then ``move`` the variable to another closure or [[Function]] or etc passing the [[Ownership]] to something else. This is called moving a variable outside a closure.",536870919]],["^15",[1177,"^O","^16",536870919]],["^15",[1177,"^F",1176,536870919]],["^15",[1177,"^X",1093,536870919]],["^15",[1177,"^V",1093,536870919]],["^15",[1177,"^U",161,536870919]],["^15",[1177,"^U",163,536870919]],["^15",[1177,"^U",1074,536870919]],["^15",[1177,"^U",1091,536870919]],["^15",[1177,"^U",1093,536870919]],["^15",[1177,"^U",1101,536870919]],["^15",[1177,"^U",1117,536870919]],["^15",[1177,"^U",1160,536870919]],["^15",[1177,"^U",1171,536870919]],["^15",[1177,"^H",161,536870919]],["^15",[1177,"^H",163,536870919]],["^15",[1177,"^H",1074,536870919]],["^15",[1177,"^H",1091,536870919]],["^15",[1177,"^H",1101,536870919]],["^15",[1177,"^H",1117,536870919]],["^15",[1177,"^H",1160,536870919]],["^15",[1177,"^H",1171,536870919]],["^15",[1177,"^;","~u655b7379-c03e-4d25-b23b-aa390011f6b2",536870919]],["^15",[1178,"^Q","Capture [[Trait]]s and passing closures around\nAll closures implement some traits depending on what they do with their captured [[Variable]]s. \nThere are 4 cases, \n\n* A closure captures a variable but doesn't mutate it, nor moves it outside.\n* Mutates the value.\n* Moves it outside.\n* Doesn't capture any variable, so no moving outside nor mutating.\n\nBased on these cases, it automatically implements 1 or more of these traits\n\n* ``FnOnce``: Applies to all closures that can be called at-least once. All closures implement this. Ones that move captured references outside their body implement only this because they can be called only once as they move the references outside so they can’t be used again.\n\n* ``FnMut``: Applies to closures that mutate references but don’t move them outside.\n\n* ``Fn``: Applies to closures that don’t mutate references and don’t move references outside. It is also applied to closures that don’t capture anything.\n\nWe can then use these traits with the [[Generic Type]]s too. The type of [[Function]]s/ [[Method]]s and Closures is ``( )`` for using with Generics and they also automatically implement these traits. This is why we can pass a function/method to params that accept a closure.\nFor ex.:\n```rust\nfn yo<T>(a: T) -> String \nwhere\n    T: Fn() -> i32,  //defining the type of T as function with (), then the trait with Fn and return type of the closure/function passed to T\n{\n    a();\n    return String::from(\"ya\");\n}\nfn ya() -> i32 {\n    return 2;\n}\n\nfn yo2<T>(a: T) -> String\nwhere\n    T: Fn() -> i32 + FnMut() -> i32, //We use this syntax for multiple Fn traits.\n{\n    a();\n    return String::from(\"ya\");\n}\n\n\nfn main() {\n    let x = || 2;\n    yo(x); //works\n    yo(ya); //also works!\n    yo2(x); //works too\n}\n\n```",536870919]],["^15",[1178,"^O","^16",536870919]],["^15",[1178,"^F",1177,536870919]],["^15",[1178,"^X",1093,536870919]],["^15",[1178,"^V",1093,536870919]],["^15",[1178,"^U",161,536870919]],["^15",[1178,"^U",163,536870919]],["^15",[1178,"^U",1065,536870919]],["^15",[1178,"^U",1073,536870919]],["^15",[1178,"^U",1087,536870919]],["^15",[1178,"^U",1093,536870919]],["^15",[1178,"^H",161,536870919]],["^15",[1178,"^H",163,536870919]],["^15",[1178,"^H",1065,536870919]],["^15",[1178,"^H",1073,536870919]],["^15",[1178,"^H",1087,536870919]],["^15",[1178,"^;","~u655b7379-9c96-477b-beb0-d97ab3b2019e",536870919]],["^15",[1179,"^Q","Returning Closures\nClosures are represented by [[Trait]]s, which is why they are [[DST]]s. \nSo to return a closure we need to use [[Trait Object]]s.\n\nFor ex.:\n```rust\nfn returns_closure() -> Box<dyn Fn(i32) -> i32> {\n    Box::new(|x| x + 1)\n} //works\n```",536870919]],["^15",[1179,"^O","^16",536870919]],["^15",[1179,"^F",1178,536870919]],["^15",[1179,"^X",1093,536870919]],["^15",[1179,"^V",1093,536870919]],["^15",[1179,"^U",1073,536870919]],["^15",[1179,"^U",1093,536870919]],["^15",[1179,"^U",1172,536870919]],["^15",[1179,"^U",1174,536870919]],["^15",[1179,"^H",1073,536870919]],["^15",[1179,"^H",1172,536870919]],["^15",[1179,"^H",1174,536870919]],["^15",[1179,"^;","~u655b7379-ffda-4511-8419-bdb0e923c7ef",536870919]],["^15",[1180,"^3","- Advanced Data Types, that are formed by using the primitive types.\n- These [[Data Type]]s are generally on the heap and are provided by the [[Standard Library]]. They  store collections of values on heap, which allows them to have unfixed size and grow dynamically. But it also means these data types take time in (de)allocation.\n- All Collections can be found at [Docs](https://doc.rust-lang.org/std/collections/index.html)\n- [[Vector]]\n- [[String]]\n- [[HashMap]]",536870919]],["^15",[1180,"^17",1700492154021,536870919]],["^15",[1180,"^Z","Rust/pages/Collection.md",536870919]],["^15",[1181,"^K",1700492154154,536870919]],["^15",[1181,"^[",1180,536870919]],["^15",[1181,"^@",false,536870919]],["^15",[1181,"^Y","collection",536870919]],["^15",[1181,"^11","Collection",536870919]],["^15",[1181,"^B",1700492154154,536870919]],["^15",[1181,"^;","~u656462fe-0292-4d95-ab52-ae3449b95607",536870950]],["^15",[1182,"^K",1700492154390,536870919]],["^15",[1182,"^[",1289,536870919]],["^15",[1182,"^@",false,536870919]],["^15",[1182,"^Y","hashmap",536870919]],["^15",[1182,"^11","HashMap",536870919]],["^15",[1182,"^B",1700492154390,536870919]],["^15",[1182,"^;","~u655b737a-bc06-424e-bd72-046d1de8d0ab",536870919]],["^15",[1183,"^Q","Advanced Data Types, that are formed by using the primitive types.",536870919]],["^15",[1183,"^O","^16",536870919]],["^15",[1183,"^F",1181,536870919]],["^15",[1183,"^X",1181,536870919]],["^15",[1183,"^V",1181,536870919]],["^15",[1183,"^U",1181,536870919]],["^15",[1183,"^;","~u655b737a-24be-4aed-92f0-3c8b2b669f1f",536870919]],["^15",[1184,"^Q","These [[Data Type]]s are generally on the heap and are provided by the [[Standard Library]]. They  store collections of values on heap, which allows them to have unfixed size and grow dynamically. But it also means these data types take time in (de)allocation.",536870919]],["^15",[1184,"^O","^16",536870919]],["^15",[1184,"^F",1183,536870919]],["^15",[1184,"^X",1181,536870919]],["^15",[1184,"^V",1181,536870919]],["^15",[1184,"^U",1090,536870919]],["^15",[1184,"^U",1096,536870919]],["^15",[1184,"^U",1181,536870919]],["^15",[1184,"^H",1090,536870919]],["^15",[1184,"^H",1096,536870919]],["^15",[1184,"^;","~u655b737a-d74d-42bb-a00d-910736a6c740",536870919]],["^15",[1185,"^Q","All Collections can be found at [Docs](https://doc.rust-lang.org/std/collections/index.html)",536870919]],["^15",[1185,"^O","^16",536870919]],["^15",[1185,"^F",1184,536870919]],["^15",[1185,"^X",1181,536870919]],["^15",[1185,"^V",1181,536870919]],["^15",[1185,"^U",1181,536870919]],["^15",[1185,"^;","~u655b737a-2277-499b-9f0b-1e5b8f01b8da",536870919]],["^15",[1186,"^Q","[[Vector]]",536870919]],["^15",[1186,"^O","^16",536870919]],["^15",[1186,"^F",1185,536870919]],["^15",[1186,"^X",1181,536870919]],["^15",[1186,"^V",1181,536870919]],["^15",[1186,"^U",160,536870919]],["^15",[1186,"^U",1181,536870919]],["^15",[1186,"^H",160,536870919]],["^15",[1186,"^;","~u655b737a-0f1a-479d-80c5-4e4df1cf5281",536870919]],["^15",[1187,"^Q","[[String]]",536870919]],["^15",[1187,"^O","^16",536870919]],["^15",[1187,"^F",1186,536870919]],["^15",[1187,"^X",1181,536870919]],["^15",[1187,"^V",1181,536870919]],["^15",[1187,"^U",80,536870919]],["^15",[1187,"^U",1181,536870919]],["^15",[1187,"^H",80,536870919]],["^15",[1187,"^;","~u655b737a-65eb-4b09-8406-648ec0760be1",536870919]],["^15",[1188,"^Q","[[HashMap]]",536870919]],["^15",[1188,"^O","^16",536870919]],["^15",[1188,"^F",1187,536870919]],["^15",[1188,"^X",1181,536870919]],["^15",[1188,"^V",1181,536870919]],["^15",[1188,"^U",1181,536870919]],["^15",[1188,"^U",1182,536870919]],["^15",[1188,"^H",1182,536870919]],["^15",[1188,"^;","~u655b737a-5045-4809-814f-76de4a932567",536870919]],["^15",[1189,"^3","- Works as normal, ``//`` for single line and ``/* */`` for multi-line. ``///`` and ``//!`` for documentation is supported as well.\n- /// for documentation comments \n  /// supports Markdown in it and allows documenting things,\n  For ex.:\n  ```rust\n  /// Adds one to the number given.\n  ///\n  /// # Examples\n  ///\n  /// ```\n  /// let arg = 5;\n  /// let answer = my_crate::add_one(arg);\n  ///\n  /// assert_eq!(6, answer);\n  /// ```\n  pub fn add_one(x: i32) -> i32 {\n      x + 1\n  }\n  \n  ```\n- [[Cargo]] ``doc``\n  Running this generates the HTML documentation for all the doc commented lines by using the rustdoc tool distributed with Rust. ``–open`` flag on it will open the built HTML page.\n- ``//!``\n  These type documentation comments document the parent item of a doc comment, i.e., the item that contains the doc comment following the //! styled doc comment. \n  For ex.:\n  ```rust\n  //! # My Crate\n  //!\n  //! `my_crate` is a collection of utilities to make performing certain\n  //! calculations more convenient.\n   \n  /// Adds one to the number given.\n  // --snip--\n  fn addOne() {}\n  ```\n  Here ``//!`` documents the crate. This is because the next doc comment’s parent is the crate itself,i.e. ``///`` is in a crate and //! adds documentation for it.\n  So this is the final generated doc\n  ![image.png](../assets/image_1688913423536_0.png)",536870919]],["^15",[1189,"^17",1700492154033,536870919]],["^15",[1189,"^Z","Rust/pages/Comment.md",536870919]],["^15",[1190,"^K",1700492154032,536870919]],["^15",[1190,"^[",1189,536870919]],["^15",[1190,"^@",false,536870919]],["^15",[1190,"^Y","comment",536870919]],["^15",[1190,"^11","Comment",536870919]],["^15",[1190,"^B",1700492154032,536870919]],["^15",[1190,"^;","~u655b737b-a870-4a41-8da3-ab408a998cc5",536870920]],["^15",[1191,"^Q","Works as normal, ``//`` for single line and ``/* */`` for multi-line. ``///`` and ``//!`` for documentation is supported as well.",536870919]],["^15",[1191,"^O","^16",536870919]],["^15",[1191,"^F",1190,536870919]],["^15",[1191,"^X",1190,536870919]],["^15",[1191,"^V",1190,536870919]],["^15",[1191,"^U",1190,536870919]],["^15",[1191,"^;","~u655b737a-a915-4dac-a5d3-355c7f8d3528",536870919]],["^15",[1192,"^Q","/// for documentation comments \n/// supports Markdown in it and allows documenting things,\nFor ex.:\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n```",536870919]],["^15",[1192,"^O","^16",536870919]],["^15",[1192,"^F",1191,536870919]],["^15",[1192,"^X",1190,536870919]],["^15",[1192,"^V",1190,536870919]],["^15",[1192,"^U",1190,536870919]],["^15",[1192,"^;","~u655b737a-7a11-4104-9fdd-9b3b96ecc343",536870919]],["^15",[1193,"^Q","[[Cargo]] ``doc``\nRunning this generates the HTML documentation for all the doc commented lines by using the rustdoc tool distributed with Rust. ``–open`` flag on it will open the built HTML page.",536870919]],["^15",[1193,"^O","^16",536870919]],["^15",[1193,"^F",1192,536870919]],["^15",[1193,"^X",1190,536870919]],["^15",[1193,"^V",1190,536870919]],["^15",[1193,"^U",1132,536870919]],["^15",[1193,"^U",1190,536870919]],["^15",[1193,"^H",1132,536870919]],["^15",[1193,"^;","~u655b737a-8f6b-4d43-abc2-4e15fdcf5861",536870919]],["^15",[1194,"^Q","~``//!``\nThese type documentation comments document the parent item of a doc comment, i.e., the item that contains the doc comment following the //! styled doc comment. \nFor ex.:\n```rust\n//! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.\n \n/// Adds one to the number given.\n// --snip--\nfn addOne() {}\n```\nHere ``//!`` documents the crate. This is because the next doc comment’s parent is the crate itself,i.e. ``///`` is in a crate and //! adds documentation for it.\nSo this is the final generated doc\n![image.png](../assets/image_1688913423536_0.png)",536870919]],["^15",[1194,"^O","^16",536870919]],["^15",[1194,"^F",1193,536870919]],["^15",[1194,"^X",1190,536870919]],["^15",[1194,"^V",1190,536870919]],["^15",[1194,"^U",1190,536870919]],["^15",[1194,"^;","~u655b737a-c141-4fee-b3da-343c71eda035",536870919]],["^15",[1195,"^3","- Concurrency, many tasks ran independently of each other. Parallelism, many tasks ran parallelly.\n  title:: Concurrency or Parallelism\n  Rust supports both types of asynchronous programming. The compile-time rules such as [[Ownership]], [[Borrow]] Checking, etc. help with async programming as well in Rust, making them less error prone.\n- *Process*\n  An OS runs a single program in a single *Process*, this is managed and scheduled by it as well. A single program can have multiple parts which run independently, these are known as [[Thread]]s.\n- [[Channel]]s\n- [[Mutex<T>]]\n- [[Async and Await]]",536870919]],["^15",[1195,"^17",1700492154046,536870919]],["^15",[1195,"^Z","Rust/pages/Concurrency or Parallelism.md",536870919]],["^15",[1196,"^Q","Concurrency, many tasks ran independently of each other. Parallelism, many tasks ran parallelly.\ntitle:: Concurrency or Parallelism\nRust supports both types of asynchronous programming. The compile-time rules such as [[Ownership]], [[Borrow]] Checking, etc. help with async programming as well in Rust, making them less error prone.",536870919]],["^15",[1196,"^O","^16",536870919]],["^15",[1196,"^F",1110,536870919]],["^15",[1196,"^X",1110,536870919]],["^15",[1196,"^V",1110,536870919]],["^15",[1196,"^U",1110,536870919]],["^15",[1196,"^U",1117,536870919]],["^15",[1196,"^U",1160,536870919]],["^15",[1196,"^?",["^ ","^1>","Concurrency or Parallelism"],536870919]],["^15",[1196,"^J",["^1>"],536870919]],["^15",[1196,"^4",["^ ","^1>","Concurrency or Parallelism"],536870919]],["^15",[1196,"^H",1117,536870919]],["^15",[1196,"^H",1160,536870919]],["^15",[1196,"^;","~u655b737a-4e0d-467f-bdc1-9418be47aa5c",536870919]],["^15",[1197,"^Q","*Process*\nAn OS runs a single program in a single *Process*, this is managed and scheduled by it as well. A single program can have multiple parts which run independently, these are known as [[Thread]]s.",536870919]],["^15",[1197,"^O","^16",536870919]],["^15",[1197,"^F",1196,536870919]],["^15",[1197,"^X",1110,536870919]],["^15",[1197,"^V",1110,536870919]],["^15",[1197,"^U",1074,536870919]],["^15",[1197,"^U",1110,536870919]],["^15",[1197,"^H",1074,536870919]],["^15",[1197,"^;","~u655b737a-deff-424e-99ff-6fb9054ba9cf",536870919]],["^15",[1198,"^Q","[[Channel]]s",536870919]],["^15",[1198,"^O","^16",536870919]],["^15",[1198,"^F",1197,536870919]],["^15",[1198,"^X",1110,536870919]],["^15",[1198,"^V",1110,536870919]],["^15",[1198,"^U",1110,536870919]],["^15",[1198,"^U",1158,536870919]],["^15",[1198,"^H",1158,536870919]],["^15",[1198,"^;","~u655b737a-d7f4-4e3a-9978-78b2c4e10ea8",536870919]],["^15",[1199,"^Q","[[Mutex<T>]]",536870919]],["^15",[1199,"^O","^16",536870919]],["^15",[1199,"^F",1198,536870919]],["^15",[1199,"^X",1110,536870919]],["^15",[1199,"^V",1110,536870919]],["^15",[1199,"^U",1092,536870919]],["^15",[1199,"^U",1110,536870919]],["^15",[1199,"^H",1092,536870919]],["^15",[1199,"^;","~u655b737a-4b0d-4e2c-8384-ec1cd92b9707",536870919]],["^15",[1200,"^Q","[[Async and Await]]",536870919]],["^15",[1200,"^O","^16",536870919]],["^15",[1200,"^F",1199,536870919]],["^15",[1200,"^X",1110,536870919]],["^15",[1200,"^V",1110,536870919]],["^15",[1200,"^U",1097,536870919]],["^15",[1200,"^U",1110,536870919]],["^15",[1200,"^H",1097,536870919]],["^15",[1200,"^;","~u655b737a-8ccc-4775-865d-6c5cbf49dcfa",536870919]],["^15",[1201,"^3","- These statements allow altering the flow of code execution depending on some condition.\n- [[Conditional]]\n- [[Loop]]",536870919]],["^15",[1201,"^17",1700492154093,536870919]],["^15",[1201,"^Z","Rust/pages/Control Flow.md",536870919]],["^15",[1202,"^K",1700492154092,536870919]],["^15",[1202,"^[",1201,536870919]],["^15",[1202,"^@",false,536870919]],["^15",[1202,"^Y","control flow",536870919]],["^15",[1202,"^11","Control Flow",536870919]],["^15",[1202,"^B",1700492154092,536870919]],["^15",[1202,"^;","~u655b737b-ba7a-4d9f-a2be-8272d7e54409",536870920]],["^15",[1203,"^Q","These statements allow altering the flow of code execution depending on some condition.",536870919]],["^15",[1203,"^O","^16",536870919]],["^15",[1203,"^F",1202,536870919]],["^15",[1203,"^X",1202,536870919]],["^15",[1203,"^V",1202,536870919]],["^15",[1203,"^U",1202,536870919]],["^15",[1203,"^;","~u655b737a-818f-49a5-b1bd-160cfdeadba7",536870919]],["^15",[1204,"^Q","[[Conditional]]",536870919]],["^15",[1204,"^O","^16",536870919]],["^15",[1204,"^F",1203,536870919]],["^15",[1204,"^X",1202,536870919]],["^15",[1204,"^V",1202,536870919]],["^15",[1204,"^U",495,536870919]],["^15",[1204,"^U",1202,536870919]],["^15",[1204,"^H",495,536870919]],["^15",[1204,"^;","~u655b737a-1881-4535-bf3f-6784e6d297a6",536870919]],["^15",[1205,"^Q","[[Loop]]",536870919]],["^15",[1205,"^O","^16",536870919]],["^15",[1205,"^F",1204,536870919]],["^15",[1205,"^X",1202,536870919]],["^15",[1205,"^V",1202,536870919]],["^15",[1205,"^U",300,536870919]],["^15",[1205,"^U",1202,536870919]],["^15",[1205,"^H",300,536870919]],["^15",[1205,"^;","~u655b737a-963c-4fad-8579-c9e1118881f3",536870919]],["^15",[1206,"^3","- In Rust, values on the stack are copied automatically. \n  For ex.:\n  ```rust\n  let a=2;\n  let b=a;\n  ```\n  Since this is a simple [[Data Type]] and is on the stack, it is copied directly. \n  \n  And similarly,\n  ```rust\n  let s1 = String.from(“hello”);\n  let s2 = s1;\n  ```\n  The stack also has ``s1`` and ``s2`` which hold the *Reference* to the [[String]] values on the heap so that reference is copied but not the data itself. Meaning we get\n  ![image.png](../assets/image_1688917576881_0.png)\n  \n  So modifying one or the other would affect the other. To prevent this and also the double free problem, which is, if s1 and s2 both try to free the memory then it would cause memory corruption, Rust invalidates the copied variable. This turns the copy operation into a move operation automatically.\n  \n  For ex.:\n  ```rust\n      let s1 = String::from(\"hello\");\n      let s2 = s1;\n   \n      println!(\"{}, world!\", s1);\n  ```\n  is an error as ``s1`` is the owner of the data and when we copy ``s1`` into ``s2``, then ``s2`` takes [[Ownership]] of the value and in doing so makes ``s1`` invalid as it doesn’t have the ownership anymore, so ``s1`` shouldn't be accessed anymore.\n  So, Rust, through [[Ownership]] rules ensure the references to the values on the heap are safe.\n  \n  This is also to say, copy/move is ok but if a value has been moved we can't access it, and if we try to it is an error, but otherwise it is not.\n- To actually copy the data, we use the ``.clone()`` [[Function]] implemented by the [[Data Type]]s on the heap as well as [[Pointer]]s. \n  \n  For ex.:\n  ```rust\n  let s1= String::from(\"yo\");\n  let s2= s1.clone(); //This is an expensive operation as the heap will be recreated.\n  ```\n- Values on the stack such as integers can be cloned or copied, i.e., copy or ``.clone()`` are the same thing for  them. As a general rule, all scalar [[Data Type]]s use copying and not moving. And tuples also use copying if they consist of types that implement ``Copy`` [[Trait]]. \n  \n  This copy/move scenario works everywhere, even with [[Function]] calls. So passing a heap variable to a function will turn the variable invalid.\n-",536870919]],["^15",[1206,"^17",1700492154113,536870919]],["^15",[1206,"^Z","Rust/pages/Copy or Move.md",536870919]],["^15",[1207,"^Q","In Rust, values on the stack are copied automatically. \nFor ex.:\n```rust\nlet a=2;\nlet b=a;\n```\nSince this is a simple [[Data Type]] and is on the stack, it is copied directly. \n\nAnd similarly,\n```rust\nlet s1 = String.from(“hello”);\nlet s2 = s1;\n```\nThe stack also has ``s1`` and ``s2`` which hold the *Reference* to the [[String]] values on the heap so that reference is copied but not the data itself. Meaning we get\n![image.png](../assets/image_1688917576881_0.png)\n\nSo modifying one or the other would affect the other. To prevent this and also the double free problem, which is, if s1 and s2 both try to free the memory then it would cause memory corruption, Rust invalidates the copied variable. This turns the copy operation into a move operation automatically.\n\nFor ex.:\n```rust\n    let s1 = String::from(\"hello\");\n    let s2 = s1;\n \n    println!(\"{}, world!\", s1);\n```\nis an error as ``s1`` is the owner of the data and when we copy ``s1`` into ``s2``, then ``s2`` takes [[Ownership]] of the value and in doing so makes ``s1`` invalid as it doesn’t have the ownership anymore, so ``s1`` shouldn't be accessed anymore.\nSo, Rust, through [[Ownership]] rules ensure the references to the values on the heap are safe.\n\nThis is also to say, copy/move is ok but if a value has been moved we can't access it, and if we try to it is an error, but otherwise it is not.",536870919]],["^15",[1207,"^O","^16",536870919]],["^15",[1207,"^F",1171,536870919]],["^15",[1207,"^X",1171,536870919]],["^15",[1207,"^V",1171,536870919]],["^15",[1207,"^U",80,536870919]],["^15",[1207,"^U",1090,536870919]],["^15",[1207,"^U",1160,536870919]],["^15",[1207,"^U",1171,536870919]],["^15",[1207,"^H",80,536870919]],["^15",[1207,"^H",1090,536870919]],["^15",[1207,"^H",1160,536870919]],["^15",[1207,"^;","~u655b737a-47fb-4372-a1d6-46495d8e527c",536870919]],["^15",[1208,"^Q","To actually copy the data, we use the ``.clone()`` [[Function]] implemented by the [[Data Type]]s on the heap as well as [[Pointer]]s. \n\nFor ex.:\n```rust\nlet s1= String::from(\"yo\");\nlet s2= s1.clone(); //This is an expensive operation as the heap will be recreated.\n```",536870919]],["^15",[1208,"^O","^16",536870919]],["^15",[1208,"^F",1207,536870919]],["^15",[1208,"^X",1171,536870919]],["^15",[1208,"^V",1171,536870919]],["^15",[1208,"^U",163,536870919]],["^15",[1208,"^U",1090,536870919]],["^15",[1208,"^U",1094,536870919]],["^15",[1208,"^U",1171,536870919]],["^15",[1208,"^H",163,536870919]],["^15",[1208,"^H",1090,536870919]],["^15",[1208,"^H",1094,536870919]],["^15",[1208,"^;","~u655b737a-2c7b-47fe-ba18-447f45a196b1",536870919]],["^15",[1209,"^Q","Values on the stack such as integers can be cloned or copied, i.e., copy or ``.clone()`` are the same thing for  them. As a general rule, all scalar [[Data Type]]s use copying and not moving. And tuples also use copying if they consist of types that implement ``Copy`` [[Trait]]. \n\nThis copy/move scenario works everywhere, even with [[Function]] calls. So passing a heap variable to a function will turn the variable invalid.",536870919]],["^15",[1209,"^O","^16",536870919]],["^15",[1209,"^F",1208,536870919]],["^15",[1209,"^X",1171,536870919]],["^15",[1209,"^V",1171,536870919]],["^15",[1209,"^U",163,536870919]],["^15",[1209,"^U",1073,536870919]],["^15",[1209,"^U",1090,536870919]],["^15",[1209,"^U",1171,536870919]],["^15",[1209,"^H",163,536870919]],["^15",[1209,"^H",1073,536870919]],["^15",[1209,"^H",1090,536870919]],["^15",[1209,"^;","~u655b737a-bb49-41c9-8a3f-b2acdac30f43",536870919]],["^15",[1210,"^Q","",536870919]],["^15",[1210,"^O","^16",536870919]],["^15",[1210,"^F",1209,536870919]],["^15",[1210,"^X",1171,536870919]],["^15",[1210,"^V",1171,536870919]],["^15",[1210,"^U",1171,536870919]],["^15",[1210,"^;","~u655b737a-96d9-473a-b070-28a09734485f",536870919]],["^15",[1211,"^3","- ``crate``\n  It's the smallest compiled entity in Rust. \n  It's simply a namespace that includes a project's contents which can then have [[Access Modifier]]s and the public items can be referred to by external code when the external code imports the crate holding them. \n  \n  Like our project's crate. When [[Cargo]] compiles our project, the root crate includes our entire project directory and when [[rustc]] compiles a file, the root crate includes only the ``.rs`` file's contents.  Both also compile all the crates being imported into our file/project, and then their imported files and so on. But our project's crate only contains our project/file's contents.\n  \n  For ex.:\n  ``std::prelude`` is a crate that includes all the public [[Access Modifier]] contents of the [[Prelude]] project.\n- A [[Package]] and a Crate are 2 different things\n  Whilst a Package contains all the crates in a project, a crate is simply a single ``.rs`` file and it may have [[Module]]s, which can then be their own ``.rs`` files. \n  So a Package is a collection of crates, and a crate is a collection of modules.\n- Crate Root\n  The source file where we start the compilation, we can then define all the various [[Crate]]s/ [[Module]]s/ [[Function]]s/ [[Struct]]s/ [[Enum]]s/ [[Trait Object]]s/ [[Method]]s and their ``impl`` blocks and so on in it.\n  [[Cargo]] looks for ``main.rs`` or ``lib.rs`` and the one it picks becomes the Crate Root. \n  When we use [[rustc]] on a file then it becomes the Crate Root.\n  \n  * We can access the crate root's contents with the ``crate`` [[Module]].\n  * All the contents of the source file, including the [[Module]]s, are bundled up and put in the ``crate`` [[Module]]. This is why it's called [[Crate]] Root, since it is the rootmost [[Module]] and is the starting point for accessing any [[Module]].\n- Binary and Library Crate\n  A Crate can only be either a binary or a library crate. \n  \n  Binary Crate: A crate that can be compiled to an executable. It needs to have a ``main`` [[Function]]. Then this crate's executable can be ran on a system.\n  \n  Library Crate : This crate doesn't compile to an executable, doesn't have a ``main`` [[Function]] and hence can't be directly used by a system. It's purpose is to bundle up a project's [[Module]]s, [[Function]]s etc. allowing them to be imported into other project's and then adding predefined functionality to those projects.\n- ``crate`` or ``<package-name>``\n  The ``crate`` is the the Crate Root or rather, it's the namespace of the crate where the compilation begins. However, when external crates are being used, then we use their ``<package-name>`` to access their contents where ``package-name`` is the name of the [[Package]]. The ``<package-name>`` namespace has all the public items in all crates of a package. \n  When our [[Package]] is used externally, Rust compiler knows ``crate`` in our crate meant our ``<package-name>``.\n  \n  For ex.:\n  If our ``<package-name>`` is  ``X`` then\n  ```rust\n  mod Y {\n   pub fn yo(){}\n  }\n  \n  fn main() {\n   X::Y::yo(); \n   //is the same as\n   crate::Y::yo();\n  }\n  ```\n-",536870919]],["^15",[1211,"^17",1700492154136,536870919]],["^15",[1211,"^Z","Rust/pages/Crate.md",536870919]],["^15",[1212,"^K",1700492154134,536870919]],["^15",[1212,"^[",1395,536870920]],["^15",[1212,"^@",false,536870919]],["^15",[1212,"^Y","prelude",536870919]],["^15",[1212,"^11","Prelude",536870919]],["^15",[1212,"^B",1700492154134,536870919]],["^15",[1212,"^;","~u655b737c-4e76-4d97-8599-4d70918f9659",536870920]],["^15",[1213,"^Q","~``crate``\nIt's the smallest compiled entity in Rust. \nIt's simply a namespace that includes a project's contents which can then have [[Access Modifier]]s and the public items can be referred to by external code when the external code imports the crate holding them. \n\nLike our project's crate. When [[Cargo]] compiles our project, the root crate includes our entire project directory and when [[rustc]] compiles a file, the root crate includes only the ``.rs`` file's contents.  Both also compile all the crates being imported into our file/project, and then their imported files and so on. But our project's crate only contains our project/file's contents.\n\nFor ex.:\n``std::prelude`` is a crate that includes all the public [[Access Modifier]] contents of the [[Prelude]] project.",536870919]],["^15",[1213,"^O","^16",536870919]],["^15",[1213,"^F",1063,536870919]],["^15",[1213,"^X",1063,536870919]],["^15",[1213,"^V",1063,536870919]],["^15",[1213,"^U",1062,536870919]],["^15",[1213,"^U",1063,536870919]],["^15",[1213,"^U",1130,536870919]],["^15",[1213,"^U",1132,536870919]],["^15",[1213,"^U",1212,536870919]],["^15",[1213,"^H",1062,536870919]],["^15",[1213,"^H",1130,536870919]],["^15",[1213,"^H",1132,536870919]],["^15",[1213,"^H",1212,536870919]],["^15",[1213,"^;","~u655b737a-9b36-4551-ab05-4c956d0cc0bb",536870919]],["^15",[1214,"^Q","A [[Package]] and a Crate are 2 different things\nWhilst a Package contains all the crates in a project, a crate is simply a single ``.rs`` file and it may have [[Module]]s, which can then be their own ``.rs`` files. \nSo a Package is a collection of crates, and a crate is a collection of modules.",536870919]],["^15",[1214,"^O","^16",536870919]],["^15",[1214,"^F",1213,536870919]],["^15",[1214,"^X",1063,536870919]],["^15",[1214,"^V",1063,536870919]],["^15",[1214,"^U",287,536870919]],["^15",[1214,"^U",1063,536870919]],["^15",[1214,"^U",1129,536870919]],["^15",[1214,"^H",287,536870919]],["^15",[1214,"^H",1129,536870919]],["^15",[1214,"^;","~u655b737a-7efc-4370-956c-60882a84621a",536870919]],["^15",[1215,"^Q","Crate Root\nThe source file where we start the compilation, we can then define all the various [[Crate]]s/ [[Module]]s/ [[Function]]s/ [[Struct]]s/ [[Enum]]s/ [[Trait Object]]s/ [[Method]]s and their ``impl`` blocks and so on in it.\n[[Cargo]] looks for ``main.rs`` or ``lib.rs`` and the one it picks becomes the Crate Root. \nWhen we use [[rustc]] on a file then it becomes the Crate Root.\n\n* We can access the crate root's contents with the ``crate`` [[Module]].\n* All the contents of the source file, including the [[Module]]s, are bundled up and put in the ``crate`` [[Module]]. This is why it's called [[Crate]] Root, since it is the rootmost [[Module]] and is the starting point for accessing any [[Module]].",536870919]],["^15",[1215,"^O","^16",536870919]],["^15",[1215,"^F",1214,536870919]],["^15",[1215,"^X",1063,536870919]],["^15",[1215,"^V",1063,536870919]],["^15",[1215,"^U",163,536870919]],["^15",[1215,"^U",287,536870919]],["^15",[1215,"^U",1063,536870919]],["^15",[1215,"^U",1064,536870919]],["^15",[1215,"^U",1065,536870919]],["^15",[1215,"^U",1066,536870919]],["^15",[1215,"^U",1130,536870919]],["^15",[1215,"^U",1132,536870919]],["^15",[1215,"^U",1174,536870919]],["^15",[1215,"^H",163,536870919]],["^15",[1215,"^H",287,536870919]],["^15",[1215,"^H",1063,536870919]],["^15",[1215,"^H",1064,536870919]],["^15",[1215,"^H",1065,536870919]],["^15",[1215,"^H",1066,536870919]],["^15",[1215,"^H",1130,536870919]],["^15",[1215,"^H",1132,536870919]],["^15",[1215,"^H",1174,536870919]],["^15",[1215,"^;","~u655b737a-05d7-4d5c-ac22-0af1610551e1",536870919]],["^15",[1216,"^Q","Binary and Library Crate\nA Crate can only be either a binary or a library crate. \n\nBinary Crate: A crate that can be compiled to an executable. It needs to have a ``main`` [[Function]]. Then this crate's executable can be ran on a system.\n\nLibrary Crate : This crate doesn't compile to an executable, doesn't have a ``main`` [[Function]] and hence can't be directly used by a system. It's purpose is to bundle up a project's [[Module]]s, [[Function]]s etc. allowing them to be imported into other project's and then adding predefined functionality to those projects.",536870919]],["^15",[1216,"^O","^16",536870919]],["^15",[1216,"^F",1215,536870919]],["^15",[1216,"^X",1063,536870919]],["^15",[1216,"^V",1063,536870919]],["^15",[1216,"^U",163,536870919]],["^15",[1216,"^U",287,536870919]],["^15",[1216,"^U",1063,536870919]],["^15",[1216,"^H",163,536870919]],["^15",[1216,"^H",287,536870919]],["^15",[1216,"^;","~u655b737a-6a6d-4d0d-bee4-77e4d25170c2",536870919]],["^15",[1217,"^Q","~``crate`` or ``<package-name>``\nThe ``crate`` is the the Crate Root or rather, it's the namespace of the crate where the compilation begins. However, when external crates are being used, then we use their ``<package-name>`` to access their contents where ``package-name`` is the name of the [[Package]]. The ``<package-name>`` namespace has all the public items in all crates of a package. \nWhen our [[Package]] is used externally, Rust compiler knows ``crate`` in our crate meant our ``<package-name>``.\n\nFor ex.:\nIf our ``<package-name>`` is  ``X`` then\n```rust\nmod Y {\n pub fn yo(){}\n}\n\nfn main() {\n X::Y::yo(); \n //is the same as\n crate::Y::yo();\n}\n```",536870919]],["^15",[1217,"^O","^16",536870919]],["^15",[1217,"^F",1216,536870919]],["^15",[1217,"^X",1063,536870919]],["^15",[1217,"^V",1063,536870919]],["^15",[1217,"^U",1063,536870919]],["^15",[1217,"^U",1129,536870919]],["^15",[1217,"^H",1129,536870919]],["^15",[1217,"^;","~u655b737a-ccc7-4287-87cd-5b5cd4e9775b",536870919]],["^15",[1218,"^Q","",536870919]],["^15",[1218,"^O","^16",536870919]],["^15",[1218,"^F",1217,536870919]],["^15",[1218,"^X",1063,536870919]],["^15",[1218,"^V",1063,536870919]],["^15",[1218,"^U",1063,536870919]],["^15",[1218,"^;","~u655b737a-cc99-4153-b0fd-8c8d86063498",536870919]],["^15",[1219,"^3","-",536870919]],["^15",[1219,"^17",1700492154141,536870919]],["^15",[1219,"^Z","Rust/pages/Crates.md",536870919]],["^15",[1220,"^K",1700492154140,536870919]],["^15",[1220,"^[",1219,536870919]],["^15",[1220,"^@",false,536870919]],["^15",[1220,"^Y","crates",536870919]],["^15",[1220,"^11","Crates",536870919]],["^15",[1220,"^B",1700492154140,536870919]],["^15",[1220,"^;","~u655b737a-3442-4d93-b85e-263f2da06224",536870919]],["^15",[1221,"^Q","",536870919]],["^15",[1221,"^O","^16",536870919]],["^15",[1221,"^F",1220,536870919]],["^15",[1221,"^X",1220,536870919]],["^15",[1221,"^V",1220,536870919]],["^15",[1221,"^U",1220,536870919]],["^15",[1221,"^;","~u655b737a-26fe-4f6b-bb0b-9d9b72bd1d80",536870919]],["^15",[1222,"^3","- 2 basic data types\n  Scalar and Compound\n- Scalar Types\n  Types that represents a single value. They are\n  * [[Number]]\n  * [[Bool]]\n  * [[Char]]\n- Compound Types\n  Types that group multiple types into a single type. They are\n  * [[Tuple]]\n  * [[Array]]\n  * [[Collection]]\n- [[Reference Type]]\n- [[Pointer]]s\n- [[Type Alias]]\n- [[Dynamically Sized Type]]\n- [[Never Type]]\n- Size of\n  We can know the size of any data type with ``core::mem::size_of::<T>();``.\n  Defined in the ``core`` [[Crate]] which is in the [[Standard Library]].",536870919]],["^15",[1222,"^17",1700492154157,536870919]],["^15",[1222,"^Z","Rust/pages/Data Type.md",536870919]],["^15",[1223,"^5",1172,536870919]],["^15",[1223,"^K",1700492154190,536870919]],["^15",[1223,"^[",1243,536870919]],["^15",[1223,"^@",false,536870919]],["^15",[1223,"^Y","dynamically sized type",536870919]],["^15",[1223,"^11","Dynamically Sized Type",536870919]],["^15",[1223,"^?",["^ ","^18",["^19",["DST"]]],536870919]],["^15",[1223,"^4",["^ ","^18","DST"],536870919]],["^15",[1223,"^B",1700492154190,536870919]],["^15",[1223,"^;","~u655b737b-01e4-40b9-acd1-b7fe375f28e4",536870920]],["^15",[1224,"^5",1348,536870919]],["^15",[1224,"^K",1700492154693,536870919]],["^15",[1224,"^[",1347,536870919]],["^15",[1224,"^@",false,536870919]],["^15",[1224,"^Y","never type",536870919]],["^15",[1224,"^11","Never Type",536870919]],["^15",[1224,"^?",["^ ","^18",["^19",["Empty Type"]]],536870919]],["^15",[1224,"^4",["^ ","^18","Empty Type"],536870919]],["^15",[1224,"^B",1700492154693,536870919]],["^15",[1224,"^;","~u655b737a-b88d-48a9-a7f3-60f87399d0d8",536870919]],["^15",[1225,"^K",1700492154155,536870919]],["^15",[1225,"^[",1528,536870920]],["^15",[1225,"^@",false,536870919]],["^15",[1225,"^Y","type alias",536870919]],["^15",[1225,"^11","Type Alias",536870919]],["^15",[1225,"^B",1700492154155,536870919]],["^15",[1225,"^;","~u656462fe-ae04-462f-84d6-c536440d2d1c",536870948]],["^15",[1226,"^Q","[[Pointer]]s",536870919]],["^15",[1226,"^O","^16",536870919]],["^15",[1226,"^F",1227,536870919]],["^15",[1226,"^X",1090,536870919]],["^15",[1226,"^V",1090,536870919]],["^15",[1226,"^U",1090,536870919]],["^15",[1226,"^U",1094,536870919]],["^15",[1226,"^H",1094,536870919]],["^15",[1226,"^;","~u655b737a-b572-4e28-907d-ec2df7c70ff3",536870919]],["^15",[1227,"^Q","[[Reference Type]]",536870919]],["^15",[1227,"^O","^16",536870919]],["^15",[1227,"^F",1234,536870919]],["^15",[1227,"^X",1090,536870919]],["^15",[1227,"^V",1090,536870919]],["^15",[1227,"^U",1090,536870919]],["^15",[1227,"^U",1091,536870919]],["^15",[1227,"^H",1091,536870919]],["^15",[1227,"^;","~u655b737a-0435-474c-bd8a-419dc09448d3",536870919]],["^15",[1228,"^Q","Size of\nWe can know the size of any data type with ``core::mem::size_of::<T>();``.\nDefined in the ``core`` [[Crate]] which is in the [[Standard Library]].",536870919]],["^15",[1228,"^O","^16",536870919]],["^15",[1228,"^F",1230,536870919]],["^15",[1228,"^X",1090,536870919]],["^15",[1228,"^V",1090,536870919]],["^15",[1228,"^U",1063,536870919]],["^15",[1228,"^U",1090,536870919]],["^15",[1228,"^U",1096,536870919]],["^15",[1228,"^H",1063,536870919]],["^15",[1228,"^H",1096,536870919]],["^15",[1228,"^;","~u655b737a-3bd1-4a73-abc7-8ab368e4c9ce",536870919]],["^15",[1229,"^Q","2 basic data types\nScalar and Compound",536870919]],["^15",[1229,"^O","^16",536870919]],["^15",[1229,"^F",1090,536870919]],["^15",[1229,"^X",1090,536870919]],["^15",[1229,"^V",1090,536870919]],["^15",[1229,"^U",1090,536870919]],["^15",[1229,"^;","~u655b737a-b4d7-4878-849a-1da263b0080e",536870919]],["^15",[1230,"^Q","[[Never Type]]",536870919]],["^15",[1230,"^O","^16",536870919]],["^15",[1230,"^F",1233,536870919]],["^15",[1230,"^X",1090,536870919]],["^15",[1230,"^V",1090,536870919]],["^15",[1230,"^U",1090,536870919]],["^15",[1230,"^U",1224,536870919]],["^15",[1230,"^H",1224,536870919]],["^15",[1230,"^;","~u655b737a-a08a-406a-9d9f-46a9875ed895",536870919]],["^15",[1231,"^Q","Scalar Types\nTypes that represents a single value. They are\n* [[Number]]\n* [[Bool]]\n* [[Char]]",536870919]],["^15",[1231,"^O","^16",536870919]],["^15",[1231,"^F",1229,536870919]],["^15",[1231,"^X",1090,536870919]],["^15",[1231,"^V",1090,536870919]],["^15",[1231,"^U",162,536870919]],["^15",[1231,"^U",1090,536870919]],["^15",[1231,"^U",1113,536870919]],["^15",[1231,"^U",1167,536870919]],["^15",[1231,"^H",162,536870919]],["^15",[1231,"^H",1113,536870919]],["^15",[1231,"^H",1167,536870919]],["^15",[1231,"^;","~u655b737a-ded7-4469-ab33-0a26e4c941fb",536870919]],["^15",[1232,"^Q","[[Type Alias]]",536870919]],["^15",[1232,"^O","^16",536870919]],["^15",[1232,"^F",1226,536870919]],["^15",[1232,"^X",1090,536870919]],["^15",[1232,"^V",1090,536870919]],["^15",[1232,"^U",1090,536870919]],["^15",[1232,"^U",1225,536870919]],["^15",[1232,"^H",1225,536870919]],["^15",[1232,"^;","~u655b737a-828a-4cde-a679-451af5af4585",536870919]],["^15",[1233,"^Q","[[Dynamically Sized Type]]",536870919]],["^15",[1233,"^O","^16",536870919]],["^15",[1233,"^F",1232,536870919]],["^15",[1233,"^X",1090,536870919]],["^15",[1233,"^V",1090,536870919]],["^15",[1233,"^U",1090,536870919]],["^15",[1233,"^U",1223,536870919]],["^15",[1233,"^H",1223,536870919]],["^15",[1233,"^;","~u655b737a-968e-4a50-8ad1-329a5d4dec92",536870919]],["^15",[1234,"^Q","Compound Types\nTypes that group multiple types into a single type. They are\n* [[Tuple]]\n* [[Array]]\n* [[Collection]]",536870919]],["^15",[1234,"^O","^16",536870919]],["^15",[1234,"^F",1231,536870919]],["^15",[1234,"^X",1090,536870919]],["^15",[1234,"^V",1090,536870919]],["^15",[1234,"^U",305,536870919]],["^15",[1234,"^U",1090,536870919]],["^15",[1234,"^U",1159,536870919]],["^15",[1234,"^U",1181,536870919]],["^15",[1234,"^H",305,536870919]],["^15",[1234,"^H",1159,536870919]],["^15",[1234,"^H",1181,536870919]],["^15",[1234,"^;","~u655b737a-97ec-4d27-a765-c55f2d5e6305",536870919]],["^15",[1235,"^3","- The names should follow snake_case and not camelCase or PascalCase. This is applied to all names, folder names, file names, variables, functions etc. However, it is not applied to things like type names where we need to follow CamelCase.",536870919]],["^15",[1235,"^17",1700492154162,536870919]],["^15",[1235,"^Z","Rust/pages/Default Linter Rule.md",536870919]],["^15",[1236,"^K",1700492154161,536870919]],["^15",[1236,"^[",1235,536870919]],["^15",[1236,"^@",false,536870919]],["^15",[1236,"^Y","default linter rule",536870919]],["^15",[1236,"^11","Default Linter Rule",536870919]],["^15",[1236,"^B",1700492154161,536870919]],["^15",[1236,"^;","~u655b737b-aa61-4229-8970-f3b7fcc4d9d3",536870920]],["^15",[1237,"^Q","The names should follow snake_case and not camelCase or PascalCase. This is applied to all names, folder names, file names, variables, functions etc. However, it is not applied to things like type names where we need to follow CamelCase.",536870919]],["^15",[1237,"^O","^16",536870919]],["^15",[1237,"^F",1236,536870919]],["^15",[1237,"^X",1236,536870919]],["^15",[1237,"^V",1236,536870919]],["^15",[1237,"^U",1236,536870919]],["^15",[1237,"^;","~u655b737a-ee4f-4ff6-ab21-947b6346905e",536870919]],["^15",[1238,"^3","- Rust can automatically convert a [[Reference Type]] of [[Data Type]] ``A`` into a reference of type ``B`` if the type ``A`` implements the ``Deref`` [[Trait]] and its ``deref()`` [[Method]] returns a value of type ``&B``. \n  This is how [[String]]'s ``&String`` is automatically converted into ``&str`` as the trait is implemented for ``String``.\n  So if a [[Variable]]/ [[Function]]/ [[Method]]/etc. requires ``&B`` or in this case ``&str`` then we can pass ``&A`` or ``&String`` and Rust would automatically coerce the reference into that type using the dereference trait.\n  \n  For ex.:\n  ```rust\n  fn yo(x: &str) {}\n  \n  fn main() {\n   let x = String::from(\"yo\");\n   yo(&x); //works\n  }\n  ```\n- Rust can follow the deref chain so if ``&A``->``&B`` is ``&A``->``&C``->``&B`` then coercion will still work.\n- Deref coercion is resolved at compile-time itself. So there is no runtime cost.",536870919]],["^15",[1238,"^17",1700492154175,536870919]],["^15",[1238,"^Z","Rust/pages/Deref Coercion.md",536870919]],["^15",[1239,"^K",1700492154174,536870919]],["^15",[1239,"^[",1238,536870919]],["^15",[1239,"^@",false,536870919]],["^15",[1239,"^Y","deref coercion",536870919]],["^15",[1239,"^11","Deref Coercion",536870919]],["^15",[1239,"^B",1700492154174,536870919]],["^15",[1239,"^;","~u656462fe-cdf1-450e-b64f-2d135de71de3",536870960]],["^15",[1240,"^Q","Rust can automatically convert a [[Reference Type]] of [[Data Type]] ``A`` into a reference of type ``B`` if the type ``A`` implements the ``Deref`` [[Trait]] and its ``deref()`` [[Method]] returns a value of type ``&B``. \nThis is how [[String]]'s ``&String`` is automatically converted into ``&str`` as the trait is implemented for ``String``.\nSo if a [[Variable]]/ [[Function]]/ [[Method]]/etc. requires ``&B`` or in this case ``&str`` then we can pass ``&A`` or ``&String`` and Rust would automatically coerce the reference into that type using the dereference trait.\n\nFor ex.:\n```rust\nfn yo(x: &str) {}\n\nfn main() {\n let x = String::from(\"yo\");\n yo(&x); //works\n}\n```",536870919]],["^15",[1240,"^O","^16",536870919]],["^15",[1240,"^F",1239,536870919]],["^15",[1240,"^X",1239,536870919]],["^15",[1240,"^V",1239,536870919]],["^15",[1240,"^U",80,536870919]],["^15",[1240,"^U",161,536870919]],["^15",[1240,"^U",163,536870919]],["^15",[1240,"^U",1065,536870919]],["^15",[1240,"^U",1073,536870919]],["^15",[1240,"^U",1090,536870919]],["^15",[1240,"^U",1091,536870919]],["^15",[1240,"^U",1239,536870919]],["^15",[1240,"^H",80,536870919]],["^15",[1240,"^H",161,536870919]],["^15",[1240,"^H",163,536870919]],["^15",[1240,"^H",1065,536870919]],["^15",[1240,"^H",1073,536870919]],["^15",[1240,"^H",1090,536870919]],["^15",[1240,"^H",1091,536870919]],["^15",[1240,"^;","~u655b737a-9087-4238-8307-01b204577db2",536870919]],["^15",[1241,"^Q","Rust can follow the deref chain so if ``&A``->``&B`` is ``&A``->``&C``->``&B`` then coercion will still work.",536870919]],["^15",[1241,"^O","^16",536870919]],["^15",[1241,"^F",1240,536870919]],["^15",[1241,"^X",1239,536870919]],["^15",[1241,"^V",1239,536870919]],["^15",[1241,"^U",1239,536870919]],["^15",[1241,"^;","~u655b737a-cdcf-4db9-8c6d-00761df1b647",536870919]],["^15",[1242,"^Q","Deref coercion is resolved at compile-time itself. So there is no runtime cost.",536870919]],["^15",[1242,"^O","^16",536870919]],["^15",[1242,"^F",1241,536870919]],["^15",[1242,"^X",1239,536870919]],["^15",[1242,"^V",1239,536870919]],["^15",[1242,"^U",1239,536870919]],["^15",[1242,"^;","~u655b737a-c5e8-4ba7-8811-8769c713d142",536870919]],["^15",[1243,"^3","alias:: DST\naka Unsized Type\n\n- Rust needs to know the size of any [[Data Type]] used at compile time. But there are some types like [[str]] (``str``) whose size can't be known at compile time but only at runtime, these are known as DSTs. \n  Like the size of 2 ``str``s, ``\"abc\"`` and ``\"x\"`` isn't the same, but they would be represented by the same data type. \n  Rust solves this by using special [[Reference Type]]s. That is, normal ``&T``s are just single values which are memory addresses, but DSTs are ``&T``s with atleast 2 values, a memory address value and a ``usize`` size. So, DSTs are a reference to a starting address of a contiguous segment of memory and the number of contiguous addresses used is the size of a DST. \n  Meaning ``&str`` is not a normal [[Reference Type]], but a special reference type which actually stores 2 values internally. \n  \n  Since the initial size can be easily calculated, and the memory address size is known at compile time, DSTs are possible.\n- DSTs are required for storing unfixed size types on the stack, for the heap we can already use [[Pointer]]s. So ``&str`` and ``Box<str>`` are both valid.\n- [[Trait]]s are DSTs too, and traits as [[Trait Object]]s are also DSTs, this is why we use ``Box<dyn <trait>>`` syntax. And this is why ``&dyn <trait>`` is valid syntax too.\n- ``Sized`` [[Trait]]\n  is applied to all [[Generic Type]]s implicitly, this is why we can't pass DSTs to normal [[Generic Type]]s.\n  Using ``?Sized`` Trait on any generic type lifts this limitation.\n-",536870919]],["^15",[1243,"^17",1700492154192,536870919]],["^15",[1243,"^Z","Rust/pages/Dynamically Sized Type.md",536870919]],["^15",[1244,"^5",80,536870960]],["^15",[1244,"^K",1700492154458,536870919]],["^15",[1244,"^@",false,536870919]],["^15",[1244,"^Y","str",536870919]],["^15",[1244,"^11","str",536870919]],["^15",[1244,"^B",1700492154458,536870919]],["^15",[1244,"^;","~u656462fe-a117-4b1e-8dcc-56bd9868518d",536870960]],["^15",[1245,"^Q","alias:: DST\naka Unsized Type\n\n",536870919]],["^15",[1245,"^O","^16",536870919]],["^15",[1245,"^1;",["^19",[]],536870919]],["^15",[1245,"^F",1223,536870919]],["^15",[1245,"^X",1223,536870919]],["^15",[1245,"^V",1223,536870919]],["^15",[1245,"^U",1172,536870919]],["^15",[1245,"^U",1223,536870919]],["^15",[1245,"^:",true,536870919]],["^15",[1245,"^?",["^ ","^18",["^19",["DST"]]],536870919]],["^15",[1245,"^J",["^18"],536870919]],["^15",[1245,"^4",["^ ","^18","DST"],536870919]],["^15",[1245,"^H",1172,536870919]],["^15",[1245,"^;","~u655b737a-2fc2-4a8b-8e53-e6c9660567c9",536870919]],["^15",[1246,"^Q","Rust needs to know the size of any [[Data Type]] used at compile time. But there are some types like [[str]] (``str``) whose size can't be known at compile time but only at runtime, these are known as DSTs. \nLike the size of 2 ``str``s, ``\"abc\"`` and ``\"x\"`` isn't the same, but they would be represented by the same data type. \nRust solves this by using special [[Reference Type]]s. That is, normal ``&T``s are just single values which are memory addresses, but DSTs are ``&T``s with atleast 2 values, a memory address value and a ``usize`` size. So, DSTs are a reference to a starting address of a contiguous segment of memory and the number of contiguous addresses used is the size of a DST. \nMeaning ``&str`` is not a normal [[Reference Type]], but a special reference type which actually stores 2 values internally. \n\nSince the initial size can be easily calculated, and the memory address size is known at compile time, DSTs are possible.",536870919]],["^15",[1246,"^O","^16",536870919]],["^15",[1246,"^F",1245,536870919]],["^15",[1246,"^X",1223,536870919]],["^15",[1246,"^V",1223,536870919]],["^15",[1246,"^U",1090,536870919]],["^15",[1246,"^U",1091,536870919]],["^15",[1246,"^U",1223,536870919]],["^15",[1246,"^U",1244,536870919]],["^15",[1246,"^H",1090,536870919]],["^15",[1246,"^H",1091,536870919]],["^15",[1246,"^H",1244,536870919]],["^15",[1246,"^;","~u655b737a-c843-4331-ae16-415ed4e58bac",536870919]],["^15",[1247,"^Q","DSTs are required for storing unfixed size types on the stack, for the heap we can already use [[Pointer]]s. So ``&str`` and ``Box<str>`` are both valid.",536870919]],["^15",[1247,"^O","^16",536870919]],["^15",[1247,"^F",1246,536870919]],["^15",[1247,"^X",1223,536870919]],["^15",[1247,"^V",1223,536870919]],["^15",[1247,"^U",1094,536870919]],["^15",[1247,"^U",1223,536870919]],["^15",[1247,"^H",1094,536870919]],["^15",[1247,"^;","~u655b737a-903b-48ca-af00-7e469c85e6db",536870919]],["^15",[1248,"^Q","[[Trait]]s are DSTs too, and traits as [[Trait Object]]s are also DSTs, this is why we use ``Box<dyn <trait>>`` syntax. And this is why ``&dyn <trait>`` is valid syntax too.",536870919]],["^15",[1248,"^O","^16",536870919]],["^15",[1248,"^F",1247,536870919]],["^15",[1248,"^X",1223,536870919]],["^15",[1248,"^V",1223,536870919]],["^15",[1248,"^U",1073,536870919]],["^15",[1248,"^U",1174,536870919]],["^15",[1248,"^U",1223,536870919]],["^15",[1248,"^H",1073,536870919]],["^15",[1248,"^H",1174,536870919]],["^15",[1248,"^;","~u655b737a-87c9-436d-b341-ce1d7d8dd5bf",536870919]],["^15",[1249,"^Q","~``Sized`` [[Trait]]\nis applied to all [[Generic Type]]s implicitly, this is why we can't pass DSTs to normal [[Generic Type]]s.\nUsing ``?Sized`` Trait on any generic type lifts this limitation.",536870919]],["^15",[1249,"^O","^16",536870919]],["^15",[1249,"^F",1248,536870919]],["^15",[1249,"^X",1223,536870919]],["^15",[1249,"^V",1223,536870919]],["^15",[1249,"^U",1073,536870919]],["^15",[1249,"^U",1087,536870919]],["^15",[1249,"^U",1223,536870919]],["^15",[1249,"^H",1073,536870919]],["^15",[1249,"^H",1087,536870919]],["^15",[1249,"^;","~u655b737a-7d7b-4396-84c7-9352f1ddde7f",536870919]],["^15",[1250,"^Q","",536870919]],["^15",[1250,"^O","^16",536870919]],["^15",[1250,"^F",1249,536870919]],["^15",[1250,"^X",1223,536870919]],["^15",[1250,"^V",1223,536870919]],["^15",[1250,"^U",1223,536870919]],["^15",[1250,"^;","~u655b737a-3951-4a43-9f81-148580208da9",536870919]],["^15",[1251,"^3","alias:: Enum\n\n- ``enum``\n  Short for enumerations, as they allow us to enumerate the possible variants of a defined [[Data Type]]. \n  \n  Syntax:\n  ``\n  enum <name>{ \n   <type names>\n  }\n  ``\n  For ex.:\n  ```rust\n  enum Size {\n   SMALL,\n   LARGE\n  }\n  fn main() {\n   let carSize: Size= Size::LARGE;\n  }\n  ```\n  Variants of an ``enum`` are namespaced under its identifier.\n- Variant of an ``enum`` can optionally also take a [[Function]] with some parameters.\n  This makes the function create an instance of an ``enum`` with the given variant and values provided to it.\n  \n  For ex.:\n  ```rust\n  enum X {\n      Y(i32, String, i32),\n      Z,\n  }\n  \n  fn main() {\n      let x = X::Y(2, String::from(\"yo\"), 5);\n      match x {\n          X::Y(value1, string, value2) => { \n              println!(\"{}\", value1); //to access\n          }\n          _ => {\n              println!(\"Invalid variant\");\n          }\n      } \n  }\n  ```\n  We use [[Pattern Matching]] to access an ``enum``s value, because it is not guaranteed what variant of an enum is stored in a variable.\n  \n  * This function can then also have named fields as parameters.\n  For ex.:\n  ```rust\n  enum X {\n      Y(i32, String, i32),\n      Z(x: i32),\n  }\n  \n  fn main() {\n      let x = X::Z(x: 2); //to instantiate\n      match x {\n          X::Y(value1, string, value2) => {\n              println!(\"{}\", value1);\n          }\n          X::Z {x} => { //to access\n              println!(\"{}\", x);\n          }\n      } \n  }\n  ```\n  Just usual [[Pattern Matching]].\n- [[Method]]\n  Enums can have methods too. \n  Methods of an ``enum`` apply to all its variants if they use ``self``.\n  \n  For ex.:\n  ```rust\n  enum X{\n   Y\n  }\n  \n  impl X {\n   fn yo() {}\n   fn yas(&self) {}\n  }\n  \n  fn main() {\n   let z= X::Y;\n   X::yo(); //for non-instance methods\n   z.yas(); //for instance methods\n  }\n  ```\n- [[Option Type]]\n- [[Result Type]]\n- Size of an Enum\n  The size of an enum is the same as the biggest variant of it, so if an enum had a variant ``X`` and then a variant ``Y(i32)`` then the size of the enum would be the same as an ``i32``. \n  The reason is pretty simple, an enum's value can only be any 1 of its variants, so the largest variant's size is the size of the enum itself.",536870919]],["^15",[1251,"^17",1700492154212,536870919]],["^15",[1251,"^Z","Rust/pages/Enumerated Type.md",536870919]],["^15",[1252,"^5",1066,536870919]],["^15",[1252,"^K",1700492154584,536870919]],["^15",[1252,"^[",1251,536870919]],["^15",[1252,"^@",false,536870919]],["^15",[1252,"^Y","enumerated type",536870919]],["^15",[1252,"^11","Enumerated Type",536870919]],["^15",[1252,"^?",["^ ","^18",["^19",["Enum"]]],536870919]],["^15",[1252,"^4",["^ ","^18","Enum"],536870919]],["^15",[1252,"^B",1700492154584,536870919]],["^15",[1252,"^;","~u655b737b-ad84-4fde-9dc0-0c21914b2a77",536870920]],["^15",[1253,"^K",1700492154320,536870919]],["^15",[1253,"^[",1369,536870920]],["^15",[1253,"^@",false,536870919]],["^15",[1253,"^Y","pattern matching",536870919]],["^15",[1253,"^11","Pattern Matching",536870919]],["^15",[1253,"^B",1700492154320,536870919]],["^15",[1253,"^;","~u656462fe-1947-4c12-a0a9-482f2a9639b6",536870960]],["^15",[1254,"^K",1700492154429,536870919]],["^15",[1254,"^[",1352,536870920]],["^15",[1254,"^@",false,536870919]],["^15",[1254,"^Y","option type",536870919]],["^15",[1254,"^11","Option Type",536870919]],["^15",[1254,"^B",1700492154429,536870919]],["^15",[1254,"^;","~u656462fe-9ccd-4d7b-92e9-6921ab6b7d15",536870954]],["^15",[1255,"^Q","alias:: Enum\n\n",536870919]],["^15",[1255,"^O","^16",536870919]],["^15",[1255,"^1;",["^19",[]],536870919]],["^15",[1255,"^F",1252,536870919]],["^15",[1255,"^X",1252,536870919]],["^15",[1255,"^V",1252,536870919]],["^15",[1255,"^U",1066,536870919]],["^15",[1255,"^U",1252,536870919]],["^15",[1255,"^:",true,536870919]],["^15",[1255,"^?",["^ ","^18",["^19",["Enum"]]],536870919]],["^15",[1255,"^J",["^18"],536870919]],["^15",[1255,"^4",["^ ","^18","Enum"],536870919]],["^15",[1255,"^H",1066,536870919]],["^15",[1255,"^;","~u655b737a-377e-4da1-84ed-3593b162f662",536870919]],["^15",[1256,"^Q","~``enum``\nShort for enumerations, as they allow us to enumerate the possible variants of a defined [[Data Type]]. \n\nSyntax:\n``\nenum <name>{ \n <type names>\n}\n``\nFor ex.:\n```rust\nenum Size {\n SMALL,\n LARGE\n}\nfn main() {\n let carSize: Size= Size::LARGE;\n}\n```\nVariants of an ``enum`` are namespaced under its identifier.",536870919]],["^15",[1256,"^O","^16",536870919]],["^15",[1256,"^F",1255,536870919]],["^15",[1256,"^X",1252,536870919]],["^15",[1256,"^V",1252,536870919]],["^15",[1256,"^U",1090,536870919]],["^15",[1256,"^U",1252,536870919]],["^15",[1256,"^H",1090,536870919]],["^15",[1256,"^;","~u655b737a-cb6c-4600-9007-5a149390afb5",536870919]],["^15",[1257,"^Q","Variant of an ``enum`` can optionally also take a [[Function]] with some parameters.\nThis makes the function create an instance of an ``enum`` with the given variant and values provided to it.\n\nFor ex.:\n```rust\nenum X {\n    Y(i32, String, i32),\n    Z,\n}\n\nfn main() {\n    let x = X::Y(2, String::from(\"yo\"), 5);\n    match x {\n        X::Y(value1, string, value2) => { \n            println!(\"{}\", value1); //to access\n        }\n        _ => {\n            println!(\"Invalid variant\");\n        }\n    } \n}\n```\nWe use [[Pattern Matching]] to access an ``enum``s value, because it is not guaranteed what variant of an enum is stored in a variable.\n\n* This function can then also have named fields as parameters.\nFor ex.:\n```rust\nenum X {\n    Y(i32, String, i32),\n    Z(x: i32),\n}\n\nfn main() {\n    let x = X::Z(x: 2); //to instantiate\n    match x {\n        X::Y(value1, string, value2) => {\n            println!(\"{}\", value1);\n        }\n        X::Z {x} => { //to access\n            println!(\"{}\", x);\n        }\n    } \n}\n```\nJust usual [[Pattern Matching]].",536870919]],["^15",[1257,"^O","^16",536870919]],["^15",[1257,"^F",1256,536870919]],["^15",[1257,"^X",1252,536870919]],["^15",[1257,"^V",1252,536870919]],["^15",[1257,"^U",163,536870919]],["^15",[1257,"^U",1252,536870919]],["^15",[1257,"^U",1253,536870919]],["^15",[1257,"^H",163,536870919]],["^15",[1257,"^H",1253,536870919]],["^15",[1257,"^;","~u655b737a-1a2e-4722-b72b-a674f4b652d6",536870919]],["^15",[1258,"^Q","[[Method]]\nEnums can have methods too. \nMethods of an ``enum`` apply to all its variants if they use ``self``.\n\nFor ex.:\n```rust\nenum X{\n Y\n}\n\nimpl X {\n fn yo() {}\n fn yas(&self) {}\n}\n\nfn main() {\n let z= X::Y;\n X::yo(); //for non-instance methods\n z.yas(); //for instance methods\n}\n```",536870919]],["^15",[1258,"^O","^16",536870919]],["^15",[1258,"^F",1257,536870919]],["^15",[1258,"^X",1252,536870919]],["^15",[1258,"^V",1252,536870919]],["^15",[1258,"^U",1065,536870919]],["^15",[1258,"^U",1252,536870919]],["^15",[1258,"^H",1065,536870919]],["^15",[1258,"^;","~u655b737a-21e4-4276-9964-83466b8b451a",536870919]],["^15",[1259,"^Q","[[Option Type]]",536870919]],["^15",[1259,"^O","^16",536870919]],["^15",[1259,"^F",1258,536870919]],["^15",[1259,"^X",1252,536870919]],["^15",[1259,"^V",1252,536870919]],["^15",[1259,"^U",1252,536870919]],["^15",[1259,"^U",1254,536870919]],["^15",[1259,"^H",1254,536870919]],["^15",[1259,"^;","~u655b737a-90b9-4977-84ac-57e7a6d5bd42",536870919]],["^15",[1260,"^Q","[[Result Type]]",536870919]],["^15",[1260,"^O","^16",536870919]],["^15",[1260,"^F",1259,536870919]],["^15",[1260,"^X",1252,536870919]],["^15",[1260,"^V",1252,536870919]],["^15",[1260,"^U",1098,536870919]],["^15",[1260,"^U",1252,536870919]],["^15",[1260,"^H",1098,536870919]],["^15",[1260,"^;","~u655b737a-6f13-4154-80a9-dcddccd05353",536870919]],["^15",[1261,"^Q","Size of an Enum\nThe size of an enum is the same as the biggest variant of it, so if an enum had a variant ``X`` and then a variant ``Y(i32)`` then the size of the enum would be the same as an ``i32``. \nThe reason is pretty simple, an enum's value can only be any 1 of its variants, so the largest variant's size is the size of the enum itself.",536870919]],["^15",[1261,"^O","^16",536870919]],["^15",[1261,"^F",1260,536870919]],["^15",[1261,"^X",1252,536870919]],["^15",[1261,"^V",1252,536870919]],["^15",[1261,"^U",1252,536870919]],["^15",[1261,"^;","~u655b737a-197e-44e8-a707-28e34fbe8488",536870919]],["^15",[1262,"^3","- All expressions in Rust return some value, if they don't explicitly return any value then the [[Unit Type]] is returned implicitly.",536870919]],["^15",[1262,"^17",1700492154269,536870919]],["^15",[1262,"^Z","Rust/pages/Expression.md",536870919]],["^15",[1263,"^K",1700492154268,536870919]],["^15",[1263,"^[",1262,536870919]],["^15",[1263,"^@",false,536870919]],["^15",[1263,"^Y","expression",536870919]],["^15",[1263,"^11","Expression",536870919]],["^15",[1263,"^B",1700492154268,536870919]],["^15",[1263,"^;","~u655b737b-5265-4e79-a4a2-620d27f2fcf8",536870920]],["^15",[1264,"^K",1700492154693,536870919]],["^15",[1264,"^[",1530,536870920]],["^15",[1264,"^@",false,536870919]],["^15",[1264,"^Y","unit type",536870919]],["^15",[1264,"^11","Unit Type",536870919]],["^15",[1264,"^B",1700492154693,536870919]],["^15",[1264,"^;","~u656462fe-7d7b-4414-b3bd-c483a285990f",536870958]],["^15",[1265,"^Q","All expressions in Rust return some value, if they don't explicitly return any value then the [[Unit Type]] is returned implicitly.",536870919]],["^15",[1265,"^O","^16",536870919]],["^15",[1265,"^F",1263,536870919]],["^15",[1265,"^X",1263,536870919]],["^15",[1265,"^V",1263,536870919]],["^15",[1265,"^U",1263,536870919]],["^15",[1265,"^U",1264,536870919]],["^15",[1265,"^H",1264,536870919]],["^15",[1265,"^;","~u655b737a-0f4e-400f-9f65-2d48ed7a19fa",536870919]],["^15",[1266,"^3","- Read file to [[String]]\n  \n  For ex.:\n  ```rust\n  use std::fs;\n  use std::io;\n   \n  fn read_username_from_file() -> Result<String, io::Error> {\n      fs::read_to_string(\"hello.txt\")\n  }\n  ```\n-",536870919]],["^15",[1266,"^17",1700492154277,536870919]],["^15",[1266,"^Z","Rust/pages/File.md",536870919]],["^15",[1267,"^K",1700492154276,536870919]],["^15",[1267,"^[",1266,536870919]],["^15",[1267,"^@",false,536870919]],["^15",[1267,"^Y","file",536870919]],["^15",[1267,"^11","File",536870919]],["^15",[1267,"^B",1700492154276,536870919]],["^15",[1267,"^;","~u655b737b-d456-4866-807e-e6b1cc18e258",536870920]],["^15",[1268,"^Q","Read file to [[String]]\n\nFor ex.:\n```rust\nuse std::fs;\nuse std::io;\n \nfn read_username_from_file() -> Result<String, io::Error> {\n    fs::read_to_string(\"hello.txt\")\n}\n```",536870919]],["^15",[1268,"^O","^16",536870919]],["^15",[1268,"^F",1267,536870919]],["^15",[1268,"^X",1267,536870919]],["^15",[1268,"^V",1267,536870919]],["^15",[1268,"^U",80,536870919]],["^15",[1268,"^U",1267,536870919]],["^15",[1268,"^H",80,536870919]],["^15",[1268,"^;","~u655b737a-8cb2-48b7-a9e7-da18492483a3",536870919]],["^15",[1269,"^Q","",536870919]],["^15",[1269,"^O","^16",536870919]],["^15",[1269,"^F",1268,536870919]],["^15",[1269,"^X",1267,536870919]],["^15",[1269,"^V",1267,536870919]],["^15",[1269,"^U",1267,536870919]],["^15",[1269,"^;","~u655b737a-c3d9-4762-bbb9-cddedf1c6480",536870919]],["^15",[1270,"^3","- We can define [[Method]]s and [[Trait]] methods with same names for a [[Data Type]] as long as they aren’t defined in same [[Scope]]. Then we call them with their full syntax. \n  \n  For ex.:\n  ```rust\n  struct Human {}\n  \n  trait Pilot {\n      fn fly();\n  }\n   \n  trait Wizard {\n      fn fly(&self);\n  }\n    \n  impl Pilot for Human {\n      fn fly() {\n          println!(\"This is your captain speaking.\");\n      }\n  }\n   \n  impl Wizard for Human {\n      fn fly(&self) {\n          println!(\"Up!\");\n      }\n  }\n   \n  impl Human {\n      fn fly(&self) {\n          println!(\"*waving arms furiously*\");\n      }\n  }\n  \n  fn main() {\n   let x= Human{};\n   x.fly(); //prints waving arms furiously\n   Wizard::fly(&x); //prints up\n   <Human as Pilot>::fly(); //prints This is your captain speaking\n  }\n  ```\n  Since ``fly()`` is ambiguous, Rust defaults to calling the [[Method]] on the [[Data Type]] directly, if it is not available then that's an error. \n  We have to explicitly call the [[Method]] that we wish to invoke in ambiguities like these. \n  Methods that take ``self`` as a parameter can be explicitly given an instance, given the [[Data Type]] of instance implements the type for which the method is called. \n  \n  In case of [[Method]]s without ``self`` we would need to [[Cast]] the [[Data Type]] , we can do so using [[as]].",536870919]],["^15",[1270,"^17",1700492154287,536870919]],["^15",[1270,"^Z","Rust/pages/Fully Qualified Syntax For Disambiguation.md",536870919]],["^15",[1271,"^K",1700492154287,536870919]],["^15",[1271,"^[",1270,536870919]],["^15",[1271,"^@",false,536870919]],["^15",[1271,"^Y","fully qualified syntax for disambiguation",536870919]],["^15",[1271,"^11","Fully Qualified Syntax For Disambiguation",536870919]],["^15",[1271,"^B",1700492154287,536870919]],["^15",[1271,"^;","~u655b737b-894f-4e44-8669-1e9404474008",536870920]],["^15",[1272,"^Q","We can define [[Method]]s and [[Trait]] methods with same names for a [[Data Type]] as long as they aren’t defined in same [[Scope]]. Then we call them with their full syntax. \n\nFor ex.:\n```rust\nstruct Human {}\n\ntrait Pilot {\n    fn fly();\n}\n \ntrait Wizard {\n    fn fly(&self);\n}\n  \nimpl Pilot for Human {\n    fn fly() {\n        println!(\"This is your captain speaking.\");\n    }\n}\n \nimpl Wizard for Human {\n    fn fly(&self) {\n        println!(\"Up!\");\n    }\n}\n \nimpl Human {\n    fn fly(&self) {\n        println!(\"*waving arms furiously*\");\n    }\n}\n\nfn main() {\n let x= Human{};\n x.fly(); //prints waving arms furiously\n Wizard::fly(&x); //prints up\n <Human as Pilot>::fly(); //prints This is your captain speaking\n}\n```\nSince ``fly()`` is ambiguous, Rust defaults to calling the [[Method]] on the [[Data Type]] directly, if it is not available then that's an error. \nWe have to explicitly call the [[Method]] that we wish to invoke in ambiguities like these. \nMethods that take ``self`` as a parameter can be explicitly given an instance, given the [[Data Type]] of instance implements the type for which the method is called. \n\nIn case of [[Method]]s without ``self`` we would need to [[Cast]] the [[Data Type]] , we can do so using [[as]].",536870919]],["^15",[1272,"^O","^16",536870919]],["^15",[1272,"^F",1271,536870919]],["^15",[1272,"^X",1271,536870919]],["^15",[1272,"^V",1271,536870919]],["^15",[1272,"^U",345,536870919]],["^15",[1272,"^U",1065,536870919]],["^15",[1272,"^U",1073,536870919]],["^15",[1272,"^U",1090,536870919]],["^15",[1272,"^U",1149,536870919]],["^15",[1272,"^U",1150,536870919]],["^15",[1272,"^U",1271,536870919]],["^15",[1272,"^H",345,536870919]],["^15",[1272,"^H",1065,536870919]],["^15",[1272,"^H",1073,536870919]],["^15",[1272,"^H",1090,536870919]],["^15",[1272,"^H",1149,536870919]],["^15",[1272,"^H",1150,536870919]],["^15",[1272,"^;","~u655b737a-658e-446a-9b78-4f84e3c840f0",536870919]],["^15",[1273,"^3","- ``join!``\n  We can execute multiple futures with ``join!(…)`` or ``try_join!(…)``. The try variant just drops all futures if a future returns an ``Err`` [[Result Type]].\n- ``select!``\n  It looks much like ``Match`` from [[Pattern Matching]], each arm in a ``select!`` accepts a ``<pattern> = <expression> => <code>``, where expression is a Future that implements the ``Unpin`` and ``FusedFuture`` [[Trait]]s. \n  In a ``select!``, each future is concurrently ran (meaning all futures are polled, if a future waits, another is continued and so on), and whichever future finishes first returns its value, stops all the other futures and the code corresponding it is executed.\n  \n  For ex.:\n  ```rust\n  use futures::{\n      future::FutureExt, // for `.fuse()`\n      pin_mut,\n      select,\n     future::ready\n  };\n   \n  async fn task_one() { /* ... */ }\n  async fn task_two() { /* ... */ }\n   \n  async fn race_tasks() {\n      let t1 = task_one().fuse();\n      let t2 = task_two().fuse();\n   \n      pin_mut!(t1, t2);\n   \n      select! {\n          () = t1 => println!(\"task one completed first\"),\n          () = t2 => println!(\"task two completed first\"),\n      }\n  }\n  \n  async fn count() {\n      let mut a_fut = future::ready(4); //future::ready already implements FusedFuture and Unpin\n      let mut b_fut = future::ready(6);\n      let mut total = 0;\n  \n      loop {\n          select! {\n              a = a_fut => total += a, //assign returned value to a \n              b = b_fut => total += b,\n              complete => break, //ran if all futures are completed, as would be case in a loop\n              default => unreachable!(), // never runs (futures are ready, then complete)\n          };\n      }\n      assert_eq!(total, 10);\n  }\n  ``` \n  ``FusedFuture`` is necessary in ``select!`` as it can be looped over, when a ``select!`` is looped over, it continues the other futures which are not completed, this is why ``complete`` is a keyword in ``select!``, it's code is ran if all the futures are completed and we are still looping over it. ``default`` on the other hand is ran if no future has immediately returned, it's code is ran if no future is completed yet.\n  \n  [[Pinning]] is necessary with ``select!`` as the futures aren't taken by value, but by mutable [[Reference Type]] by ``select!`` and are continued, this requires their values to not move around between each ``select!`` call in a [[Loop]].\n  \n  * ``Fuse::terminated()`` returns a ``FutureUnordered`` that is a Future which is already completed and terminated, but we can pass it a new future later and it will continue it. \n  Here [Docs](https://rust-lang.github.io/async-book/06_multiple_futures/03_select.html#concurrent-tasks-in-a-select-loop-with-fuse-and-futuresunordered).",536870919]],["^15",[1273,"^17",1700492154321,536870919]],["^15",[1273,"^Z","Rust/pages/Future.md",536870919]],["^15",[1274,"^K",1700492154321,536870919]],["^15",[1274,"^[",1381,536870920]],["^15",[1274,"^@",false,536870919]],["^15",[1274,"^Y","pinning",536870919]],["^15",[1274,"^11","Pinning",536870919]],["^15",[1274,"^B",1700492154321,536870919]],["^15",[1274,"^;","~u655b737b-46f9-41c0-8136-6917744237f2",536870920]],["^15",[1275,"^Q","~``join!``\nWe can execute multiple futures with ``join!(…)`` or ``try_join!(…)``. The try variant just drops all futures if a future returns an ``Err`` [[Result Type]].",536870919]],["^15",[1275,"^O","^16",536870919]],["^15",[1275,"^F",1100,536870919]],["^15",[1275,"^X",1100,536870919]],["^15",[1275,"^V",1100,536870919]],["^15",[1275,"^U",1098,536870919]],["^15",[1275,"^U",1100,536870919]],["^15",[1275,"^H",1098,536870919]],["^15",[1275,"^;","~u655b737a-dfc0-4fb4-bd16-d22b2df85474",536870919]],["^15",[1276,"^Q","~``select!``\nIt looks much like ``Match`` from [[Pattern Matching]], each arm in a ``select!`` accepts a ``<pattern> = <expression> => <code>``, where expression is a Future that implements the ``Unpin`` and ``FusedFuture`` [[Trait]]s. \nIn a ``select!``, each future is concurrently ran (meaning all futures are polled, if a future waits, another is continued and so on), and whichever future finishes first returns its value, stops all the other futures and the code corresponding it is executed.\n\nFor ex.:\n```rust\nuse futures::{\n    future::FutureExt, // for `.fuse()`\n    pin_mut,\n    select,\n   future::ready\n};\n \nasync fn task_one() { /* ... */ }\nasync fn task_two() { /* ... */ }\n \nasync fn race_tasks() {\n    let t1 = task_one().fuse();\n    let t2 = task_two().fuse();\n \n    pin_mut!(t1, t2);\n \n    select! {\n        () = t1 => println!(\"task one completed first\"),\n        () = t2 => println!(\"task two completed first\"),\n    }\n}\n\nasync fn count() {\n    let mut a_fut = future::ready(4); //future::ready already implements FusedFuture and Unpin\n    let mut b_fut = future::ready(6);\n    let mut total = 0;\n\n    loop {\n        select! {\n            a = a_fut => total += a, //assign returned value to a \n            b = b_fut => total += b,\n            complete => break, //ran if all futures are completed, as would be case in a loop\n            default => unreachable!(), // never runs (futures are ready, then complete)\n        };\n    }\n    assert_eq!(total, 10);\n}\n``` \n``FusedFuture`` is necessary in ``select!`` as it can be looped over, when a ``select!`` is looped over, it continues the other futures which are not completed, this is why ``complete`` is a keyword in ``select!``, it's code is ran if all the futures are completed and we are still looping over it. ``default`` on the other hand is ran if no future has immediately returned, it's code is ran if no future is completed yet.\n\n[[Pinning]] is necessary with ``select!`` as the futures aren't taken by value, but by mutable [[Reference Type]] by ``select!`` and are continued, this requires their values to not move around between each ``select!`` call in a [[Loop]].\n\n* ``Fuse::terminated()`` returns a ``FutureUnordered`` that is a Future which is already completed and terminated, but we can pass it a new future later and it will continue it. \nHere [Docs](https://rust-lang.github.io/async-book/06_multiple_futures/03_select.html#concurrent-tasks-in-a-select-loop-with-fuse-and-futuresunordered).",536870919]],["^15",[1276,"^O","^16",536870919]],["^15",[1276,"^F",1275,536870919]],["^15",[1276,"^X",1100,536870919]],["^15",[1276,"^V",1100,536870919]],["^15",[1276,"^U",300,536870919]],["^15",[1276,"^U",1073,536870919]],["^15",[1276,"^U",1091,536870919]],["^15",[1276,"^U",1100,536870919]],["^15",[1276,"^U",1253,536870919]],["^15",[1276,"^U",1274,536870919]],["^15",[1276,"^H",300,536870919]],["^15",[1276,"^H",1073,536870919]],["^15",[1276,"^H",1091,536870919]],["^15",[1276,"^H",1253,536870919]],["^15",[1276,"^H",1274,536870919]],["^15",[1276,"^;","~u655b737a-b7e3-473b-8bf7-26d9b00c87e1",536870919]],["^15",[1277,"^3","- Just like other langs, rust supports Generics. \n  They are simply abstract [[Data Type]]s that act as stand-ins for more concrete types defined elsewhere. The benefit is that we get a type definition that allows multiple [[Data Type]]s in the same place. \n  Rust's powerful compiler requires us to only use features allowed by the type definition, through [[Trait]]s. \n  \n  For ex.: \n  ```rust\n  fn largest<T>(list: &[T]) -> &T {\n      let mut largest = &list[0];\n  \n      for item in list {\n          if item > largest {\n              largest = item;\n          }\n      }\n  \n      largest\n  }\n  \n  fn main() {\n       let number_list = vec![34, 50, 25, 100, 65];\n  \n      let result = largest(&number_list); //Rust can infer the correct type for T automatically\n  }\n  ```\n  Whilst a correct example of a Generic Type, fails to compile. This is because it is not guaranteed that every concrete type that will replace T will implement the ``>`` [[Operator]] (greater than).\n  Rust allows us to restrict the usage of items like ``largest`` [[Function]] here to only types that will implement this behavior, this means the call-site will fail to call the function, to do so we use [[Trait]]s, so here we make the function like so\n  \n  ```rust\n  fn largest<T: PartialOrd>(list: &[T]) -> &T {\n      let mut largest = &list[0];\n  \n      for item in list {\n          if item > largest {\n              largest = item;\n          }\n      }\n  \n      largest\n  }\n  ```\n  \n  And this says that concrete types for T must implement the ``std::cmp::PartialOrd`` [[Trait]].\n- Generics can be used anywhere we have any definition, be it [[Function]]s, [[Struct]]s, [[Enum]]s, [[Method]]s, [[Trait]]s etc.\n- General Generic Syntax\n  For [[Function]]s / [[Method]]s \n  ``\n  fn <fn name><<lifetime><generic name 1>: Trait 1 + Trait 2 +,...,+ Trait n = <Optional Type>, <lifetime><generic name 2>: Trait 1 + Trait 2 +,...,+ Trait n = <Optional Type>,....,<lifetime><generic name k>: Trait 1 + Trait 2 +,...,+ Trait n = <Optional Type>>(<params>) -> <Return Type, default is Unit Type> { \n  ...\n  }\n  ``\n  And the other definitions are kind of the same. \n  Here [[Lifetime]]s and [[Trait]]s are optional but restrict usage of the function with only types that satisfy the requirements.\n  Multiple ``trait``s are defined with the ``+`` [[Operator]]. \n  \n  * There's another syntax specific to [[Function]]s/ [[Method]]s to make this definition soup more readable. It uses the ``where`` keyword and is hence called the *Where Clause*.\n  \n  Syntax\n  ``\n  fn <fn name><<generic name 1>, <generic name 2>...<<generic name n>>(<params>) -> <Return Type> where <generic name 1> : <traits>, <generic name 2>: <traits>, <generic name n>:<traits> { }\n  ``\n  \n  ```rust\n  //fn yo<T: X, R: X+Y>(…) -> String {…}\n  //can be written as\n  \n  fn yo<T,R>(…)-> String \n  where T: X,\n  \tR: X+Y \n  { } \n  ```\n- [[Struct]]s and [[Enum]]s \n  \n  For ex.:\n  ```rust\n  struct X<T,K> {\n   x: T,\n   y: K,\n   z: T\n  }\n  \n  //And similarly for enums\n  enum A<T> {\n   Hello(T, i32),\n   No\n  }\n  \n  //and to use\n  fn main() {\n   let x= X{2,4.0,5}; //ok, infers the types as i32 and f64\n   let a= A::Hello(2,4); //ok\n  }\n  ```\n- [[Method]]s\n  \n  Using Generics in Methods and their implementation blocks allow us to define certain behavior only for certain concrete types. \n  \n  For ex.:\n  ```rust\n  struct X<T> {\n   x: T\n  }\n  \n  impl<T> X<T> {\n   fn yo(&self, value: T) {}\n  }\n  ```\n  Here we say ``impl`` will accept a generic and the same generic will be used for an instance of the ``X``. ``impl`` can only take a generic if it is applied to the [[Struct]]/ [[Enum]] as well. And the type after ``impl`` can take a generic only if ``impl`` takes a generic.\n  \n  So, \n  ```rust\n  //impl X<T> {...} is invalid as T is unknown\n  //impl<T> X{...} is invalid as X needs a type\n  impl X<i32>{ \n   fn naa(&self) { }\n  } //is valid because we simply define a concrete type of X\n  ```\n  \n  When we define a [[Method]] for ``X<T>`` then it is on every instance of every type of ``X``. But when we define it for ``X<i32>``, then the [[Method]] is only available on every instance of ``X`` of type ``i32``.\n  That is, for the above 2 examples combined, \n  \n  ```rust\n  struct X<T> {\n      x: T,\n  }\n  impl<T> X<T> {\n      fn yo(&self, value: T) {}\n  }\n  //impl X<T> {...} is invalid as T is unknown\n  //impl<T> X{...} is invalid as X needs a type\n  impl X<i32> {\n      fn naa(&self) {}\n  } //is valid because we simply define a concrete type of X\n  \n  fn main() {\n      let x = X { x: 4 };\n      let y = X { x: 2.0 };\n  \n      x.yo(2); //ok\n  \n      //x.yo(5.0); //error because T for X in x is i32, but here we are passing f64\n      //y.yo(3); //Similarly, this is also an error\n  \n      y.yo(4.0); //ok\n  \n      x.naa(); //ok\n  \n      //but\n      //y.naa(); //error as naa doesn't exist on the instance of X that isn't of type i32\n  }\n  \n  ```\n  \n  \n  * Methods theirselves can then have their own generics too, which are defined just like [[Function]]s.\n- Runtime Cost of Generics: 0\n  This is due to a process called *Monomorphization*. \n  During compilation, Rust compiler creates the explicit definitions for all [[Data Type]]s of a generic that are used in the code. This makes it as if we had declared each [[Function]] for a type separately. And the generic is replaced with concrete types at compile time itself. The resultant code is called [[Static Dispatch]], as the compiler knows what to call at compile-time itself.\n  \n  For ex.:\n  \n  ```rust\n  //This definition\n  struct X<T> {\n   x:T\n  }\n  \n  fn main() {\n   let x= X{2};\n   let y= X{4.0};\n  }\n  \n  //After compilation would become\n  /* \n  struct X_i32 {\n   x: i32\n  }\n  \n  struct X_f64{\n   x: f64\n  }\n  \n  fn main() {\n   let x = X_i32{2};\n   let y = X_f64{4.0};\n  }\n  */\n  ```\n- An example with Generic + [[Lifetime]] + [[Trait]]s + ``Trait Bound`` Syntax for a [[Function]] with [[Reference Type]]s \n  ```rust\n  use std::fmt::Display;\n  \n  fn longest_with_an_announcement<'a, T>(\n      x: &'a str,\n      y: &'a str,\n      ann: T,\n  ) -> &'a str\n  where\n      T: Display,\n  {\n      println!(\"Announcement! {}\", ann);\n      if x.len() > y.len() {\n          x\n      } else {\n          y\n      }\n  }\n  ```\n- There's a difference between a generic name and generic type.\n  For ex.:\n  ```rust\n  use std::fmt::Display;\n  trait X<T>{\n      fn whoa(&self, x:T);\n  }\n  \n  struct A{}\n  \n  impl<i32:Display> X<i32> for A {\n      fn whoa(&self, x: i32) {\n          println!(\"tf {}\", x);\n      }\n  }\n  \n  fn main() {\n      let a= A{};\n      a.whoa(2); //as expected\n      a.whoa(\"hm\"); //is it weird ?\n  } //works!\n  ```\n  Here we may think ``i32`` is the [[Number]] ``i32`` but in-fact it is just a name for the generic type. The definition for conditionally implementing ``X<i32>`` for [[Trait]] ``A`` here is ``impl X<i32> for A{...}``.\n- Default Type Parameters\n  We can define default [[Data Type]] for generics if they aren’t given with the type annotations and aren't inferable automatically. They are only applicable for generics on [[Struct]]s, [[Enum]]s or [[Trait]]s. \n  \n  For ex.:\n  ```rust\n  struct X<T = i32> {}\n  \n  struct Y<T> {}\n  \n  impl X { //takes T as i32 automatically.\n      fn yo(&self) {}\n  }\n  \n  /* impl Y {\n      fn yo(&self) {}\n  }\n  // error as T needs to be defined for Y\n  */ \n  ```\n-",536870919]],["^15",[1277,"^17",1700492154372,536870919]],["^15",[1277,"^Z","Rust/pages/Generic Type.md",536870919]],["^15",[1278,"^K",1700492154372,536870919]],["^15",[1278,"^@",false,536870919]],["^15",[1278,"^Y","static dispatch",536870919]],["^15",[1278,"^11","Static Dispatch",536870919]],["^15",[1278,"^B",1700492154372,536870919]],["^15",[1278,"^;","~u655b737b-84b5-469e-a5d2-c5c47eaac8eb",536870920]],["^15",[1279,"^Q","There's a difference between a generic name and generic type.\nFor ex.:\n```rust\nuse std::fmt::Display;\ntrait X<T>{\n    fn whoa(&self, x:T);\n}\n\nstruct A{}\n\nimpl<i32:Display> X<i32> for A {\n    fn whoa(&self, x: i32) {\n        println!(\"tf {}\", x);\n    }\n}\n\nfn main() {\n    let a= A{};\n    a.whoa(2); //as expected\n    a.whoa(\"hm\"); //is it weird ?\n} //works!\n```\nHere we may think ``i32`` is the [[Number]] ``i32`` but in-fact it is just a name for the generic type. The definition for conditionally implementing ``X<i32>`` for [[Trait]] ``A`` here is ``impl X<i32> for A{...}``.",536870919]],["^15",[1279,"^O","^16",536870919]],["^15",[1279,"^F",1283,536870919]],["^15",[1279,"^X",1087,536870919]],["^15",[1279,"^V",1087,536870919]],["^15",[1279,"^U",162,536870919]],["^15",[1279,"^U",1073,536870919]],["^15",[1279,"^U",1087,536870919]],["^15",[1279,"^H",162,536870919]],["^15",[1279,"^H",1073,536870919]],["^15",[1279,"^;","~u655b737a-f92c-4647-8a17-abc06ce446f8",536870919]],["^15",[1280,"^Q","Runtime Cost of Generics: 0\nThis is due to a process called *Monomorphization*. \nDuring compilation, Rust compiler creates the explicit definitions for all [[Data Type]]s of a generic that are used in the code. This makes it as if we had declared each [[Function]] for a type separately. And the generic is replaced with concrete types at compile time itself. The resultant code is called [[Static Dispatch]], as the compiler knows what to call at compile-time itself.\n\nFor ex.:\n\n```rust\n//This definition\nstruct X<T> {\n x:T\n}\n\nfn main() {\n let x= X{2};\n let y= X{4.0};\n}\n\n//After compilation would become\n/* \nstruct X_i32 {\n x: i32\n}\n\nstruct X_f64{\n x: f64\n}\n\nfn main() {\n let x = X_i32{2};\n let y = X_f64{4.0};\n}\n*/\n```",536870919]],["^15",[1280,"^O","^16",536870919]],["^15",[1280,"^F",1282,536870919]],["^15",[1280,"^X",1087,536870919]],["^15",[1280,"^V",1087,536870919]],["^15",[1280,"^U",163,536870919]],["^15",[1280,"^U",1087,536870919]],["^15",[1280,"^U",1090,536870919]],["^15",[1280,"^U",1278,536870919]],["^15",[1280,"^H",163,536870919]],["^15",[1280,"^H",1090,536870919]],["^15",[1280,"^H",1278,536870919]],["^15",[1280,"^;","~u655b737a-04e2-4fa4-b1e5-3784faebbc37",536870919]],["^15",[1281,"^Q","General Generic Syntax\nFor [[Function]]s / [[Method]]s \n``\nfn <fn name><<lifetime><generic name 1>: Trait 1 + Trait 2 +,...,+ Trait n = <Optional Type>, <lifetime><generic name 2>: Trait 1 + Trait 2 +,...,+ Trait n = <Optional Type>,....,<lifetime><generic name k>: Trait 1 + Trait 2 +,...,+ Trait n = <Optional Type>>(<params>) -> <Return Type, default is Unit Type> { \n...\n}\n``\nAnd the other definitions are kind of the same. \nHere [[Lifetime]]s and [[Trait]]s are optional but restrict usage of the function with only types that satisfy the requirements.\nMultiple ``trait``s are defined with the ``+`` [[Operator]]. \n\n* There's another syntax specific to [[Function]]s/ [[Method]]s to make this definition soup more readable. It uses the ``where`` keyword and is hence called the *Where Clause*.\n\nSyntax\n``\nfn <fn name><<generic name 1>, <generic name 2>...<<generic name n>>(<params>) -> <Return Type> where <generic name 1> : <traits>, <generic name 2>: <traits>, <generic name n>:<traits> { }\n``\n\n```rust\n//fn yo<T: X, R: X+Y>(…) -> String {…}\n//can be written as\n\nfn yo<T,R>(…)-> String \nwhere T: X,\n\tR: X+Y \n{ } \n```",536870919]],["^15",[1281,"^O","^16",536870919]],["^15",[1281,"^F",1286,536870919]],["^15",[1281,"^X",1087,536870919]],["^15",[1281,"^V",1087,536870919]],["^15",[1281,"^U",163,536870919]],["^15",[1281,"^U",339,536870919]],["^15",[1281,"^U",1065,536870919]],["^15",[1281,"^U",1073,536870919]],["^15",[1281,"^U",1087,536870919]],["^15",[1281,"^U",1101,536870919]],["^15",[1281,"^H",163,536870919]],["^15",[1281,"^H",339,536870919]],["^15",[1281,"^H",1065,536870919]],["^15",[1281,"^H",1073,536870919]],["^15",[1281,"^H",1101,536870919]],["^15",[1281,"^;","~u655b737a-e496-4bf6-be69-cd78c5cea95e",536870919]],["^15",[1282,"^Q","[[Method]]s\n\nUsing Generics in Methods and their implementation blocks allow us to define certain behavior only for certain concrete types. \n\nFor ex.:\n```rust\nstruct X<T> {\n x: T\n}\n\nimpl<T> X<T> {\n fn yo(&self, value: T) {}\n}\n```\nHere we say ``impl`` will accept a generic and the same generic will be used for an instance of the ``X``. ``impl`` can only take a generic if it is applied to the [[Struct]]/ [[Enum]] as well. And the type after ``impl`` can take a generic only if ``impl`` takes a generic.\n\nSo, \n```rust\n//impl X<T> {...} is invalid as T is unknown\n//impl<T> X{...} is invalid as X needs a type\nimpl X<i32>{ \n fn naa(&self) { }\n} //is valid because we simply define a concrete type of X\n```\n\nWhen we define a [[Method]] for ``X<T>`` then it is on every instance of every type of ``X``. But when we define it for ``X<i32>``, then the [[Method]] is only available on every instance of ``X`` of type ``i32``.\nThat is, for the above 2 examples combined, \n\n```rust\nstruct X<T> {\n    x: T,\n}\nimpl<T> X<T> {\n    fn yo(&self, value: T) {}\n}\n//impl X<T> {...} is invalid as T is unknown\n//impl<T> X{...} is invalid as X needs a type\nimpl X<i32> {\n    fn naa(&self) {}\n} //is valid because we simply define a concrete type of X\n\nfn main() {\n    let x = X { x: 4 };\n    let y = X { x: 2.0 };\n\n    x.yo(2); //ok\n\n    //x.yo(5.0); //error because T for X in x is i32, but here we are passing f64\n    //y.yo(3); //Similarly, this is also an error\n\n    y.yo(4.0); //ok\n\n    x.naa(); //ok\n\n    //but\n    //y.naa(); //error as naa doesn't exist on the instance of X that isn't of type i32\n}\n\n```\n\n\n* Methods theirselves can then have their own generics too, which are defined just like [[Function]]s.",536870919]],["^15",[1282,"^O","^16",536870919]],["^15",[1282,"^F",1284,536870919]],["^15",[1282,"^X",1087,536870919]],["^15",[1282,"^V",1087,536870919]],["^15",[1282,"^U",163,536870919]],["^15",[1282,"^U",1064,536870919]],["^15",[1282,"^U",1065,536870919]],["^15",[1282,"^U",1066,536870919]],["^15",[1282,"^U",1087,536870919]],["^15",[1282,"^H",163,536870919]],["^15",[1282,"^H",1064,536870919]],["^15",[1282,"^H",1065,536870919]],["^15",[1282,"^H",1066,536870919]],["^15",[1282,"^;","~u655b737a-336d-4e02-ab17-12cff295c32a",536870919]],["^15",[1283,"^Q","An example with Generic + [[Lifetime]] + [[Trait]]s + ``Trait Bound`` Syntax for a [[Function]] with [[Reference Type]]s \n```rust\nuse std::fmt::Display;\n\nfn longest_with_an_announcement<'a, T>(\n    x: &'a str,\n    y: &'a str,\n    ann: T,\n) -> &'a str\nwhere\n    T: Display,\n{\n    println!(\"Announcement! {}\", ann);\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```",536870919]],["^15",[1283,"^O","^16",536870919]],["^15",[1283,"^F",1280,536870919]],["^15",[1283,"^X",1087,536870919]],["^15",[1283,"^V",1087,536870919]],["^15",[1283,"^U",163,536870919]],["^15",[1283,"^U",1073,536870919]],["^15",[1283,"^U",1087,536870919]],["^15",[1283,"^U",1091,536870919]],["^15",[1283,"^U",1101,536870919]],["^15",[1283,"^H",163,536870919]],["^15",[1283,"^H",1073,536870919]],["^15",[1283,"^H",1091,536870919]],["^15",[1283,"^H",1101,536870919]],["^15",[1283,"^;","~u655b737a-d368-4d08-9d21-556b08c47377",536870919]],["^15",[1284,"^Q","[[Struct]]s and [[Enum]]s \n\nFor ex.:\n```rust\nstruct X<T,K> {\n x: T,\n y: K,\n z: T\n}\n\n//And similarly for enums\nenum A<T> {\n Hello(T, i32),\n No\n}\n\n//and to use\nfn main() {\n let x= X{2,4.0,5}; //ok, infers the types as i32 and f64\n let a= A::Hello(2,4); //ok\n}\n```",536870919]],["^15",[1284,"^O","^16",536870919]],["^15",[1284,"^F",1281,536870919]],["^15",[1284,"^X",1087,536870919]],["^15",[1284,"^V",1087,536870919]],["^15",[1284,"^U",1064,536870919]],["^15",[1284,"^U",1066,536870919]],["^15",[1284,"^U",1087,536870919]],["^15",[1284,"^H",1064,536870919]],["^15",[1284,"^H",1066,536870919]],["^15",[1284,"^;","~u655b737a-d87b-4203-a03b-de20803ad6a0",536870919]],["^15",[1285,"^Q","Default Type Parameters\nWe can define default [[Data Type]] for generics if they aren’t given with the type annotations and aren't inferable automatically. They are only applicable for generics on [[Struct]]s, [[Enum]]s or [[Trait]]s. \n\nFor ex.:\n```rust\nstruct X<T = i32> {}\n\nstruct Y<T> {}\n\nimpl X { //takes T as i32 automatically.\n    fn yo(&self) {}\n}\n\n/* impl Y {\n    fn yo(&self) {}\n}\n// error as T needs to be defined for Y\n*/ \n```",536870919]],["^15",[1285,"^O","^16",536870919]],["^15",[1285,"^F",1279,536870919]],["^15",[1285,"^X",1087,536870919]],["^15",[1285,"^V",1087,536870919]],["^15",[1285,"^U",1064,536870919]],["^15",[1285,"^U",1066,536870919]],["^15",[1285,"^U",1073,536870919]],["^15",[1285,"^U",1087,536870919]],["^15",[1285,"^U",1090,536870919]],["^15",[1285,"^H",1064,536870919]],["^15",[1285,"^H",1066,536870919]],["^15",[1285,"^H",1073,536870919]],["^15",[1285,"^H",1090,536870919]],["^15",[1285,"^;","~u655b737a-f652-4241-aa4f-af4de747b515",536870919]],["^15",[1286,"^Q","Generics can be used anywhere we have any definition, be it [[Function]]s, [[Struct]]s, [[Enum]]s, [[Method]]s, [[Trait]]s etc.",536870919]],["^15",[1286,"^O","^16",536870919]],["^15",[1286,"^F",1288,536870919]],["^15",[1286,"^X",1087,536870919]],["^15",[1286,"^V",1087,536870919]],["^15",[1286,"^U",163,536870919]],["^15",[1286,"^U",1064,536870919]],["^15",[1286,"^U",1065,536870919]],["^15",[1286,"^U",1066,536870919]],["^15",[1286,"^U",1073,536870919]],["^15",[1286,"^U",1087,536870919]],["^15",[1286,"^H",163,536870919]],["^15",[1286,"^H",1064,536870919]],["^15",[1286,"^H",1065,536870919]],["^15",[1286,"^H",1066,536870919]],["^15",[1286,"^H",1073,536870919]],["^15",[1286,"^;","~u655b737a-e730-469f-af48-04072d08b729",536870919]],["^15",[1287,"^Q","",536870919]],["^15",[1287,"^O","^16",536870919]],["^15",[1287,"^F",1285,536870919]],["^15",[1287,"^X",1087,536870919]],["^15",[1287,"^V",1087,536870919]],["^15",[1287,"^U",1087,536870919]],["^15",[1287,"^;","~u655b737a-8195-4616-bdcd-bf0eb37f9acb",536870919]],["^15",[1288,"^Q","Just like other langs, rust supports Generics. \nThey are simply abstract [[Data Type]]s that act as stand-ins for more concrete types defined elsewhere. The benefit is that we get a type definition that allows multiple [[Data Type]]s in the same place. \nRust's powerful compiler requires us to only use features allowed by the type definition, through [[Trait]]s. \n\nFor ex.: \n```rust\nfn largest<T>(list: &[T]) -> &T {\n    let mut largest = &list[0];\n\n    for item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n     let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest(&number_list); //Rust can infer the correct type for T automatically\n}\n```\nWhilst a correct example of a Generic Type, fails to compile. This is because it is not guaranteed that every concrete type that will replace T will implement the ``>`` [[Operator]] (greater than).\nRust allows us to restrict the usage of items like ``largest`` [[Function]] here to only types that will implement this behavior, this means the call-site will fail to call the function, to do so we use [[Trait]]s, so here we make the function like so\n\n```rust\nfn largest<T: PartialOrd>(list: &[T]) -> &T {\n    let mut largest = &list[0];\n\n    for item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n```\n\nAnd this says that concrete types for T must implement the ``std::cmp::PartialOrd`` [[Trait]].",536870919]],["^15",[1288,"^O","^16",536870919]],["^15",[1288,"^F",1087,536870919]],["^15",[1288,"^X",1087,536870919]],["^15",[1288,"^V",1087,536870919]],["^15",[1288,"^U",163,536870919]],["^15",[1288,"^U",339,536870919]],["^15",[1288,"^U",1073,536870919]],["^15",[1288,"^U",1087,536870919]],["^15",[1288,"^U",1090,536870919]],["^15",[1288,"^H",163,536870919]],["^15",[1288,"^H",339,536870919]],["^15",[1288,"^H",1073,536870919]],["^15",[1288,"^H",1090,536870919]],["^15",[1288,"^;","~u655b737a-3a28-4a74-bd35-10ddb71b5585",536870919]],["^15",[1289,"^3","- ``HashMap<K,V>``\n  Defined in the [[Standard Library]], this [[Struct]] provides an implementation of a hashmap, or hashtable etc. from other languages where the Key is *hashed* and stored and the value is also stored with it. The benefit of this [[Data Structure]] is efficient search of the key.\n  \n  For ex.:\n  ```rust\n    use std::collections::HashMap;\n  \n  fn main() {\n       let mut scores = HashMap::new();\n      scores.insert(String::from(\"Blue\"), 10);\n     let team_name= String::from(\"Blue\");\n      let score = scores.get(&team_name).copied().unwrap_or(0);\n  }\n  ```\n  \n  Here ``.copied()`` is a [[Method]] on the [[Option Type]] which takes ``Option<&V>`` and returns an ``Option<V>`` by [[Copy or Move]]ing its value and finally [[Unwrap]] unwraps the ``Option`` and returns a 0 if it is ``None``.\n- Getting/Setting values in the HashMap follows the [[Ownership]] rules, this is why it is recommended to use [[Reference Type]]s.\n- Inserting\n  If a key exists then its value is overwritten. If  we want to check before inserting we can use the ``.entry`` method,\n  For ex.:\n      ```rust\n  let mut scores = HashMap::new();\n  scores.insert(String::from(\"Blue\"), 10);\n   let insertedValue= scores.entry(String::from(\"Yellow\")).or_insert(50);\n  \n  ```\n  Here ``.entry()`` returns an [[Enum]] ``Entry`` which defines if the key exists or not. The Entry enum also defines a few [[Method]]s and one of them is ``.or_insert(<V>)``, which inserts the key and the value if the key doesn’t exist otherwise does nothing. Either way, ``.or_insert`` returns a mutable [[Reference Type]] of the value to the key.\n- Some other methods\n  For ex.:\n  ```rust\n  use std::collections::HashMap;\n   \n  let teams = vec![String::from(\"Blue\"), String::from(\"Yellow\")];\n  let initial_scores = vec![10, 50];\n   \n  let mut scores: HashMap<_, _> =\n  teams.into_iter().zip(initial_scores.into_iter()).collect();\n  ```\n  ``.zip`` takes 2 [[Iterator]]s and pairs each value at the same index of them into a [[Tuple]] and ``.collect`` collects the tuples and then returns a required type which is HashMap here. Since collect needs a type to know what to return to, and HashMap needs types to define K and V, Rust allows us to use ``_`` the Placeholder type [[Operator]] for the [[Generic Type]]s. Then it infers the correct types.\n-",536870919]],["^15",[1289,"^17",1700492154391,536870919]],["^15",[1289,"^Z","Rust/pages/HashMap.md",536870919]],["^15",[1290,"^Q","~``HashMap<K,V>``\nDefined in the [[Standard Library]], this [[Struct]] provides an implementation of a hashmap, or hashtable etc. from other languages where the Key is *hashed* and stored and the value is also stored with it. The benefit of this [[Data Structure]] is efficient search of the key.\n\nFor ex.:\n```rust\n  use std::collections::HashMap;\n\nfn main() {\n     let mut scores = HashMap::new();\n    scores.insert(String::from(\"Blue\"), 10);\n   let team_name= String::from(\"Blue\");\n    let score = scores.get(&team_name).copied().unwrap_or(0);\n}\n```\n\nHere ``.copied()`` is a [[Method]] on the [[Option Type]] which takes ``Option<&V>`` and returns an ``Option<V>`` by [[Copy or Move]]ing its value and finally [[Unwrap]] unwraps the ``Option`` and returns a 0 if it is ``None``.",536870919]],["^15",[1290,"^O","^16",536870919]],["^15",[1290,"^F",1182,536870919]],["^15",[1290,"^X",1182,536870919]],["^15",[1290,"^V",1182,536870919]],["^15",[1290,"^U",246,536870919]],["^15",[1290,"^U",1064,536870919]],["^15",[1290,"^U",1065,536870919]],["^15",[1290,"^U",1096,536870919]],["^15",[1290,"^U",1171,536870919]],["^15",[1290,"^U",1173,536870919]],["^15",[1290,"^U",1182,536870919]],["^15",[1290,"^U",1254,536870919]],["^15",[1290,"^H",246,536870919]],["^15",[1290,"^H",1064,536870919]],["^15",[1290,"^H",1065,536870919]],["^15",[1290,"^H",1096,536870919]],["^15",[1290,"^H",1171,536870919]],["^15",[1290,"^H",1173,536870919]],["^15",[1290,"^H",1254,536870919]],["^15",[1290,"^;","~u655b737a-9dba-4ffa-aa82-8851ab953ca8",536870919]],["^15",[1291,"^Q","Getting/Setting values in the HashMap follows the [[Ownership]] rules, this is why it is recommended to use [[Reference Type]]s.",536870919]],["^15",[1291,"^O","^16",536870919]],["^15",[1291,"^F",1290,536870919]],["^15",[1291,"^X",1182,536870919]],["^15",[1291,"^V",1182,536870919]],["^15",[1291,"^U",1091,536870919]],["^15",[1291,"^U",1160,536870919]],["^15",[1291,"^U",1182,536870919]],["^15",[1291,"^H",1091,536870919]],["^15",[1291,"^H",1160,536870919]],["^15",[1291,"^;","~u655b737a-a95d-44cb-88b7-4ae0253b90ba",536870919]],["^15",[1292,"^Q","Inserting\nIf a key exists then its value is overwritten. If  we want to check before inserting we can use the ``.entry`` method,\nFor ex.:\n    ```rust\nlet mut scores = HashMap::new();\nscores.insert(String::from(\"Blue\"), 10);\n let insertedValue= scores.entry(String::from(\"Yellow\")).or_insert(50);\n\n```\nHere ``.entry()`` returns an [[Enum]] ``Entry`` which defines if the key exists or not. The Entry enum also defines a few [[Method]]s and one of them is ``.or_insert(<V>)``, which inserts the key and the value if the key doesn’t exist otherwise does nothing. Either way, ``.or_insert`` returns a mutable [[Reference Type]] of the value to the key.",536870919]],["^15",[1292,"^O","^16",536870919]],["^15",[1292,"^F",1291,536870919]],["^15",[1292,"^X",1182,536870919]],["^15",[1292,"^V",1182,536870919]],["^15",[1292,"^U",1065,536870919]],["^15",[1292,"^U",1066,536870919]],["^15",[1292,"^U",1091,536870919]],["^15",[1292,"^U",1182,536870919]],["^15",[1292,"^H",1065,536870919]],["^15",[1292,"^H",1066,536870919]],["^15",[1292,"^H",1091,536870919]],["^15",[1292,"^;","~u655b737a-4246-4f31-a275-d66db96e2076",536870919]],["^15",[1293,"^Q","Some other methods\nFor ex.:\n```rust\nuse std::collections::HashMap;\n \nlet teams = vec![String::from(\"Blue\"), String::from(\"Yellow\")];\nlet initial_scores = vec![10, 50];\n \nlet mut scores: HashMap<_, _> =\nteams.into_iter().zip(initial_scores.into_iter()).collect();\n```\n``.zip`` takes 2 [[Iterator]]s and pairs each value at the same index of them into a [[Tuple]] and ``.collect`` collects the tuples and then returns a required type which is HashMap here. Since collect needs a type to know what to return to, and HashMap needs types to define K and V, Rust allows us to use ``_`` the Placeholder type [[Operator]] for the [[Generic Type]]s. Then it infers the correct types.",536870919]],["^15",[1293,"^O","^16",536870919]],["^15",[1293,"^F",1292,536870919]],["^15",[1293,"^X",1182,536870919]],["^15",[1293,"^V",1182,536870919]],["^15",[1293,"^U",339,536870919]],["^15",[1293,"^U",1087,536870919]],["^15",[1293,"^U",1159,536870919]],["^15",[1293,"^U",1161,536870919]],["^15",[1293,"^U",1182,536870919]],["^15",[1293,"^H",339,536870919]],["^15",[1293,"^H",1087,536870919]],["^15",[1293,"^H",1159,536870919]],["^15",[1293,"^H",1161,536870919]],["^15",[1293,"^;","~u655b737a-c3b8-462e-b033-8b2d43d121dc",536870919]],["^15",[1294,"^Q","",536870919]],["^15",[1294,"^O","^16",536870919]],["^15",[1294,"^F",1293,536870919]],["^15",[1294,"^X",1182,536870919]],["^15",[1294,"^V",1182,536870919]],["^15",[1294,"^U",1182,536870919]],["^15",[1294,"^;","~u655b737a-c13f-4ea5-9a87-6275020f2d2c",536870919]],["^15",[1295,"^3","- Mutating immutably borrowed values is disallowed by Rust due to the Borrow Checker Rules. However, it is possible to bypass them in [[unsafe]] Rust.\n  Many of Rust's concepts already use this pattern, such as ``for`` [[Loop]]s.",536870919]],["^15",[1295,"^17",1700492154401,536870919]],["^15",[1295,"^Z","Rust/pages/Interior Mutability Pattern.md",536870919]],["^15",[1296,"^K",1700492154401,536870919]],["^15",[1296,"^[",1582,536870920]],["^15",[1296,"^@",false,536870919]],["^15",[1296,"^Y","unsafe",536870919]],["^15",[1296,"^11","unsafe",536870919]],["^15",[1296,"^B",1700492154401,536870919]],["^15",[1296,"^;","~u655b737c-cb46-40fa-ad56-36bf7eede755",536870920]],["^15",[1297,"^Q","Mutating immutably borrowed values is disallowed by Rust due to the Borrow Checker Rules. However, it is possible to bypass them in [[unsafe]] Rust.\nMany of Rust's concepts already use this pattern, such as ``for`` [[Loop]]s.",536870919]],["^15",[1297,"^O","^16",536870919]],["^15",[1297,"^F",1118,536870919]],["^15",[1297,"^X",1118,536870919]],["^15",[1297,"^V",1118,536870919]],["^15",[1297,"^U",300,536870919]],["^15",[1297,"^U",1118,536870919]],["^15",[1297,"^U",1296,536870919]],["^15",[1297,"^H",300,536870919]],["^15",[1297,"^H",1296,536870919]],["^15",[1297,"^;","~u655b737a-072a-4f07-af63-b39ac738689d",536870919]],["^15",[1298,"^3","- In Rust, an iterator is a [[Trait]] that [[Loop]]s over the items of a sequence. \n  They are lazy, so until the next value is requested in a sequence, they don't iterate over it.\n  \n  For ex.:\n  ```rust\n  fn main() {\n  let list= vec![1,2,3];\n  let listIt = list.iter();\n  \n  for item in listIt {\n  \t//use item\n  }\n  \n  }\n  ```\n- ``Iterator`` [[Trait]]\n  Any [[Data Type]] that implements this trait, gets [[Method]]s such as ``.into_iter()`` and ``.iter()`` which return an iterator.\n  \n  This trait is defined like so\n  ```\n  pub trait Iterator {\n  type Item;\n  \n  fn next(&mut self) -> Option<Self::Item>;\n  // the other methods have default implementations \n  }\n  ```\n  Here, the ``type Item`` is an [[Associated Type]]. \n  So if our [[Data Type]] implements this trait then it must provide a type to ``Item`` and the ``next`` [[Method]] must be defined.\n  \n  The way it works is simple, ``next`` uses mutable [[Borrow]] to get the next value of the data type and then change the internal state of the iterator marking the current position. This is why iterators are exhaustive, i.e., if an iterator instance is created and the ``.next()`` called then the iterator will reach a terminal state and won't start over again. This is required behavior too, as the ``.next()`` returns an [[Option Type]] so it must return ``Some`` if there's a value or ``None`` if it is exhausted.\n  \n  For ex.:\n  ```rust\n  fn main() {\n      let list = vec![1, 2, 3];\n      let mut listIt = list.iter(); //Iterators change the internal state, so the variable must be mutable\n      let x: &i32 = &1220;\n      println!(\"{}\", listIt.next().unwrap_or(x));\n      println!(\"{}\", listIt.next().unwrap_or(x));\n      println!(\"{}\", listIt.next().unwrap_or(x));\n      println!(\"{}\", listIt.next().unwrap_or(x)); //prints 1220\n  }\n  \n  ```\n  \n  The ``Some()`` returns an immutable [[Reference Type]] to the value in the actual sequence container when we get an iterator with ``.iter()``. We can get mutqable references with ``.`iter_mut()`` and take [[Ownership]] of the values with ``.to_iter()`` so now the value is [[Copy or Move]]ed into the ``Some()``.\n  \n  * The ``for`` [[Loop]] doesn't need the [[Variable]] to be ``mut`` as it can internally do that.\n  For ex.:\n  ```rust\n  fn main() {\n    let list = vec![1, 2, 3];\n    let list_it= list.iter();\n   for item in list_it{\n     //works, doesn't need list_it to be mutable.\n   }\n  }\n  ```\n  \n  * Iterator Trait [[Method]]s that call ``.next()`` are called *Consuming Adaptor*s as they consume up the iterator.\n  On the contrary, we have *Iterator Adaptor*s, which are methods that don't consume up the iterator and instead produce different iterators. \n  For ex.:\n  ```rust\n  fn main() {\n    let list = vec![1, 2, 3];\n    let new_it= list.iter().map(|x| x + 1); // is an iterator that will take a value from list, apply the map closure, then  return the new value. \n  ```\n  using a [[Closure]]. \n  * ``.collect()`` on an iterator consumes it up and returns a Vector.\n  For ex.:\n  ```rust\n   let list = vec![1, 2, 3];\n   let collected_it : Vec<_> = list.iter().map(|x| x + 1).collect(); \n  }\n  ```\n  Using the ``placeholder`` type and [[Vector]].\n- Iterators vs [[Loop]]s\n  Iterators follow the *zero-cost abstraction principle* in Rust. \n  \"What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.” - Bjarne Stroustrup\n  \n  This basically means unlike loops, iterators will always be the most efficient ways of iterating over sequences. They will always be equal, if not faster, than raw loops. So it is recommended to use iterators wherever loops are concerned. This is because iterators are unrolled. Unrolling is an optimization that compilers perform by unwrapping fixed size loops into individual pieces of code, so if a loop runs 12 times then 12 similar definitions are created. This increases the binary size but allows the runtime to avoid bound checking, and other overheads associated with loops.\n-\n-",536870919]],["^15",[1298,"^17",1700492154429,536870919]],["^15",[1298,"^Z","Rust/pages/Iterator.md",536870919]],["^15",[1299,"^Q","In Rust, an iterator is a [[Trait]] that [[Loop]]s over the items of a sequence. \nThey are lazy, so until the next value is requested in a sequence, they don't iterate over it.\n\nFor ex.:\n```rust\nfn main() {\nlet list= vec![1,2,3];\nlet listIt = list.iter();\n\nfor item in listIt {\n\t//use item\n}\n\n}\n```",536870919]],["^15",[1299,"^O","^16",536870919]],["^15",[1299,"^F",1161,536870919]],["^15",[1299,"^X",1161,536870919]],["^15",[1299,"^V",1161,536870919]],["^15",[1299,"^U",300,536870919]],["^15",[1299,"^U",1073,536870919]],["^15",[1299,"^U",1161,536870919]],["^15",[1299,"^H",300,536870919]],["^15",[1299,"^H",1073,536870919]],["^15",[1299,"^;","~u655b737a-9580-4b25-8af4-b486952ad8ed",536870919]],["^15",[1300,"^Q","~``Iterator`` [[Trait]]\nAny [[Data Type]] that implements this trait, gets [[Method]]s such as ``.into_iter()`` and ``.iter()`` which return an iterator.\n\nThis trait is defined like so\n```\npub trait Iterator {\ntype Item;\n\nfn next(&mut self) -> Option<Self::Item>;\n// the other methods have default implementations \n}\n```\nHere, the ``type Item`` is an [[Associated Type]]. \nSo if our [[Data Type]] implements this trait then it must provide a type to ``Item`` and the ``next`` [[Method]] must be defined.\n\nThe way it works is simple, ``next`` uses mutable [[Borrow]] to get the next value of the data type and then change the internal state of the iterator marking the current position. This is why iterators are exhaustive, i.e., if an iterator instance is created and the ``.next()`` called then the iterator will reach a terminal state and won't start over again. This is required behavior too, as the ``.next()`` returns an [[Option Type]] so it must return ``Some`` if there's a value or ``None`` if it is exhausted.\n\nFor ex.:\n```rust\nfn main() {\n    let list = vec![1, 2, 3];\n    let mut listIt = list.iter(); //Iterators change the internal state, so the variable must be mutable\n    let x: &i32 = &1220;\n    println!(\"{}\", listIt.next().unwrap_or(x));\n    println!(\"{}\", listIt.next().unwrap_or(x));\n    println!(\"{}\", listIt.next().unwrap_or(x));\n    println!(\"{}\", listIt.next().unwrap_or(x)); //prints 1220\n}\n\n```\n\nThe ``Some()`` returns an immutable [[Reference Type]] to the value in the actual sequence container when we get an iterator with ``.iter()``. We can get mutqable references with ``.`iter_mut()`` and take [[Ownership]] of the values with ``.to_iter()`` so now the value is [[Copy or Move]]ed into the ``Some()``.\n\n* The ``for`` [[Loop]] doesn't need the [[Variable]] to be ``mut`` as it can internally do that.\nFor ex.:\n```rust\nfn main() {\n  let list = vec![1, 2, 3];\n  let list_it= list.iter();\n for item in list_it{\n   //works, doesn't need list_it to be mutable.\n }\n}\n```\n\n* Iterator Trait [[Method]]s that call ``.next()`` are called *Consuming Adaptor*s as they consume up the iterator.\nOn the contrary, we have *Iterator Adaptor*s, which are methods that don't consume up the iterator and instead produce different iterators. \nFor ex.:\n```rust\nfn main() {\n  let list = vec![1, 2, 3];\n  let new_it= list.iter().map(|x| x + 1); // is an iterator that will take a value from list, apply the map closure, then  return the new value. \n```\nusing a [[Closure]]. \n* ``.collect()`` on an iterator consumes it up and returns a Vector.\nFor ex.:\n```rust\n let list = vec![1, 2, 3];\n let collected_it : Vec<_> = list.iter().map(|x| x + 1).collect(); \n}\n```\nUsing the ``placeholder`` type and [[Vector]].",536870919]],["^15",[1300,"^O","^16",536870919]],["^15",[1300,"^F",1299,536870919]],["^15",[1300,"^X",1161,536870919]],["^15",[1300,"^V",1161,536870919]],["^15",[1300,"^U",160,536870919]],["^15",[1300,"^U",161,536870919]],["^15",[1300,"^U",300,536870919]],["^15",[1300,"^U",1065,536870919]],["^15",[1300,"^U",1073,536870919]],["^15",[1300,"^U",1086,536870919]],["^15",[1300,"^U",1090,536870919]],["^15",[1300,"^U",1091,536870919]],["^15",[1300,"^U",1093,536870919]],["^15",[1300,"^U",1117,536870919]],["^15",[1300,"^U",1160,536870919]],["^15",[1300,"^U",1161,536870919]],["^15",[1300,"^U",1171,536870919]],["^15",[1300,"^U",1254,536870919]],["^15",[1300,"^H",160,536870919]],["^15",[1300,"^H",161,536870919]],["^15",[1300,"^H",300,536870919]],["^15",[1300,"^H",1065,536870919]],["^15",[1300,"^H",1073,536870919]],["^15",[1300,"^H",1086,536870919]],["^15",[1300,"^H",1090,536870919]],["^15",[1300,"^H",1091,536870919]],["^15",[1300,"^H",1093,536870919]],["^15",[1300,"^H",1117,536870919]],["^15",[1300,"^H",1160,536870919]],["^15",[1300,"^H",1171,536870919]],["^15",[1300,"^H",1254,536870919]],["^15",[1300,"^;","~u655b737a-88b6-47c3-8e06-9abb7bff7d68",536870919]],["^15",[1301,"^Q","Iterators vs [[Loop]]s\nIterators follow the *zero-cost abstraction principle* in Rust. \n\"What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.” - Bjarne Stroustrup\n\nThis basically means unlike loops, iterators will always be the most efficient ways of iterating over sequences. They will always be equal, if not faster, than raw loops. So it is recommended to use iterators wherever loops are concerned. This is because iterators are unrolled. Unrolling is an optimization that compilers perform by unwrapping fixed size loops into individual pieces of code, so if a loop runs 12 times then 12 similar definitions are created. This increases the binary size but allows the runtime to avoid bound checking, and other overheads associated with loops.",536870919]],["^15",[1301,"^O","^16",536870919]],["^15",[1301,"^F",1300,536870919]],["^15",[1301,"^X",1161,536870919]],["^15",[1301,"^V",1161,536870919]],["^15",[1301,"^U",300,536870919]],["^15",[1301,"^U",1161,536870919]],["^15",[1301,"^H",300,536870919]],["^15",[1301,"^;","~u655b737a-f3e0-4e96-8672-45fcfc2457b5",536870919]],["^15",[1302,"^Q","",536870919]],["^15",[1302,"^O","^16",536870919]],["^15",[1302,"^F",1301,536870919]],["^15",[1302,"^X",1161,536870919]],["^15",[1302,"^V",1161,536870919]],["^15",[1302,"^U",1161,536870919]],["^15",[1302,"^;","~u655b737a-86d8-4d71-b3e8-398a7d8a1309",536870919]],["^15",[1303,"^Q","",536870919]],["^15",[1303,"^O","^16",536870919]],["^15",[1303,"^F",1302,536870919]],["^15",[1303,"^X",1161,536870919]],["^15",[1303,"^V",1161,536870919]],["^15",[1303,"^U",1161,536870919]],["^15",[1303,"^;","~u655b737a-d8f5-430a-a60c-c3d6e1261499",536870919]],["^15",[1304,"^3","- Lifetimes are kind of like [[Generic Type]]s and whilst Rust implicitly uses them, we can also use them as abstract symbols that explicitly define the validity of [[Reference Type]]s. \n  Just like the [[Data Type]] for [[Generic Type]]s is inferred automatically, the lifetime for [[Reference Type]]s are also inferred automatically.\n  \n  The main objective of lifetimes is to track the validity of references making sure they are valid when accessed.\n  \n  Lifetimes are always used for [[Reference Type]]s, the only thing is that Rust can infer the lifetimes automatically most of the time (aka *Lifetime Elision*), but where it can't, we have to explicitly define the lifetime.\n- The [[Borrow]] Checker\n  Rust compiler has this feature, which allows it to check, at compile time itself, if all the references in the code are valid, checking if the [[Borrow]] is valid. \n  \n  For ex.:\n  ```rust\n  fn main() {\n      let r;                // ---------+-- 'a\n                            //          |\n      {                     //          |\n          let x = 5;        // -+-- 'b  |\n          r = &x;           //  |       |\n      }                     // -+       |\n                            //          |\n      println!(\"r: {}\", r); //          |\n  }                         // ---------+\n  ```\n  Here, the lifetime of ``r`` is represented with ``'a`` and for ``x`` it is ``'b`` and as we can see ``'b`` is valid for a smaller duration than ``'b`` and hence if the reference ``r`` tries to access the value of ``x``, it will fail as the life of ``x`` is over already.\n  The Borrow Checker checks all borrows like so at compile time.\n  \n  Similarly, in [[Function]]s/ [[Method]]s , if we use [[Reference Type]] returns, and when it is not inferrable which parameter will be returned, we need to explicitly define the lifetimes. \n  For ex.:\n  ```rust\n  fn longest(x: &str, y: &str) -> &str {\n      if x.len() > y.len() {\n          x\n      } else {\n          y\n      }\n  }\n  \n  fn main() {\n   let a= \"yo\";\n   let mut c: &str;\n   { \n    let b= \"no\";\n    c = longest(&a,&b); //Which reference is returned from longest ? \n   } //if c has the reference lifetime of b then this is where it becomes invalid \n   \n  } //if c has the reference lifetime of a then this is where it becomes invalid \n  ```\n  This code leads to an error at compile time, because the borrow checker is not sure if ``x`` or ``y`` will be returned, meaning it is not guaranteed for the caller of ``longest()``which lifetime it will have. \n  This is why we need to explicitly define the lifetimes for ``longest`` here to let the compiler know which lifetime is being returned.\n- Explicit definition of lifetimes\n  We use the same syntax as [[Generic Type]]s, however the key difference is that generic lifetime names need to be prefixed with the ``'`` letter, like ``'x`` and they aren't [[Generic Type]]s so they can't be used to replace them in the syntax.\n  \n  Syntax for [[Function]]s/ [[Method]]s :\n  ``\n  fn <fn name><< ' + lifetime name 1>, < ' + lifetime name 2>,..., < ' + lifetime name n>(<param name 1>: <if param type & then, & ' + lifetime name>, ...)-> <if return type & then, & + ' + lifetime name> {...}\n  ``\n  Lifetime definitions on [[Function]] parameters are called *input lifetimes* while the return type lifetime definitions are called *output lifetimes*.\n  \n  For ex.:\n  ```rust\n  fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n      if x.len() > y.len() {\n          x\n      } else {\n          y\n      }\n  }\n  ```\n  This function has only a single lifetime generic, so it will only infer a single lifetime from its args and expect the same from both the args. If the args have different lifetimes, then the smaller lifetime is inferred. \n  Here, we are not changing the lifetime of ``longest``, rather only allowing certain lifetimes and letting the [[Borrow]] checker know which lifetimes will be used where. \n  \n  We can only define lifetimes in [[Function]] Signatures, not in their bodies.\n  Furthermore, when returning a reference type and defining a lifetime for it, the lifetime must be also applied to a reference parameter.\n  \n  * For [[Struct]]s:\n  For ex.:\n  ```rust\n  struct X<’a> {\n  \tyo: &’a str,\n  }\n  //says the instance of struct X will only live as long as the string field yo lives.\n  ```\n  \n  * For [[Method]] implementation blocks:\n  ```rust\n  impl<’a> X<’a> {\n  \tfn yo(&self) {…}\n  }\n  ```\n- *Lifetime Elision* Rules\n  [[Function]]s and ``impl`` blocks always need a lifetime definition for [[Reference Type]]s. \n  \n  We don't always need to explicitly define them, but if none of these rules can be applied then they need to be explicitly defined:\n  *\tEach reference parameter in signature gets a separate lifetime. \n  ```rust\n  fn yo(x: &str) {} //gets fn yo<’a>(x:&’a str) \n  fn yo2(x: &str,y: &str){} //gets fn  yo<’a, ‘b>(x: &’a str, y: &’b str) \n  //and so on\n  ``` \n  \n  *\tIf there’s exactly 1 reference parameter and it is given an explicit lifetime then the same lifetime is applied to the return type reference, if any.\n  * If there are multiple *input lifetime* parameters, and one of them is ``&self`` or ``&mut self`` then the ``self``’s lifetime is applied to the return type reference. \n  \n  Multiple rules will be applied to the same signature if a single rule doesn’t make the signature valid.\n  For ex.:\n  ```rust\n  Struct X{}\n  impl  X {\n  \tfn yo(&self, x: &str) -> &str {…} \n  }\n  // This is not an error, as the 1st rule applies a lifetime to both the parameters and the 3rd rule applies the self’s lifetime to the return type. \n  ```\n- *Static lifetime*\n  Applying this lifetime to a [[Reference Type]] puts it in the binary and increases the size of it. But the reference is valid for the duration of entire program. \n  Static lifetime can only be applied to values that are known at compile time.\n  For ex.:\n  ```rust\n  let x: &’static str= \"yeee\";\n  ```\n  \n  All [[str]] literals have the static lifetime anyways.\n-",536870919]],["^15",[1304,"^17",1700492154458,536870919]],["^15",[1304,"^Z","Rust/pages/Lifetime.md",536870919]],["^15",[1305,"^Q","Lifetimes are kind of like [[Generic Type]]s and whilst Rust implicitly uses them, we can also use them as abstract symbols that explicitly define the validity of [[Reference Type]]s. \nJust like the [[Data Type]] for [[Generic Type]]s is inferred automatically, the lifetime for [[Reference Type]]s are also inferred automatically.\n\nThe main objective of lifetimes is to track the validity of references making sure they are valid when accessed.\n\nLifetimes are always used for [[Reference Type]]s, the only thing is that Rust can infer the lifetimes automatically most of the time (aka *Lifetime Elision*), but where it can't, we have to explicitly define the lifetime.",536870919]],["^15",[1305,"^O","^16",536870919]],["^15",[1305,"^F",1101,536870919]],["^15",[1305,"^X",1101,536870919]],["^15",[1305,"^V",1101,536870919]],["^15",[1305,"^U",1087,536870919]],["^15",[1305,"^U",1090,536870919]],["^15",[1305,"^U",1091,536870919]],["^15",[1305,"^U",1101,536870919]],["^15",[1305,"^H",1087,536870919]],["^15",[1305,"^H",1090,536870919]],["^15",[1305,"^H",1091,536870919]],["^15",[1305,"^;","~u655b737a-c6da-4626-92f6-efc04389f540",536870919]],["^15",[1306,"^Q","The [[Borrow]] Checker\nRust compiler has this feature, which allows it to check, at compile time itself, if all the references in the code are valid, checking if the [[Borrow]] is valid. \n\nFor ex.:\n```rust\nfn main() {\n    let r;                // ---------+-- 'a\n                          //          |\n    {                     //          |\n        let x = 5;        // -+-- 'b  |\n        r = &x;           //  |       |\n    }                     // -+       |\n                          //          |\n    println!(\"r: {}\", r); //          |\n}                         // ---------+\n```\nHere, the lifetime of ``r`` is represented with ``'a`` and for ``x`` it is ``'b`` and as we can see ``'b`` is valid for a smaller duration than ``'b`` and hence if the reference ``r`` tries to access the value of ``x``, it will fail as the life of ``x`` is over already.\nThe Borrow Checker checks all borrows like so at compile time.\n\nSimilarly, in [[Function]]s/ [[Method]]s , if we use [[Reference Type]] returns, and when it is not inferrable which parameter will be returned, we need to explicitly define the lifetimes. \nFor ex.:\n```rust\nfn longest(x: &str, y: &str) -> &str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n\nfn main() {\n let a= \"yo\";\n let mut c: &str;\n { \n  let b= \"no\";\n  c = longest(&a,&b); //Which reference is returned from longest ? \n } //if c has the reference lifetime of b then this is where it becomes invalid \n \n} //if c has the reference lifetime of a then this is where it becomes invalid \n```\nThis code leads to an error at compile time, because the borrow checker is not sure if ``x`` or ``y`` will be returned, meaning it is not guaranteed for the caller of ``longest()``which lifetime it will have. \nThis is why we need to explicitly define the lifetimes for ``longest`` here to let the compiler know which lifetime is being returned.",536870919]],["^15",[1306,"^O","^16",536870919]],["^15",[1306,"^F",1305,536870919]],["^15",[1306,"^X",1101,536870919]],["^15",[1306,"^V",1101,536870919]],["^15",[1306,"^U",163,536870919]],["^15",[1306,"^U",1065,536870919]],["^15",[1306,"^U",1091,536870919]],["^15",[1306,"^U",1101,536870919]],["^15",[1306,"^U",1117,536870919]],["^15",[1306,"^H",163,536870919]],["^15",[1306,"^H",1065,536870919]],["^15",[1306,"^H",1091,536870919]],["^15",[1306,"^H",1117,536870919]],["^15",[1306,"^;","~u655b737a-ba10-4557-8a88-17b03b1d2001",536870919]],["^15",[1307,"^Q","Explicit definition of lifetimes\nWe use the same syntax as [[Generic Type]]s, however the key difference is that generic lifetime names need to be prefixed with the ``'`` letter, like ``'x`` and they aren't [[Generic Type]]s so they can't be used to replace them in the syntax.\n\nSyntax for [[Function]]s/ [[Method]]s :\n``\nfn <fn name><< ' + lifetime name 1>, < ' + lifetime name 2>,..., < ' + lifetime name n>(<param name 1>: <if param type & then, & ' + lifetime name>, ...)-> <if return type & then, & + ' + lifetime name> {...}\n``\nLifetime definitions on [[Function]] parameters are called *input lifetimes* while the return type lifetime definitions are called *output lifetimes*.\n\nFor ex.:\n```rust\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\nThis function has only a single lifetime generic, so it will only infer a single lifetime from its args and expect the same from both the args. If the args have different lifetimes, then the smaller lifetime is inferred. \nHere, we are not changing the lifetime of ``longest``, rather only allowing certain lifetimes and letting the [[Borrow]] checker know which lifetimes will be used where. \n\nWe can only define lifetimes in [[Function]] Signatures, not in their bodies.\nFurthermore, when returning a reference type and defining a lifetime for it, the lifetime must be also applied to a reference parameter.\n\n* For [[Struct]]s:\nFor ex.:\n```rust\nstruct X<’a> {\n\tyo: &’a str,\n}\n//says the instance of struct X will only live as long as the string field yo lives.\n```\n\n* For [[Method]] implementation blocks:\n```rust\nimpl<’a> X<’a> {\n\tfn yo(&self) {…}\n}\n```",536870919]],["^15",[1307,"^O","^16",536870919]],["^15",[1307,"^F",1306,536870919]],["^15",[1307,"^X",1101,536870919]],["^15",[1307,"^V",1101,536870919]],["^15",[1307,"^U",163,536870919]],["^15",[1307,"^U",1064,536870919]],["^15",[1307,"^U",1065,536870919]],["^15",[1307,"^U",1087,536870919]],["^15",[1307,"^U",1101,536870919]],["^15",[1307,"^U",1117,536870919]],["^15",[1307,"^H",163,536870919]],["^15",[1307,"^H",1064,536870919]],["^15",[1307,"^H",1065,536870919]],["^15",[1307,"^H",1087,536870919]],["^15",[1307,"^H",1117,536870919]],["^15",[1307,"^;","~u655b737a-500d-4032-bdc4-7a71d43485e3",536870919]],["^15",[1308,"^Q","*Lifetime Elision* Rules\n[[Function]]s and ``impl`` blocks always need a lifetime definition for [[Reference Type]]s. \n\nWe don't always need to explicitly define them, but if none of these rules can be applied then they need to be explicitly defined:\n*\tEach reference parameter in signature gets a separate lifetime. \n```rust\nfn yo(x: &str) {} //gets fn yo<’a>(x:&’a str) \nfn yo2(x: &str,y: &str){} //gets fn  yo<’a, ‘b>(x: &’a str, y: &’b str) \n//and so on\n``` \n\n*\tIf there’s exactly 1 reference parameter and it is given an explicit lifetime then the same lifetime is applied to the return type reference, if any.\n* If there are multiple *input lifetime* parameters, and one of them is ``&self`` or ``&mut self`` then the ``self``’s lifetime is applied to the return type reference. \n\nMultiple rules will be applied to the same signature if a single rule doesn’t make the signature valid.\nFor ex.:\n```rust\nStruct X{}\nimpl  X {\n\tfn yo(&self, x: &str) -> &str {…} \n}\n// This is not an error, as the 1st rule applies a lifetime to both the parameters and the 3rd rule applies the self’s lifetime to the return type. \n```",536870919]],["^15",[1308,"^O","^16",536870919]],["^15",[1308,"^F",1307,536870919]],["^15",[1308,"^X",1101,536870919]],["^15",[1308,"^V",1101,536870919]],["^15",[1308,"^U",163,536870919]],["^15",[1308,"^U",1091,536870919]],["^15",[1308,"^U",1101,536870919]],["^15",[1308,"^H",163,536870919]],["^15",[1308,"^H",1091,536870919]],["^15",[1308,"^;","~u655b737a-7b00-4821-b845-ff0129d546ec",536870919]],["^15",[1309,"^Q","*Static lifetime*\nApplying this lifetime to a [[Reference Type]] puts it in the binary and increases the size of it. But the reference is valid for the duration of entire program. \nStatic lifetime can only be applied to values that are known at compile time.\nFor ex.:\n```rust\nlet x: &’static str= \"yeee\";\n```\n\nAll [[str]] literals have the static lifetime anyways.",536870919]],["^15",[1309,"^O","^16",536870919]],["^15",[1309,"^F",1308,536870919]],["^15",[1309,"^X",1101,536870919]],["^15",[1309,"^V",1101,536870919]],["^15",[1309,"^U",1091,536870919]],["^15",[1309,"^U",1101,536870919]],["^15",[1309,"^U",1244,536870919]],["^15",[1309,"^H",1091,536870919]],["^15",[1309,"^H",1244,536870919]],["^15",[1309,"^;","~u655b737a-6a9c-4036-bee5-8eed36454a92",536870919]],["^15",[1310,"^Q","",536870919]],["^15",[1310,"^O","^16",536870919]],["^15",[1310,"^F",1309,536870919]],["^15",[1310,"^X",1101,536870919]],["^15",[1310,"^V",1101,536870919]],["^15",[1310,"^U",1101,536870919]],["^15",[1310,"^;","~u655b737a-d375-4dee-83a1-babf007df0a6",536870919]],["^15",[1311,"^3","- Attributes are metadata about pieces of Rust code.\n  For ex.:\n  ```rust\n      #[test]\n      fn it_works() {\n          let result = 2 + 2;\n          assert_eq!(result, 4);\n      }\n  ```\n-",536870919]],["^15",[1311,"^17",1700492154497,536870919]],["^15",[1311,"^Z","Rust/pages/Macro Attribute.md",536870919]],["^15",[1312,"^K",1700492154531,536870919]],["^15",[1312,"^[",1311,536870919]],["^15",[1312,"^@",false,536870919]],["^15",[1312,"^Y","macro attribute",536870919]],["^15",[1312,"^11","Macro Attribute",536870919]],["^15",[1312,"^B",1700492154531,536870919]],["^15",[1312,"^;","~u655b737b-d40f-45e6-b715-f91ef0ffdc70",536870920]],["^15",[1313,"^Q","Attributes are metadata about pieces of Rust code.\nFor ex.:\n```rust\n    #[test]\n    fn it_works() {\n        let result = 2 + 2;\n        assert_eq!(result, 4);\n    }\n```",536870919]],["^15",[1313,"^O","^16",536870919]],["^15",[1313,"^F",1312,536870919]],["^15",[1313,"^X",1312,536870919]],["^15",[1313,"^V",1312,536870919]],["^15",[1313,"^U",1312,536870919]],["^15",[1313,"^;","~u655b737a-e71a-40d3-8d13-1c129dc07573",536870919]],["^15",[1314,"^Q","",536870919]],["^15",[1314,"^O","^16",536870919]],["^15",[1314,"^F",1313,536870919]],["^15",[1314,"^X",1312,536870919]],["^15",[1314,"^V",1312,536870919]],["^15",[1314,"^U",1312,536870919]],["^15",[1314,"^;","~u655b737a-287c-4b95-b3dd-ed10b83c83e4",536870919]],["^15",[1315,"^3","- Macros are special symbols that expand to more text in the source code.\n  Just like *C++* has *#define* which can define a symbol which is expanded before compilation phase and modifies the code in the translation unit, Rust has macros which are symbols that get replaced with other text in the equivalent of translation unit in rust (not sure what it is [[TODO]]).\n  \n  This means, we can use macros to define [[Function]]s and other code in a single place, and using the same symbol in different projects can allow us to skip writing a lot of boilerplate. \n  The only cost associated with Macros is the less simpler syntax and linter assistance making them harder to maintain and debug. As they use a slightly different syntax than normal Rust.\n  \n  * Unlike [[Function]]s, Macros must be defined/imported into a [[Scope]] before being used.\n  \n  * Rust has 2 main type, but 4 different sub-types of Macros\n  Declarative macros: Implemented with [[macro_rules!]]\n  Procedural macros: They include [[Custom Derive Macro]]s, [[Macro Attribute]]s and [[Function Macro]]s.\n- Procedural Macros\n  These macros must be defined in their own special [[Crate]]s and then added as a dependency to the crate that needs to use them.\n  \n  For ex.:\n  ```rust\n  use proc_macro;\n  \n  #[some_attribute]\n  pub fn some_name(input: TokenStream) -> TokenStream {\n  }\n  ```\n  ``TokenStream`` is a [[Data Type]] that is defined by Rust itself and holds the source code in text.\n  \n  * [[Procedural Macro Crate]]s are different from normal crates.\n  * [[Custom Derive Macro]]s are macros like ``#[something_derive]`` applied only on either [[Struct]]s or [[Enum]]s. They need to have ``derive`` at the end of their name due to how [[Procedural Macro Crate]]s are defined, this is a known technical limitation.\n  \n  These macros are defined with the ``#[proc_macro_derive]`` [[Macro Attribute]]. \n  \n  For ex.:\n  ```rust\n  use proc_macro::TokenStream;\n  use quote::quote;\n  use syn;\n  \n  #[proc_macro_derive(HelloMacro)]\n  pub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n      // Construct a representation of Rust code as a syntax tree\n      // that we can manipulate\n      let ast = syn::parse(input).unwrap();\n  \n      // Build the trait implementation\n      impl_hello_macro(&ast)\n  }\n  ```\n  * [[Macro Attribute]]s are like Custom Derive Macros but they don't have the limitation of ``derive`` name at their end and can be applied to other items such as [[Function]]s too. They take the whole item, such as a function, modify it, and return the newly modified function back. \n  For ex.:\n  ```rust\n  #[route(GET, \"/\")]\n  fn index() { }\n  ```\n  These macros are defined with ``#[proc_macro_attribute]``\n  For ex.:\n  ```rust\n  #[proc_macro_attribute]\n  pub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {}\n  ```\n  \n  * [[Function Macro]]s define macros that look like functions and work kind of like [[macro_rules!]]. They can take any number of arguments and accept ``TokenStream`` as parameter so they take the code and modify it and return it, just like [[macro_rules!]] but without any pattern matching involved.\n  The syntax to call them is ``<some proc macro name>!(<some code>)`` which is slightly different from [[macro_rules!]].\n  \n  These macros are defined with the ``#[proc_macro]`` syntax\n  \n  For ex.:\n  ```rust\n  pub fn sql(input: TokenStream) -> TokenStream { }\n  ```\n-\n- Print and debug\n  ``print!()`` is a [[macro_rules!]] macro that prints text to stdout.\n  ``println!()`` is its newline ending variant. \n  For ex.:\n  ```rust\n  prinln!(\"{} yoo {}\",2,4); \n  ```\n  Here the given string is printed and all ``{ }`` in it indicate scalar/printable [[Data Type]]s which are provided as variable number of args to the macro.\n  \n  * Output Format:\n  We can specify output formats inside the ``{ }``.\n  \n  * Debug Printing:\n  If we use ``{:?}``  then it prints the given object in debug mode, but requires the [[Data Type]] to implement the ``Debug`` [[Trait]], this is a derivable trait.\n  \n  For ex.:\n  ```rust\n  #[derive(Debug)]\n  struct X {}\n  \n  fn main() {\n  let x = X{};\n  println!(\"{:?}\", X);\n  //and it will debug print it. \n  \n  println!(\"{:#?}\", x); //debug prints the instance.\n  ```\n  \n  Alternatively, we can instead use ``dbg!(<value>)``. This macro returns the [[Ownership]] of expressions so having it there or not there is the same thing to Rust.\n  For ex.:\n  ```rust\n  let a=dbg!(2*4); //a will be 8 and it will print 2 * 4 = 8\n  ```\n  ``dbg!`` prints to stderr.\n  \n  * ``eprintln!(...)``: Just like dbg!, prints stuff to stderr.\n- Common Macros\n  * ``println!(<>)``: Prints stuff",536870919]],["^15",[1315,"^17",1700492154532,536870919]],["^15",[1315,"^Z","Rust/pages/Macro.md",536870919]],["^15",[1316,"^K",1700492154532,536870919]],["^15",[1316,"^@",false,536870919]],["^15",[1316,"^Y","procedural macro crate",536870919]],["^15",[1316,"^11","Procedural Macro Crate",536870919]],["^15",[1316,"^B",1700492154532,536870919]],["^15",[1316,"^;","~u655b737a-0014-4e6a-9b37-7848662cc64b",536870919]],["^15",[1317,"^K",1700492154531,536870919]],["^15",[1317,"^@",false,536870919]],["^15",[1317,"^Y","function macro",536870919]],["^15",[1317,"^11","Function Macro",536870919]],["^15",[1317,"^B",1700492154531,536870919]],["^15",[1317,"^;","~u655b737a-0a48-4be9-8d5b-d97a533a28fb",536870919]],["^15",[1318,"^K",1700492154532,536870919]],["^15",[1318,"^[",1567,536870920]],["^15",[1318,"^@",false,536870919]],["^15",[1318,"^Y","macro_rules!",536870919]],["^15",[1318,"^11","macro_rules!",536870919]],["^15",[1318,"^B",1700492154532,536870919]],["^15",[1318,"^;","~u655b737b-b622-4a01-aa32-cd7ad852439f",536870920]],["^15",[1319,"^K",1700492154532,536870919]],["^15",[1319,"^@",false,536870919]],["^15",[1319,"^Y","custom derive macro",536870919]],["^15",[1319,"^11","Custom Derive Macro",536870919]],["^15",[1319,"^B",1700492154532,536870919]],["^15",[1319,"^;","~u655b737a-8daa-49d0-bb8a-79e6036c62c6",536870919]],["^15",[1320,"^Q","Macros are special symbols that expand to more text in the source code.\nJust like *C++* has *#define* which can define a symbol which is expanded before compilation phase and modifies the code in the translation unit, Rust has macros which are symbols that get replaced with other text in the equivalent of translation unit in rust (not sure what it is [[TODO]]).\n\nThis means, we can use macros to define [[Function]]s and other code in a single place, and using the same symbol in different projects can allow us to skip writing a lot of boilerplate. \nThe only cost associated with Macros is the less simpler syntax and linter assistance making them harder to maintain and debug. As they use a slightly different syntax than normal Rust.\n\n* Unlike [[Function]]s, Macros must be defined/imported into a [[Scope]] before being used.\n\n* Rust has 2 main type, but 4 different sub-types of Macros\nDeclarative macros: Implemented with [[macro_rules!]]\nProcedural macros: They include [[Custom Derive Macro]]s, [[Macro Attribute]]s and [[Function Macro]]s.",536870919]],["^15",[1320,"^O","^16",536870919]],["^15",[1320,"^F",1079,536870919]],["^15",[1320,"^X",1079,536870919]],["^15",[1320,"^V",1079,536870919]],["^15",[1320,"^U",4,536870919]],["^15",[1320,"^U",163,536870919]],["^15",[1320,"^U",345,536870919]],["^15",[1320,"^U",1079,536870919]],["^15",[1320,"^U",1312,536870919]],["^15",[1320,"^U",1317,536870919]],["^15",[1320,"^U",1318,536870919]],["^15",[1320,"^U",1319,536870919]],["^15",[1320,"^H",4,536870919]],["^15",[1320,"^H",163,536870919]],["^15",[1320,"^H",345,536870919]],["^15",[1320,"^H",1312,536870919]],["^15",[1320,"^H",1317,536870919]],["^15",[1320,"^H",1318,536870919]],["^15",[1320,"^H",1319,536870919]],["^15",[1320,"^;","~u655b737a-75c9-4c63-ab0a-8db6f0e624b7",536870919]],["^15",[1321,"^Q","Procedural Macros\nThese macros must be defined in their own special [[Crate]]s and then added as a dependency to the crate that needs to use them.\n\nFor ex.:\n```rust\nuse proc_macro;\n\n#[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n}\n```\n``TokenStream`` is a [[Data Type]] that is defined by Rust itself and holds the source code in text.\n\n* [[Procedural Macro Crate]]s are different from normal crates.\n* [[Custom Derive Macro]]s are macros like ``#[something_derive]`` applied only on either [[Struct]]s or [[Enum]]s. They need to have ``derive`` at the end of their name due to how [[Procedural Macro Crate]]s are defined, this is a known technical limitation.\n\nThese macros are defined with the ``#[proc_macro_derive]`` [[Macro Attribute]]. \n\nFor ex.:\n```rust\nuse proc_macro::TokenStream;\nuse quote::quote;\nuse syn;\n\n#[proc_macro_derive(HelloMacro)]\npub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n    // Construct a representation of Rust code as a syntax tree\n    // that we can manipulate\n    let ast = syn::parse(input).unwrap();\n\n    // Build the trait implementation\n    impl_hello_macro(&ast)\n}\n```\n* [[Macro Attribute]]s are like Custom Derive Macros but they don't have the limitation of ``derive`` name at their end and can be applied to other items such as [[Function]]s too. They take the whole item, such as a function, modify it, and return the newly modified function back. \nFor ex.:\n```rust\n#[route(GET, \"/\")]\nfn index() { }\n```\nThese macros are defined with ``#[proc_macro_attribute]``\nFor ex.:\n```rust\n#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {}\n```\n\n* [[Function Macro]]s define macros that look like functions and work kind of like [[macro_rules!]]. They can take any number of arguments and accept ``TokenStream`` as parameter so they take the code and modify it and return it, just like [[macro_rules!]] but without any pattern matching involved.\nThe syntax to call them is ``<some proc macro name>!(<some code>)`` which is slightly different from [[macro_rules!]].\n\nThese macros are defined with the ``#[proc_macro]`` syntax\n\nFor ex.:\n```rust\npub fn sql(input: TokenStream) -> TokenStream { }\n```",536870919]],["^15",[1321,"^O","^16",536870919]],["^15",[1321,"^F",1320,536870919]],["^15",[1321,"^X",1079,536870919]],["^15",[1321,"^V",1079,536870919]],["^15",[1321,"^U",163,536870919]],["^15",[1321,"^U",1063,536870919]],["^15",[1321,"^U",1064,536870919]],["^15",[1321,"^U",1066,536870919]],["^15",[1321,"^U",1079,536870919]],["^15",[1321,"^U",1090,536870919]],["^15",[1321,"^U",1312,536870919]],["^15",[1321,"^U",1316,536870919]],["^15",[1321,"^U",1317,536870919]],["^15",[1321,"^U",1318,536870919]],["^15",[1321,"^U",1319,536870919]],["^15",[1321,"^H",163,536870919]],["^15",[1321,"^H",1063,536870919]],["^15",[1321,"^H",1064,536870919]],["^15",[1321,"^H",1066,536870919]],["^15",[1321,"^H",1090,536870919]],["^15",[1321,"^H",1312,536870919]],["^15",[1321,"^H",1316,536870919]],["^15",[1321,"^H",1317,536870919]],["^15",[1321,"^H",1318,536870919]],["^15",[1321,"^H",1319,536870919]],["^15",[1321,"^;","~u655b737a-a775-482b-a5d7-1595c85561ef",536870919]],["^15",[1322,"^Q","",536870919]],["^15",[1322,"^O","^16",536870919]],["^15",[1322,"^F",1321,536870919]],["^15",[1322,"^X",1079,536870919]],["^15",[1322,"^V",1079,536870919]],["^15",[1322,"^U",1079,536870919]],["^15",[1322,"^;","~u655b737a-b109-4d16-a6b4-ae66d0b64444",536870919]],["^15",[1323,"^Q","Print and debug\n``print!()`` is a [[macro_rules!]] macro that prints text to stdout.\n``println!()`` is its newline ending variant. \nFor ex.:\n```rust\nprinln!(\"{} yoo {}\",2,4); \n```\nHere the given string is printed and all ``{ }`` in it indicate scalar/printable [[Data Type]]s which are provided as variable number of args to the macro.\n\n* Output Format:\nWe can specify output formats inside the ``{ }``.\n\n* Debug Printing:\nIf we use ``{:?}``  then it prints the given object in debug mode, but requires the [[Data Type]] to implement the ``Debug`` [[Trait]], this is a derivable trait.\n\nFor ex.:\n```rust\n#[derive(Debug)]\nstruct X {}\n\nfn main() {\nlet x = X{};\nprintln!(\"{:?}\", X);\n//and it will debug print it. \n\nprintln!(\"{:#?}\", x); //debug prints the instance.\n```\n\nAlternatively, we can instead use ``dbg!(<value>)``. This macro returns the [[Ownership]] of expressions so having it there or not there is the same thing to Rust.\nFor ex.:\n```rust\nlet a=dbg!(2*4); //a will be 8 and it will print 2 * 4 = 8\n```\n``dbg!`` prints to stderr.\n\n* ``eprintln!(...)``: Just like dbg!, prints stuff to stderr.",536870919]],["^15",[1323,"^O","^16",536870919]],["^15",[1323,"^F",1322,536870919]],["^15",[1323,"^X",1079,536870919]],["^15",[1323,"^V",1079,536870919]],["^15",[1323,"^U",1073,536870919]],["^15",[1323,"^U",1079,536870919]],["^15",[1323,"^U",1090,536870919]],["^15",[1323,"^U",1160,536870919]],["^15",[1323,"^U",1318,536870919]],["^15",[1323,"^H",1073,536870919]],["^15",[1323,"^H",1090,536870919]],["^15",[1323,"^H",1160,536870919]],["^15",[1323,"^H",1318,536870919]],["^15",[1323,"^;","~u655b737a-3f51-4042-bc3f-5a2359444c13",536870919]],["^15",[1324,"^Q","Common Macros\n* ``println!(<>)``: Prints stuff",536870919]],["^15",[1324,"^O","^16",536870919]],["^15",[1324,"^F",1323,536870919]],["^15",[1324,"^X",1079,536870919]],["^15",[1324,"^V",1079,536870919]],["^15",[1324,"^U",1079,536870919]],["^15",[1324,"^;","~u655b737a-1299-4942-9c66-9a7154b7aa69",536870919]],["^15",[1325,"^3","alias:: Associated Function\n\n- Method\n  Methods are [[Function]]s defined for the [[Struct]]s/ [[Enumerated Type]]s/ [[Trait Object]]s. They are defined inside a special block with a keyword ``impl``, this is for organization, and makes it easier to find out where a custom [[Data Type]] has been defined implementations/behaviors for it, kind of like C++ where we have separate header and source files and unlike C++ there's no need for definition in the [[Data Type]] itself. Since all methods are associated with a [[Data Type]], they are also called *Associated Function*s.\n  \n  Syntax: \n  ``\n  impl <T> {\n   fn someMethod(<self/&self>,<some Params>) -> <some return type> {}\n  }\n  ``\n  \n  \n  For ex.:\n  ```rust\n  struct Rect{\n  \tlength: i32,\n  \tbreadth: i32\n  }\n  \n  impl Rect {\n  \tfn area(&self) -> i32 {\n  \tself.length * self.breadth\n   } \n  }\n  fn main() {\n   let rect= Rect(2,4);\n   let area=rect.area(); //works\n  }\n  ```\n  \n  A single custom [[Data Type]], can have multiple ``impl`` blocks for it.\n- ``self``\n  Every method of a [[Struct]]/ [[Enumerated Type]]/ [[Trait Object]] can define ``self`` as the first parameter in order to access the instance values, it can choose to not have the parameter if it doesn’t need access to field instances. ``self`` is of type ``Self`` and copies the instance field values into itself, it also takes the [[Ownership]] so it is rarely used.\n  ``&self`` is the immutable [[Reference Type]] variant and ``&mut self`` is the mutable reference variant. Rust allows us to use the shorthand ``self``/``&self``/``&mut self`` without specifying the ``Self`` type.\n  \n  For ex.:\n  ```rust\n  struct ABC {}\n  \n  impl ABC {\n  \tfn yo() {}\n      fn ctor() -> Self {\n      ABC{}\n    }\n  }\n  \n  fn main(){\n   ABC::someFunc();  //to call a self-less method\n  }\n  ```\n  ``Self`` is a type that can be assigned to the impl's type, so it can be used for *Constructor*s/*Factory* Methods.\n- Methods in rust can have the same name as *fields* of the custom [[Data Type]]. \n  Rust know what we are calling by assessing if we specify the () or not.\n  \n  For ex.:\n  ```rust\n  struct X {\n  length: i32,\n  }\n  \n  impl X {\n   fn length(&self)->i32 { \n    2\n  }\n  }\n  \n  fn main() {\n   let x= X{length: 5};\n   let y= x.length(); //gets 2\n   let z = x.length; //gets 5\n  }\n  ```\n- Automatic *Referencing* and *Dereferencing*\n  For ex.:\n  ```rust\n  Struct X {\n  length: i32,\n  }\n  \n  impl X {\n   fn yo(&self) {\n   //yee\n   }\n  }\n  fn main() {\n   let x = X{ length: 5};\n   x.yo(); \n   //is the same as\n   (&x).yo();\n  }\n  ```\n  In Rust, ``x`` is an *object pointer*, and we know in langs like C++, we access methods inside them with the ``->`` [[Operator]] so like ``(*x).yo()`` or ``x->yo()``,  but rust doesn’t have the ``->`` [[Operator]], and nor does it need to be explicit specified if we want to use the immutable [[Reference Type]] (with ``&(x).yo()``), mutable ref (with ``(&mut x).yo()``), or [[Copy or Move]] of the instance (with ``(x).yo()``) as it automatically determines the right type from the parameter of the methods, like ``yo`` above takes an immutable reference, so rust knows ``x.yo()`` is equivalent to ``(&x).yo()``.\n- Calling other methods\n  \n  For ex.:\n  ```rust\n  struct A {\n      x: i32,\n  }\n  \n  impl A {\n      fn ya() {}\n  \n      fn na(&self) {}\n  \n      fn callSelf(&self) {\n          Self::ya();\n          self.na();\n      }\n  \n      fn callNoSelf() {\n          A::ya();\n          //can't call na as there's no known instance here\n      }\n  }\n  \n  fn main() {\n      let a = A { x: 2 };\n      a.callSelf();\n      A::callNoSelf();\n  }\n  ```\n-",536870919]],["^15",[1325,"^17",1700492154585,536870919]],["^15",[1325,"^Z","Rust/pages/Method.md",536870919]],["^15",[1326,"^5",1065,536870919]],["^15",[1326,"^K",1700492154583,536870919]],["^15",[1326,"^@",false,536870919]],["^15",[1326,"^Y","associated function",536870919]],["^15",[1326,"^11","Associated Function",536870919]],["^15",[1326,"^B",1700492154583,536870919]],["^15",[1326,"^;","~u655b737a-8f77-4e7c-a9dd-2f4a3119cc22",536870919]],["^15",[1327,"^Q","alias:: Associated Function\n\n",536870919]],["^15",[1327,"^O","^16",536870919]],["^15",[1327,"^1;",["^19",[]],536870919]],["^15",[1327,"^F",1065,536870919]],["^15",[1327,"^X",1065,536870919]],["^15",[1327,"^V",1065,536870919]],["^15",[1327,"^U",1065,536870919]],["^15",[1327,"^U",1326,536870919]],["^15",[1327,"^:",true,536870919]],["^15",[1327,"^?",["^ ","^18",["^19",["Associated Function"]]],536870919]],["^15",[1327,"^J",["^18"],536870919]],["^15",[1327,"^4",["^ ","^18","Associated Function"],536870919]],["^15",[1327,"^H",1326,536870919]],["^15",[1327,"^;","~u655b737a-0808-460a-a397-c5f1151f981e",536870919]],["^15",[1328,"^Q","Method\nMethods are [[Function]]s defined for the [[Struct]]s/ [[Enumerated Type]]s/ [[Trait Object]]s. They are defined inside a special block with a keyword ``impl``, this is for organization, and makes it easier to find out where a custom [[Data Type]] has been defined implementations/behaviors for it, kind of like C++ where we have separate header and source files and unlike C++ there's no need for definition in the [[Data Type]] itself. Since all methods are associated with a [[Data Type]], they are also called *Associated Function*s.\n\nSyntax: \n``\nimpl <T> {\n fn someMethod(<self/&self>,<some Params>) -> <some return type> {}\n}\n``\n\n\nFor ex.:\n```rust\nstruct Rect{\n\tlength: i32,\n\tbreadth: i32\n}\n\nimpl Rect {\n\tfn area(&self) -> i32 {\n\tself.length * self.breadth\n } \n}\nfn main() {\n let rect= Rect(2,4);\n let area=rect.area(); //works\n}\n```\n\nA single custom [[Data Type]], can have multiple ``impl`` blocks for it.",536870919]],["^15",[1328,"^O","^16",536870919]],["^15",[1328,"^F",1327,536870919]],["^15",[1328,"^X",1065,536870919]],["^15",[1328,"^V",1065,536870919]],["^15",[1328,"^U",163,536870919]],["^15",[1328,"^U",1064,536870919]],["^15",[1328,"^U",1065,536870919]],["^15",[1328,"^U",1090,536870919]],["^15",[1328,"^U",1174,536870919]],["^15",[1328,"^U",1252,536870919]],["^15",[1328,"^H",163,536870919]],["^15",[1328,"^H",1064,536870919]],["^15",[1328,"^H",1090,536870919]],["^15",[1328,"^H",1174,536870919]],["^15",[1328,"^H",1252,536870919]],["^15",[1328,"^;","~u655b737a-b245-4f7f-aa49-e7aa8e6e696e",536870919]],["^15",[1329,"^Q","~``self``\nEvery method of a [[Struct]]/ [[Enumerated Type]]/ [[Trait Object]] can define ``self`` as the first parameter in order to access the instance values, it can choose to not have the parameter if it doesn’t need access to field instances. ``self`` is of type ``Self`` and copies the instance field values into itself, it also takes the [[Ownership]] so it is rarely used.\n``&self`` is the immutable [[Reference Type]] variant and ``&mut self`` is the mutable reference variant. Rust allows us to use the shorthand ``self``/``&self``/``&mut self`` without specifying the ``Self`` type.\n\nFor ex.:\n```rust\nstruct ABC {}\n\nimpl ABC {\n\tfn yo() {}\n    fn ctor() -> Self {\n    ABC{}\n  }\n}\n\nfn main(){\n ABC::someFunc();  //to call a self-less method\n}\n```\n``Self`` is a type that can be assigned to the impl's type, so it can be used for *Constructor*s/*Factory* Methods.",536870919]],["^15",[1329,"^O","^16",536870919]],["^15",[1329,"^F",1328,536870919]],["^15",[1329,"^X",1065,536870919]],["^15",[1329,"^V",1065,536870919]],["^15",[1329,"^U",1064,536870919]],["^15",[1329,"^U",1065,536870919]],["^15",[1329,"^U",1091,536870919]],["^15",[1329,"^U",1160,536870919]],["^15",[1329,"^U",1174,536870919]],["^15",[1329,"^U",1252,536870919]],["^15",[1329,"^H",1064,536870919]],["^15",[1329,"^H",1091,536870919]],["^15",[1329,"^H",1160,536870919]],["^15",[1329,"^H",1174,536870919]],["^15",[1329,"^H",1252,536870919]],["^15",[1329,"^;","~u655b737a-ac90-46ec-b208-d117d28b2673",536870919]],["^15",[1330,"^Q","Methods in rust can have the same name as *fields* of the custom [[Data Type]]. \nRust know what we are calling by assessing if we specify the () or not.\n\nFor ex.:\n```rust\nstruct X {\nlength: i32,\n}\n\nimpl X {\n fn length(&self)->i32 { \n  2\n}\n}\n\nfn main() {\n let x= X{length: 5};\n let y= x.length(); //gets 2\n let z = x.length; //gets 5\n}\n```",536870919]],["^15",[1330,"^O","^16",536870919]],["^15",[1330,"^F",1329,536870919]],["^15",[1330,"^X",1065,536870919]],["^15",[1330,"^V",1065,536870919]],["^15",[1330,"^U",1065,536870919]],["^15",[1330,"^U",1090,536870919]],["^15",[1330,"^H",1090,536870919]],["^15",[1330,"^;","~u655b737a-b1d8-4988-8ae7-e2817c975e4c",536870919]],["^15",[1331,"^Q","Automatic *Referencing* and *Dereferencing*\nFor ex.:\n```rust\nStruct X {\nlength: i32,\n}\n\nimpl X {\n fn yo(&self) {\n //yee\n }\n}\nfn main() {\n let x = X{ length: 5};\n x.yo(); \n //is the same as\n (&x).yo();\n}\n```\nIn Rust, ``x`` is an *object pointer*, and we know in langs like C++, we access methods inside them with the ``->`` [[Operator]] so like ``(*x).yo()`` or ``x->yo()``,  but rust doesn’t have the ``->`` [[Operator]], and nor does it need to be explicit specified if we want to use the immutable [[Reference Type]] (with ``&(x).yo()``), mutable ref (with ``(&mut x).yo()``), or [[Copy or Move]] of the instance (with ``(x).yo()``) as it automatically determines the right type from the parameter of the methods, like ``yo`` above takes an immutable reference, so rust knows ``x.yo()`` is equivalent to ``(&x).yo()``.",536870919]],["^15",[1331,"^O","^16",536870919]],["^15",[1331,"^F",1330,536870919]],["^15",[1331,"^X",1065,536870919]],["^15",[1331,"^V",1065,536870919]],["^15",[1331,"^U",339,536870919]],["^15",[1331,"^U",1065,536870919]],["^15",[1331,"^U",1091,536870919]],["^15",[1331,"^U",1171,536870919]],["^15",[1331,"^H",339,536870919]],["^15",[1331,"^H",1091,536870919]],["^15",[1331,"^H",1171,536870919]],["^15",[1331,"^;","~u655b737a-0dcb-4c47-b74f-a599d3c13035",536870919]],["^15",[1332,"^Q","Calling other methods\n\nFor ex.:\n```rust\nstruct A {\n    x: i32,\n}\n\nimpl A {\n    fn ya() {}\n\n    fn na(&self) {}\n\n    fn callSelf(&self) {\n        Self::ya();\n        self.na();\n    }\n\n    fn callNoSelf() {\n        A::ya();\n        //can't call na as there's no known instance here\n    }\n}\n\nfn main() {\n    let a = A { x: 2 };\n    a.callSelf();\n    A::callNoSelf();\n}\n```",536870919]],["^15",[1332,"^O","^16",536870919]],["^15",[1332,"^F",1331,536870919]],["^15",[1332,"^X",1065,536870919]],["^15",[1332,"^V",1065,536870919]],["^15",[1332,"^U",1065,536870919]],["^15",[1332,"^;","~u655b737a-171d-4fe9-8d03-59005a648592",536870919]],["^15",[1333,"^Q","",536870919]],["^15",[1333,"^O","^16",536870919]],["^15",[1333,"^F",1332,536870919]],["^15",[1333,"^X",1065,536870919]],["^15",[1333,"^V",1065,536870919]],["^15",[1333,"^U",1065,536870919]],["^15",[1333,"^;","~u655b737a-b17d-458b-8210-aebd424593a3",536870919]],["^15",[1334,"^3","- Rust, through [[Cargo]], allows multiple files and modules for managing big programs/projects.\n  Rust uses these features to allow us to organize our projects,\n   *Packages*: A Cargo feature that lets us build, test, and share [[Crate]]s\n  [[Crate]]s: A tree of [[Crate]]s that produces a library or executable.\n  [[Module]]s and [[use]]: Lets us control the organization, [[Scope]] , and privacy of *Paths*\n  *Paths*: A way of naming an item, such as a [[Struct]] , [[Function]] , or [[Module]]\n- Package\n  One or more [[Crate]]s that provides a set of functionality. Every package needs a [[cargo.toml]] file to define how to build the crates, it also needs at-least 1 [[Crate]], and it can contain at-most 1 library crate but any number of binary crates.\n- Folder Structure\n  When we create a new project with using [[Cargo]]'s ``cargo new <package-name>``, cargo creates a folder ``<package-name>`` with a [[cargo.toml]] file in it and places a folder named ``src`` in it as well. \n  \n  Inside the ``src`` folder, a file ``main.rs`` is created. This file is the [[Crate]] Root of this binary crate and this binary crate is named the same as the ``<package-name>``. We can create a ``src/lib.rs`` and this file is assumed as the library crate of the package, the name of this crate is the same as the ``<package-name>`` as well. If a crate contains both ``main.rs`` and ``lib.rs`` then 2 crates are created for the package, with the same names as the ``<package-name>``. All the other binary crates can be placed in the ``src/bin`` directory, every file inside it is treated as a separate binary crate.\n  \n  For ex.:\n  ```bash\n  $ cargo new my-project\n       Created binary (application) `my-project` package\n  $ ls my-project\n  Cargo.toml\n  src\n  $ ls my-project/src\n  main.rs\n  ```\n  \n  * We can define both ``lib.rs`` and ``main.rs`` for a [[Crate]]. When our crate is used as a binary crate, the ``main.rs`` file is ran and when it is used as a library crate, ``lib.rs`` is executed. So by always having the ``lib.rs`` and defining all functionality in it, and just having ``main.rs`` call the ``lib.rs`` we make a pattern that allows our crate to be directly used as a library crate as well and allows us to have our binary crate be a client of our own library crate, which  is a better architecture as we get the same behavior as any external .\n  \n  For ex.:\n  For a ``lib.rs``,\n  \n  ```rust\n  pub fn yo() {…}\n  ```\n  \n  the ``main.rs`` would be,\n  ```rust\n  use myCrate;\n  \n  fn main() {\n  \tmyCrate::yo();\n  }\n  \n  ```\n  \n  and the [[cargo.toml]] would be,\n  ```toml\n  [package]\n  name = \"myCrate\"\n  version = \"0.1.0\"\n  edition = \"2021\"\n  ```\n  \n  All 3 steps are important. The ``lib.rs`` becomes the crate with the same name as the ``<package-name>``, hence [[Access Modifier]] rules are followed even through [[Crate]] root which is ``main.rs``. We have abstracted away the crate root’s content into a different crate hence even it must access the ``lib.rs`` like external crates would. And ``main.rs`` needs to open the path to it, the ``lib.rs`` items aren’t in ``main.rs``’ scope. \n  Lastly, the ``cargo.toml`` definition describes important metadata. Even without “edition” key, the ``main.rs`` wouldn’t be able to access the lib.rs.\n- [[Cargo]]'s compilation flow\n  \n  First the [[Crate]] Root is opened, i.e. either the ``main.rs`` and if it’s not there then ``lib.rs``. \n  Then all the [[Module]]s defined at top indicate modules to be imported. Then to look for the code of the [[Module]], \n  the compiler first checks if the line is followed by ``{…}`` instead of a semicolon, if it is then that’s assumed as the code for it, otherwise it goes to ``src/<module-name>.rs``. If this file is not found then it goes to ``src/<module-name>/mod.rs``. \n  Then, if the [[Module]]'s crate defines its own sub-modules then they are looked for inside the Module's [[Crate]]'s directory ``src/<module-name>/<sub-module-name>.rs`` or ``src/<module-name>/<sub-module-name>/mod.rs``.\n  \n  For ex.:\n  If we have the [[Module]] ``mod garden`` in our [[Crate]] Root ``backyard``, then it is looked for in ``src/garden.rs`` and ``src/garden/mod.rs``.  \n  Then, if ``garden.rs`` [[Crate]] defines a [[Module]] ``mod vegetables;`` \n  then it is looked for in ``src/garden/vegetables.rs`` and finally ``src/garden/vegetables/mod.rs``.\n  The folder structure looks like so\n  ```\n  backyard\n  ├── Cargo.lock\n  ├── Cargo.toml\n  └── src\n      ├── garden\n      │   └── vegetables.rs\n      ├── garden.rs\n      └── main.rs\n  ```\n  \n  \n  Finally from the last [[Crate]] to the first one, all the crates are compiled.\n-\n-",536870919]],["^15",[1334,"^17",1700492154622,536870919]],["^15",[1334,"^Z","Rust/pages/Module System.md",536870919]],["^15",[1335,"^K",1700492154621,536870919]],["^15",[1335,"^[",1334,536870919]],["^15",[1335,"^@",false,536870919]],["^15",[1335,"^Y","module system",536870919]],["^15",[1335,"^11","Module System",536870919]],["^15",[1335,"^B",1700492154621,536870919]],["^15",[1335,"^;","~u656462fe-4f28-4abf-876d-c432709214fb",536870952]],["^15",[1336,"^Q","Rust, through [[Cargo]], allows multiple files and modules for managing big programs/projects.\nRust uses these features to allow us to organize our projects,\n *Packages*: A Cargo feature that lets us build, test, and share [[Crate]]s\n[[Crate]]s: A tree of [[Crate]]s that produces a library or executable.\n[[Module]]s and [[use]]: Lets us control the organization, [[Scope]] , and privacy of *Paths*\n*Paths*: A way of naming an item, such as a [[Struct]] , [[Function]] , or [[Module]]",536870919]],["^15",[1336,"^O","^16",536870919]],["^15",[1336,"^F",1335,536870919]],["^15",[1336,"^X",1335,536870919]],["^15",[1336,"^V",1335,536870919]],["^15",[1336,"^U",163,536870919]],["^15",[1336,"^U",287,536870919]],["^15",[1336,"^U",345,536870919]],["^15",[1336,"^U",1063,536870919]],["^15",[1336,"^U",1064,536870919]],["^15",[1336,"^U",1132,536870919]],["^15",[1336,"^U",1133,536870919]],["^15",[1336,"^U",1335,536870919]],["^15",[1336,"^H",163,536870919]],["^15",[1336,"^H",287,536870919]],["^15",[1336,"^H",345,536870919]],["^15",[1336,"^H",1063,536870919]],["^15",[1336,"^H",1064,536870919]],["^15",[1336,"^H",1132,536870919]],["^15",[1336,"^H",1133,536870919]],["^15",[1336,"^;","~u655b737a-4c9c-413d-9fde-f887633f17ef",536870919]],["^15",[1337,"^Q","Package\nOne or more [[Crate]]s that provides a set of functionality. Every package needs a [[cargo.toml]] file to define how to build the crates, it also needs at-least 1 [[Crate]], and it can contain at-most 1 library crate but any number of binary crates.",536870919]],["^15",[1337,"^O","^16",536870919]],["^15",[1337,"^F",1336,536870919]],["^15",[1337,"^X",1335,536870919]],["^15",[1337,"^V",1335,536870919]],["^15",[1337,"^U",1063,536870919]],["^15",[1337,"^U",1099,536870919]],["^15",[1337,"^U",1335,536870919]],["^15",[1337,"^H",1063,536870919]],["^15",[1337,"^H",1099,536870919]],["^15",[1337,"^;","~u655b737a-c27e-42da-8b55-0ce84309bafd",536870919]],["^15",[1338,"^Q","Folder Structure\nWhen we create a new project with using [[Cargo]]'s ``cargo new <package-name>``, cargo creates a folder ``<package-name>`` with a [[cargo.toml]] file in it and places a folder named ``src`` in it as well. \n\nInside the ``src`` folder, a file ``main.rs`` is created. This file is the [[Crate]] Root of this binary crate and this binary crate is named the same as the ``<package-name>``. We can create a ``src/lib.rs`` and this file is assumed as the library crate of the package, the name of this crate is the same as the ``<package-name>`` as well. If a crate contains both ``main.rs`` and ``lib.rs`` then 2 crates are created for the package, with the same names as the ``<package-name>``. All the other binary crates can be placed in the ``src/bin`` directory, every file inside it is treated as a separate binary crate.\n\nFor ex.:\n```bash\n$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n```\n\n* We can define both ``lib.rs`` and ``main.rs`` for a [[Crate]]. When our crate is used as a binary crate, the ``main.rs`` file is ran and when it is used as a library crate, ``lib.rs`` is executed. So by always having the ``lib.rs`` and defining all functionality in it, and just having ``main.rs`` call the ``lib.rs`` we make a pattern that allows our crate to be directly used as a library crate as well and allows us to have our binary crate be a client of our own library crate, which  is a better architecture as we get the same behavior as any external .\n\nFor ex.:\nFor a ``lib.rs``,\n\n```rust\npub fn yo() {…}\n```\n\nthe ``main.rs`` would be,\n```rust\nuse myCrate;\n\nfn main() {\n\tmyCrate::yo();\n}\n\n```\n\nand the [[cargo.toml]] would be,\n```toml\n[package]\nname = \"myCrate\"\nversion = \"0.1.0\"\nedition = \"2021\"\n```\n\nAll 3 steps are important. The ``lib.rs`` becomes the crate with the same name as the ``<package-name>``, hence [[Access Modifier]] rules are followed even through [[Crate]] root which is ``main.rs``. We have abstracted away the crate root’s content into a different crate hence even it must access the ``lib.rs`` like external crates would. And ``main.rs`` needs to open the path to it, the ``lib.rs`` items aren’t in ``main.rs``’ scope. \nLastly, the ``cargo.toml`` definition describes important metadata. Even without “edition” key, the ``main.rs`` wouldn’t be able to access the lib.rs.",536870919]],["^15",[1338,"^O","^16",536870919]],["^15",[1338,"^F",1337,536870919]],["^15",[1338,"^X",1335,536870919]],["^15",[1338,"^V",1335,536870919]],["^15",[1338,"^U",1062,536870919]],["^15",[1338,"^U",1063,536870919]],["^15",[1338,"^U",1099,536870919]],["^15",[1338,"^U",1132,536870919]],["^15",[1338,"^U",1335,536870919]],["^15",[1338,"^H",1062,536870919]],["^15",[1338,"^H",1063,536870919]],["^15",[1338,"^H",1099,536870919]],["^15",[1338,"^H",1132,536870919]],["^15",[1338,"^;","~u655b737a-e429-4010-a815-e582e353bbe8",536870919]],["^15",[1339,"^Q","[[Cargo]]'s compilation flow\n\nFirst the [[Crate]] Root is opened, i.e. either the ``main.rs`` and if it’s not there then ``lib.rs``. \nThen all the [[Module]]s defined at top indicate modules to be imported. Then to look for the code of the [[Module]], \nthe compiler first checks if the line is followed by ``{…}`` instead of a semicolon, if it is then that’s assumed as the code for it, otherwise it goes to ``src/<module-name>.rs``. If this file is not found then it goes to ``src/<module-name>/mod.rs``. \nThen, if the [[Module]]'s crate defines its own sub-modules then they are looked for inside the Module's [[Crate]]'s directory ``src/<module-name>/<sub-module-name>.rs`` or ``src/<module-name>/<sub-module-name>/mod.rs``.\n\nFor ex.:\nIf we have the [[Module]] ``mod garden`` in our [[Crate]] Root ``backyard``, then it is looked for in ``src/garden.rs`` and ``src/garden/mod.rs``.  \nThen, if ``garden.rs`` [[Crate]] defines a [[Module]] ``mod vegetables;`` \nthen it is looked for in ``src/garden/vegetables.rs`` and finally ``src/garden/vegetables/mod.rs``.\nThe folder structure looks like so\n```\nbackyard\n├── Cargo.lock\n├── Cargo.toml\n└── src\n    ├── garden\n    │   └── vegetables.rs\n    ├── garden.rs\n    └── main.rs\n```\n\n\nFinally from the last [[Crate]] to the first one, all the crates are compiled.",536870919]],["^15",[1339,"^O","^16",536870919]],["^15",[1339,"^F",1338,536870919]],["^15",[1339,"^X",1335,536870919]],["^15",[1339,"^V",1335,536870919]],["^15",[1339,"^U",287,536870919]],["^15",[1339,"^U",1063,536870919]],["^15",[1339,"^U",1132,536870919]],["^15",[1339,"^U",1335,536870919]],["^15",[1339,"^H",287,536870919]],["^15",[1339,"^H",1063,536870919]],["^15",[1339,"^H",1132,536870919]],["^15",[1339,"^;","~u655b737a-bb31-4863-bfe5-84695a2fde59",536870919]],["^15",[1340,"^Q","",536870919]],["^15",[1340,"^O","^16",536870919]],["^15",[1340,"^F",1339,536870919]],["^15",[1340,"^X",1335,536870919]],["^15",[1340,"^V",1335,536870919]],["^15",[1340,"^U",1335,536870919]],["^15",[1340,"^;","~u655b737a-ead4-466b-82ee-19f5f1625088",536870919]],["^15",[1341,"^Q","",536870919]],["^15",[1341,"^O","^16",536870919]],["^15",[1341,"^F",1340,536870919]],["^15",[1341,"^X",1335,536870919]],["^15",[1341,"^V",1335,536870919]],["^15",[1341,"^U",1335,536870919]],["^15",[1341,"^;","~u655b737a-e571-4d0e-8999-e8335a605d43",536870919]],["^15",[1342,"^3","- ``Mutex<T>``\n  A mutex, stands for ``Mutual Exclusion`` is a concept that allows the same region of memory to be accessed by multiple [[Thread]]s. The way mutex achieves this is by *guarding* the data by only allowing a single thread to be able to access it at once.\n  \n  For a thread to access data behind a mutex, it must \n  * First acquire the lock to the mutex, this will be immediate if no other thread is using it, or the thread will have to wait till the using thread unlocks it.\n  * Then it must unlock the mutex once it is done using it.\n  \n  In Rust, it is defined in ``std::sync::Mutex`` and is a Smart-[[Pointer]] \n  For ex.:\n  ```rust\n  use std::sync::Mutex;\n  \n  fn main() {\n      let m = Mutex::new(5); //type of m is Mutex<i32>\n  \n      {\n          let mut num = m.lock().unwrap(); //num's type is MutexGuard\n          *num = 6;\n      }\n  \n      println!(\"m = {:?}\", m); //prints 6\n  }\n  ```\n  \n  ``.lock()`` returns an [[Enum]] like [[Result Type]] called ``LockResult``, which returns an ``Err`` if acquiring the lock fails, which can be if the thread that originally had the lock [[Panic]]ked or died without unlocking the mutex. It's ``Ok(T)`` equivalent is a [[Data Type]] [[MutexGuard<T>]] which is a smart- [[Pointer]] to the data behind the mutex.\n  \n  [[MutexGuard<T>]] implements the ``Drop`` [[Trait]] to drop the lock of the mutex along with itself.\n  \n  As we can see, mutex in Rust uses the [[Interior Mutability Pattern]]\n- Passing Mutex to multiple [[Thread]]s\n  This requires another smart [[Pointer]] as the [[Ownership]] to the ``Mutex`` is required for a thread to acquire a lock to it, and moving it to a different thread in a [[Closure]] is a one-way thing.\n  Furthermore we have to use pointers that can be safely shared across threads, such as [[Arc<T>]].\n  \n  For ex.:\n  ```rust\n  use std::sync::{Arc, Mutex};\n  use std::thread;\n  \n  fn main() {\n  let a= Arc::new(Mutex::new(3));\n  let b= Arc.clone(&a);\n  thread.spawn(move|| {\n  \tlet mut c= b.lock().unwrap();\n  \t*c= 5;\n  })\n  println!(“{}”, *b.lock().unwrap());\n  }\n  ```\n-",536870919]],["^15",[1342,"^17",1700492154676,536870919]],["^15",[1342,"^Z","Rust/pages/Mutex%3CT%3E.md",536870919]],["^15",[1343,"^K",1700492154675,536870919]],["^15",[1343,"^@",false,536870919]],["^15",[1343,"^Y","mutexguard<t>",536870919]],["^15",[1343,"^11","MutexGuard<T>",536870919]],["^15",[1343,"^B",1700492154675,536870919]],["^15",[1343,"^;","~u655b737b-8815-4f47-bba3-f3948d0ec10b",536870920]],["^15",[1344,"^Q","~``Mutex<T>``\nA mutex, stands for ``Mutual Exclusion`` is a concept that allows the same region of memory to be accessed by multiple [[Thread]]s. The way mutex achieves this is by *guarding* the data by only allowing a single thread to be able to access it at once.\n\nFor a thread to access data behind a mutex, it must \n* First acquire the lock to the mutex, this will be immediate if no other thread is using it, or the thread will have to wait till the using thread unlocks it.\n* Then it must unlock the mutex once it is done using it.\n\nIn Rust, it is defined in ``std::sync::Mutex`` and is a Smart-[[Pointer]] \nFor ex.:\n```rust\nuse std::sync::Mutex;\n\nfn main() {\n    let m = Mutex::new(5); //type of m is Mutex<i32>\n\n    {\n        let mut num = m.lock().unwrap(); //num's type is MutexGuard\n        *num = 6;\n    }\n\n    println!(\"m = {:?}\", m); //prints 6\n}\n```\n\n``.lock()`` returns an [[Enum]] like [[Result Type]] called ``LockResult``, which returns an ``Err`` if acquiring the lock fails, which can be if the thread that originally had the lock [[Panic]]ked or died without unlocking the mutex. It's ``Ok(T)`` equivalent is a [[Data Type]] [[MutexGuard<T>]] which is a smart- [[Pointer]] to the data behind the mutex.\n\n[[MutexGuard<T>]] implements the ``Drop`` [[Trait]] to drop the lock of the mutex along with itself.\n\nAs we can see, mutex in Rust uses the [[Interior Mutability Pattern]]",536870919]],["^15",[1344,"^O","^16",536870919]],["^15",[1344,"^F",1092,536870919]],["^15",[1344,"^X",1092,536870919]],["^15",[1344,"^V",1092,536870919]],["^15",[1344,"^U",1066,536870919]],["^15",[1344,"^U",1073,536870919]],["^15",[1344,"^U",1074,536870919]],["^15",[1344,"^U",1080,536870919]],["^15",[1344,"^U",1090,536870919]],["^15",[1344,"^U",1092,536870919]],["^15",[1344,"^U",1094,536870919]],["^15",[1344,"^U",1098,536870919]],["^15",[1344,"^U",1118,536870919]],["^15",[1344,"^U",1343,536870919]],["^15",[1344,"^H",1066,536870919]],["^15",[1344,"^H",1073,536870919]],["^15",[1344,"^H",1074,536870919]],["^15",[1344,"^H",1080,536870919]],["^15",[1344,"^H",1090,536870919]],["^15",[1344,"^H",1094,536870919]],["^15",[1344,"^H",1098,536870919]],["^15",[1344,"^H",1118,536870919]],["^15",[1344,"^H",1343,536870919]],["^15",[1344,"^;","~u655b737a-24f2-41c8-86c4-13c09fb1f858",536870919]],["^15",[1345,"^Q","Passing Mutex to multiple [[Thread]]s\nThis requires another smart [[Pointer]] as the [[Ownership]] to the ``Mutex`` is required for a thread to acquire a lock to it, and moving it to a different thread in a [[Closure]] is a one-way thing.\nFurthermore we have to use pointers that can be safely shared across threads, such as [[Arc<T>]].\n\nFor ex.:\n```rust\nuse std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\nlet a= Arc::new(Mutex::new(3));\nlet b= Arc.clone(&a);\nthread.spawn(move|| {\n\tlet mut c= b.lock().unwrap();\n\t*c= 5;\n})\nprintln!(“{}”, *b.lock().unwrap());\n}\n```",536870919]],["^15",[1345,"^O","^16",536870919]],["^15",[1345,"^F",1344,536870919]],["^15",[1345,"^X",1092,536870919]],["^15",[1345,"^V",1092,536870919]],["^15",[1345,"^U",1071,536870919]],["^15",[1345,"^U",1074,536870919]],["^15",[1345,"^U",1092,536870919]],["^15",[1345,"^U",1093,536870919]],["^15",[1345,"^U",1094,536870919]],["^15",[1345,"^U",1160,536870919]],["^15",[1345,"^H",1071,536870919]],["^15",[1345,"^H",1074,536870919]],["^15",[1345,"^H",1093,536870919]],["^15",[1345,"^H",1094,536870919]],["^15",[1345,"^H",1160,536870919]],["^15",[1345,"^;","~u655b737a-81f6-4998-bcd5-781fbeba2aba",536870919]],["^15",[1346,"^Q","",536870919]],["^15",[1346,"^O","^16",536870919]],["^15",[1346,"^F",1345,536870919]],["^15",[1346,"^X",1092,536870919]],["^15",[1346,"^V",1092,536870919]],["^15",[1346,"^U",1092,536870919]],["^15",[1346,"^;","~u655b737a-d462-4669-aaa4-dce5cfadeea4",536870919]],["^15",[1347,"^3","alias:: Empty Type\n\n- A [[Data Type]] represented with ``!`` and has no values. \n  So it is kind of like *void* in *C++*, but not exactly, as blocks that denote return type ``!`` never return, so the control flow never actually returns back to the caller.\n  ``fn yo() -> ! {…}``\n  Although a syntax error, it says [[Function]] ``yo`` returns never. This type of function is called a *Diverging* [[Function]] as control never returns from this function. [[Scope]] blocks always return something, or [[Unit Type]] if nothing explicitly.\n  \n  The never type has some uses, namely, it tells Rust that a given piece of code never returns hence the only possible return types are others. \n  \n  For ex.:\n  ```rust\n  fn main(){\n  let x= Some(2);\n  /*\n  let y= match x {\n  \tSome(_) => 2,\n  \tNone => “ye”\n  };\n  */\n  //is an error as match needs to return the same type for all arms, however,\n  let y= match x {\n  \tSome(_) => 2,\n  \tNone => panic!(…)\n   };\n  } // works!\n  ```\n  The never type can be coerced into any type.\n  \n  For ex.:\n  ```rust\n  let x: ! = panic!();\n  // Can be coerced into any type.\n  let y: u32 = x;\n  ```\n  \n  Rust knows if the never type is returned then the control flow has changed and hence it doesn’t need to worry about the arm’s type.\n  \n  * ``continue`` also returns a never type.\n-",536870919]],["^15",[1347,"^17",1700492154693,536870919]],["^15",[1347,"^Z","Rust/pages/Never Type.md",536870919]],["^15",[1348,"^5",1224,536870919]],["^15",[1348,"^K",1700492154692,536870919]],["^15",[1348,"^@",false,536870919]],["^15",[1348,"^Y","empty type",536870919]],["^15",[1348,"^11","Empty Type",536870919]],["^15",[1348,"^B",1700492154692,536870919]],["^15",[1348,"^;","~u655b737a-1f18-4213-8c59-2206f73a441e",536870919]],["^15",[1349,"^Q","alias:: Empty Type\n\n",536870919]],["^15",[1349,"^O","^16",536870919]],["^15",[1349,"^1;",["^19",[]],536870919]],["^15",[1349,"^F",1224,536870919]],["^15",[1349,"^X",1224,536870919]],["^15",[1349,"^V",1224,536870919]],["^15",[1349,"^U",1224,536870919]],["^15",[1349,"^U",1348,536870919]],["^15",[1349,"^:",true,536870919]],["^15",[1349,"^?",["^ ","^18",["^19",["Empty Type"]]],536870919]],["^15",[1349,"^J",["^18"],536870919]],["^15",[1349,"^4",["^ ","^18","Empty Type"],536870919]],["^15",[1349,"^H",1348,536870919]],["^15",[1349,"^;","~u655b737a-a31e-4f83-8b22-f2abf44d1bbb",536870919]],["^15",[1350,"^Q","A [[Data Type]] represented with ``!`` and has no values. \nSo it is kind of like *void* in *C++*, but not exactly, as blocks that denote return type ``!`` never return, so the control flow never actually returns back to the caller.\n``fn yo() -> ! {…}``\nAlthough a syntax error, it says [[Function]] ``yo`` returns never. This type of function is called a *Diverging* [[Function]] as control never returns from this function. [[Scope]] blocks always return something, or [[Unit Type]] if nothing explicitly.\n\nThe never type has some uses, namely, it tells Rust that a given piece of code never returns hence the only possible return types are others. \n\nFor ex.:\n```rust\nfn main(){\nlet x= Some(2);\n/*\nlet y= match x {\n\tSome(_) => 2,\n\tNone => “ye”\n};\n*/\n//is an error as match needs to return the same type for all arms, however,\nlet y= match x {\n\tSome(_) => 2,\n\tNone => panic!(…)\n };\n} // works!\n```\nThe never type can be coerced into any type.\n\nFor ex.:\n```rust\nlet x: ! = panic!();\n// Can be coerced into any type.\nlet y: u32 = x;\n```\n\nRust knows if the never type is returned then the control flow has changed and hence it doesn’t need to worry about the arm’s type.\n\n* ``continue`` also returns a never type.",536870919]],["^15",[1350,"^O","^16",536870919]],["^15",[1350,"^F",1349,536870919]],["^15",[1350,"^X",1224,536870919]],["^15",[1350,"^V",1224,536870919]],["^15",[1350,"^U",163,536870919]],["^15",[1350,"^U",345,536870919]],["^15",[1350,"^U",1090,536870919]],["^15",[1350,"^U",1224,536870919]],["^15",[1350,"^U",1264,536870919]],["^15",[1350,"^H",163,536870919]],["^15",[1350,"^H",345,536870919]],["^15",[1350,"^H",1090,536870919]],["^15",[1350,"^H",1264,536870919]],["^15",[1350,"^;","~u655b737a-e607-4039-9123-8e4fdd0aa0fa",536870919]],["^15",[1351,"^Q","",536870919]],["^15",[1351,"^O","^16",536870919]],["^15",[1351,"^F",1350,536870919]],["^15",[1351,"^X",1224,536870919]],["^15",[1351,"^V",1224,536870919]],["^15",[1351,"^U",1224,536870919]],["^15",[1351,"^;","~u655b737a-9949-4ef4-a3ff-07c731b71906",536870919]],["^15",[1352,"^3","- This is a predefined ``enum`` in Rust's [[Prelude]]. As we know, rust doesn't have the concept of *null*, the Option Enum is the closes to null we get in Rust as it simply has a variant used to represent the absence of a value.\n- It is defined like so\n  ```rust\n  enum Option<T> {\n    None,\n    Some(T),\n  }\n  ```\n  where ``<T>`` is a [[Generic Type]] definition.\n  \n  \n  For ex.:\n  ```rust\n  fn main() {\n   let x = Option::Some(\"yo\"); //T is &str\n   let y = None; //Rust allows shorthanding Some or None for the Option's variants.\n   let z= match x {\n    Option::Some(value) => 2,\n    None => 5\n   }\n  }\n  ```\n  \n  The benefit is, we don't need to worry if a value is *null*, because we have to use [[Pattern Matching]] to get value out of an enum and hence it is guaranteed we will only operate on Option's values if they are ``Some``.\n- [[Unwrap]]\n  This [[Method]] is implemented for ``Option``.",536870920]],["^15",[1352,"^17",1700492155157,536870920]],["^15",[1352,"^Z","Rust/pages/Option Type.md",536870920]],["^15",[1353,"^Q","This is a predefined ``enum`` in Rust's [[Prelude]]. As we know, rust doesn't have the concept of *null*, the Option Enum is the closes to null we get in Rust as it simply has a variant used to represent the absence of a value.",536870920]],["^15",[1353,"^O","^16",536870920]],["^15",[1353,"^F",1254,536870920]],["^15",[1353,"^X",1254,536870920]],["^15",[1353,"^V",1254,536870920]],["^15",[1353,"^U",1212,536870920]],["^15",[1353,"^U",1254,536870920]],["^15",[1353,"^H",1212,536870920]],["^15",[1353,"^;","~u655b737b-9d93-49f1-8b74-ff0ba039e61c",536870920]],["^15",[1354,"^Q","It is defined like so\n```rust\nenum Option<T> {\n  None,\n  Some(T),\n}\n```\nwhere ``<T>`` is a [[Generic Type]] definition.\n\n\nFor ex.:\n```rust\nfn main() {\n let x = Option::Some(\"yo\"); //T is &str\n let y = None; //Rust allows shorthanding Some or None for the Option's variants.\n let z= match x {\n  Option::Some(value) => 2,\n  None => 5\n }\n}\n```\n\nThe benefit is, we don't need to worry if a value is *null*, because we have to use [[Pattern Matching]] to get value out of an enum and hence it is guaranteed we will only operate on Option's values if they are ``Some``.",536870920]],["^15",[1354,"^O","^16",536870920]],["^15",[1354,"^F",1353,536870920]],["^15",[1354,"^X",1254,536870920]],["^15",[1354,"^V",1254,536870920]],["^15",[1354,"^U",1087,536870920]],["^15",[1354,"^U",1253,536870920]],["^15",[1354,"^U",1254,536870920]],["^15",[1354,"^H",1087,536870920]],["^15",[1354,"^H",1253,536870920]],["^15",[1354,"^;","~u655b737b-636b-47e2-b4f1-b1bafe425686",536870920]],["^15",[1355,"^Q","[[Unwrap]]\nThis [[Method]] is implemented for ``Option``.",536870920]],["^15",[1355,"^O","^16",536870920]],["^15",[1355,"^F",1354,536870920]],["^15",[1355,"^X",1254,536870920]],["^15",[1355,"^V",1254,536870920]],["^15",[1355,"^U",1065,536870920]],["^15",[1355,"^U",1173,536870920]],["^15",[1355,"^U",1254,536870920]],["^15",[1355,"^H",1065,536870920]],["^15",[1355,"^H",1173,536870920]],["^15",[1355,"^;","~u655b737b-b7db-4f92-9a07-94816a333f45",536870920]],["^15",[1356,"^3","- Rust is a systems programming language so it allows memory access like *C++*. All programs have to manage their memory usage, i.e. (de)allocating memory. Other languages either run a *GC* for the same  or leave it up-to the programmer (*C*). But in rust, a third method, [[Ownership]] is used. Using this method memory (de)allocation rules are checked right at compile time and the program doesn’t even compile if they aren’t followed. So rust has no *GC*, just a very guaranteeing memory model.\n- Stack vs Heap\n  *Stack* is a fixed size contiguous (adjacent, touching borders) segment of memory. This is a LIFO approach as data must be pushed and popped. \n  In a *heap*, the size isn’t fixed so when we want to store some data, the chunk is allocated and the address returned through a pointer. \n  Pushing to the *stack* is faster than to the *heap*, because the allocator has to allocate the space and do a few other things. \n  Same for reading. When we read from the *stack*, the entire *stack* is moved to the processor and then elements can be accessed very fastly. \n  \n  However, since a *heap* is not a contiguous segment of memory, it can’t be passed all at once to the *L caches*. So the read is slower. \n  \n  *Stack* and *heap* aren’t treated much differently in other languages but in Rust they are, and ownership rules help in understanding how Rust operates with them.\n- Ownership Rules\n  * Each value in Rust has an *owner*.\n  * There can only be one owner at a time.\n  * When the owner goes out of scope, the value will be dropped.\n- The [[Copy or Move]] defines how ownership affects [[Variable]]s.\n- Returning Ownership\n  [[Function]]s can return ownership too. \n  For ex.:\n  ```rust\n  fn main() {\n  let x = String::from(\"yo\");\n  let y = give_and_get_ownership(x); //y gets the ownership from the function\n  \n  }\n  \n  fn give_and_get_ownership(x: String)-> String {\n   x //x has the ownership here \n  }\n  \n  ```\n-\n-",536870920]],["^15",[1356,"^17",1700492155191,536870920]],["^15",[1356,"^Z","Rust/pages/Ownership.md",536870920]],["^15",[1357,"^Q","Rust is a systems programming language so it allows memory access like *C++*. All programs have to manage their memory usage, i.e. (de)allocating memory. Other languages either run a *GC* for the same  or leave it up-to the programmer (*C*). But in rust, a third method, [[Ownership]] is used. Using this method memory (de)allocation rules are checked right at compile time and the program doesn’t even compile if they aren’t followed. So rust has no *GC*, just a very guaranteeing memory model.",536870920]],["^15",[1357,"^O","^16",536870920]],["^15",[1357,"^F",1160,536870920]],["^15",[1357,"^X",1160,536870920]],["^15",[1357,"^V",1160,536870920]],["^15",[1357,"^U",1160,536870920]],["^15",[1357,"^H",1160,536870920]],["^15",[1357,"^;","~u655b737b-0d82-4f7a-a2f1-ad3a6014e588",536870920]],["^15",[1358,"^Q","Stack vs Heap\n*Stack* is a fixed size contiguous (adjacent, touching borders) segment of memory. This is a LIFO approach as data must be pushed and popped. \nIn a *heap*, the size isn’t fixed so when we want to store some data, the chunk is allocated and the address returned through a pointer. \nPushing to the *stack* is faster than to the *heap*, because the allocator has to allocate the space and do a few other things. \nSame for reading. When we read from the *stack*, the entire *stack* is moved to the processor and then elements can be accessed very fastly. \n\nHowever, since a *heap* is not a contiguous segment of memory, it can’t be passed all at once to the *L caches*. So the read is slower. \n\n*Stack* and *heap* aren’t treated much differently in other languages but in Rust they are, and ownership rules help in understanding how Rust operates with them.",536870920]],["^15",[1358,"^O","^16",536870920]],["^15",[1358,"^F",1357,536870920]],["^15",[1358,"^X",1160,536870920]],["^15",[1358,"^V",1160,536870920]],["^15",[1358,"^U",1160,536870920]],["^15",[1358,"^;","~u655b737b-e043-40fb-a0f3-f1b4d5f26576",536870920]],["^15",[1359,"^Q","Ownership Rules\n* Each value in Rust has an *owner*.\n* There can only be one owner at a time.\n* When the owner goes out of scope, the value will be dropped.",536870920]],["^15",[1359,"^O","^16",536870920]],["^15",[1359,"^F",1358,536870920]],["^15",[1359,"^X",1160,536870920]],["^15",[1359,"^V",1160,536870920]],["^15",[1359,"^U",1160,536870920]],["^15",[1359,"^;","~u655b737b-0464-4668-8290-2fa613c6f879",536870920]],["^15",[1360,"^Q","The [[Copy or Move]] defines how ownership affects [[Variable]]s.",536870920]],["^15",[1360,"^O","^16",536870920]],["^15",[1360,"^F",1359,536870920]],["^15",[1360,"^X",1160,536870920]],["^15",[1360,"^V",1160,536870920]],["^15",[1360,"^U",161,536870920]],["^15",[1360,"^U",1160,536870920]],["^15",[1360,"^U",1171,536870920]],["^15",[1360,"^H",161,536870920]],["^15",[1360,"^H",1171,536870920]],["^15",[1360,"^;","~u655b737b-d9cf-446b-ac24-4bb6100b55fd",536870920]],["^15",[1361,"^Q","Returning Ownership\n[[Function]]s can return ownership too. \nFor ex.:\n```rust\nfn main() {\nlet x = String::from(\"yo\");\nlet y = give_and_get_ownership(x); //y gets the ownership from the function\n\n}\n\nfn give_and_get_ownership(x: String)-> String {\n x //x has the ownership here \n}\n\n```",536870920]],["^15",[1361,"^O","^16",536870920]],["^15",[1361,"^F",1360,536870920]],["^15",[1361,"^X",1160,536870920]],["^15",[1361,"^V",1160,536870920]],["^15",[1361,"^U",163,536870920]],["^15",[1361,"^U",1160,536870920]],["^15",[1361,"^H",163,536870920]],["^15",[1361,"^;","~u655b737b-bb3a-4ed3-bce3-8ad040bb8eff",536870920]],["^15",[1362,"^Q","",536870920]],["^15",[1362,"^O","^16",536870920]],["^15",[1362,"^F",1361,536870920]],["^15",[1362,"^X",1160,536870920]],["^15",[1362,"^V",1160,536870920]],["^15",[1362,"^U",1160,536870920]],["^15",[1362,"^;","~u655b737b-c249-4448-9463-d38dbe38dac9",536870920]],["^15",[1363,"^Q","",536870920]],["^15",[1363,"^O","^16",536870920]],["^15",[1363,"^F",1362,536870920]],["^15",[1363,"^X",1160,536870920]],["^15",[1363,"^V",1160,536870920]],["^15",[1363,"^U",1160,536870920]],["^15",[1363,"^;","~u655b737b-0941-41b7-af54-c8ff54b1fd62",536870920]],["^15",[1364,"^3","- ``panic!``\n  This macro immediately signals the system there has been an unrecoverable error and hence the program stops right there.\n  Syntax: ``panic!(\"<string>\")``\n  \n  For ex.:\n  ```rust\n  fn main() {\n   panic!(\"crash and burn\"); //panics\n  } \n  ```\n- Unwinding and Aborting on Panic\n  When a program panics, the call-stack is *unwinded*, i.e. Rust's runtime requires the program to walk back its call-stack, then it has to clean up all the resources used in each [[Function]] and finally exit. This is a time-taking task and it also increases the size of the Rust binary/Executable. \n  \n  However, we can avoid it and let the OS clean-up all the resources instead, which is a less cleaner solution but allows quicker exit and smaller binary size. This is called `Aborting on Panic`.\n  We can enable it for our [[Package]] by configuring the [[cargo.toml]] like so\n  ```toml\n  [profile.release]\n  panic = 'abort'\n  ```\n  This applies AOP on the release builds.\n- Backtrace\n  It's possible that our code itself doesn't cause a panic directly, such as if we use a [[Vector]] and access an invalid index it panics in the Vector's files and not in our code. This is not shown by the normal stacktrace printed by the panic [[Macro]].\n  To see a detailed backtrace, we need the system environment over the Rust app to have the environment variable ``RUST_BACKTRACE`` set to any value other than 0. \n  Although this only works in debug builds where the debug symbols are loaded.\n-",536870920]],["^15",[1364,"^17",1700492155205,536870920]],["^15",[1364,"^Z","Rust/pages/Panic.md",536870920]],["^15",[1365,"^Q","~``panic!``\nThis macro immediately signals the system there has been an unrecoverable error and hence the program stops right there.\nSyntax: ``panic!(\"<string>\")``\n\nFor ex.:\n```rust\nfn main() {\n panic!(\"crash and burn\"); //panics\n} \n```",536870920]],["^15",[1365,"^O","^16",536870920]],["^15",[1365,"^F",1080,536870920]],["^15",[1365,"^X",1080,536870920]],["^15",[1365,"^V",1080,536870920]],["^15",[1365,"^U",1080,536870920]],["^15",[1365,"^;","~u655b737b-5629-4620-89dc-5d4af5094937",536870920]],["^15",[1366,"^Q","Unwinding and Aborting on Panic\nWhen a program panics, the call-stack is *unwinded*, i.e. Rust's runtime requires the program to walk back its call-stack, then it has to clean up all the resources used in each [[Function]] and finally exit. This is a time-taking task and it also increases the size of the Rust binary/Executable. \n\nHowever, we can avoid it and let the OS clean-up all the resources instead, which is a less cleaner solution but allows quicker exit and smaller binary size. This is called `Aborting on Panic`.\nWe can enable it for our [[Package]] by configuring the [[cargo.toml]] like so\n```toml\n[profile.release]\npanic = 'abort'\n```\nThis applies AOP on the release builds.",536870920]],["^15",[1366,"^O","^16",536870920]],["^15",[1366,"^F",1365,536870920]],["^15",[1366,"^X",1080,536870920]],["^15",[1366,"^V",1080,536870920]],["^15",[1366,"^U",163,536870920]],["^15",[1366,"^U",1080,536870920]],["^15",[1366,"^U",1099,536870920]],["^15",[1366,"^U",1129,536870920]],["^15",[1366,"^H",163,536870920]],["^15",[1366,"^H",1099,536870920]],["^15",[1366,"^H",1129,536870920]],["^15",[1366,"^;","~u655b737b-35cf-4a27-b0bd-d9a173353cff",536870920]],["^15",[1367,"^Q","Backtrace\nIt's possible that our code itself doesn't cause a panic directly, such as if we use a [[Vector]] and access an invalid index it panics in the Vector's files and not in our code. This is not shown by the normal stacktrace printed by the panic [[Macro]].\nTo see a detailed backtrace, we need the system environment over the Rust app to have the environment variable ``RUST_BACKTRACE`` set to any value other than 0. \nAlthough this only works in debug builds where the debug symbols are loaded.",536870920]],["^15",[1367,"^O","^16",536870920]],["^15",[1367,"^F",1366,536870920]],["^15",[1367,"^X",1080,536870920]],["^15",[1367,"^V",1080,536870920]],["^15",[1367,"^U",160,536870920]],["^15",[1367,"^U",1079,536870920]],["^15",[1367,"^U",1080,536870920]],["^15",[1367,"^H",160,536870920]],["^15",[1367,"^H",1079,536870920]],["^15",[1367,"^;","~u655b737b-c9b1-457f-8ede-c130f3863c28",536870920]],["^15",[1368,"^Q","",536870920]],["^15",[1368,"^O","^16",536870920]],["^15",[1368,"^F",1367,536870920]],["^15",[1368,"^X",1080,536870920]],["^15",[1368,"^V",1080,536870920]],["^15",[1368,"^U",1080,536870920]],["^15",[1368,"^;","~u655b737b-b82d-4cfc-b8a3-e84002f4d845",536870920]],["^15",[1369,"^3","- Pattern\n  They are a special syntax that allow Rust to perform matching against structures of types, both, simple and complex. Patterns allow a value to be compared against a special syntax and hence alter the flow of the program, i.e., [[Control Flow]].\n  \n  A pattern contains one or more of these:\n  * [[Literals]]\n  * [[Destructuring]] of [[Array]]s , [[Enum]]s , [[Struct]]s , or [[Tuple]]s \n  * [[Variable]]s \n  * Wildcards\n  * *Placeholders*: ``_`` the placeholder character.\n  \n  For ex.:\n  ```rust\n     let tup = (500, 6.4, 1);\n  \n      let (x, y, z) = tup;\n  ```\n  \n  Here pattern matching allows Destructuring of tuple ``tup`` and assign its values to the [[Variable]]s ``x``, ``y`` and ``z``.\n- Patterns are everywhere in Rust. Even a simple [[Variable]] assignment is a pattern.\n  As we know from ``while let`` [[Loop]] and ``if-let`` [[Conditional]], ``let`` denotes a pattern and expression assignment.\n  The simple ``let <varname>= <some value>`` is actually ``let <Pattern> = <Expression>``, which is why [[Tuple]] [[Destructuring]] also works.\n- Pattern Types\n  \n  There are 2\n  \n  * *Refutable Pattern*: Patterns that can fail to match an expression.\n  For ex.:\n  ```rust\n  fn main() {\n   let x: Option<i32> = None;\n   if let Some(value) = x { //will fail to match\n    } \n  }\n  ```\n  * *Irrefutable Pattern*: Patterns that will match any value passed to the expression. Such as [[Variable]] assignment ``let <some var>=<some value>``.\n- ``match``\n  This is an advanced version of a *switch* block in other languages. It allows us to compare a value against patterns and then the pattern which matches has its block executed. This is even more powerful because Rust Compiler requires the match patterns to be exhaustive (otherwise an [[Error]]), meaning they must cover all possible values of a type. \n  Furthermore, match is an [[Expression]] so it returns a value.  \n  \n  Syntax:\n  ``\n  match <variable/value> {\n   <Pattern 1> => <some expression>,\n   <Pattern 2> => {<expression, can also use blocks>\n    },\n   ...\n  };\n  ``\n  \n  \n  For ex.:\n  ```rust\n  enum X{\n  Y(i32),\n  Z\n  }\n  \n  fn main() {\n   let x = X::Y(2);\n   let z = match X { //puts 2 in z\n    X::Y(value) => 2,\n    X::Z => {\n      2+4\n     },\n   };\n  }\n  ```\n  The patterns are evaluated from top to bottom, and the first one that matches has its expression executed. After which the match block returns the expression's return value or [[Unit Type]] if no value is being returned explicitly. \n  \n  * Each ``Pattern => Expression`` combo is called an arm, like *case* blocks for *switch* in other langs, but we don't need any ``break;`` statements since matches are [[Expression]]s, so every arm is expected to return the [[Control Flow]] back to the match.\n  \n  * Empty expression: If we desire an expression to do nothing we can simply do ``<Pattern> => ()`` or  ``<Pattern> => { }``(empty blocks return unit type) so it returns the [[Unit Type]] and does nothing.\n  \n  * Using catch-all and empty expression, we can create a *default* case of other langs, i.e., it's a pattern that matches everything and does nothing.\n  For ex.:\n  ```rust\n  fn main() {\n   let x = 2;\n   match x {\n   1=> 2,\n   _ => ()  //catch all, do nothing\n   }\n  };\n  ```\n- Patterns\n  \n  * [[Destructuring]] [[Enum]] \n  Enums in patterns have their values binded to given [[Variable]]s automatically. \n  For ex.:\n  ```rust\n  enum Yo {\n  \tA(i32),\n  \tB\n  }\n  \n  needs a match like,\n      let x= match a {\n         B => \"na\",\n         Yo::A(value) => \"ya\"\n      };\n  ```\n  \n   \n  \n  * Catch-all: We can use a variable to catch all values of a pattern, or the placeholder ``_`` character to catch all and ignore the caught value.\n  For ex.:\n  ```rust\n  fn main() {\n   let x = 2;\n   let y= match x {\n     0 => 0,\n     1 => 1+1,\n     value => value //matches all values, and puts them in the value variable\n   };\n   \n   let z= match x {\n     _ => 2, //catches all, but ignores them. If we use _ in the expression on the right, it'll be an error\n    };\n  }\n  ```\n  The placeholder character can only be used in a pattern. \n  \n  * Matching named variables\n  For ex.:\n  ```rust\n  fn main() {\n      let x = Some(5);\n      let y = 10;\n  \n      match x {\n          Some(50) => println!(\"Got 50\"),\n          Some(y) => println!(\"Matched, y = {y}\"),\n          _ => println!(\"Default case, x = {:?}\", x),\n      }\n  }\n  ```\n  \n  * Matching multiple values: Possible by using the ``|`` syntax, which is much like the ``||`` [[Operator]]. \n  \n  For ex.:\n  ```rust\n  fn main() {\n      let x = 1;\n  \n      match x {\n          1 | 2 => println!(\"one or two\"),\n          3 => println!(\"three\"),\n          _ => println!(\"anything\"),\n      }\n  }\n  \n  ```\n  \n  * Matching values within a [[Range]]: We use ``<start inclusive>..<end exclusive>`` . Can use ``=`` before end to have end inclusive.\n  For ex.:\n  ```rust\n  fn main() {\n      let x = 5;\n  \n      match x {\n          1..=5 => println!(\"one through five\"),\n          _ => println!(\"something else\"),\n      }\n  }\n  ```\n  \n  * [[Destructuring]] [[Struct]]s:\n  \n  For ex.:\n  ```rust\n  struct Point {\n      x: i32,\n      y: i32,\n  }\n  fn main() {\n      let p = Point { x: 0, y: 7 };\n  \n      match p {\n          Point { x, y: 0 } => println!(\"On the x axis at {x}\"), //matches any x, but y as 0, puts both in x and y\n          Point { x: 0, y } => println!(\"On the y axis at {y}\"),\n          Point { x, y } => {\n              println!(\"On neither axis: ({x}, {y})\");\n          }\n      }\n  }\n  ```\n  The actual syntax is ``let <struct> { x: <varname>, y: <varname> } = p;`` but we can omit varnames if they are the same.\n  \n  * [[Destructuring]] [[Struct]]s and [[Tuple]]s\n  For ex.:\n  ```rust\n    struct Point {\n      x: i32,\n      y: i32,\n  }\n   fn main() {\n      let ((feet, inches), Point { x, y }) = ((3, 10), Point { x: 3, y: -10 }); //creates 4 variables, x, y, feet and inches.\n  }\n  ```\n  \n  * Ignoring values: We can use the placeholder character, and same for [[Variable]]s. By [[Default Linter Rule]] if a variable name starts with ``_`` it is assumed to be unused and doesn't give a warning.\n  \n  We can ignore multiple values in patterns with ``..``.\n  For ex.:\n  ```rust\n  fn main() {\n      let numbers = (2, 4, 8, 16, 32);\n  \n      match numbers {\n          (first, .., last) => { //ignores all the rest\n              println!(\"Some numbers: {first}, {last}\");\n          }\n      }\n  }\n  ```\n  \n  * *Match Guard*: Extra condition to ``match`` arms by using ``if`` [[Conditional]].\n  For ex.:\n  ```rust\n  fn main() {\n      let x = Some(5);\n      let y = 10;\n  \n      match x {\n          Some(50) => println!(\"Got 50\"),\n          Some(n) if n == y => println!(\"Matched, n = {n}\"),\n          _ => println!(\"Default case, x = {:?}\", x),\n      }\n  \n      println!(\"at the end: x = {:?}, y = {y}\", x);\n  }\n  ```\n  \n  * ``@`` Binding: The ``@`` [[Operator]] allows us to capture a value in a variable as well as test it on a pattern at the same time.\n  For ex.:\n  ```rust\n      enum Message {\n          Hello { id: i32 },\n      }\n  \n  fn main(){\n      let msg = Message::Hello { id: 5 };\n  \n      match msg {\n          Message::Hello {\n              id: id_variable @ 3..=7,\n          } => println!(\"yo\"),\n          Message::Hello { id: 10..=12 } => {\n              println!(\"na\")\n          }\n          Message::Hello { id } => println!(\"Found some other id: {}\", id),\n      }\n  }\n  ```\n-\n-\n-\n-",536870920]],["^15",[1369,"^17",1700492155252,536870920]],["^15",[1369,"^Z","Rust/pages/Pattern Matching.md",536870920]],["^15",[1370,"^K",1700492155322,536870920]],["^15",[1370,"^[",1399,536870920]],["^15",[1370,"^@",false,536870920]],["^15",[1370,"^Y","range",536870920]],["^15",[1370,"^11","Range",536870920]],["^15",[1370,"^B",1700492155322,536870920]],["^15",[1370,"^;","~u656462fe-ddef-4fcd-80bf-46449dbe91f5",536870950]],["^15",[1371,"^K",1700492155250,536870920]],["^15",[1371,"^@",false,536870920]],["^15",[1371,"^Y","literals",536870920]],["^15",[1371,"^11","Literals",536870920]],["^15",[1371,"^B",1700492155250,536870920]],["^15",[1371,"^;","~u655b737b-69fa-4527-ab71-f081ea5779f1",536870920]],["^15",[1372,"^Q","Pattern Types\n\nThere are 2\n\n* *Refutable Pattern*: Patterns that can fail to match an expression.\nFor ex.:\n```rust\nfn main() {\n let x: Option<i32> = None;\n if let Some(value) = x { //will fail to match\n  } \n}\n```\n* *Irrefutable Pattern*: Patterns that will match any value passed to the expression. Such as [[Variable]] assignment ``let <some var>=<some value>``.",536870920]],["^15",[1372,"^O","^16",536870920]],["^15",[1372,"^F",1376,536870920]],["^15",[1372,"^X",1253,536870920]],["^15",[1372,"^V",1253,536870920]],["^15",[1372,"^U",161,536870920]],["^15",[1372,"^U",1253,536870920]],["^15",[1372,"^H",161,536870920]],["^15",[1372,"^;","~u655b737b-cd45-4fe5-9bbf-f0db639c3226",536870920]],["^15",[1373,"^Q","",536870920]],["^15",[1373,"^O","^16",536870920]],["^15",[1373,"^F",1374,536870920]],["^15",[1373,"^X",1253,536870920]],["^15",[1373,"^V",1253,536870920]],["^15",[1373,"^U",1253,536870920]],["^15",[1373,"^;","~u655b737b-4aaa-4bed-86ed-2b8d61a686b8",536870920]],["^15",[1374,"^Q","",536870920]],["^15",[1374,"^O","^16",536870920]],["^15",[1374,"^F",1378,536870920]],["^15",[1374,"^X",1253,536870920]],["^15",[1374,"^V",1253,536870920]],["^15",[1374,"^U",1253,536870920]],["^15",[1374,"^;","~u655b737b-8d30-435c-8b32-e12d5a056d5e",536870920]],["^15",[1375,"^Q","",536870920]],["^15",[1375,"^O","^16",536870920]],["^15",[1375,"^F",1373,536870920]],["^15",[1375,"^X",1253,536870920]],["^15",[1375,"^V",1253,536870920]],["^15",[1375,"^U",1253,536870920]],["^15",[1375,"^;","~u655b737b-7148-43a8-8e8b-404fd6c4c6f2",536870920]],["^15",[1376,"^Q","Patterns are everywhere in Rust. Even a simple [[Variable]] assignment is a pattern.\nAs we know from ``while let`` [[Loop]] and ``if-let`` [[Conditional]], ``let`` denotes a pattern and expression assignment.\nThe simple ``let <varname>= <some value>`` is actually ``let <Pattern> = <Expression>``, which is why [[Tuple]] [[Destructuring]] also works.",536870920]],["^15",[1376,"^O","^16",536870920]],["^15",[1376,"^F",1377,536870920]],["^15",[1376,"^X",1253,536870920]],["^15",[1376,"^V",1253,536870920]],["^15",[1376,"^U",161,536870920]],["^15",[1376,"^U",300,536870920]],["^15",[1376,"^U",495,536870920]],["^15",[1376,"^U",574,536870920]],["^15",[1376,"^U",1159,536870920]],["^15",[1376,"^U",1253,536870920]],["^15",[1376,"^H",161,536870920]],["^15",[1376,"^H",300,536870920]],["^15",[1376,"^H",495,536870920]],["^15",[1376,"^H",574,536870920]],["^15",[1376,"^H",1159,536870920]],["^15",[1376,"^;","~u655b737b-b5b4-4a97-9d8a-27be26880232",536870920]],["^15",[1377,"^Q","Pattern\nThey are a special syntax that allow Rust to perform matching against structures of types, both, simple and complex. Patterns allow a value to be compared against a special syntax and hence alter the flow of the program, i.e., [[Control Flow]].\n\nA pattern contains one or more of these:\n* [[Literals]]\n* [[Destructuring]] of [[Array]]s , [[Enum]]s , [[Struct]]s , or [[Tuple]]s \n* [[Variable]]s \n* Wildcards\n* *Placeholders*: ``_`` the placeholder character.\n\nFor ex.:\n```rust\n   let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n```\n\nHere pattern matching allows Destructuring of tuple ``tup`` and assign its values to the [[Variable]]s ``x``, ``y`` and ``z``.",536870920]],["^15",[1377,"^O","^16",536870920]],["^15",[1377,"^F",1253,536870920]],["^15",[1377,"^X",1253,536870920]],["^15",[1377,"^V",1253,536870920]],["^15",[1377,"^U",161,536870920]],["^15",[1377,"^U",305,536870920]],["^15",[1377,"^U",574,536870920]],["^15",[1377,"^U",1064,536870920]],["^15",[1377,"^U",1066,536870920]],["^15",[1377,"^U",1159,536870920]],["^15",[1377,"^U",1202,536870920]],["^15",[1377,"^U",1253,536870920]],["^15",[1377,"^U",1371,536870920]],["^15",[1377,"^H",161,536870920]],["^15",[1377,"^H",305,536870920]],["^15",[1377,"^H",574,536870920]],["^15",[1377,"^H",1064,536870920]],["^15",[1377,"^H",1066,536870920]],["^15",[1377,"^H",1159,536870920]],["^15",[1377,"^H",1202,536870920]],["^15",[1377,"^H",1371,536870920]],["^15",[1377,"^;","~u655b737b-8976-478c-9128-bd415153282a",536870920]],["^15",[1378,"^Q","Patterns\n\n* [[Destructuring]] [[Enum]] \nEnums in patterns have their values binded to given [[Variable]]s automatically. \nFor ex.:\n```rust\nenum Yo {\n\tA(i32),\n\tB\n}\n\nneeds a match like,\n    let x= match a {\n       B => \"na\",\n       Yo::A(value) => \"ya\"\n    };\n```\n\n \n\n* Catch-all: We can use a variable to catch all values of a pattern, or the placeholder ``_`` character to catch all and ignore the caught value.\nFor ex.:\n```rust\nfn main() {\n let x = 2;\n let y= match x {\n   0 => 0,\n   1 => 1+1,\n   value => value //matches all values, and puts them in the value variable\n };\n \n let z= match x {\n   _ => 2, //catches all, but ignores them. If we use _ in the expression on the right, it'll be an error\n  };\n}\n```\nThe placeholder character can only be used in a pattern. \n\n* Matching named variables\nFor ex.:\n```rust\nfn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) => println!(\"Got 50\"),\n        Some(y) => println!(\"Matched, y = {y}\"),\n        _ => println!(\"Default case, x = {:?}\", x),\n    }\n}\n```\n\n* Matching multiple values: Possible by using the ``|`` syntax, which is much like the ``||`` [[Operator]]. \n\nFor ex.:\n```rust\nfn main() {\n    let x = 1;\n\n    match x {\n        1 | 2 => println!(\"one or two\"),\n        3 => println!(\"three\"),\n        _ => println!(\"anything\"),\n    }\n}\n\n```\n\n* Matching values within a [[Range]]: We use ``<start inclusive>..<end exclusive>`` . Can use ``=`` before end to have end inclusive.\nFor ex.:\n```rust\nfn main() {\n    let x = 5;\n\n    match x {\n        1..=5 => println!(\"one through five\"),\n        _ => println!(\"something else\"),\n    }\n}\n```\n\n* [[Destructuring]] [[Struct]]s:\n\nFor ex.:\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\nfn main() {\n    let p = Point { x: 0, y: 7 };\n\n    match p {\n        Point { x, y: 0 } => println!(\"On the x axis at {x}\"), //matches any x, but y as 0, puts both in x and y\n        Point { x: 0, y } => println!(\"On the y axis at {y}\"),\n        Point { x, y } => {\n            println!(\"On neither axis: ({x}, {y})\");\n        }\n    }\n}\n```\nThe actual syntax is ``let <struct> { x: <varname>, y: <varname> } = p;`` but we can omit varnames if they are the same.\n\n* [[Destructuring]] [[Struct]]s and [[Tuple]]s\nFor ex.:\n```rust\n  struct Point {\n    x: i32,\n    y: i32,\n}\n fn main() {\n    let ((feet, inches), Point { x, y }) = ((3, 10), Point { x: 3, y: -10 }); //creates 4 variables, x, y, feet and inches.\n}\n```\n\n* Ignoring values: We can use the placeholder character, and same for [[Variable]]s. By [[Default Linter Rule]] if a variable name starts with ``_`` it is assumed to be unused and doesn't give a warning.\n\nWe can ignore multiple values in patterns with ``..``.\nFor ex.:\n```rust\nfn main() {\n    let numbers = (2, 4, 8, 16, 32);\n\n    match numbers {\n        (first, .., last) => { //ignores all the rest\n            println!(\"Some numbers: {first}, {last}\");\n        }\n    }\n}\n```\n\n* *Match Guard*: Extra condition to ``match`` arms by using ``if`` [[Conditional]].\nFor ex.:\n```rust\nfn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) => println!(\"Got 50\"),\n        Some(n) if n == y => println!(\"Matched, n = {n}\"),\n        _ => println!(\"Default case, x = {:?}\", x),\n    }\n\n    println!(\"at the end: x = {:?}, y = {y}\", x);\n}\n```\n\n* ``@`` Binding: The ``@`` [[Operator]] allows us to capture a value in a variable as well as test it on a pattern at the same time.\nFor ex.:\n```rust\n    enum Message {\n        Hello { id: i32 },\n    }\n\nfn main(){\n    let msg = Message::Hello { id: 5 };\n\n    match msg {\n        Message::Hello {\n            id: id_variable @ 3..=7,\n        } => println!(\"yo\"),\n        Message::Hello { id: 10..=12 } => {\n            println!(\"na\")\n        }\n        Message::Hello { id } => println!(\"Found some other id: {}\", id),\n    }\n}\n```",536870920]],["^15",[1378,"^O","^16",536870920]],["^15",[1378,"^F",1379,536870920]],["^15",[1378,"^X",1253,536870920]],["^15",[1378,"^V",1253,536870920]],["^15",[1378,"^U",161,536870920]],["^15",[1378,"^U",339,536870920]],["^15",[1378,"^U",495,536870920]],["^15",[1378,"^U",574,536870920]],["^15",[1378,"^U",1064,536870920]],["^15",[1378,"^U",1066,536870920]],["^15",[1378,"^U",1159,536870920]],["^15",[1378,"^U",1236,536870920]],["^15",[1378,"^U",1253,536870920]],["^15",[1378,"^U",1370,536870920]],["^15",[1378,"^H",161,536870920]],["^15",[1378,"^H",339,536870920]],["^15",[1378,"^H",495,536870920]],["^15",[1378,"^H",574,536870920]],["^15",[1378,"^H",1064,536870920]],["^15",[1378,"^H",1066,536870920]],["^15",[1378,"^H",1159,536870920]],["^15",[1378,"^H",1236,536870920]],["^15",[1378,"^H",1370,536870920]],["^15",[1378,"^;","~u655b737b-34f1-4fef-a7a2-4cf626b5b7be",536870920]],["^15",[1379,"^Q","~``match``\nThis is an advanced version of a *switch* block in other languages. It allows us to compare a value against patterns and then the pattern which matches has its block executed. This is even more powerful because Rust Compiler requires the match patterns to be exhaustive (otherwise an [[Error]]), meaning they must cover all possible values of a type. \nFurthermore, match is an [[Expression]] so it returns a value.  \n\nSyntax:\n``\nmatch <variable/value> {\n <Pattern 1> => <some expression>,\n <Pattern 2> => {<expression, can also use blocks>\n  },\n ...\n};\n``\n\n\nFor ex.:\n```rust\nenum X{\nY(i32),\nZ\n}\n\nfn main() {\n let x = X::Y(2);\n let z = match X { //puts 2 in z\n  X::Y(value) => 2,\n  X::Z => {\n    2+4\n   },\n };\n}\n```\nThe patterns are evaluated from top to bottom, and the first one that matches has its expression executed. After which the match block returns the expression's return value or [[Unit Type]] if no value is being returned explicitly. \n\n* Each ``Pattern => Expression`` combo is called an arm, like *case* blocks for *switch* in other langs, but we don't need any ``break;`` statements since matches are [[Expression]]s, so every arm is expected to return the [[Control Flow]] back to the match.\n\n* Empty expression: If we desire an expression to do nothing we can simply do ``<Pattern> => ()`` or  ``<Pattern> => { }``(empty blocks return unit type) so it returns the [[Unit Type]] and does nothing.\n\n* Using catch-all and empty expression, we can create a *default* case of other langs, i.e., it's a pattern that matches everything and does nothing.\nFor ex.:\n```rust\nfn main() {\n let x = 2;\n match x {\n 1=> 2,\n _ => ()  //catch all, do nothing\n }\n};\n```",536870920]],["^15",[1379,"^O","^16",536870920]],["^15",[1379,"^F",1372,536870920]],["^15",[1379,"^X",1253,536870920]],["^15",[1379,"^V",1253,536870920]],["^15",[1379,"^U",340,536870920]],["^15",[1379,"^U",1202,536870920]],["^15",[1379,"^U",1253,536870920]],["^15",[1379,"^U",1263,536870920]],["^15",[1379,"^U",1264,536870920]],["^15",[1379,"^H",340,536870920]],["^15",[1379,"^H",1202,536870920]],["^15",[1379,"^H",1263,536870920]],["^15",[1379,"^H",1264,536870920]],["^15",[1379,"^;","~u655b737b-1470-430a-8889-8ed2b0d54550",536870920]],["^15",[1380,"^Q","",536870920]],["^15",[1380,"^O","^16",536870920]],["^15",[1380,"^F",1375,536870920]],["^15",[1380,"^X",1253,536870920]],["^15",[1380,"^V",1253,536870920]],["^15",[1380,"^U",1253,536870920]],["^15",[1380,"^;","~u655b737b-1e92-4dfa-995a-40b0b87bc0c4",536870920]],["^15",[1381,"^3","- ``Pin``\n  This is a special [[Data Type]] defined in ``std::pin`` [[Module]]. This type wraps [[Pointer]] types and either allows or prevents the values pointed by the pointer to be moved.\n  \n  All [[Pointer]] [[Data Type]]s implicitly implement ``Unpin`` [[Trait]], this means that if the Pin wraps the pointer, it will allow the value to be moved.\n  \n  But if the [[Pointer]] explicitly implements the ``!Unpin`` [[Trait]] (defined in ``std::marker`` as ``PhantomPinned``), then Pin prohibits the value from being moved.\n  \n  For ex.:\n  ```rust\n  use std::pin::Pin;\n  use std::marker::PhantomPinned;\n  \n  #[derive(Debug)]\n  struct Test {\n      a: String,\n      b: *const String,\n      _marker: PhantomPinned,\n  }\n  \n  \n  impl Test {\n      fn new(txt: &str) -> Self {\n          Test {\n              a: String::from(txt),\n              b: std::ptr::null(),\n              _marker: PhantomPinned, // This makes our type `!Unpin`\n          }\n      }\n  \n      fn init(self: Pin<&mut Self>) {\n          let self_ptr: *const String = &self.a;\n          let this = unsafe { self.get_unchecked_mut() };\n          this.b = self_ptr;\n      }\n  \n      fn a(self: Pin<&Self>) -> &str {\n          &self.get_ref().a\n      }\n  \n      fn b(self: Pin<&Self>) -> &String {\n          assert!(!self.b.is_null(), \"Test::b called without Test::init being called first\");\n          unsafe { &*(self.b) }\n      }\n  }\n  \n  //And now if we try to move\n  \n  pub fn main() {\n      // test1 is safe to move before we initialize it\n      let mut test1 = Test::new(\"test1\");\n      // Notice how we shadow `test1` to prevent it from being accessed again\n      let mut test1 = unsafe { Pin::new_unchecked(&mut test1) };\n      Test::init(test1.as_mut());\n  \n      let mut test2 = Test::new(\"test2\");\n      let mut test2 = unsafe { Pin::new_unchecked(&mut test2) };\n      Test::init(test2.as_mut());\n  \n      println!(\"a: {}, b: {}\", Test::a(test1.as_ref()), Test::b(test1.as_ref()));\n      //std::mem::swap(test1.get_mut(), test2.get_mut()); //error\n      println!(\"a: {}, b: {}\", Test::a(test2.as_ref()), Test::b(test2.as_ref()));\n  }\n  ```\n  Here, we have Pinned to the stack, meaning we create a Pin of a value on the stack. If we Pin a value on the heap like ``Pin<Box<T>>`` then it'd be heap pinning. Stack pinning is [[unsafe]].\n  read more at [Docs](https://rust-lang.github.io/async-book/04_pinning/01_chapter.html).\n- Primitives can be moved in and out of Pin, this is because they have no problem being moved around, so ``Pin<&mut u8>`` behaves the same as ``&mut u8``. Pin types can be defined simply with ``Pin<&T>``.\n- Heap Pinning\n  Meaning values on the heap won't be moved if they are pinned.\n  \n  For ex.:\n  ```rust\n  use std::pin::Pin;\n  \n  struct MyStruct {\n      value: u32,\n      _pin: PhantomPinned, //necessary, this tells the compiler this Struct implements !Unpin\n  }\n  \n  fn main() {\n      let mut my_struct: Pin<Box<MyStruct>> = Box::pin(MyStruct {\n          value: 10,\n          _pin: PhantomPinned,\n      });\n    //Box::pin returns a pinned type\n  \n      println!(\"{}\", my_struct.value);\n      \n      //and to modify the value behind a Pinned Type\n       unsafe {\n          let mut_ref: Pin<&mut MyStruct> = Pin::as_mut(&mut my_struct);\n          let mut_pinned: &mut MyStruct = Pin::get_unchecked_mut(mut_ref);\n          mut_pinned.value = 32;\n      }\n      println!(\"{}\", my_struct.value);\n  }\n  ```\n- ``pin_utils``\n  And other [[Crate]]s are external crates that simplify Pinning and provide [[Macro]]s that do the pinning and other things theirselves so we need to do is use the Pinned types.\n  For ex.:\n  ```rust\n  use pin_utils::pin_mut;\n  \n  fn main() {\n      let x= \"yo\";\n      pin_mut!(x);\n      let y= x;\t \n   \t//Here y’s type will be Pin<&mut &str>. It moves x into y and y is now wrapped in Pin’s safety. \n  }\n  \n  ```\n-",536870920]],["^15",[1381,"^17",1700492155271,536870920]],["^15",[1381,"^Z","Rust/pages/Pinning.md",536870920]],["^15",[1382,"^Q","~``Pin``\nThis is a special [[Data Type]] defined in ``std::pin`` [[Module]]. This type wraps [[Pointer]] types and either allows or prevents the values pointed by the pointer to be moved.\n\nAll [[Pointer]] [[Data Type]]s implicitly implement ``Unpin`` [[Trait]], this means that if the Pin wraps the pointer, it will allow the value to be moved.\n\nBut if the [[Pointer]] explicitly implements the ``!Unpin`` [[Trait]] (defined in ``std::marker`` as ``PhantomPinned``), then Pin prohibits the value from being moved.\n\nFor ex.:\n```rust\nuse std::pin::Pin;\nuse std::marker::PhantomPinned;\n\n#[derive(Debug)]\nstruct Test {\n    a: String,\n    b: *const String,\n    _marker: PhantomPinned,\n}\n\n\nimpl Test {\n    fn new(txt: &str) -> Self {\n        Test {\n            a: String::from(txt),\n            b: std::ptr::null(),\n            _marker: PhantomPinned, // This makes our type `!Unpin`\n        }\n    }\n\n    fn init(self: Pin<&mut Self>) {\n        let self_ptr: *const String = &self.a;\n        let this = unsafe { self.get_unchecked_mut() };\n        this.b = self_ptr;\n    }\n\n    fn a(self: Pin<&Self>) -> &str {\n        &self.get_ref().a\n    }\n\n    fn b(self: Pin<&Self>) -> &String {\n        assert!(!self.b.is_null(), \"Test::b called without Test::init being called first\");\n        unsafe { &*(self.b) }\n    }\n}\n\n//And now if we try to move\n\npub fn main() {\n    // test1 is safe to move before we initialize it\n    let mut test1 = Test::new(\"test1\");\n    // Notice how we shadow `test1` to prevent it from being accessed again\n    let mut test1 = unsafe { Pin::new_unchecked(&mut test1) };\n    Test::init(test1.as_mut());\n\n    let mut test2 = Test::new(\"test2\");\n    let mut test2 = unsafe { Pin::new_unchecked(&mut test2) };\n    Test::init(test2.as_mut());\n\n    println!(\"a: {}, b: {}\", Test::a(test1.as_ref()), Test::b(test1.as_ref()));\n    //std::mem::swap(test1.get_mut(), test2.get_mut()); //error\n    println!(\"a: {}, b: {}\", Test::a(test2.as_ref()), Test::b(test2.as_ref()));\n}\n```\nHere, we have Pinned to the stack, meaning we create a Pin of a value on the stack. If we Pin a value on the heap like ``Pin<Box<T>>`` then it'd be heap pinning. Stack pinning is [[unsafe]].\nread more at [Docs](https://rust-lang.github.io/async-book/04_pinning/01_chapter.html).",536870920]],["^15",[1382,"^O","^16",536870920]],["^15",[1382,"^F",1274,536870920]],["^15",[1382,"^X",1274,536870920]],["^15",[1382,"^V",1274,536870920]],["^15",[1382,"^U",287,536870920]],["^15",[1382,"^U",1073,536870920]],["^15",[1382,"^U",1090,536870920]],["^15",[1382,"^U",1094,536870920]],["^15",[1382,"^U",1274,536870920]],["^15",[1382,"^U",1296,536870920]],["^15",[1382,"^H",287,536870920]],["^15",[1382,"^H",1073,536870920]],["^15",[1382,"^H",1090,536870920]],["^15",[1382,"^H",1094,536870920]],["^15",[1382,"^H",1296,536870920]],["^15",[1382,"^;","~u655b737b-9f28-401c-b07d-3868916848f2",536870920]],["^15",[1383,"^Q","Primitives can be moved in and out of Pin, this is because they have no problem being moved around, so ``Pin<&mut u8>`` behaves the same as ``&mut u8``. Pin types can be defined simply with ``Pin<&T>``.",536870920]],["^15",[1383,"^O","^16",536870920]],["^15",[1383,"^F",1382,536870920]],["^15",[1383,"^X",1274,536870920]],["^15",[1383,"^V",1274,536870920]],["^15",[1383,"^U",1274,536870920]],["^15",[1383,"^;","~u655b737b-c08e-403d-a4b1-9711fde1b095",536870920]],["^15",[1384,"^Q","Heap Pinning\nMeaning values on the heap won't be moved if they are pinned.\n\nFor ex.:\n```rust\nuse std::pin::Pin;\n\nstruct MyStruct {\n    value: u32,\n    _pin: PhantomPinned, //necessary, this tells the compiler this Struct implements !Unpin\n}\n\nfn main() {\n    let mut my_struct: Pin<Box<MyStruct>> = Box::pin(MyStruct {\n        value: 10,\n        _pin: PhantomPinned,\n    });\n  //Box::pin returns a pinned type\n\n    println!(\"{}\", my_struct.value);\n    \n    //and to modify the value behind a Pinned Type\n     unsafe {\n        let mut_ref: Pin<&mut MyStruct> = Pin::as_mut(&mut my_struct);\n        let mut_pinned: &mut MyStruct = Pin::get_unchecked_mut(mut_ref);\n        mut_pinned.value = 32;\n    }\n    println!(\"{}\", my_struct.value);\n}\n```",536870920]],["^15",[1384,"^O","^16",536870920]],["^15",[1384,"^F",1383,536870920]],["^15",[1384,"^X",1274,536870920]],["^15",[1384,"^V",1274,536870920]],["^15",[1384,"^U",1274,536870920]],["^15",[1384,"^;","~u655b737b-c65d-43c8-951b-1f552b96aa35",536870920]],["^15",[1385,"^Q","~``pin_utils``\nAnd other [[Crate]]s are external crates that simplify Pinning and provide [[Macro]]s that do the pinning and other things theirselves so we need to do is use the Pinned types.\nFor ex.:\n```rust\nuse pin_utils::pin_mut;\n\nfn main() {\n    let x= \"yo\";\n    pin_mut!(x);\n    let y= x;\t \n \t//Here y’s type will be Pin<&mut &str>. It moves x into y and y is now wrapped in Pin’s safety. \n}\n\n```",536870920]],["^15",[1385,"^O","^16",536870920]],["^15",[1385,"^F",1384,536870920]],["^15",[1385,"^X",1274,536870920]],["^15",[1385,"^V",1274,536870920]],["^15",[1385,"^U",1063,536870920]],["^15",[1385,"^U",1079,536870920]],["^15",[1385,"^U",1274,536870920]],["^15",[1385,"^H",1063,536870920]],["^15",[1385,"^H",1079,536870920]],["^15",[1385,"^;","~u655b737b-7c7a-4e91-ad27-1c9b84f8144f",536870920]],["^15",[1386,"^Q","",536870920]],["^15",[1386,"^O","^16",536870920]],["^15",[1386,"^F",1385,536870920]],["^15",[1386,"^X",1274,536870920]],["^15",[1386,"^V",1274,536870920]],["^15",[1386,"^U",1274,536870920]],["^15",[1386,"^;","~u655b737b-fe01-4d64-b769-cf762bd9f97e",536870920]],["^15",[1387,"^3","- A Pointer is a [[Data Type]] that points to data stored on the memory. \n  [[Reference Type]]s are the most basic type of pointers in Rust as they point to an address and have no performance overhead, represented with ``&`` [[Operator]].\n- *Smart Pointer*s\n  Implemented as [[Struct]]s which store data on the heap and usually also have [[Ownership]] of it. They have a bit of performance overhead, as is true with accessing heap anyways, but are able to provide some additional functionality such as cleaning up after all pointers to the same data are out of [[Lifetime]]s.\n  \n  Smart Pointer [[Data Type]]s must implement at-least the ``Deref`` and ``drop`` [[Trait]].\n  Some smart pointers already in the [[Standard Library]] are\n  \n  * [[Box<T>]]\n  * [[Rc<T>]]\n  * [[Ref<T>]] and [[RefMut<T>]]\n  * [[RefCell<T>]]\n  * [[Cell<T>]]\n  * [[Mutex<T>]] and [[MutexGuard<T>]]\n  \n  These smart pointers don't implement the ``Send`` [[Trait]] and ``Sync`` Trait, as they are not safe to be shared across [[Thread]]s. \n  But there are other variants which do, they are\n  \n  * [[Arc<T>]]\n- *Raw Pointer*s\n  Rust allows raw pointers. They're allowed to ignore [[Borrow]]ing rules and have multiple pointers (immutable + mutable) to the same  value, aren't required to point to valid memory, can be null, and don't implement any automatic cleanup.\n  Creating raw pointers and pointing them to any value is allowed in normal rust. However, dereferencing a raw pointer is [[unsafe]]. \n  \n  There's 2 of these\n  * immutable Raw Pointer: ``*const T`` where ``*`` is in the type name and not the deref [[Operator]]. These pointers can't be reassigned. \n  \n  * mutable Raw Pointer: ``*mut T``. Can be reassigned to point to a different value.\n  \n  For ex.:\n  ```rust\n  fn main() {\n      let mut num = 5;\n  \n      let r1 = &num as *const i32;\n      let r2 = &mut num as *mut i32;\n  \n      unsafe {\n          println!(\"r1 is: {}\", *r1);\n          println!(\"r2 is: {}\", *r2);\n      }\n   \n  } //works\n  ```\n  We use [[as]] to [[Cast]] a [[Reference Type]] to a Raw Pointer.\n- The ``fn`` [[Function]] Pointer\n- Pointers and the address problem\n  Consider a [[Struct]] like so\n  ```rust\n  #[derive(Debug)]\n  struct Test {\n      a: String,\n      b: *const String,\n  }\n  //and the impl block is designed like pointer b always points to a\n  //thereby creating a self-referencing struct\n  impl Test {\n      fn new(txt: &str) -> Self {\n          Test {\n              a: String::from(txt),\n              b: std::ptr::null(),\n          }\n      }\n  \n      fn init(&mut self) {\n          let self_ref: *const String = &self.a;\n          self.b = self_ref;\n      }\n  \n      fn a(&self) -> &str {\n          &self.a\n      }\n  \n      fn b(&self) -> &String {\n          assert!(!self.b.is_null(), \"Test::b called without Test::init being called first\");\n          unsafe { &*(self.b) }\n      }\n  }\n  \n  //Now somewhere we do  std::mem::swap(&mut test1, &mut test2); \n  ```\n   Now if we print the value behind b after swapping the memory of 2 objects, that is we swap the memory where the object's reference is stored, then we swap each field's data at their memory addresses. But ``mem::swap`` [[Module]] doesn't modify the values in their addresses, so the pointers will still point to  their old addresses, thereby breaking the self-referential struct.\n  \n  That is,\n  ![image.png](../assets/image_1690904345284_0.png)\n   \n  When we store a pointer as a [[Data Type]] and then do a ``mem::swap`` with another of the same type then the pointer's data is swapped. But, the values at the address theirselves aren't modified.\n  This isn't an issue with non self-referential types as it would be intended to have the pointers still point to the same address, but in self-referential types, it'd be a problem.\n   \n  For this reason extra care must be taken with raw pointers.\n  We can resolve this with [[Pinning]].",536870920]],["^15",[1387,"^17",1700492155301,536870920]],["^15",[1387,"^Z","Rust/pages/Pointer.md",536870920]],["^15",[1388,"^K",1700492155300,536870920]],["^15",[1388,"^@",false,536870920]],["^15",[1388,"^Y","ref<t>",536870920]],["^15",[1388,"^11","Ref<T>",536870920]],["^15",[1388,"^B",1700492155300,536870920]],["^15",[1388,"^;","~u655b737b-7837-42eb-a03a-46053166f38c",536870920]],["^15",[1389,"^K",1700492155300,536870920]],["^15",[1389,"^@",false,536870920]],["^15",[1389,"^Y","refmut<t>",536870920]],["^15",[1389,"^11","RefMut<T>",536870920]],["^15",[1389,"^B",1700492155300,536870920]],["^15",[1389,"^;","~u655b737b-d525-42a5-ac22-9b3dc116a751",536870920]],["^15",[1390,"^Q","A Pointer is a [[Data Type]] that points to data stored on the memory. \n[[Reference Type]]s are the most basic type of pointers in Rust as they point to an address and have no performance overhead, represented with ``&`` [[Operator]].",536870920]],["^15",[1390,"^O","^16",536870920]],["^15",[1390,"^F",1094,536870920]],["^15",[1390,"^X",1094,536870920]],["^15",[1390,"^V",1094,536870920]],["^15",[1390,"^U",339,536870920]],["^15",[1390,"^U",1090,536870920]],["^15",[1390,"^U",1091,536870920]],["^15",[1390,"^U",1094,536870920]],["^15",[1390,"^H",339,536870920]],["^15",[1390,"^H",1090,536870920]],["^15",[1390,"^H",1091,536870920]],["^15",[1390,"^;","~u655b737b-73ed-440b-9ed2-8168b0450928",536870920]],["^15",[1391,"^Q","*Smart Pointer*s\nImplemented as [[Struct]]s which store data on the heap and usually also have [[Ownership]] of it. They have a bit of performance overhead, as is true with accessing heap anyways, but are able to provide some additional functionality such as cleaning up after all pointers to the same data are out of [[Lifetime]]s.\n\nSmart Pointer [[Data Type]]s must implement at-least the ``Deref`` and ``drop`` [[Trait]].\nSome smart pointers already in the [[Standard Library]] are\n\n* [[Box<T>]]\n* [[Rc<T>]]\n* [[Ref<T>]] and [[RefMut<T>]]\n* [[RefCell<T>]]\n* [[Cell<T>]]\n* [[Mutex<T>]] and [[MutexGuard<T>]]\n\nThese smart pointers don't implement the ``Send`` [[Trait]] and ``Sync`` Trait, as they are not safe to be shared across [[Thread]]s. \nBut there are other variants which do, they are\n\n* [[Arc<T>]]",536870920]],["^15",[1391,"^O","^16",536870920]],["^15",[1391,"^F",1390,536870920]],["^15",[1391,"^X",1094,536870920]],["^15",[1391,"^V",1094,536870920]],["^15",[1391,"^U",1064,536870920]],["^15",[1391,"^U",1071,536870920]],["^15",[1391,"^U",1073,536870920]],["^15",[1391,"^U",1074,536870920]],["^15",[1391,"^U",1075,536870920]],["^15",[1391,"^U",1090,536870920]],["^15",[1391,"^U",1092,536870920]],["^15",[1391,"^U",1094,536870920]],["^15",[1391,"^U",1096,536870920]],["^15",[1391,"^U",1101,536870920]],["^15",[1391,"^U",1123,536870920]],["^15",[1391,"^U",1154,536870920]],["^15",[1391,"^U",1155,536870920]],["^15",[1391,"^U",1160,536870920]],["^15",[1391,"^U",1343,536870920]],["^15",[1391,"^U",1388,536870920]],["^15",[1391,"^U",1389,536870920]],["^15",[1391,"^H",1064,536870920]],["^15",[1391,"^H",1071,536870920]],["^15",[1391,"^H",1073,536870920]],["^15",[1391,"^H",1074,536870920]],["^15",[1391,"^H",1075,536870920]],["^15",[1391,"^H",1090,536870920]],["^15",[1391,"^H",1092,536870920]],["^15",[1391,"^H",1096,536870920]],["^15",[1391,"^H",1101,536870920]],["^15",[1391,"^H",1123,536870920]],["^15",[1391,"^H",1154,536870920]],["^15",[1391,"^H",1155,536870920]],["^15",[1391,"^H",1160,536870920]],["^15",[1391,"^H",1343,536870920]],["^15",[1391,"^H",1388,536870920]],["^15",[1391,"^H",1389,536870920]],["^15",[1391,"^;","~u655b737b-2692-4c39-a5f7-133e76e4ec32",536870920]],["^15",[1392,"^Q","*Raw Pointer*s\nRust allows raw pointers. They're allowed to ignore [[Borrow]]ing rules and have multiple pointers (immutable + mutable) to the same  value, aren't required to point to valid memory, can be null, and don't implement any automatic cleanup.\nCreating raw pointers and pointing them to any value is allowed in normal rust. However, dereferencing a raw pointer is [[unsafe]]. \n\nThere's 2 of these\n* immutable Raw Pointer: ``*const T`` where ``*`` is in the type name and not the deref [[Operator]]. These pointers can't be reassigned. \n\n* mutable Raw Pointer: ``*mut T``. Can be reassigned to point to a different value.\n\nFor ex.:\n```rust\nfn main() {\n    let mut num = 5;\n\n    let r1 = &num as *const i32;\n    let r2 = &mut num as *mut i32;\n\n    unsafe {\n        println!(\"r1 is: {}\", *r1);\n        println!(\"r2 is: {}\", *r2);\n    }\n \n} //works\n```\nWe use [[as]] to [[Cast]] a [[Reference Type]] to a Raw Pointer.",536870920]],["^15",[1392,"^O","^16",536870920]],["^15",[1392,"^F",1391,536870920]],["^15",[1392,"^X",1094,536870920]],["^15",[1392,"^V",1094,536870920]],["^15",[1392,"^U",339,536870920]],["^15",[1392,"^U",1091,536870920]],["^15",[1392,"^U",1094,536870920]],["^15",[1392,"^U",1117,536870920]],["^15",[1392,"^U",1149,536870920]],["^15",[1392,"^U",1150,536870920]],["^15",[1392,"^U",1296,536870920]],["^15",[1392,"^H",339,536870920]],["^15",[1392,"^H",1091,536870920]],["^15",[1392,"^H",1117,536870920]],["^15",[1392,"^H",1149,536870920]],["^15",[1392,"^H",1150,536870920]],["^15",[1392,"^H",1296,536870920]],["^15",[1392,"^;","~u655b737b-a8f3-44dc-87fc-b63708d8285b",536870920]],["^15",[1393,"^Q","The ``fn`` [[Function]] Pointer",536870920]],["^15",[1393,"^O","^16",536870920]],["^15",[1393,"^F",1392,536870920]],["^15",[1393,"^X",1094,536870920]],["^15",[1393,"^V",1094,536870920]],["^15",[1393,"^U",163,536870920]],["^15",[1393,"^U",1094,536870920]],["^15",[1393,"^H",163,536870920]],["^15",[1393,"^;","~u655b737b-f1f0-4fcf-aad7-2334ea5433ae",536870920]],["^15",[1394,"^Q","Pointers and the address problem\nConsider a [[Struct]] like so\n```rust\n#[derive(Debug)]\nstruct Test {\n    a: String,\n    b: *const String,\n}\n//and the impl block is designed like pointer b always points to a\n//thereby creating a self-referencing struct\nimpl Test {\n    fn new(txt: &str) -> Self {\n        Test {\n            a: String::from(txt),\n            b: std::ptr::null(),\n        }\n    }\n\n    fn init(&mut self) {\n        let self_ref: *const String = &self.a;\n        self.b = self_ref;\n    }\n\n    fn a(&self) -> &str {\n        &self.a\n    }\n\n    fn b(&self) -> &String {\n        assert!(!self.b.is_null(), \"Test::b called without Test::init being called first\");\n        unsafe { &*(self.b) }\n    }\n}\n\n//Now somewhere we do  std::mem::swap(&mut test1, &mut test2); \n```\n Now if we print the value behind b after swapping the memory of 2 objects, that is we swap the memory where the object's reference is stored, then we swap each field's data at their memory addresses. But ``mem::swap`` [[Module]] doesn't modify the values in their addresses, so the pointers will still point to  their old addresses, thereby breaking the self-referential struct.\n\nThat is,\n![image.png](../assets/image_1690904345284_0.png)\n \nWhen we store a pointer as a [[Data Type]] and then do a ``mem::swap`` with another of the same type then the pointer's data is swapped. But, the values at the address theirselves aren't modified.\nThis isn't an issue with non self-referential types as it would be intended to have the pointers still point to the same address, but in self-referential types, it'd be a problem.\n \nFor this reason extra care must be taken with raw pointers.\nWe can resolve this with [[Pinning]].",536870920]],["^15",[1394,"^O","^16",536870920]],["^15",[1394,"^F",1393,536870920]],["^15",[1394,"^X",1094,536870920]],["^15",[1394,"^V",1094,536870920]],["^15",[1394,"^U",287,536870920]],["^15",[1394,"^U",1064,536870920]],["^15",[1394,"^U",1090,536870920]],["^15",[1394,"^U",1094,536870920]],["^15",[1394,"^U",1274,536870920]],["^15",[1394,"^H",287,536870920]],["^15",[1394,"^H",1064,536870920]],["^15",[1394,"^H",1090,536870920]],["^15",[1394,"^H",1274,536870920]],["^15",[1394,"^;","~u655b737b-e7f7-47cb-ac28-c2c3012bfba1",536870920]],["^15",[1395,"^3","- *prelude*\n  This is a [[Crate]] (``std::prelude``) that Rust automatically automatically imports into every Rust program. It defines a lot of core [[Data Type]]s, [[Function]]s etc..\n-\n-",536870920]],["^15",[1395,"^17",1700492155309,536870920]],["^15",[1395,"^Z","Rust/pages/Prelude.md",536870920]],["^15",[1396,"^Q","*prelude*\nThis is a [[Crate]] (``std::prelude``) that Rust automatically automatically imports into every Rust program. It defines a lot of core [[Data Type]]s, [[Function]]s etc..",536870920]],["^15",[1396,"^O","^16",536870920]],["^15",[1396,"^F",1212,536870920]],["^15",[1396,"^X",1212,536870920]],["^15",[1396,"^V",1212,536870920]],["^15",[1396,"^U",163,536870920]],["^15",[1396,"^U",1063,536870920]],["^15",[1396,"^U",1090,536870920]],["^15",[1396,"^U",1212,536870920]],["^15",[1396,"^H",163,536870920]],["^15",[1396,"^H",1063,536870920]],["^15",[1396,"^H",1090,536870920]],["^15",[1396,"^;","~u655b737b-9aa7-4240-8566-ea7011558505",536870920]],["^15",[1397,"^Q","",536870920]],["^15",[1397,"^O","^16",536870920]],["^15",[1397,"^F",1396,536870920]],["^15",[1397,"^X",1212,536870920]],["^15",[1397,"^V",1212,536870920]],["^15",[1397,"^U",1212,536870920]],["^15",[1397,"^;","~u655b737b-68aa-4ec6-9fbc-26ddbfabb187",536870920]],["^15",[1398,"^Q","",536870920]],["^15",[1398,"^O","^16",536870920]],["^15",[1398,"^F",1397,536870920]],["^15",[1398,"^X",1212,536870920]],["^15",[1398,"^V",1212,536870920]],["^15",[1398,"^U",1212,536870920]],["^15",[1398,"^;","~u655b737b-c06e-43c8-b179-1630b33c4f0b",536870920]],["^15",[1399,"^3","- Defined in the ``std::ops`` [[Module]] of [[Standard Library]] .\n  A range is a [[Struct]] defined like so\n  \n  ```rust\n  pub struct Range<Idx> {\n      pub start: Idx,\n      pub end: Idx,\n  }\n  \n  pub struct RangeInclusive<Idx> {\n      pub start: Idx,\n      pub end: Idx,\n  }\n  ```\n  \n  We can create a ``Range`` in Rust with a special syntax\n  ``\n  <start value, inclusive> .. <end value, exclusive>\n  ``\n  or create a ``RangeInclusive`` with \n  ``\n  <start value, inclusive> .. =<end value, inclusive>\n  ``\n  \n  These syntaxes don't mean anything by theirselves, but other constructs in Rust understand they mean to represent a [[Collection]] of values like an array and they must iterate from start to end.\n  \n  For ex.:\n  ```rust\n  use std::ops::Range;\n  \n  fn main() {\n      for i in 1..=5 {\n          //loops from 1 to 5 (inclusive)\n      }\n  \n      let x: Range<i32> = 0..5;\n      let y: Vec<i32> = (0..=5).map(|x| x).collect();\n  } //works\n  ```\n-",536870920]],["^15",[1399,"^17",1700492155322,536870920]],["^15",[1399,"^Z","Rust/pages/Range.md",536870920]],["^15",[1400,"^Q","Defined in the ``std::ops`` [[Module]] of [[Standard Library]] .\nA range is a [[Struct]] defined like so\n\n```rust\npub struct Range<Idx> {\n    pub start: Idx,\n    pub end: Idx,\n}\n\npub struct RangeInclusive<Idx> {\n    pub start: Idx,\n    pub end: Idx,\n}\n```\n\nWe can create a ``Range`` in Rust with a special syntax\n``\n<start value, inclusive> .. <end value, exclusive>\n``\nor create a ``RangeInclusive`` with \n``\n<start value, inclusive> .. =<end value, inclusive>\n``\n\nThese syntaxes don't mean anything by theirselves, but other constructs in Rust understand they mean to represent a [[Collection]] of values like an array and they must iterate from start to end.\n\nFor ex.:\n```rust\nuse std::ops::Range;\n\nfn main() {\n    for i in 1..=5 {\n        //loops from 1 to 5 (inclusive)\n    }\n\n    let x: Range<i32> = 0..5;\n    let y: Vec<i32> = (0..=5).map(|x| x).collect();\n} //works\n```",536870920]],["^15",[1400,"^O","^16",536870920]],["^15",[1400,"^F",1370,536870920]],["^15",[1400,"^X",1370,536870920]],["^15",[1400,"^V",1370,536870920]],["^15",[1400,"^U",287,536870920]],["^15",[1400,"^U",1064,536870920]],["^15",[1400,"^U",1096,536870920]],["^15",[1400,"^U",1181,536870920]],["^15",[1400,"^U",1370,536870920]],["^15",[1400,"^H",287,536870920]],["^15",[1400,"^H",1064,536870920]],["^15",[1400,"^H",1096,536870920]],["^15",[1400,"^H",1181,536870920]],["^15",[1400,"^;","~u655b737b-a0bc-43cf-8b38-366ddbfa574c",536870920]],["^15",[1401,"^Q","",536870920]],["^15",[1401,"^O","^16",536870920]],["^15",[1401,"^F",1400,536870920]],["^15",[1401,"^X",1370,536870920]],["^15",[1401,"^V",1370,536870920]],["^15",[1401,"^U",1370,536870920]],["^15",[1401,"^;","~u655b737b-95bb-4313-b013-d0dfc70368f6",536870920]],["^15",[1402,"^3","- Aka *Reference Counting*. This [[Data Type]] is a [[Pointer]] that is meant to give [[Ownership]] to multiple owners. Like a graph node might have multiple parents.\n  \n  Defined in ``std::rc::Rc`` [[Module]] in the [[Standard Library]]\n  \n  For ex.:\n  ```rust\n  use std::rc::Rc;\n  \n  fn main() {\n   let a= Rc::new(10);\n   let b = Rc::clone(&a); //is the same as a.clone();\n  }\n  ```\n  We use the ``clone()`` [[Method]] in the ``Rc`` [[Struct]] directly instead of using the ``.clone()`` instance method just for convention. It helps show that the Rc's clone is called and not a normal clone as on other types, they do the same thing for ``Rc``. The reason we do this is also because a normal clone on other [[Data Type]]s deep copies the values, but for an ``Rc``, this method returns an ``Rc`` and internally points to the same [[Reference Type]]. It also mutably increases an internal reference count to know how many references of the data are alive.\n  The ``Drop`` [[Trait]] then reduces the references counter and when it reaches 0, clears up the data.\n- Strong Reference ``strong_count`` and  Weak Reference``weak_count``\n  Just like *Shared Pointer* in *C++* has a weak and a strong reference, so does ``Rc``. The strong count prevents cleanup of the data whereas weak count doesn't so if we have a weak clone of ``Rc`` , it may become have an invalid [[Reference Type]] if the strong count drops to 0.\n  \n  Using ``Rc::clone(&<Rc instance>)`` we get a strong reference of type ``Rc<T>``, and that shares the [[Ownership]] of the data within, it also bumps the ``strong_count`` by 1. With ``Rc::downgrade(&<Rc instance>)``  we instead get a value of type [[Weak<T>]] and the ``weak_count`` of ``Rc`` is increased by 1. \n  Since it is not guaranteed if the value referenced by the [[Weak<T>]] will be valid, we have to explicitly check. We do so with ``<Weak<T> instance>.upgrade()`` which returns an [[Option Type]] ``Option<Rc<T>>`` which is ``Some`` if the reference is still valid or ``None`` otherwise. \n  \n  \n  * The ``Rc::strong_count(&<Rc Type instance>)`` returns the strong count of the given ``Rc`` instance.\n  \n  * Similarly, ``Rc::weak_count(&<Rc Type instance>)`` returns the weak count.\n  \n  For ex.:\n  ```rust\n  use std::rc::Rc;\n  fn main() {\n      let a= Rc::new(2);\n      let b= Rc::downgrade(&a);\n      let c= b.upgrade();\n      match c {\n       Some(value)=> println!(\"{}\", *value), //prints 2\n       None=> println!(\"na\");\n      };\n  }\n  ```\n-\n-",536870920]],["^15",[1402,"^17",1700492155340,536870920]],["^15",[1402,"^Z","Rust/pages/Rc%3CT%3E.md",536870920]],["^15",[1403,"^K",1700492155340,536870920]],["^15",[1403,"^@",false,536870920]],["^15",[1403,"^Y","weak<t>",536870920]],["^15",[1403,"^11","Weak<T>",536870920]],["^15",[1403,"^B",1700492155340,536870920]],["^15",[1403,"^;","~u655b737b-c4fc-456a-bffc-ef49bd7a6423",536870920]],["^15",[1404,"^Q","Aka *Reference Counting*. This [[Data Type]] is a [[Pointer]] that is meant to give [[Ownership]] to multiple owners. Like a graph node might have multiple parents.\n\nDefined in ``std::rc::Rc`` [[Module]] in the [[Standard Library]]\n\nFor ex.:\n```rust\nuse std::rc::Rc;\n\nfn main() {\n let a= Rc::new(10);\n let b = Rc::clone(&a); //is the same as a.clone();\n}\n```\nWe use the ``clone()`` [[Method]] in the ``Rc`` [[Struct]] directly instead of using the ``.clone()`` instance method just for convention. It helps show that the Rc's clone is called and not a normal clone as on other types, they do the same thing for ``Rc``. The reason we do this is also because a normal clone on other [[Data Type]]s deep copies the values, but for an ``Rc``, this method returns an ``Rc`` and internally points to the same [[Reference Type]]. It also mutably increases an internal reference count to know how many references of the data are alive.\nThe ``Drop`` [[Trait]] then reduces the references counter and when it reaches 0, clears up the data.",536870920]],["^15",[1404,"^O","^16",536870920]],["^15",[1404,"^F",1075,536870920]],["^15",[1404,"^X",1075,536870920]],["^15",[1404,"^V",1075,536870920]],["^15",[1404,"^U",287,536870920]],["^15",[1404,"^U",1064,536870920]],["^15",[1404,"^U",1065,536870920]],["^15",[1404,"^U",1073,536870920]],["^15",[1404,"^U",1075,536870920]],["^15",[1404,"^U",1090,536870920]],["^15",[1404,"^U",1091,536870920]],["^15",[1404,"^U",1094,536870920]],["^15",[1404,"^U",1096,536870920]],["^15",[1404,"^U",1160,536870920]],["^15",[1404,"^H",287,536870920]],["^15",[1404,"^H",1064,536870920]],["^15",[1404,"^H",1065,536870920]],["^15",[1404,"^H",1073,536870920]],["^15",[1404,"^H",1090,536870920]],["^15",[1404,"^H",1091,536870920]],["^15",[1404,"^H",1094,536870920]],["^15",[1404,"^H",1096,536870920]],["^15",[1404,"^H",1160,536870920]],["^15",[1404,"^;","~u655b737b-700e-42d4-bfb7-df8bf483ea6d",536870920]],["^15",[1405,"^Q","Strong Reference ``strong_count`` and  Weak Reference``weak_count``\nJust like *Shared Pointer* in *C++* has a weak and a strong reference, so does ``Rc``. The strong count prevents cleanup of the data whereas weak count doesn't so if we have a weak clone of ``Rc`` , it may become have an invalid [[Reference Type]] if the strong count drops to 0.\n\nUsing ``Rc::clone(&<Rc instance>)`` we get a strong reference of type ``Rc<T>``, and that shares the [[Ownership]] of the data within, it also bumps the ``strong_count`` by 1. With ``Rc::downgrade(&<Rc instance>)``  we instead get a value of type [[Weak<T>]] and the ``weak_count`` of ``Rc`` is increased by 1. \nSince it is not guaranteed if the value referenced by the [[Weak<T>]] will be valid, we have to explicitly check. We do so with ``<Weak<T> instance>.upgrade()`` which returns an [[Option Type]] ``Option<Rc<T>>`` which is ``Some`` if the reference is still valid or ``None`` otherwise. \n\n\n* The ``Rc::strong_count(&<Rc Type instance>)`` returns the strong count of the given ``Rc`` instance.\n\n* Similarly, ``Rc::weak_count(&<Rc Type instance>)`` returns the weak count.\n\nFor ex.:\n```rust\nuse std::rc::Rc;\nfn main() {\n    let a= Rc::new(2);\n    let b= Rc::downgrade(&a);\n    let c= b.upgrade();\n    match c {\n     Some(value)=> println!(\"{}\", *value), //prints 2\n     None=> println!(\"na\");\n    };\n}\n```",536870920]],["^15",[1405,"^O","^16",536870920]],["^15",[1405,"^F",1404,536870920]],["^15",[1405,"^X",1075,536870920]],["^15",[1405,"^V",1075,536870920]],["^15",[1405,"^U",1075,536870920]],["^15",[1405,"^U",1091,536870920]],["^15",[1405,"^U",1160,536870920]],["^15",[1405,"^U",1254,536870920]],["^15",[1405,"^U",1403,536870920]],["^15",[1405,"^H",1091,536870920]],["^15",[1405,"^H",1160,536870920]],["^15",[1405,"^H",1254,536870920]],["^15",[1405,"^H",1403,536870920]],["^15",[1405,"^;","~u655b737b-2a83-4ed7-867e-72cccd6a79c2",536870920]],["^15",[1406,"^Q","",536870920]],["^15",[1406,"^O","^16",536870920]],["^15",[1406,"^F",1405,536870920]],["^15",[1406,"^X",1075,536870920]],["^15",[1406,"^V",1075,536870920]],["^15",[1406,"^U",1075,536870920]],["^15",[1406,"^;","~u655b737b-1507-44d1-b9b0-032b3ca7852d",536870920]],["^15",[1407,"^Q","",536870920]],["^15",[1407,"^O","^16",536870920]],["^15",[1407,"^F",1406,536870920]],["^15",[1407,"^X",1075,536870920]],["^15",[1407,"^V",1075,536870920]],["^15",[1407,"^U",1075,536870920]],["^15",[1407,"^;","~u655b737b-e1a4-4073-b03c-042a95c73106",536870920]],["^15",[1408,"^3","- Much like [[Rc<T>]]. However it uses the [[Interior Mutability Pattern]] to do something other [[Pointer]]s can't. It allows immutable references from mutable [[Reference Type]]s. \n  Defined in the ``std::cell::RefCell`` [[Module]] in the [[Standard Library]].\n   \n  For ex.:\n  ```rust\n  use std::cell::RefCell;\n  fn main() {\n      let a= RefCell::new(2);\n      let b= &a;\n      let mut c= b.borrow_mut();\n      *c=3; //works\n  }\n  ```\n  \n  The ``.borrow()`` [[Method]] returns a ``Ref<T>`` instance and ``.borrow_mut()`` returns a ``RefMut<T>`` instance, this instance has mutable [[Reference Type]] to the data inside ``RefCell``.\n- ``RefCell`` keeps a track of all its immutable and mutable [[Reference Type]]s like [[Rc<T>]].\n  This allows there to be any number of immutable references, or a single mutable reference to a value at any time. This is exactly like [[Reference Type]] mutability rules. However, a big difference is that instead of the compiler failing to compile code that violates this rule, we get [[Panic]] at runtime instead.\n-",536870920]],["^15",[1408,"^17",1700492155354,536870920]],["^15",[1408,"^Z","Rust/pages/RefCell%3CT%3E.md",536870920]],["^15",[1409,"^Q","Much like [[Rc<T>]]. However it uses the [[Interior Mutability Pattern]] to do something other [[Pointer]]s can't. It allows immutable references from mutable [[Reference Type]]s. \nDefined in the ``std::cell::RefCell`` [[Module]] in the [[Standard Library]].\n \nFor ex.:\n```rust\nuse std::cell::RefCell;\nfn main() {\n    let a= RefCell::new(2);\n    let b= &a;\n    let mut c= b.borrow_mut();\n    *c=3; //works\n}\n```\n\nThe ``.borrow()`` [[Method]] returns a ``Ref<T>`` instance and ``.borrow_mut()`` returns a ``RefMut<T>`` instance, this instance has mutable [[Reference Type]] to the data inside ``RefCell``.",536870920]],["^15",[1409,"^O","^16",536870920]],["^15",[1409,"^F",1155,536870920]],["^15",[1409,"^X",1155,536870920]],["^15",[1409,"^V",1155,536870920]],["^15",[1409,"^U",287,536870920]],["^15",[1409,"^U",1065,536870920]],["^15",[1409,"^U",1075,536870920]],["^15",[1409,"^U",1091,536870920]],["^15",[1409,"^U",1094,536870920]],["^15",[1409,"^U",1096,536870920]],["^15",[1409,"^U",1118,536870920]],["^15",[1409,"^U",1155,536870920]],["^15",[1409,"^H",287,536870920]],["^15",[1409,"^H",1065,536870920]],["^15",[1409,"^H",1075,536870920]],["^15",[1409,"^H",1091,536870920]],["^15",[1409,"^H",1094,536870920]],["^15",[1409,"^H",1096,536870920]],["^15",[1409,"^H",1118,536870920]],["^15",[1409,"^;","~u655b737b-77f9-4879-844a-7a38ab2da1a9",536870920]],["^15",[1410,"^Q","~``RefCell`` keeps a track of all its immutable and mutable [[Reference Type]]s like [[Rc<T>]].\nThis allows there to be any number of immutable references, or a single mutable reference to a value at any time. This is exactly like [[Reference Type]] mutability rules. However, a big difference is that instead of the compiler failing to compile code that violates this rule, we get [[Panic]] at runtime instead.",536870920]],["^15",[1410,"^O","^16",536870920]],["^15",[1410,"^F",1409,536870920]],["^15",[1410,"^X",1155,536870920]],["^15",[1410,"^V",1155,536870920]],["^15",[1410,"^U",1075,536870920]],["^15",[1410,"^U",1080,536870920]],["^15",[1410,"^U",1091,536870920]],["^15",[1410,"^U",1155,536870920]],["^15",[1410,"^H",1075,536870920]],["^15",[1410,"^H",1080,536870920]],["^15",[1410,"^H",1091,536870920]],["^15",[1410,"^;","~u655b737b-0334-44ba-92bc-9bf78d7494f1",536870920]],["^15",[1411,"^Q","",536870920]],["^15",[1411,"^O","^16",536870920]],["^15",[1411,"^F",1410,536870920]],["^15",[1411,"^X",1155,536870920]],["^15",[1411,"^V",1155,536870920]],["^15",[1411,"^U",1155,536870920]],["^15",[1411,"^;","~u655b737b-8184-41e1-bfbb-97a443705cdc",536870920]],["^15",[1412,"^3","- A reference in Rust, is much like a Reference in *C++*, it doesn't have take [[Ownership]], nor does it [[Copy or Move]], it simply stores a pointer to the actual value and passes it around. This is called [[Borrow]]ing. \n  \n  For ex.:\n  ```rust\n  fn main() {\n      let s1 = String::from(\"hello\");\n      let p= &s1; //p's type is inferred as &String\n      sec(&s1);\n       println!(&s1); //ok\n  }\n   \n  fn sec(s: &String) {\n      println!(\"{}\",s);\n  }\n  ```\n  It looks like so\n  ![Three tables: the table for s contains only a pointer to the table for s1. The table for s1 contains the stack data for s1 and points to the string data on the heap.](../assets/image_1689029258981_0.png){:width 500 :height 500}\n  \n  Here, we do [[Borrow]]. `&` is the reference [[Operator]], it copies a reference to a value. On the contrary, we have the ``*`` [[Operator]] which is the *dereference* Operator and it reads the value at the given reference.\n  \n  So with `&s1` we are borrowing the value behind ``s1``, which is to say the [[Function]] `sec` or `p` are not going to own the value ``hello``, simply have access to it. [[Borrow]] is a synonym to ‘referencing the value’ from other languages. \n  Borrowed values cannot be modified, so ``sec`` can’t modify ``s`` as it is a reference.\n  \n  Since the [[Ownership]] of `s1` isn't given to `p` or `s`, the value inside `s1` will have a [[Lifetime]] of `s1`. Which is to say, the value inside isn't dropped when the `sec` [[Function]] is over and `s` goes out of [[Scope]].\n- The [[Data Type]] of references is not the same as the type of the values they refer, it is a Reference Data Type which is either ``&<T>`` or ``&mut <T>``.\n- Just like [[Variable]]s, references can be *immutable* or *mutable*\n  An immutable reference is retrieved with the ``&`` [[Operator]] and the [[Data Type]] of the Reference type is ``&<T>``.\n  \n  A mutable reference is retrieved with ``& mut`` and the data type is ``& mut<T>``.\n  \n  Immutable references don't allow any modification on the value, only reads. A mutable reference does allow modification but it is very strict about that.\n  For ex.:\n  ```rust\n  fn main() {\n      let mut s = String::from(\"hello\");\n      sec(&mut s);\n  }\n   \n  fn sec(s: &mut String) {\n      s.push_str(\"yo\");\n      println!(\"{}\",s);\n  } //ok\n  ```\n  Mutable references require ``mut`` keyword on 3 things, \n  1. The [[Variable]] which will pass the mutable reference, this need to be mutable to allow mutable references being taken of it. An immutable variable can't give out a mutable reference.\n  2. The reference itself must be retrieved with the ``& mut`` keyword.\n  3. The [[Data Type]] of the mutable reference will be ``& mut T``. \n  \n  * If a value has a mutable reference to it, then it can only have the mutable reference and no other reference to it can be active at that time.\n  For ex.:\n  ```rust\n  let mut s= String::From(\"yo\");\n  let p = &mut s;\n  let x= &mut s; //ok, there are 2 mutable refs but NLL ensures p is already dropped\n  ```\n  Works, however\n  ```rust\n  let mut s= String::From(\"yo\");\n  let p = &mut s;\n  let x= &mut s; \n  \n  println!(“{} {}”, p,x); //error\n  ```\n  is an [[Error]] as both mutable references are alive at the same time.\n  \n  These restrictions ensures that an (im)mutable reference is always reading value at the correct address.\n  * There can't be a mutable reference when an immutable reference exists for a value.\n  \n  * There can be any number of immutable references, and all of them are valid even all at once.\n- Dangling pointers are avoided at compile-time itself in Rust through the use of [[Lifetime]]s.\n  For ex.:\n  ```rust\n  fn main(){\n    let p = sec();\n  }\n  \n  fn sec() -> &String{\n      let mut s = String::from(\"hello\");\n      \n      &s \n  }\n  ```\n  is an [[Error]] as even though the reference type is returned, the value itself can been already dropped. Rust knows this with the use of Lifetimes.\n- [[Slice]]\n- Do recall from *C++* that the size of a reference/pointer is fixed and it may be larger than a primitive type like [[Number]] int32 so don’t use refs for primitives. They do make things easier though.\n  \n  As can be seen here\n  ![image.png](../assets/image_1689031775031_0.png)\n- All References have an associated [[Lifetime]] with them.\n- Referencing and Dereferencing\n  \n  A [[Data Type]] ``&T`` simply stores value that is a memory address, so a ``&T`` value will never be equal/comparable to a value of type ``T``. \n  \n  ``T`` -> ``&T`` : We do this with ``<value>``-> ``&<value>``. The ``&`` [[Operator]] returns the memory address and a type ``&T`` can store the address.\n  \n  ``&T`` -> ``T`` : We do this with ``<value>`` -> ``*<value>`` where the ``*`` [[Operator]] is called the dereference operator. It accesses the value at the address pointed to by a ``&T`` value and returns a value of type ``T``.  \n  \n  * The memory address has a single type, i32 for 32-bit systems and i64 for 64-bit systems. But by having a different name for ``&T``, Rust ensures no type-checking is required when converting references/derefences.\n  \n  * Dereference of non-primitive [[Data Type]]s requires implementation of the ``Deref`` [[Trait]].\n-\n-",536870920]],["^15",[1412,"^17",1700492155394,536870920]],["^15",[1412,"^Z","Rust/pages/Reference Type.md",536870920]],["^15",[1413,"^K",1700492155497,536870920]],["^15",[1413,"^[",1456,536870920]],["^15",[1413,"^@",false,536870920]],["^15",[1413,"^Y","slice",536870920]],["^15",[1413,"^11","Slice",536870920]],["^15",[1413,"^B",1700492155497,536870920]],["^15",[1413,"^;","~u656462fe-d0ca-47d7-8ab8-eb550ff54e11",536870960]],["^15",[1414,"^Q","Just like [[Variable]]s, references can be *immutable* or *mutable*\nAn immutable reference is retrieved with the ``&`` [[Operator]] and the [[Data Type]] of the Reference type is ``&<T>``.\n\nA mutable reference is retrieved with ``& mut`` and the data type is ``& mut<T>``.\n\nImmutable references don't allow any modification on the value, only reads. A mutable reference does allow modification but it is very strict about that.\nFor ex.:\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n    sec(&mut s);\n}\n \nfn sec(s: &mut String) {\n    s.push_str(\"yo\");\n    println!(\"{}\",s);\n} //ok\n```\nMutable references require ``mut`` keyword on 3 things, \n1. The [[Variable]] which will pass the mutable reference, this need to be mutable to allow mutable references being taken of it. An immutable variable can't give out a mutable reference.\n2. The reference itself must be retrieved with the ``& mut`` keyword.\n3. The [[Data Type]] of the mutable reference will be ``& mut T``. \n\n* If a value has a mutable reference to it, then it can only have the mutable reference and no other reference to it can be active at that time.\nFor ex.:\n```rust\nlet mut s= String::From(\"yo\");\nlet p = &mut s;\nlet x= &mut s; //ok, there are 2 mutable refs but NLL ensures p is already dropped\n```\nWorks, however\n```rust\nlet mut s= String::From(\"yo\");\nlet p = &mut s;\nlet x= &mut s; \n\nprintln!(“{} {}”, p,x); //error\n```\nis an [[Error]] as both mutable references are alive at the same time.\n\nThese restrictions ensures that an (im)mutable reference is always reading value at the correct address.\n* There can't be a mutable reference when an immutable reference exists for a value.\n\n* There can be any number of immutable references, and all of them are valid even all at once.",536870920]],["^15",[1414,"^O","^16",536870920]],["^15",[1414,"^F",1421,536870920]],["^15",[1414,"^X",1091,536870920]],["^15",[1414,"^V",1091,536870920]],["^15",[1414,"^U",161,536870920]],["^15",[1414,"^U",339,536870920]],["^15",[1414,"^U",340,536870920]],["^15",[1414,"^U",1090,536870920]],["^15",[1414,"^U",1091,536870920]],["^15",[1414,"^H",161,536870920]],["^15",[1414,"^H",339,536870920]],["^15",[1414,"^H",340,536870920]],["^15",[1414,"^H",1090,536870920]],["^15",[1414,"^;","~u655b737b-f6cf-4ac3-a02b-166c3bdfd710",536870920]],["^15",[1415,"^Q","[[Slice]]",536870920]],["^15",[1415,"^O","^16",536870920]],["^15",[1415,"^F",1419,536870920]],["^15",[1415,"^X",1091,536870920]],["^15",[1415,"^V",1091,536870920]],["^15",[1415,"^U",1091,536870920]],["^15",[1415,"^U",1413,536870920]],["^15",[1415,"^H",1413,536870920]],["^15",[1415,"^;","~u655b737b-3f24-41c3-9e24-7a97e8b67f7b",536870920]],["^15",[1416,"^Q","",536870920]],["^15",[1416,"^O","^16",536870920]],["^15",[1416,"^F",1418,536870920]],["^15",[1416,"^X",1091,536870920]],["^15",[1416,"^V",1091,536870920]],["^15",[1416,"^U",1091,536870920]],["^15",[1416,"^;","~u655b737b-5fae-4d31-8f6a-44b4fb48ca53",536870920]],["^15",[1417,"^Q","Do recall from *C++* that the size of a reference/pointer is fixed and it may be larger than a primitive type like [[Number]] int32 so don’t use refs for primitives. They do make things easier though.\n\nAs can be seen here\n![image.png](../assets/image_1689031775031_0.png)",536870920]],["^15",[1417,"^O","^16",536870920]],["^15",[1417,"^F",1415,536870920]],["^15",[1417,"^X",1091,536870920]],["^15",[1417,"^V",1091,536870920]],["^15",[1417,"^U",162,536870920]],["^15",[1417,"^U",1091,536870920]],["^15",[1417,"^H",162,536870920]],["^15",[1417,"^;","~u655b737b-d041-45e7-8050-c35959192129",536870920]],["^15",[1418,"^Q","",536870920]],["^15",[1418,"^O","^16",536870920]],["^15",[1418,"^F",1422,536870920]],["^15",[1418,"^X",1091,536870920]],["^15",[1418,"^V",1091,536870920]],["^15",[1418,"^U",1091,536870920]],["^15",[1418,"^;","~u655b737b-774e-4534-a4bf-f010fcc4c26a",536870920]],["^15",[1419,"^Q","Dangling pointers are avoided at compile-time itself in Rust through the use of [[Lifetime]]s.\nFor ex.:\n```rust\nfn main(){\n  let p = sec();\n}\n\nfn sec() -> &String{\n    let mut s = String::from(\"hello\");\n    \n    &s \n}\n```\nis an [[Error]] as even though the reference type is returned, the value itself can been already dropped. Rust knows this with the use of Lifetimes.",536870920]],["^15",[1419,"^O","^16",536870920]],["^15",[1419,"^F",1414,536870920]],["^15",[1419,"^X",1091,536870920]],["^15",[1419,"^V",1091,536870920]],["^15",[1419,"^U",340,536870920]],["^15",[1419,"^U",1091,536870920]],["^15",[1419,"^U",1101,536870920]],["^15",[1419,"^H",340,536870920]],["^15",[1419,"^H",1101,536870920]],["^15",[1419,"^;","~u655b737b-d179-40ab-9b46-b638525b303f",536870920]],["^15",[1420,"^Q","All References have an associated [[Lifetime]] with them.",536870920]],["^15",[1420,"^O","^16",536870920]],["^15",[1420,"^F",1417,536870920]],["^15",[1420,"^X",1091,536870920]],["^15",[1420,"^V",1091,536870920]],["^15",[1420,"^U",1091,536870920]],["^15",[1420,"^U",1101,536870920]],["^15",[1420,"^H",1101,536870920]],["^15",[1420,"^;","~u655b737b-82e0-46bc-b83b-39bd7a2e2817",536870920]],["^15",[1421,"^Q","The [[Data Type]] of references is not the same as the type of the values they refer, it is a Reference Data Type which is either ``&<T>`` or ``&mut <T>``.",536870920]],["^15",[1421,"^O","^16",536870920]],["^15",[1421,"^F",1423,536870920]],["^15",[1421,"^X",1091,536870920]],["^15",[1421,"^V",1091,536870920]],["^15",[1421,"^U",1090,536870920]],["^15",[1421,"^U",1091,536870920]],["^15",[1421,"^H",1090,536870920]],["^15",[1421,"^;","~u655b737b-996d-4a5d-a48d-7f675738f537",536870920]],["^15",[1422,"^Q","Referencing and Dereferencing\n\nA [[Data Type]] ``&T`` simply stores value that is a memory address, so a ``&T`` value will never be equal/comparable to a value of type ``T``. \n\n``T`` -> ``&T`` : We do this with ``<value>``-> ``&<value>``. The ``&`` [[Operator]] returns the memory address and a type ``&T`` can store the address.\n\n``&T`` -> ``T`` : We do this with ``<value>`` -> ``*<value>`` where the ``*`` [[Operator]] is called the dereference operator. It accesses the value at the address pointed to by a ``&T`` value and returns a value of type ``T``.  \n\n* The memory address has a single type, i32 for 32-bit systems and i64 for 64-bit systems. But by having a different name for ``&T``, Rust ensures no type-checking is required when converting references/derefences.\n\n* Dereference of non-primitive [[Data Type]]s requires implementation of the ``Deref`` [[Trait]].",536870920]],["^15",[1422,"^O","^16",536870920]],["^15",[1422,"^F",1420,536870920]],["^15",[1422,"^X",1091,536870920]],["^15",[1422,"^V",1091,536870920]],["^15",[1422,"^U",339,536870920]],["^15",[1422,"^U",1073,536870920]],["^15",[1422,"^U",1090,536870920]],["^15",[1422,"^U",1091,536870920]],["^15",[1422,"^H",339,536870920]],["^15",[1422,"^H",1073,536870920]],["^15",[1422,"^H",1090,536870920]],["^15",[1422,"^;","~u655b737b-9e8c-41a3-9ca9-433d70e0afab",536870920]],["^15",[1423,"^Q","A reference in Rust, is much like a Reference in *C++*, it doesn't have take [[Ownership]], nor does it [[Copy or Move]], it simply stores a pointer to the actual value and passes it around. This is called [[Borrow]]ing. \n\nFor ex.:\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n    let p= &s1; //p's type is inferred as &String\n    sec(&s1);\n     println!(&s1); //ok\n}\n \nfn sec(s: &String) {\n    println!(\"{}\",s);\n}\n```\nIt looks like so\n![Three tables: the table for s contains only a pointer to the table for s1. The table for s1 contains the stack data for s1 and points to the string data on the heap.](../assets/image_1689029258981_0.png){:width 500 :height 500}\n\nHere, we do [[Borrow]]. `&` is the reference [[Operator]], it copies a reference to a value. On the contrary, we have the ``*`` [[Operator]] which is the *dereference* Operator and it reads the value at the given reference.\n\nSo with `&s1` we are borrowing the value behind ``s1``, which is to say the [[Function]] `sec` or `p` are not going to own the value ``hello``, simply have access to it. [[Borrow]] is a synonym to ‘referencing the value’ from other languages. \nBorrowed values cannot be modified, so ``sec`` can’t modify ``s`` as it is a reference.\n\nSince the [[Ownership]] of `s1` isn't given to `p` or `s`, the value inside `s1` will have a [[Lifetime]] of `s1`. Which is to say, the value inside isn't dropped when the `sec` [[Function]] is over and `s` goes out of [[Scope]].",536870920]],["^15",[1423,"^O","^16",536870920]],["^15",[1423,"^F",1091,536870920]],["^15",[1423,"^X",1091,536870920]],["^15",[1423,"^V",1091,536870920]],["^15",[1423,"^U",163,536870920]],["^15",[1423,"^U",339,536870920]],["^15",[1423,"^U",345,536870920]],["^15",[1423,"^U",1091,536870920]],["^15",[1423,"^U",1101,536870920]],["^15",[1423,"^U",1117,536870920]],["^15",[1423,"^U",1160,536870920]],["^15",[1423,"^U",1171,536870920]],["^15",[1423,"^H",163,536870920]],["^15",[1423,"^H",339,536870920]],["^15",[1423,"^H",345,536870920]],["^15",[1423,"^H",1101,536870920]],["^15",[1423,"^H",1117,536870920]],["^15",[1423,"^H",1160,536870920]],["^15",[1423,"^H",1171,536870920]],["^15",[1423,"^;","~u655b737b-bddd-4a48-b014-cff0efe756f6",536870920]],["^15",[1424,"^3","- ``Result<T,E>`` \n  An [[Enum]] which is defined in the [[Prelude]] like so\n  \n  ```rust\n  enum Result<T, E> {\n      Ok(T),\n      Err(E),\n  }\n  ```\n  It works much like the [[Option Type]] but it is meant to be used with [[Error]]s to represent Recoverable Errors.\n  \n  For ex.:\n  ```rust\n  use std::fs::File;\n  \n  fn main() {\n      let greeting_file_result = File::open(\"hello.txt\");\n  \n      let greeting_file = match greeting_file_result {\n          Ok(file) => file,\n          Err(error) => panic!(\"Problem opening the file: {:?}\", error),\n      };\n  }\n  ```\n- Just like the [[Option Type]], the keyword ``Ok`` and ``Err`` are available as-is as well.\n-\n-",536870920]],["^15",[1424,"^17",1700492155409,536870920]],["^15",[1424,"^Z","Rust/pages/Result Type.md",536870920]],["^15",[1425,"^Q","~``Result<T,E>`` \nAn [[Enum]] which is defined in the [[Prelude]] like so\n\n```rust\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\nIt works much like the [[Option Type]] but it is meant to be used with [[Error]]s to represent Recoverable Errors.\n\nFor ex.:\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file_result = File::open(\"hello.txt\");\n\n    let greeting_file = match greeting_file_result {\n        Ok(file) => file,\n        Err(error) => panic!(\"Problem opening the file: {:?}\", error),\n    };\n}\n```",536870920]],["^15",[1425,"^O","^16",536870920]],["^15",[1425,"^F",1098,536870920]],["^15",[1425,"^X",1098,536870920]],["^15",[1425,"^V",1098,536870920]],["^15",[1425,"^U",340,536870920]],["^15",[1425,"^U",1066,536870920]],["^15",[1425,"^U",1098,536870920]],["^15",[1425,"^U",1212,536870920]],["^15",[1425,"^U",1254,536870920]],["^15",[1425,"^H",340,536870920]],["^15",[1425,"^H",1066,536870920]],["^15",[1425,"^H",1212,536870920]],["^15",[1425,"^H",1254,536870920]],["^15",[1425,"^;","~u655b737b-bc3c-4325-929b-4b695585c7f2",536870920]],["^15",[1426,"^Q","Just like the [[Option Type]], the keyword ``Ok`` and ``Err`` are available as-is as well.",536870920]],["^15",[1426,"^O","^16",536870920]],["^15",[1426,"^F",1425,536870920]],["^15",[1426,"^X",1098,536870920]],["^15",[1426,"^V",1098,536870920]],["^15",[1426,"^U",1098,536870920]],["^15",[1426,"^U",1254,536870920]],["^15",[1426,"^H",1254,536870920]],["^15",[1426,"^;","~u655b737b-6672-416d-8363-1ceba787b966",536870920]],["^15",[1427,"^Q","",536870920]],["^15",[1427,"^O","^16",536870920]],["^15",[1427,"^F",1426,536870920]],["^15",[1427,"^X",1098,536870920]],["^15",[1427,"^V",1098,536870920]],["^15",[1427,"^U",1098,536870920]],["^15",[1427,"^;","~u655b737b-d158-4278-8d34-75de423f7dfe",536870920]],["^15",[1428,"^Q","",536870920]],["^15",[1428,"^O","^16",536870920]],["^15",[1428,"^F",1427,536870920]],["^15",[1428,"^X",1098,536870920]],["^15",[1428,"^V",1098,536870920]],["^15",[1428,"^U",1098,536870920]],["^15",[1428,"^;","~u655b737b-2750-4297-ae6f-37c114c347a0",536870920]],["^15",[1429,"^3","- Fast, multi-threaded, type-safe & memory efficient language that eliminates most bugs at compile-time. It also bridges the gap between a low-level language and a high-level language with its compiler. Uses [[rustup]] to maintain versions on platforms and [[cargo]] which is its package manager. \n  \n  Its mascot is called *Ferris*, a red crusty crab and its users, *Rustaceans*.\n- [[Default Linter Rule]]\n- Lines need to be ended with ;\n- Rust files end in the extension ``.rs``\n- Install rust by installing [[rustup]], here's a quick reference [docs book](https://doc.rust-lang.org/book/ch01-01-installation.html).\n- [[rustup]] also introduces [[Cargo]]: Rust's Package manager, [[rustc]]: Rust's compiler and [[rustup]] itself which manages the updating of both. These are all available to the CLI, but if not, add them to the PATH as they are executables. \n  \n  The ``rls`` (Rust Language Server) and ``rust-analyzer`` (Provides implementation of the rls) are generally automatically installed with rustup, but if they are not (resulting in failed code-completion etc.) we can manually install them with \n  ``rustup component add rls`` and ``rustup component add rust-analyzer``\n- A rust project needs a [[cargo.toml]] file at the bare minimum.\n- Main Entrypoint to any Rust executable\n  ``fn main() {…}``\n- [[Variable]]\n- [[Expression]]\n- Statements vs Expressions\n  Statements are instructions that perform some actions and don’t return a value. Expressions are the same but return a value. [[Function]]s definitions in Rust are statements. But calling a function is an \n   expression. This distinction is not as visible in other languages but in rust,\n  ```rust\n  let x = (let y = 6); \n  ```\n  is an error as ‘let’ is a statement and hence doesn’t return anything. \n  However, a custom [[Scope]] block is an expression. Every scope block in Rust returns something.\n  \n  For ex.:\n  ```rust\n  let y = {\n   let x= 1;\n   x+1 //Here x+1 is an expression, as it is evaluated then the value is being returned\n  }; //Note the semicolon, it is required for custom scope blocks which need to return a value\n  println!(“{}”,y); //prints 2\n  ```\n- [[Comment]]\n- [[Control Flow]]\n- [[Struct]]\n- [[Module System]]\n- [[Testing Framework]]\n- Reading environment args and environment variables\n  To do so,\n  ```rust\n  use std::env;\n  \n  fn main() {\n  let values: Vec<String>= env::args().collect();\n  //puts env args as String objects into values.\n  let val= env::var(\"MYENV_VAR\");\n  let isOk= val.is_ok(); \n  //reads the given env var and returns Result in val. .is_ok() returns true if the Result is Ok().\n  \n  }\n  ```\n  To pass env args,\n  \n  ``cargo run arg1 arg2``to [[Cargo]]. \n  \n  Sometimes env args can fail due to Unicode issues. To solve that we can use ``.args_os()`` instead, this returns values of ``OsString`` [[Data Type]].\n- [[File]]\n- *Functional Programming*\n  Rust borrows some concepts from FP languages. An FP language generally\n  sees [[Function]]s as values.\n  These concepts in Rust are similar to what FP languages have.\n  * [[Closure]]\n  * [[Iterator]]\n- [[Concurrency or Parallelism]]\n- *Object Oriented Programming*\n  Rust isn't strictly OOP in the sense languages like *C++* are. Instead, it focuses on bringing all important aspects from OOP languages. By definition, OOP languages should provide *objects* that are packages of data and methods, and the methods operate on said data in their own packages. Rust does this using ``impl`` blocks and [[Struct]]/ [[Enum]]s. Encapsulation is handled through [[Access Modifier]]s.\n  Inheritance isn't wholly used, but it's most important aspects, abstract classes, which is done using [[Trait]]s and their implementers, and Polymorphism where an abstract type is used and at runtime replaced with a more concrete type, which is handled through [[Trait Object]]s, are covered.\n- *Raw Identifier*s\n  Rust allows naming items such as [[Function]]s, [[Variable]]s etc. with the same name as keywords, but requires a special prefix to be used, ``r#``. This is applied to both the definition and the call-site.\n  \n  For ex.:\n  ```rust\n  fn r#match(){}\n  \n  fn yo() {}\n  \n  fn main() {\n   r#match(); //works\n   r#yo(); //also works\n  }\n  ```\n  \n  The benefit is that even if the definition isn't using ``r#``, the call-site would still work. It would call the ``r#`` version and if it doesn't exist, it'd call the normal version. Both can't be defined together in the same [[Scope]] so there's no ambiguity to which one will be called.\n-",536870920]],["^15",[1429,"^17",1700492155445,536870920]],["^15",[1429,"^Z","Rust/pages/Rust.md",536870920]],["^15",[1430,"^K",1700492155673,536870920]],["^15",[1430,"^[",1477,536870920]],["^15",[1430,"^@",false,536870920]],["^15",[1430,"^Y","testing framework",536870920]],["^15",[1430,"^11","Testing Framework",536870920]],["^15",[1430,"^B",1700492155673,536870920]],["^15",[1430,"^;","~u655b737b-be1d-4466-937d-9d435dc15f43",536870920]],["^15",[1431,"^K",1700492155851,536870920]],["^15",[1431,"^[",1429,536870920]],["^15",[1431,"^@",false,536870920]],["^15",[1431,"^Y","rust",536870920]],["^15",[1431,"^11","Rust",536870920]],["^15",[1431,"^B",1700492155851,536870920]],["^15",[1431,"^;","~u656462fd-606d-4b03-a893-33bf4d3dbfda",536870944]],["^15",[1432,"^K",1700492155443,536870920]],["^15",[1432,"^@",false,536870920]],["^15",[1432,"^Y","rustup",536870920]],["^15",[1432,"^11","rustup",536870920]],["^15",[1432,"^B",1700492155443,536870920]],["^15",[1432,"^;","~u655b737b-301b-446e-88e6-a0dab557a77f",536870920]],["^15",[1433,"^Q","[[Testing Framework]]",536870920]],["^15",[1433,"^O","^16",536870920]],["^15",[1433,"^F",1449,536870920]],["^15",[1433,"^X",1431,536870920]],["^15",[1433,"^V",1431,536870920]],["^15",[1433,"^U",1430,536870920]],["^15",[1433,"^U",1431,536870920]],["^15",[1433,"^H",1430,536870920]],["^15",[1433,"^;","~u655b737b-c23f-4206-90a4-c250f933fd79",536870920]],["^15",[1434,"^Q","[[Expression]]",536870920]],["^15",[1434,"^O","^16",536870920]],["^15",[1434,"^F",1443,536870920]],["^15",[1434,"^X",1431,536870920]],["^15",[1434,"^V",1431,536870920]],["^15",[1434,"^U",1263,536870920]],["^15",[1434,"^U",1431,536870920]],["^15",[1434,"^H",1263,536870920]],["^15",[1434,"^;","~u655b737b-5f74-4509-a2f9-1df49e376cbb",536870920]],["^15",[1435,"^Q","Statements vs Expressions\nStatements are instructions that perform some actions and don’t return a value. Expressions are the same but return a value. [[Function]]s definitions in Rust are statements. But calling a function is an \n expression. This distinction is not as visible in other languages but in rust,\n```rust\nlet x = (let y = 6); \n```\nis an error as ‘let’ is a statement and hence doesn’t return anything. \nHowever, a custom [[Scope]] block is an expression. Every scope block in Rust returns something.\n\nFor ex.:\n```rust\nlet y = {\n let x= 1;\n x+1 //Here x+1 is an expression, as it is evaluated then the value is being returned\n}; //Note the semicolon, it is required for custom scope blocks which need to return a value\nprintln!(“{}”,y); //prints 2\n```",536870920]],["^15",[1435,"^O","^16",536870920]],["^15",[1435,"^F",1434,536870920]],["^15",[1435,"^X",1431,536870920]],["^15",[1435,"^V",1431,536870920]],["^15",[1435,"^U",163,536870920]],["^15",[1435,"^U",345,536870920]],["^15",[1435,"^U",1431,536870920]],["^15",[1435,"^H",163,536870920]],["^15",[1435,"^H",345,536870920]],["^15",[1435,"^;","~u655b737b-b707-4f06-bdbb-6af851c2e9ce",536870920]],["^15",[1436,"^Q","*Functional Programming*\nRust borrows some concepts from FP languages. An FP language generally\nsees [[Function]]s as values.\nThese concepts in Rust are similar to what FP languages have.\n* [[Closure]]\n* [[Iterator]]",536870920]],["^15",[1436,"^O","^16",536870920]],["^15",[1436,"^F",1437,536870920]],["^15",[1436,"^X",1431,536870920]],["^15",[1436,"^V",1431,536870920]],["^15",[1436,"^U",163,536870920]],["^15",[1436,"^U",1093,536870920]],["^15",[1436,"^U",1161,536870920]],["^15",[1436,"^U",1431,536870920]],["^15",[1436,"^H",163,536870920]],["^15",[1436,"^H",1093,536870920]],["^15",[1436,"^H",1161,536870920]],["^15",[1436,"^;","~u655b737b-1a6a-45e4-a66d-0da5ea021eb0",536870920]],["^15",[1437,"^Q","[[File]]",536870920]],["^15",[1437,"^O","^16",536870920]],["^15",[1437,"^F",1445,536870920]],["^15",[1437,"^X",1431,536870920]],["^15",[1437,"^V",1431,536870920]],["^15",[1437,"^U",1267,536870920]],["^15",[1437,"^U",1431,536870920]],["^15",[1437,"^H",1267,536870920]],["^15",[1437,"^;","~u655b737b-72ac-4b44-8a06-e6fb3f1fa6c2",536870920]],["^15",[1438,"^Q","Fast, multi-threaded, type-safe & memory efficient language that eliminates most bugs at compile-time. It also bridges the gap between a low-level language and a high-level language with its compiler. Uses [[rustup]] to maintain versions on platforms and [[cargo]] which is its package manager. \n\nIts mascot is called *Ferris*, a red crusty crab and its users, *Rustaceans*.",536870920]],["^15",[1438,"^O","^16",536870920]],["^15",[1438,"^F",1431,536870920]],["^15",[1438,"^X",1431,536870920]],["^15",[1438,"^V",1431,536870920]],["^15",[1438,"^U",1132,536870920]],["^15",[1438,"^U",1431,536870920]],["^15",[1438,"^U",1432,536870920]],["^15",[1438,"^H",1132,536870920]],["^15",[1438,"^H",1432,536870920]],["^15",[1438,"^;","~u655b737b-9720-40b5-b585-136f73e7e27a",536870920]],["^15",[1439,"^Q","Lines need to be ended with ;",536870920]],["^15",[1439,"^O","^16",536870920]],["^15",[1439,"^F",1442,536870920]],["^15",[1439,"^X",1431,536870920]],["^15",[1439,"^V",1431,536870920]],["^15",[1439,"^U",1431,536870920]],["^15",[1439,"^;","~u655b737b-7fe4-40ae-8e36-3764df9a573d",536870920]],["^15",[1440,"^Q","Main Entrypoint to any Rust executable\n``fn main() {…}``",536870920]],["^15",[1440,"^O","^16",536870920]],["^15",[1440,"^F",1451,536870920]],["^15",[1440,"^X",1431,536870920]],["^15",[1440,"^V",1431,536870920]],["^15",[1440,"^U",1431,536870920]],["^15",[1440,"^;","~u655b737b-862f-4c1c-9ac2-576bfb5073f5",536870920]],["^15",[1441,"^Q","[[Struct]]",536870920]],["^15",[1441,"^O","^16",536870920]],["^15",[1441,"^F",1453,536870920]],["^15",[1441,"^X",1431,536870920]],["^15",[1441,"^V",1431,536870920]],["^15",[1441,"^U",1064,536870920]],["^15",[1441,"^U",1431,536870920]],["^15",[1441,"^H",1064,536870920]],["^15",[1441,"^;","~u655b737b-e044-4d35-99f1-07e5326b0d3c",536870920]],["^15",[1442,"^Q","[[Default Linter Rule]]",536870920]],["^15",[1442,"^O","^16",536870920]],["^15",[1442,"^F",1438,536870920]],["^15",[1442,"^X",1431,536870920]],["^15",[1442,"^V",1431,536870920]],["^15",[1442,"^U",1236,536870920]],["^15",[1442,"^U",1431,536870920]],["^15",[1442,"^H",1236,536870920]],["^15",[1442,"^;","~u655b737b-648c-4c59-a0a9-e3d67b21e720",536870920]],["^15",[1443,"^Q","[[Variable]]",536870920]],["^15",[1443,"^O","^16",536870920]],["^15",[1443,"^F",1440,536870920]],["^15",[1443,"^X",1431,536870920]],["^15",[1443,"^V",1431,536870920]],["^15",[1443,"^U",161,536870920]],["^15",[1443,"^U",1431,536870920]],["^15",[1443,"^H",161,536870920]],["^15",[1443,"^;","~u655b737b-eb79-4ba7-b007-e736992675db",536870920]],["^15",[1444,"^Q","[[Concurrency or Parallelism]]",536870920]],["^15",[1444,"^O","^16",536870920]],["^15",[1444,"^F",1436,536870920]],["^15",[1444,"^X",1431,536870920]],["^15",[1444,"^V",1431,536870920]],["^15",[1444,"^U",1110,536870920]],["^15",[1444,"^U",1431,536870920]],["^15",[1444,"^H",1110,536870920]],["^15",[1444,"^;","~u655b737b-c539-460c-aea6-5a23ea1dc507",536870920]],["^15",[1445,"^Q","Reading environment args and environment variables\nTo do so,\n```rust\nuse std::env;\n\nfn main() {\nlet values: Vec<String>= env::args().collect();\n//puts env args as String objects into values.\nlet val= env::var(\"MYENV_VAR\");\nlet isOk= val.is_ok(); \n//reads the given env var and returns Result in val. .is_ok() returns true if the Result is Ok().\n\n}\n```\nTo pass env args,\n\n``cargo run arg1 arg2``to [[Cargo]]. \n\nSometimes env args can fail due to Unicode issues. To solve that we can use ``.args_os()`` instead, this returns values of ``OsString`` [[Data Type]].",536870920]],["^15",[1445,"^O","^16",536870920]],["^15",[1445,"^F",1433,536870920]],["^15",[1445,"^X",1431,536870920]],["^15",[1445,"^V",1431,536870920]],["^15",[1445,"^U",1090,536870920]],["^15",[1445,"^U",1132,536870920]],["^15",[1445,"^U",1431,536870920]],["^15",[1445,"^H",1090,536870920]],["^15",[1445,"^H",1132,536870920]],["^15",[1445,"^;","~u655b737b-51af-49ba-8f1b-a789103be819",536870920]],["^15",[1446,"^Q","*Object Oriented Programming*\nRust isn't strictly OOP in the sense languages like *C++* are. Instead, it focuses on bringing all important aspects from OOP languages. By definition, OOP languages should provide *objects* that are packages of data and methods, and the methods operate on said data in their own packages. Rust does this using ``impl`` blocks and [[Struct]]/ [[Enum]]s. Encapsulation is handled through [[Access Modifier]]s.\nInheritance isn't wholly used, but it's most important aspects, abstract classes, which is done using [[Trait]]s and their implementers, and Polymorphism where an abstract type is used and at runtime replaced with a more concrete type, which is handled through [[Trait Object]]s, are covered.",536870920]],["^15",[1446,"^O","^16",536870920]],["^15",[1446,"^F",1444,536870920]],["^15",[1446,"^X",1431,536870920]],["^15",[1446,"^V",1431,536870920]],["^15",[1446,"^U",1062,536870920]],["^15",[1446,"^U",1064,536870920]],["^15",[1446,"^U",1066,536870920]],["^15",[1446,"^U",1073,536870920]],["^15",[1446,"^U",1174,536870920]],["^15",[1446,"^U",1431,536870920]],["^15",[1446,"^H",1062,536870920]],["^15",[1446,"^H",1064,536870920]],["^15",[1446,"^H",1066,536870920]],["^15",[1446,"^H",1073,536870920]],["^15",[1446,"^H",1174,536870920]],["^15",[1446,"^;","~u655b737b-1474-49ad-bee9-411c0b59a69e",536870920]],["^15",[1447,"^Q","",536870920]],["^15",[1447,"^O","^16",536870920]],["^15",[1447,"^F",1448,536870920]],["^15",[1447,"^X",1431,536870920]],["^15",[1447,"^V",1431,536870920]],["^15",[1447,"^U",1431,536870920]],["^15",[1447,"^;","~u655b737b-2ff9-410e-bab5-70d2ef777adf",536870920]],["^15",[1448,"^Q","*Raw Identifier*s\nRust allows naming items such as [[Function]]s, [[Variable]]s etc. with the same name as keywords, but requires a special prefix to be used, ``r#``. This is applied to both the definition and the call-site.\n\nFor ex.:\n```rust\nfn r#match(){}\n\nfn yo() {}\n\nfn main() {\n r#match(); //works\n r#yo(); //also works\n}\n```\n\nThe benefit is that even if the definition isn't using ``r#``, the call-site would still work. It would call the ``r#`` version and if it doesn't exist, it'd call the normal version. Both can't be defined together in the same [[Scope]] so there's no ambiguity to which one will be called.",536870920]],["^15",[1448,"^O","^16",536870920]],["^15",[1448,"^F",1446,536870920]],["^15",[1448,"^X",1431,536870920]],["^15",[1448,"^V",1431,536870920]],["^15",[1448,"^U",161,536870920]],["^15",[1448,"^U",163,536870920]],["^15",[1448,"^U",345,536870920]],["^15",[1448,"^U",1431,536870920]],["^15",[1448,"^H",161,536870920]],["^15",[1448,"^H",163,536870920]],["^15",[1448,"^H",345,536870920]],["^15",[1448,"^;","~u655b737b-1c8f-46af-aa23-13982717413c",536870920]],["^15",[1449,"^Q","[[Module System]]",536870920]],["^15",[1449,"^O","^16",536870920]],["^15",[1449,"^F",1441,536870920]],["^15",[1449,"^X",1431,536870920]],["^15",[1449,"^V",1431,536870920]],["^15",[1449,"^U",1335,536870920]],["^15",[1449,"^U",1431,536870920]],["^15",[1449,"^H",1335,536870920]],["^15",[1449,"^;","~u655b737b-a2ed-4cac-b59a-4815d2eadf0c",536870920]],["^15",[1450,"^Q","Install rust by installing [[rustup]], here's a quick reference [docs book](https://doc.rust-lang.org/book/ch01-01-installation.html).",536870920]],["^15",[1450,"^O","^16",536870920]],["^15",[1450,"^F",1452,536870920]],["^15",[1450,"^X",1431,536870920]],["^15",[1450,"^V",1431,536870920]],["^15",[1450,"^U",1431,536870920]],["^15",[1450,"^U",1432,536870920]],["^15",[1450,"^H",1432,536870920]],["^15",[1450,"^;","~u655b737b-e455-461a-bdbd-56ca637f22ff",536870920]],["^15",[1451,"^Q","A rust project needs a [[cargo.toml]] file at the bare minimum.",536870920]],["^15",[1451,"^O","^16",536870920]],["^15",[1451,"^F",1454,536870920]],["^15",[1451,"^X",1431,536870920]],["^15",[1451,"^V",1431,536870920]],["^15",[1451,"^U",1099,536870920]],["^15",[1451,"^U",1431,536870920]],["^15",[1451,"^H",1099,536870920]],["^15",[1451,"^;","~u655b737b-4065-4919-9990-e0e00428a894",536870920]],["^15",[1452,"^Q","Rust files end in the extension ``.rs``",536870920]],["^15",[1452,"^O","^16",536870920]],["^15",[1452,"^F",1439,536870920]],["^15",[1452,"^X",1431,536870920]],["^15",[1452,"^V",1431,536870920]],["^15",[1452,"^U",1431,536870920]],["^15",[1452,"^;","~u655b737b-9fe7-4027-84b6-965e232889b3",536870920]],["^15",[1453,"^Q","[[Control Flow]]",536870920]],["^15",[1453,"^O","^16",536870920]],["^15",[1453,"^F",1455,536870920]],["^15",[1453,"^X",1431,536870920]],["^15",[1453,"^V",1431,536870920]],["^15",[1453,"^U",1202,536870920]],["^15",[1453,"^U",1431,536870920]],["^15",[1453,"^H",1202,536870920]],["^15",[1453,"^;","~u655b737b-d2ce-434e-ac04-6a9db004bbcc",536870920]],["^15",[1454,"^Q","[[rustup]] also introduces [[Cargo]]: Rust's Package manager, [[rustc]]: Rust's compiler and [[rustup]] itself which manages the updating of both. These are all available to the CLI, but if not, add them to the PATH as they are executables. \n\nThe ``rls`` (Rust Language Server) and ``rust-analyzer`` (Provides implementation of the rls) are generally automatically installed with rustup, but if they are not (resulting in failed code-completion etc.) we can manually install them with \n``rustup component add rls`` and ``rustup component add rust-analyzer``",536870920]],["^15",[1454,"^O","^16",536870920]],["^15",[1454,"^F",1450,536870920]],["^15",[1454,"^X",1431,536870920]],["^15",[1454,"^V",1431,536870920]],["^15",[1454,"^U",1130,536870920]],["^15",[1454,"^U",1132,536870920]],["^15",[1454,"^U",1431,536870920]],["^15",[1454,"^U",1432,536870920]],["^15",[1454,"^H",1130,536870920]],["^15",[1454,"^H",1132,536870920]],["^15",[1454,"^H",1432,536870920]],["^15",[1454,"^;","~u655b737b-4abe-4816-b9df-c1eed8cf91f4",536870920]],["^15",[1455,"^Q","[[Comment]]",536870920]],["^15",[1455,"^O","^16",536870920]],["^15",[1455,"^F",1435,536870920]],["^15",[1455,"^X",1431,536870920]],["^15",[1455,"^V",1431,536870920]],["^15",[1455,"^U",1190,536870920]],["^15",[1455,"^U",1431,536870920]],["^15",[1455,"^H",1190,536870920]],["^15",[1455,"^;","~u655b737b-713c-40dc-9fff-b824e611b27a",536870920]],["^15",[1456,"^3","- A *slice* is a [[Reference Type]] to a contiguous segment of elements of a [[Collection]].\n  Since it is a reference type, it doesn't have any [[Ownership]] of the values.\n  \n  For ex.: For the [[String]], \n  ```rust\n  let s = String::from(“Hello”);\n  let x= &s[..];  //entire string\n  let y= &s[..5]; //index 0 to 5, end exclusive\n  let z = &s[2..]; //index 2 to the end exclusive\n  //all of these have the type &str\n  let x = &mut s[..];  //type is &mut str\n  ```\n  For strings specifically, the indices must be valid and they must represent valid byte [[Char]]s ends, that is, the range mustn't bisect any multi-byte character in UTF-8. And only for types like ``String``, taking a slice returns a ``&str``. For other types, the slice returns ``&<T>[ ]`` [[Data Type]]. \n  \n  ``&str`` is specially useful in [[Function]]s and [[Variable]]s , because not only can they take slices, but also ``String``s.\n  For ex.:\n  ```rust\n  let p= String::from(“hello”);\n  let x: &str = &p; //works as &p is coerced into &p[..]. \n  ```\n  This is due to [[Deref Coercion]].\n- Slices on [[Array]]s \n  For ex.:\n  ```rust\n  let a = [1,2,3,4,5];\n  let b = &a[..]; //b has the type &[i32].\n  ```\n-\n-\n-",536870920]],["^15",[1456,"^17",1700492155498,536870920]],["^15",[1456,"^Z","Rust/pages/Slice.md",536870920]],["^15",[1457,"^Q","A *slice* is a [[Reference Type]] to a contiguous segment of elements of a [[Collection]].\nSince it is a reference type, it doesn't have any [[Ownership]] of the values.\n\nFor ex.: For the [[String]], \n```rust\nlet s = String::from(“Hello”);\nlet x= &s[..];  //entire string\nlet y= &s[..5]; //index 0 to 5, end exclusive\nlet z = &s[2..]; //index 2 to the end exclusive\n//all of these have the type &str\nlet x = &mut s[..];  //type is &mut str\n```\nFor strings specifically, the indices must be valid and they must represent valid byte [[Char]]s ends, that is, the range mustn't bisect any multi-byte character in UTF-8. And only for types like ``String``, taking a slice returns a ``&str``. For other types, the slice returns ``&<T>[ ]`` [[Data Type]]. \n\n``&str`` is specially useful in [[Function]]s and [[Variable]]s , because not only can they take slices, but also ``String``s.\nFor ex.:\n```rust\nlet p= String::from(“hello”);\nlet x: &str = &p; //works as &p is coerced into &p[..]. \n```\nThis is due to [[Deref Coercion]].",536870920]],["^15",[1457,"^O","^16",536870920]],["^15",[1457,"^F",1413,536870920]],["^15",[1457,"^X",1413,536870920]],["^15",[1457,"^V",1413,536870920]],["^15",[1457,"^U",80,536870920]],["^15",[1457,"^U",161,536870920]],["^15",[1457,"^U",163,536870920]],["^15",[1457,"^U",1090,536870920]],["^15",[1457,"^U",1091,536870920]],["^15",[1457,"^U",1160,536870920]],["^15",[1457,"^U",1167,536870920]],["^15",[1457,"^U",1181,536870920]],["^15",[1457,"^U",1239,536870920]],["^15",[1457,"^U",1413,536870920]],["^15",[1457,"^H",80,536870920]],["^15",[1457,"^H",161,536870920]],["^15",[1457,"^H",163,536870920]],["^15",[1457,"^H",1090,536870920]],["^15",[1457,"^H",1091,536870920]],["^15",[1457,"^H",1160,536870920]],["^15",[1457,"^H",1167,536870920]],["^15",[1457,"^H",1181,536870920]],["^15",[1457,"^H",1239,536870920]],["^15",[1457,"^;","~u655b737b-643a-43c8-b7e5-9b60577dc243",536870920]],["^15",[1458,"^Q","Slices on [[Array]]s \nFor ex.:\n```rust\nlet a = [1,2,3,4,5];\nlet b = &a[..]; //b has the type &[i32].\n```",536870920]],["^15",[1458,"^O","^16",536870920]],["^15",[1458,"^F",1457,536870920]],["^15",[1458,"^X",1413,536870920]],["^15",[1458,"^V",1413,536870920]],["^15",[1458,"^U",305,536870920]],["^15",[1458,"^U",1413,536870920]],["^15",[1458,"^H",305,536870920]],["^15",[1458,"^;","~u655b737b-58e2-4d07-a9a5-07f0acf18cbe",536870920]],["^15",[1459,"^Q","",536870920]],["^15",[1459,"^O","^16",536870920]],["^15",[1459,"^F",1458,536870920]],["^15",[1459,"^X",1413,536870920]],["^15",[1459,"^V",1413,536870920]],["^15",[1459,"^U",1413,536870920]],["^15",[1459,"^;","~u655b737b-5259-4cde-84c5-3c578d54e83d",536870920]],["^15",[1460,"^Q","",536870920]],["^15",[1460,"^O","^16",536870920]],["^15",[1460,"^F",1459,536870920]],["^15",[1460,"^X",1413,536870920]],["^15",[1460,"^V",1413,536870920]],["^15",[1460,"^U",1413,536870920]],["^15",[1460,"^;","~u655b737b-e8ef-49a4-97e0-10cb50674283",536870920]],["^15",[1461,"^Q","",536870920]],["^15",[1461,"^O","^16",536870920]],["^15",[1461,"^F",1460,536870920]],["^15",[1461,"^X",1413,536870920]],["^15",[1461,"^V",1413,536870920]],["^15",[1461,"^U",1413,536870920]],["^15",[1461,"^;","~u655b737b-d5d9-4b7e-8f53-536a052d6e6a",536870920]],["^15",[1462,"^3","- Rust has no concept of *Classes* from other languages. It only has *Struct*, which is a collection of types much like a [[Tuple]] but each type is assigned a name. Each Struct is a unique [[Data Type]].\n  \n  Syntax:\n  ``\n  struct <name>{\n  \t<field_name>:<field_type>,\n  \t<field_name>:<field_type>,\n  }\n  ``\n  Each name and [[Data Type]] pair in a struct definition is called a *field*.\n  \n  For ex.:\n  ```rust\n  struct User{\n  \tactive: bool,\n  \tname: String,\n  }\n  \n  let user= User {\n    active: true,\n    name: String::from(\"yo\"),\n  };\n  \n  let pp= user.active; //to access any field's value.\n  ```\n  After defining a struct, we can define values for its fields in an *instance*. We use the ``dot`` [[Operator]] to access each field's value.\n- Just like [[Variable]]s, instances have ``mutability``.\n  \n  Every instance is an immutable instance by default, and we cannot modify any field’s value or the variable itself after initialization.\n  \n  To create a mutable instance we use ``let mut user = User{};``\n  This is also to say, Rust doesn’t have mutable fields, the entire instance should either be mutable or immutable.\n- Field init Shorthand\n  Rust allows creating a struct without specifying field names if the [[Variable]] name is the same as the field it is being assigned to.\n  \n  For ex.:\n  ```rust\n  struct User {\n  active: bool\n  }\n  \n  let active=true;\n  let user= User{\n  \tactive\n  }; //ok\n  ```\n- Struct update syntax\n  \n  A struct can be created from another struct without manually specifying each field,\n  For ex.:\n  ```rust\n  struct User {\n  active: bool,\n  name: String,\n  }\n  \n  let active= true;\n  let user= User{\n  \tactive,\n      name:String::from(\"yo\")\n  };\n  let user2= User{\n      ..user\n  };\n  println!(\"{}\",user.active);\n  //If we also do println(\"{}\", user.name); then it will be an error as user.name has lost ownership\n  ```\n  We can specify some *fields* if we want but we must specify them before defining the base struct. \n  Now it [[Copy or Move]]s the values from base struct into the new instance. The copy/move rules are followed the same. This makes the *field* of the base struct which lost [[Ownership]] in the move operation as invalid, however all the other fields can still be accessed.\n- [[Tuple]] Struct\n  We can create a struct which is exactly like a [[Tuple]] but just with a custom name and is a custom [[Data Type]] itself. \n  \n  For ex.:\n  ```rust\n  struct Color(i32, i32, i32);\n  struct AnotherColor(i32, i32, i32);\n  \n  //And to create an instance\n  let color= Color(0,1,2);\n  //and access \n  color.1; //like normal tuples.\n  \n  let another_color=AnotherColor(0,1,2);\n  ```\n  Here, ``color`` and ``another_color`` are not equal, even if they had the same values and fields, they are different types.\n- Unit-Like struct\n  Just like [[Unit Type]] which is just an empty [[Tuple]] , we have unit structs too.\n  For ex.:\n  ```rust\n  struct Abc;\n  let abc= Abc;\n  ```\n  and that’s it. It doesn't have much use.\n- [[Reference Type]]fields\n  We can have reference field types, like ``&str`` [[String]] , if we define [[Lifetime]]s . This is to ensure the struct owns the data until the instance exists to avoid bugs.\n- [[Method]]\n- [[Fully Qualified Syntax for Disambiguation]]\n-",536870920]],["^15",[1462,"^17",1700492155611,536870920]],["^15",[1462,"^Z","Rust/pages/Struct.md",536870920]],["^15",[1463,"^Q","[[Fully Qualified Syntax for Disambiguation]]",536870920]],["^15",[1463,"^O","^16",536870920]],["^15",[1463,"^F",1465,536870920]],["^15",[1463,"^X",1064,536870920]],["^15",[1463,"^V",1064,536870920]],["^15",[1463,"^U",1064,536870920]],["^15",[1463,"^U",1271,536870920]],["^15",[1463,"^H",1271,536870920]],["^15",[1463,"^;","~u655b737b-ed16-461d-80e2-3117464b686e",536870920]],["^15",[1464,"^Q","Unit-Like struct\nJust like [[Unit Type]] which is just an empty [[Tuple]] , we have unit structs too.\nFor ex.:\n```rust\nstruct Abc;\nlet abc= Abc;\n```\nand that’s it. It doesn't have much use.",536870920]],["^15",[1464,"^O","^16",536870920]],["^15",[1464,"^F",1472,536870920]],["^15",[1464,"^X",1064,536870920]],["^15",[1464,"^V",1064,536870920]],["^15",[1464,"^U",1064,536870920]],["^15",[1464,"^U",1159,536870920]],["^15",[1464,"^U",1264,536870920]],["^15",[1464,"^H",1159,536870920]],["^15",[1464,"^H",1264,536870920]],["^15",[1464,"^;","~u655b737b-35fc-47f7-8317-09cd69ccbf86",536870920]],["^15",[1465,"^Q","[[Method]]",536870920]],["^15",[1465,"^O","^16",536870920]],["^15",[1465,"^F",1470,536870920]],["^15",[1465,"^X",1064,536870920]],["^15",[1465,"^V",1064,536870920]],["^15",[1465,"^U",1064,536870920]],["^15",[1465,"^U",1065,536870920]],["^15",[1465,"^H",1065,536870920]],["^15",[1465,"^;","~u655b737b-e1fc-430e-abc3-b2d1234bb73a",536870920]],["^15",[1466,"^Q","Rust has no concept of *Classes* from other languages. It only has *Struct*, which is a collection of types much like a [[Tuple]] but each type is assigned a name. Each Struct is a unique [[Data Type]].\n\nSyntax:\n``\nstruct <name>{\n\t<field_name>:<field_type>,\n\t<field_name>:<field_type>,\n}\n``\nEach name and [[Data Type]] pair in a struct definition is called a *field*.\n\nFor ex.:\n```rust\nstruct User{\n\tactive: bool,\n\tname: String,\n}\n\nlet user= User {\n  active: true,\n  name: String::from(\"yo\"),\n};\n\nlet pp= user.active; //to access any field's value.\n```\nAfter defining a struct, we can define values for its fields in an *instance*. We use the ``dot`` [[Operator]] to access each field's value.",536870920]],["^15",[1466,"^O","^16",536870920]],["^15",[1466,"^F",1064,536870920]],["^15",[1466,"^X",1064,536870920]],["^15",[1466,"^V",1064,536870920]],["^15",[1466,"^U",339,536870920]],["^15",[1466,"^U",1064,536870920]],["^15",[1466,"^U",1090,536870920]],["^15",[1466,"^U",1159,536870920]],["^15",[1466,"^H",339,536870920]],["^15",[1466,"^H",1090,536870920]],["^15",[1466,"^H",1159,536870920]],["^15",[1466,"^;","~u655b737b-1cce-4ca0-a4ce-eefa89042b0a",536870920]],["^15",[1467,"^Q","Just like [[Variable]]s, instances have ``mutability``.\n\nEvery instance is an immutable instance by default, and we cannot modify any field’s value or the variable itself after initialization.\n\nTo create a mutable instance we use ``let mut user = User{};``\nThis is also to say, Rust doesn’t have mutable fields, the entire instance should either be mutable or immutable.",536870920]],["^15",[1467,"^O","^16",536870920]],["^15",[1467,"^F",1466,536870920]],["^15",[1467,"^X",1064,536870920]],["^15",[1467,"^V",1064,536870920]],["^15",[1467,"^U",161,536870920]],["^15",[1467,"^U",1064,536870920]],["^15",[1467,"^H",161,536870920]],["^15",[1467,"^;","~u655b737b-9311-4d3f-ac85-9839a59059c2",536870920]],["^15",[1468,"^Q","",536870920]],["^15",[1468,"^O","^16",536870920]],["^15",[1468,"^F",1463,536870920]],["^15",[1468,"^X",1064,536870920]],["^15",[1468,"^V",1064,536870920]],["^15",[1468,"^U",1064,536870920]],["^15",[1468,"^;","~u655b737b-db57-43b7-a29d-19f1d7cb53c6",536870920]],["^15",[1469,"^Q","Field init Shorthand\nRust allows creating a struct without specifying field names if the [[Variable]] name is the same as the field it is being assigned to.\n\nFor ex.:\n```rust\nstruct User {\nactive: bool\n}\n\nlet active=true;\nlet user= User{\n\tactive\n}; //ok\n```",536870920]],["^15",[1469,"^O","^16",536870920]],["^15",[1469,"^F",1467,536870920]],["^15",[1469,"^X",1064,536870920]],["^15",[1469,"^V",1064,536870920]],["^15",[1469,"^U",161,536870920]],["^15",[1469,"^U",1064,536870920]],["^15",[1469,"^H",161,536870920]],["^15",[1469,"^;","~u655b737b-6373-4c70-876e-20884cf93131",536870920]],["^15",[1470,"^Q","[[Reference Type]]fields\nWe can have reference field types, like ``&str`` [[String]] , if we define [[Lifetime]]s . This is to ensure the struct owns the data until the instance exists to avoid bugs.",536870920]],["^15",[1470,"^O","^16",536870920]],["^15",[1470,"^F",1464,536870920]],["^15",[1470,"^X",1064,536870920]],["^15",[1470,"^V",1064,536870920]],["^15",[1470,"^U",80,536870920]],["^15",[1470,"^U",1064,536870920]],["^15",[1470,"^U",1091,536870920]],["^15",[1470,"^U",1101,536870920]],["^15",[1470,"^H",80,536870920]],["^15",[1470,"^H",1091,536870920]],["^15",[1470,"^H",1101,536870920]],["^15",[1470,"^;","~u655b737b-e926-4f47-a29e-51bbdaeffc34",536870920]],["^15",[1471,"^Q","Struct update syntax\n\nA struct can be created from another struct without manually specifying each field,\nFor ex.:\n```rust\nstruct User {\nactive: bool,\nname: String,\n}\n\nlet active= true;\nlet user= User{\n\tactive,\n    name:String::from(\"yo\")\n};\nlet user2= User{\n    ..user\n};\nprintln!(\"{}\",user.active);\n//If we also do println(\"{}\", user.name); then it will be an error as user.name has lost ownership\n```\nWe can specify some *fields* if we want but we must specify them before defining the base struct. \nNow it [[Copy or Move]]s the values from base struct into the new instance. The copy/move rules are followed the same. This makes the *field* of the base struct which lost [[Ownership]] in the move operation as invalid, however all the other fields can still be accessed.",536870920]],["^15",[1471,"^O","^16",536870920]],["^15",[1471,"^F",1469,536870920]],["^15",[1471,"^X",1064,536870920]],["^15",[1471,"^V",1064,536870920]],["^15",[1471,"^U",1064,536870920]],["^15",[1471,"^U",1160,536870920]],["^15",[1471,"^U",1171,536870920]],["^15",[1471,"^H",1160,536870920]],["^15",[1471,"^H",1171,536870920]],["^15",[1471,"^;","~u655b737b-5877-4853-85de-90c1a6558765",536870920]],["^15",[1472,"^Q","[[Tuple]] Struct\nWe can create a struct which is exactly like a [[Tuple]] but just with a custom name and is a custom [[Data Type]] itself. \n\nFor ex.:\n```rust\nstruct Color(i32, i32, i32);\nstruct AnotherColor(i32, i32, i32);\n\n//And to create an instance\nlet color= Color(0,1,2);\n//and access \ncolor.1; //like normal tuples.\n\nlet another_color=AnotherColor(0,1,2);\n```\nHere, ``color`` and ``another_color`` are not equal, even if they had the same values and fields, they are different types.",536870920]],["^15",[1472,"^O","^16",536870920]],["^15",[1472,"^F",1471,536870920]],["^15",[1472,"^X",1064,536870920]],["^15",[1472,"^V",1064,536870920]],["^15",[1472,"^U",1064,536870920]],["^15",[1472,"^U",1090,536870920]],["^15",[1472,"^U",1159,536870920]],["^15",[1472,"^H",1090,536870920]],["^15",[1472,"^H",1159,536870920]],["^15",[1472,"^;","~u655b737b-bff8-4864-9f5b-43bc1b35adb9",536870920]],["^15",[1473,"^3","- [[Trait]]s can use other traits too.\n  A [[Trait]] that gets implemented by another [[Trait]] is called a supertrait. And if we wish to implement this child trait, we are required to implement the supertrait itself as well. The benefit is that since this is a requirement, the child trait can use [[Method]]s of the supertrait and it is guaranteed they will be defined by the implementor [[Data Type]].\n  \n  Syntax:\n  ``\n  trait <some name> {\n   //some methods\n  }\n  \n  trait <some other name>: <some name> {\n   //some methods\n  }\n  \n  //then implement both for a data type\n  ``\n  \n  For ex.:\n  ```rust\n  trait X {\n      fn yo();\n      fn no(&self);\n  }\n  \n  trait Y: X {\n      fn hello() {\n          Self::yo();\n          //no(); error as no() is defined for the instance and we have no access to instance here\n      }\n  \n      fn ho(&self) {\n          Self::yo();\n          self.no();\n      }\n  }\n  \n  struct A {}\n  \n  impl X for A {\n      //required\n      fn yo() {}\n      fn no(&self) {}\n  }\n  \n  impl Y for A {}\n  \n  fn main() {\n      let a = A {};\n      A::hello(); //ok\n      a.ho(); //also ok\n  }\n  \n  ```\n- If the child [[Trait]] implements [[Method]]s with the same name as the supertrait, they aren't defining implementation for the supertrait's method, rather they are shadowing them. \n  Then the child trait must use [[Fully Qualified Syntax For Disambiguation]] if its methods call this method.\n  \n  For ex.:\n  ```rust\n  trait X {\n      fn yo();\n  }\n  \n  trait Y: X {\n      fn ho() {\n          //Self::yo(); //error\n          <Self as X>::yo(); //ok\n      }\n      fn yo() {} //same name method\n  }\n  \n  struct A {}\n  \n  impl X for A {\n      fn yo() {}\n  }\n  \n  impl Y for A {}\n  \n  fn main() {\n      let a = A {};\n      A::ho();\n      //A::yo(); //error\n      <A as Y>::yo(); //ok\n  }\n  \n  ```",536870920]],["^15",[1473,"^17",1700492155630,536870920]],["^15",[1473,"^Z","Rust/pages/Supertrait.md",536870920]],["^15",[1474,"^K",1700492155820,536870920]],["^15",[1474,"^[",1473,536870920]],["^15",[1474,"^@",false,536870920]],["^15",[1474,"^Y","supertrait",536870920]],["^15",[1474,"^11","Supertrait",536870920]],["^15",[1474,"^B",1700492155820,536870920]],["^15",[1474,"^;","~u655b737b-aedd-45cc-b068-fe68993386d4",536870920]],["^15",[1475,"^Q","[[Trait]]s can use other traits too.\nA [[Trait]] that gets implemented by another [[Trait]] is called a supertrait. And if we wish to implement this child trait, we are required to implement the supertrait itself as well. The benefit is that since this is a requirement, the child trait can use [[Method]]s of the supertrait and it is guaranteed they will be defined by the implementor [[Data Type]].\n\nSyntax:\n``\ntrait <some name> {\n //some methods\n}\n\ntrait <some other name>: <some name> {\n //some methods\n}\n\n//then implement both for a data type\n``\n\nFor ex.:\n```rust\ntrait X {\n    fn yo();\n    fn no(&self);\n}\n\ntrait Y: X {\n    fn hello() {\n        Self::yo();\n        //no(); error as no() is defined for the instance and we have no access to instance here\n    }\n\n    fn ho(&self) {\n        Self::yo();\n        self.no();\n    }\n}\n\nstruct A {}\n\nimpl X for A {\n    //required\n    fn yo() {}\n    fn no(&self) {}\n}\n\nimpl Y for A {}\n\nfn main() {\n    let a = A {};\n    A::hello(); //ok\n    a.ho(); //also ok\n}\n\n```",536870920]],["^15",[1475,"^O","^16",536870920]],["^15",[1475,"^F",1474,536870920]],["^15",[1475,"^X",1474,536870920]],["^15",[1475,"^V",1474,536870920]],["^15",[1475,"^U",1065,536870920]],["^15",[1475,"^U",1073,536870920]],["^15",[1475,"^U",1090,536870920]],["^15",[1475,"^U",1474,536870920]],["^15",[1475,"^H",1065,536870920]],["^15",[1475,"^H",1073,536870920]],["^15",[1475,"^H",1090,536870920]],["^15",[1475,"^;","~u655b737b-55f9-469e-b694-035ddf56d35e",536870920]],["^15",[1476,"^Q","If the child [[Trait]] implements [[Method]]s with the same name as the supertrait, they aren't defining implementation for the supertrait's method, rather they are shadowing them. \nThen the child trait must use [[Fully Qualified Syntax For Disambiguation]] if its methods call this method.\n\nFor ex.:\n```rust\ntrait X {\n    fn yo();\n}\n\ntrait Y: X {\n    fn ho() {\n        //Self::yo(); //error\n        <Self as X>::yo(); //ok\n    }\n    fn yo() {} //same name method\n}\n\nstruct A {}\n\nimpl X for A {\n    fn yo() {}\n}\n\nimpl Y for A {}\n\nfn main() {\n    let a = A {};\n    A::ho();\n    //A::yo(); //error\n    <A as Y>::yo(); //ok\n}\n\n```",536870920]],["^15",[1476,"^O","^16",536870920]],["^15",[1476,"^F",1475,536870920]],["^15",[1476,"^X",1474,536870920]],["^15",[1476,"^V",1474,536870920]],["^15",[1476,"^U",1065,536870920]],["^15",[1476,"^U",1073,536870920]],["^15",[1476,"^U",1271,536870920]],["^15",[1476,"^U",1474,536870920]],["^15",[1476,"^H",1065,536870920]],["^15",[1476,"^H",1073,536870920]],["^15",[1476,"^H",1271,536870920]],["^15",[1476,"^;","~u655b737b-2ed7-4c7a-9d85-b47a2f426815",536870920]],["^15",[1477,"^3","- Rust already has a testing framework built-in, this allows us to do *TDD*.\n- Tests in rust are [[Function]] annotated with ``#[test]`` [[Macro Attribute]] inside a test [[Module]] which can be annotated with ``#[cfg(test)]``.\n  A test module is generated automatically for any new [[Cargo]] library created with ``cargo new <name> --lib``.\n  \n  Then to run all test functions in test [[Module]s we run ``cargo test``.\n  \n  For ex.:\n  ```rust\n  #[cfg(test)]\n  mod tests {\n      #[test]\n      fn it_works() {\n          let result = 2 + 2;\n          assert_eq!(result, 4);\n      }\n  }\n  ```\n  prints\n  ```sh\n  running 1 test\n  test tests::it_works ... ok\n  \n  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n  \n     Doc-tests <package name>\n  \n  running 0 tests\n  \n  test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n  \n  ```\n  \n  ``0 measured`` is for benchmark Tests, which is only available on [[Nightly Rust]] right now. \n  ``0 ignored``  as we can ignore tests\n  ``0 filtered out`` as we can specify only certain tests to run by passing args to``cargo test``\n  \n  ``Doc-tests`` are Documentation Tests\n- Tests are written in 3 steps\n  * Set up any needed data or state using test functions and modules.\n  * Run the code we want to test with test ``cargo test``.\n  * Assert the results are what we expect using [[Assert]].\n- Failure\n  Tests can fail if [[Assert]]s fail or if a test [[Function]] [[Thread]] dies. \n  That is, each test is ran in a different thread and if a thread becomes unresponsive or dies (like when it calls [[Panic]]) it is marked as failed.\n- ``#[should_panic(expected= \"<optional string message>\")]``\n  If this [[Macro Attribute]] annotates any test [[Function]] then the test function should [[Panic]], if it panics then the test passes. \n  By specifying the ``expected`` arg with a [[String]], we constraint the panic's message to have the provided string as a substring.\n  For ex.:\n  ```rust\n  #[test]\n  #[should_panic(expected= \"hello\")]\n  fn yo() {\n   panic!(\"hello world\")\n  } //this test passes, as it panics, and the panic message has the string \"hello\" as a substring\n  ```\n- We can return [[Result Type]] from test functions. \n  If the test function returns ``T`` of ``Result<T,E>`` then it is assumed as success and if it returns ``E`` failure is assumed.\n  \n  For ex.:\n  ```rust\n  #[test]\n  fn yo() -> Result<(),String> {\n   if (2==3) {\n    Ok(());\n   }\n   else  {\n   Err(String::from(\"naa\"));\n   //we can use assert like so with Result return types, assert!(something.is_err()); \n  //where is_err is defined for Result Types, we can also use the ? operator like something? which immediately \n  // returns if Err() and returns the Err\n   }\n  }\n  ```\n  As we see, we can use [[Assert]] with [[Result Type]]s of normal [[Function]]s as ``.is_err()`` returns true if Result fails, as this [[Method]] is defined on Result. \n  \n  We can't use ``#[should_panic]`` with test functions that return Result Types.\n- Ignoring tests\n  We can ignore certain test [[Function]]s by using ``#[ignore]`` [[Macro Attribute]] .\n  For ex.:\n  ```rust\n  #[test]\n  #[ignore]\n  fn yo(){ }\n  //this test method will be ignored.\n  ```\n- [[Cargo]] test args\n  ``cargo test`` compiles the code in test mode and accepts some args, then it generates a test binary/executable which also accepts some args. Both of these take args and just running ``cargo test`` runs the compiler, then the test binary. So if we wish to pass CLI args to both of them we have to use a separator token, which is ``--``.\n  For ex.:\n  ```sh\n  cargo test --help \n  #is passed to the test runner, displays test options.\n  cargo test -- --help \n  #is passed to the test binary, displays test binary options.\n  ```\n  * ``cargo test -- --test-threads=1``: Sets the number of [[Thread]]s tests use. By default test functions run parallelly, meaning if they mustn't depend on each other's result. By setting the ``threads`` to 1 we serially run them.\n  * ``cargo test -- --show-output``: Prints any output printed by any function.\n  * ``cargo test <testname>``: Runs only tests whose function names have the ``<testname>`` as substring.\n  * ``cargo test -- --ignored`` :Runs only the ignore attributed tests.\n  * ``cargo test -- --include-ignored``: Runs all tests including ignored ones.\n  * ``cargo test --test <someTest>``: Runs the given file's tests, used with Integration Tests, so if ``<someTest>`` is ``x`` then it looks for ``<packageName>/tests/x.rs`` and runs all test functions inside ``x.rs``.\n- Test Categories and locations\n  * ``Unit Tests``: These test individual [[Function]]s/ [[Method]]s , covering all of them and ensuring they by theirselves work without issue. \n  * ``Integration Tests``: These test a feature, like if a [[Struct]] [[Method]] is correctly generating a new instance and doing all its startup tasks successfully. \n  \n  * The UT tests are put in their own [[Modules]] in the ``src/`` folder, by convention they must be put in the same ``.rs`` file for which they cover the test cases at the top in a [[Module]]. The module name and its test functions name could be anything.\n  We annotate the [[Module]] with ``#[cfg(test)]`` [[Macro Attribute]]. This attribute tells the Rust Compiler, it should only compile the given module when the ``Configuration`` of [[Cargo]] is provided with ``test``, i.e., ``cargo test`` is invoked.\n  \n  * UTs can freely access all private/public [[Access Modifier]] items in their file.\n  For ex.:\n  ```rust\n  pub fn add_two(a: i32) -> i32 {\n      internal_adder(a, 2)\n  }\n  \n  fn internal_adder(a: i32, b: i32) -> i32 {\n      a + b\n  }\n  \n  #[cfg(test)]\n  mod tests {\n      use super::*;\n  \n      #[test]\n      fn internal() {\n          assert_eq!(4, internal_adder(2, 2));\n      }\n  } //works\n  ```\n  \n  * Integration tests are ``.rs`` files defined inside ``<package name>/tests/`` directory. \n  Like so\n  ```\n  somepackage\n  ├── Cargo.lock\n  ├── Cargo.toml\n  ├── src\n  │   └── lib.rs\n  └── tests\n      └── integration_test.rs\n  ```\n  All ``.rs`` files directly inside ``tests/`` folder are executed by the test runner.\n  They test out functionalities and are created in their own crates (outside crate root) by the test runner. So they can only access public items of our crates.\n  For ex.:\n  In ``x/tests/it.rs`` where ``x`` is our package name,\n  ```rust\n  use x;\n  \n  #[test]\n  fn yo() { } //normal test method\n  ```\n  then running ``cargo test`` runs this IT.\n  \n  * Submodules in ITs\n  By default, all files directly inside the ``tests`` folder are ran and their test [[Function]]s executed. This means if we use some modules inside our IT files then they are executed by the test runner too, to solve this we put them in a ``.../tests/<modname>/mod.rs`` file and they aren't executed separately, so the IT file can use them directly.\n  For ex.:\n  If we have a [[Module]] ``yo`` then we will put it in ``tests/yo/mod.rs``\n  ```rust\n  mod yo {}\n  ```\n  and use it in ``tests/someFile.rs`` with\n  ```rust\n  mod yo;\n  ```\n  \n  * IT can only work with library crates and not binary crates. This is because it is its own crate and a binary crate compiles to an executable directly with its content not exposed. This is why it is recommended in [[Module System]] to use a library crate with a binary crate when we only need a binary crate.\n-",536870920]],["^15",[1477,"^17",1700492155677,536870920]],["^15",[1477,"^Z","Rust/pages/Testing Framework.md",536870920]],["^15",[1478,"^K",1700492155675,536870920]],["^15",[1478,"^@",false,536870920]],["^15",[1478,"^Y","nightly rust",536870920]],["^15",[1478,"^11","Nightly Rust",536870920]],["^15",[1478,"^B",1700492155675,536870920]],["^15",[1478,"^;","~u655b737b-3ecb-46fa-a4ff-c2c1624886f7",536870920]],["^15",[1479,"^K",1700492155677,536870920]],["^15",[1479,"^@",false,536870920]],["^15",[1479,"^Y","modules",536870920]],["^15",[1479,"^11","Modules",536870920]],["^15",[1479,"^B",1700492155677,536870920]],["^15",[1479,"^;","~u655b737b-4fb3-4f21-a81c-c62e962fc62c",536870920]],["^15",[1480,"^Q","Tests in rust are [[Function]] annotated with ``#[test]`` [[Macro Attribute]] inside a test [[Module]] which can be annotated with ``#[cfg(test)]``.\nA test module is generated automatically for any new [[Cargo]] library created with ``cargo new <name> --lib``.\n\nThen to run all test functions in test [[Module]s we run ``cargo test``.\n\nFor ex.:\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        let result = 2 + 2;\n        assert_eq!(result, 4);\n    }\n}\n```\nprints\n```sh\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests <package name>\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n```\n\n``0 measured`` is for benchmark Tests, which is only available on [[Nightly Rust]] right now. \n``0 ignored``  as we can ignore tests\n``0 filtered out`` as we can specify only certain tests to run by passing args to``cargo test``\n\n``Doc-tests`` are Documentation Tests",536870920]],["^15",[1480,"^O","^16",536870920]],["^15",[1480,"^F",1486,536870920]],["^15",[1480,"^X",1430,536870920]],["^15",[1480,"^V",1430,536870920]],["^15",[1480,"^U",163,536870920]],["^15",[1480,"^U",287,536870920]],["^15",[1480,"^U",1132,536870920]],["^15",[1480,"^U",1312,536870920]],["^15",[1480,"^U",1430,536870920]],["^15",[1480,"^U",1478,536870920]],["^15",[1480,"^H",163,536870920]],["^15",[1480,"^H",287,536870920]],["^15",[1480,"^H",1132,536870920]],["^15",[1480,"^H",1312,536870920]],["^15",[1480,"^H",1478,536870920]],["^15",[1480,"^;","~u655b737b-1766-49d4-9cb6-e4f83e1a4702",536870920]],["^15",[1481,"^Q","",536870920]],["^15",[1481,"^O","^16",536870920]],["^15",[1481,"^F",1489,536870920]],["^15",[1481,"^X",1430,536870920]],["^15",[1481,"^V",1430,536870920]],["^15",[1481,"^U",1430,536870920]],["^15",[1481,"^;","~u655b737b-f738-4faf-8c5a-0a9800b71512",536870920]],["^15",[1482,"^Q","Ignoring tests\nWe can ignore certain test [[Function]]s by using ``#[ignore]`` [[Macro Attribute]] .\nFor ex.:\n```rust\n#[test]\n#[ignore]\nfn yo(){ }\n//this test method will be ignored.\n```",536870920]],["^15",[1482,"^O","^16",536870920]],["^15",[1482,"^F",1487,536870920]],["^15",[1482,"^X",1430,536870920]],["^15",[1482,"^V",1430,536870920]],["^15",[1482,"^U",163,536870920]],["^15",[1482,"^U",1312,536870920]],["^15",[1482,"^U",1430,536870920]],["^15",[1482,"^H",163,536870920]],["^15",[1482,"^H",1312,536870920]],["^15",[1482,"^;","~u655b737b-b639-4091-a35e-9454aa660cea",536870920]],["^15",[1483,"^Q","~``#[should_panic(expected= \"<optional string message>\")]``\nIf this [[Macro Attribute]] annotates any test [[Function]] then the test function should [[Panic]], if it panics then the test passes. \nBy specifying the ``expected`` arg with a [[String]], we constraint the panic's message to have the provided string as a substring.\nFor ex.:\n```rust\n#[test]\n#[should_panic(expected= \"hello\")]\nfn yo() {\n panic!(\"hello world\")\n} //this test passes, as it panics, and the panic message has the string \"hello\" as a substring\n```",536870920]],["^15",[1483,"^O","^16",536870920]],["^15",[1483,"^F",1485,536870920]],["^15",[1483,"^X",1430,536870920]],["^15",[1483,"^V",1430,536870920]],["^15",[1483,"^U",80,536870920]],["^15",[1483,"^U",163,536870920]],["^15",[1483,"^U",1080,536870920]],["^15",[1483,"^U",1312,536870920]],["^15",[1483,"^U",1430,536870920]],["^15",[1483,"^H",80,536870920]],["^15",[1483,"^H",163,536870920]],["^15",[1483,"^H",1080,536870920]],["^15",[1483,"^H",1312,536870920]],["^15",[1483,"^;","~u655b737b-2d26-4fa1-9185-2a0573ac1519",536870920]],["^15",[1484,"^Q","[[Cargo]] test args\n``cargo test`` compiles the code in test mode and accepts some args, then it generates a test binary/executable which also accepts some args. Both of these take args and just running ``cargo test`` runs the compiler, then the test binary. So if we wish to pass CLI args to both of them we have to use a separator token, which is ``--``.\nFor ex.:\n```sh\ncargo test --help \n#is passed to the test runner, displays test options.\ncargo test -- --help \n#is passed to the test binary, displays test binary options.\n```\n* ``cargo test -- --test-threads=1``: Sets the number of [[Thread]]s tests use. By default test functions run parallelly, meaning if they mustn't depend on each other's result. By setting the ``threads`` to 1 we serially run them.\n* ``cargo test -- --show-output``: Prints any output printed by any function.\n* ``cargo test <testname>``: Runs only tests whose function names have the ``<testname>`` as substring.\n* ``cargo test -- --ignored`` :Runs only the ignore attributed tests.\n* ``cargo test -- --include-ignored``: Runs all tests including ignored ones.\n* ``cargo test --test <someTest>``: Runs the given file's tests, used with Integration Tests, so if ``<someTest>`` is ``x`` then it looks for ``<packageName>/tests/x.rs`` and runs all test functions inside ``x.rs``.",536870920]],["^15",[1484,"^O","^16",536870920]],["^15",[1484,"^F",1482,536870920]],["^15",[1484,"^X",1430,536870920]],["^15",[1484,"^V",1430,536870920]],["^15",[1484,"^U",1074,536870920]],["^15",[1484,"^U",1132,536870920]],["^15",[1484,"^U",1430,536870920]],["^15",[1484,"^H",1074,536870920]],["^15",[1484,"^H",1132,536870920]],["^15",[1484,"^;","~u655b737b-3b17-4631-9225-2d8beb4eab76",536870920]],["^15",[1485,"^Q","Failure\nTests can fail if [[Assert]]s fail or if a test [[Function]] [[Thread]] dies. \nThat is, each test is ran in a different thread and if a thread becomes unresponsive or dies (like when it calls [[Panic]]) it is marked as failed.",536870920]],["^15",[1485,"^O","^16",536870920]],["^15",[1485,"^F",1488,536870920]],["^15",[1485,"^X",1430,536870920]],["^15",[1485,"^V",1430,536870920]],["^15",[1485,"^U",163,536870920]],["^15",[1485,"^U",1074,536870920]],["^15",[1485,"^U",1078,536870920]],["^15",[1485,"^U",1080,536870920]],["^15",[1485,"^U",1430,536870920]],["^15",[1485,"^H",163,536870920]],["^15",[1485,"^H",1074,536870920]],["^15",[1485,"^H",1078,536870920]],["^15",[1485,"^H",1080,536870920]],["^15",[1485,"^;","~u655b737b-02bc-4e0a-b24d-ad53cf9c09d3",536870920]],["^15",[1486,"^Q","Rust already has a testing framework built-in, this allows us to do *TDD*.",536870920]],["^15",[1486,"^O","^16",536870920]],["^15",[1486,"^F",1430,536870920]],["^15",[1486,"^X",1430,536870920]],["^15",[1486,"^V",1430,536870920]],["^15",[1486,"^U",1430,536870920]],["^15",[1486,"^;","~u655b737b-a807-46ca-a375-99915e4924a0",536870920]],["^15",[1487,"^Q","We can return [[Result Type]] from test functions. \nIf the test function returns ``T`` of ``Result<T,E>`` then it is assumed as success and if it returns ``E`` failure is assumed.\n\nFor ex.:\n```rust\n#[test]\nfn yo() -> Result<(),String> {\n if (2==3) {\n  Ok(());\n }\n else  {\n Err(String::from(\"naa\"));\n //we can use assert like so with Result return types, assert!(something.is_err()); \n//where is_err is defined for Result Types, we can also use the ? operator like something? which immediately \n// returns if Err() and returns the Err\n }\n}\n```\nAs we see, we can use [[Assert]] with [[Result Type]]s of normal [[Function]]s as ``.is_err()`` returns true if Result fails, as this [[Method]] is defined on Result. \n\nWe can't use ``#[should_panic]`` with test functions that return Result Types.",536870920]],["^15",[1487,"^O","^16",536870920]],["^15",[1487,"^F",1483,536870920]],["^15",[1487,"^X",1430,536870920]],["^15",[1487,"^V",1430,536870920]],["^15",[1487,"^U",163,536870920]],["^15",[1487,"^U",1065,536870920]],["^15",[1487,"^U",1078,536870920]],["^15",[1487,"^U",1098,536870920]],["^15",[1487,"^U",1430,536870920]],["^15",[1487,"^H",163,536870920]],["^15",[1487,"^H",1065,536870920]],["^15",[1487,"^H",1078,536870920]],["^15",[1487,"^H",1098,536870920]],["^15",[1487,"^;","~u655b737b-9252-494c-8554-2d1e1d5db532",536870920]],["^15",[1488,"^Q","Tests are written in 3 steps\n* Set up any needed data or state using test functions and modules.\n* Run the code we want to test with test ``cargo test``.\n* Assert the results are what we expect using [[Assert]].",536870920]],["^15",[1488,"^O","^16",536870920]],["^15",[1488,"^F",1480,536870920]],["^15",[1488,"^X",1430,536870920]],["^15",[1488,"^V",1430,536870920]],["^15",[1488,"^U",1078,536870920]],["^15",[1488,"^U",1430,536870920]],["^15",[1488,"^H",1078,536870920]],["^15",[1488,"^;","~u655b737b-7f36-4e1e-a339-f322fe512633",536870920]],["^15",[1489,"^Q","Test Categories and locations\n* ``Unit Tests``: These test individual [[Function]]s/ [[Method]]s , covering all of them and ensuring they by theirselves work without issue. \n* ``Integration Tests``: These test a feature, like if a [[Struct]] [[Method]] is correctly generating a new instance and doing all its startup tasks successfully. \n\n* The UT tests are put in their own [[Modules]] in the ``src/`` folder, by convention they must be put in the same ``.rs`` file for which they cover the test cases at the top in a [[Module]]. The module name and its test functions name could be anything.\nWe annotate the [[Module]] with ``#[cfg(test)]`` [[Macro Attribute]]. This attribute tells the Rust Compiler, it should only compile the given module when the ``Configuration`` of [[Cargo]] is provided with ``test``, i.e., ``cargo test`` is invoked.\n\n* UTs can freely access all private/public [[Access Modifier]] items in their file.\nFor ex.:\n```rust\npub fn add_two(a: i32) -> i32 {\n    internal_adder(a, 2)\n}\n\nfn internal_adder(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn internal() {\n        assert_eq!(4, internal_adder(2, 2));\n    }\n} //works\n```\n\n* Integration tests are ``.rs`` files defined inside ``<package name>/tests/`` directory. \nLike so\n```\nsomepackage\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   └── lib.rs\n└── tests\n    └── integration_test.rs\n```\nAll ``.rs`` files directly inside ``tests/`` folder are executed by the test runner.\nThey test out functionalities and are created in their own crates (outside crate root) by the test runner. So they can only access public items of our crates.\nFor ex.:\nIn ``x/tests/it.rs`` where ``x`` is our package name,\n```rust\nuse x;\n\n#[test]\nfn yo() { } //normal test method\n```\nthen running ``cargo test`` runs this IT.\n\n* Submodules in ITs\nBy default, all files directly inside the ``tests`` folder are ran and their test [[Function]]s executed. This means if we use some modules inside our IT files then they are executed by the test runner too, to solve this we put them in a ``.../tests/<modname>/mod.rs`` file and they aren't executed separately, so the IT file can use them directly.\nFor ex.:\nIf we have a [[Module]] ``yo`` then we will put it in ``tests/yo/mod.rs``\n```rust\nmod yo {}\n```\nand use it in ``tests/someFile.rs`` with\n```rust\nmod yo;\n```\n\n* IT can only work with library crates and not binary crates. This is because it is its own crate and a binary crate compiles to an executable directly with its content not exposed. This is why it is recommended in [[Module System]] to use a library crate with a binary crate when we only need a binary crate.",536870920]],["^15",[1489,"^O","^16",536870920]],["^15",[1489,"^F",1484,536870920]],["^15",[1489,"^X",1430,536870920]],["^15",[1489,"^V",1430,536870920]],["^15",[1489,"^U",163,536870920]],["^15",[1489,"^U",287,536870920]],["^15",[1489,"^U",1062,536870920]],["^15",[1489,"^U",1064,536870920]],["^15",[1489,"^U",1065,536870920]],["^15",[1489,"^U",1132,536870920]],["^15",[1489,"^U",1312,536870920]],["^15",[1489,"^U",1335,536870920]],["^15",[1489,"^U",1430,536870920]],["^15",[1489,"^U",1479,536870920]],["^15",[1489,"^H",163,536870920]],["^15",[1489,"^H",287,536870920]],["^15",[1489,"^H",1062,536870920]],["^15",[1489,"^H",1064,536870920]],["^15",[1489,"^H",1065,536870920]],["^15",[1489,"^H",1132,536870920]],["^15",[1489,"^H",1312,536870920]],["^15",[1489,"^H",1335,536870920]],["^15",[1489,"^H",1479,536870920]],["^15",[1489,"^;","~u655b737b-7de9-48c3-bde9-614716e228bc",536870920]],["^15",[1490,"^3","- Rust follows a 1:1 threading model, meaning 1 Rust thread will take exactly 1 thread in the OS.\n  \n  Defined in ``std::Thread``.\n  For ex.:\n  ```rust\n  use std::{thread, time::Duration};\n  fn main(){\n      \n      let handle= thread::spawn(|| {\n          println!(\"yo\");\n          for i in 1..20 {\n              println!(\"{}\",i);\n          }\n      });\n   \n      println!(\"enddd\");\n      thread::sleep(Duration::from_millis(10));\n   }\n  \n  ```\n  * ``thread::spawn(<closure>)`` to spawn a thread and execute the given [[Closure]]. \n  \n  Returns a ``JoinHandle<T>`` [[Data Type]]. Here ``T`` is the return type of the closure, so if nothing is returned by the closure it is the [[Unit Type]].\n  \n  * ``JoinHandle`` has a ``join()`` [[Method]] which stops the current thread's execution until the thread handled by the handle finishes execution.\n  The thread that spawns another thread does not wait for the other thread to finish, and if it's the *Main Thread* that finishes without waiting for all its spawned threads then it might die before them and the OS kills the process when the *MT* dies so they may never finish as all of them are cleared up.\n  \n  ``join()`` returns an [[Result Type]] which represents the value of closure if the thread finishes successfully and an error otherwise. \n  \n  For ex.:\n  ```rust\n  use std::{thread, time::Duration};\n  fn main(){\n      \n      let handle= thread::spawn(|| {\n          println!(\"yo\");\n          for i in 1..20 {\n              println!(\"{}\",i);\n          }\n      });\n     handle.join().unwrap(); //waits and returns the value of the closure.\n      \n      \n  \n   }\n  ``` \n  \n  * [[Closure]]'s passed to other threads must be ``move``d if they capture some variable from thread, this is because it may be that the [[Lifetime]] of the [[Variable]] is over before the spawned thread can use the captured value. \n  * ``thread::sleep(<Duration instance>)`` to sleep a thread with the given ``Duration``.\n-\n-",536870920]],["^15",[1490,"^17",1700492155696,536870920]],["^15",[1490,"^Z","Rust/pages/Thread.md",536870920]],["^15",[1491,"^Q","Rust follows a 1:1 threading model, meaning 1 Rust thread will take exactly 1 thread in the OS.\n\nDefined in ``std::Thread``.\nFor ex.:\n```rust\nuse std::{thread, time::Duration};\nfn main(){\n    \n    let handle= thread::spawn(|| {\n        println!(\"yo\");\n        for i in 1..20 {\n            println!(\"{}\",i);\n        }\n    });\n \n    println!(\"enddd\");\n    thread::sleep(Duration::from_millis(10));\n }\n\n```\n* ``thread::spawn(<closure>)`` to spawn a thread and execute the given [[Closure]]. \n\nReturns a ``JoinHandle<T>`` [[Data Type]]. Here ``T`` is the return type of the closure, so if nothing is returned by the closure it is the [[Unit Type]].\n\n* ``JoinHandle`` has a ``join()`` [[Method]] which stops the current thread's execution until the thread handled by the handle finishes execution.\nThe thread that spawns another thread does not wait for the other thread to finish, and if it's the *Main Thread* that finishes without waiting for all its spawned threads then it might die before them and the OS kills the process when the *MT* dies so they may never finish as all of them are cleared up.\n\n``join()`` returns an [[Result Type]] which represents the value of closure if the thread finishes successfully and an error otherwise. \n\nFor ex.:\n```rust\nuse std::{thread, time::Duration};\nfn main(){\n    \n    let handle= thread::spawn(|| {\n        println!(\"yo\");\n        for i in 1..20 {\n            println!(\"{}\",i);\n        }\n    });\n   handle.join().unwrap(); //waits and returns the value of the closure.\n    \n    \n\n }\n``` \n\n* [[Closure]]'s passed to other threads must be ``move``d if they capture some variable from thread, this is because it may be that the [[Lifetime]] of the [[Variable]] is over before the spawned thread can use the captured value. \n* ``thread::sleep(<Duration instance>)`` to sleep a thread with the given ``Duration``.",536870920]],["^15",[1491,"^O","^16",536870920]],["^15",[1491,"^F",1074,536870920]],["^15",[1491,"^X",1074,536870920]],["^15",[1491,"^V",1074,536870920]],["^15",[1491,"^U",161,536870920]],["^15",[1491,"^U",1065,536870920]],["^15",[1491,"^U",1074,536870920]],["^15",[1491,"^U",1090,536870920]],["^15",[1491,"^U",1093,536870920]],["^15",[1491,"^U",1098,536870920]],["^15",[1491,"^U",1101,536870920]],["^15",[1491,"^U",1264,536870920]],["^15",[1491,"^H",161,536870920]],["^15",[1491,"^H",1065,536870920]],["^15",[1491,"^H",1090,536870920]],["^15",[1491,"^H",1093,536870920]],["^15",[1491,"^H",1098,536870920]],["^15",[1491,"^H",1101,536870920]],["^15",[1491,"^H",1264,536870920]],["^15",[1491,"^;","~u655b737b-ab72-466e-b8dc-7d908a40a72d",536870920]],["^15",[1492,"^Q","",536870920]],["^15",[1492,"^O","^16",536870920]],["^15",[1492,"^F",1491,536870920]],["^15",[1492,"^X",1074,536870920]],["^15",[1492,"^V",1074,536870920]],["^15",[1492,"^U",1074,536870920]],["^15",[1492,"^;","~u655b737b-74c6-49d8-bbe0-ceccc0d0418d",536870920]],["^15",[1493,"^Q","",536870920]],["^15",[1493,"^O","^16",536870920]],["^15",[1493,"^F",1492,536870920]],["^15",[1493,"^X",1074,536870920]],["^15",[1493,"^V",1074,536870920]],["^15",[1493,"^U",1074,536870920]],["^15",[1493,"^;","~u655b737b-701c-4798-b57d-a2f91eea02f9",536870920]],["^15",[1494,"^3","- Trait Objects are much like [[Generic Type]]s where we define a [[Trait]] and instead of providing a concrete type at compile-time we provide it at runtime. So rust knows at compile-time only 2 things, that it should wait for the types till runtime and at compile time just ensure that any provided types do implement the given trait. \n  However, as we know, Rust requires a fixed size at compile time for every definition, this is why we have to make use of [[Pointer]]s. And the pointers theirselves need to know the size of the type, they can use ``dyn`` keyword which allows [[Dynamically Sized Type]]s. \n  Finally we get a [[Data Type]] definition that looks like ``Box<dyn someTrait>``.\n  \n  For ex.:\n  ```rust\n  fn main() {\n   /*\n  let bag = Bag {\n          stuff: vec![Box::new(1i32), Box::new(2u32)], \n      }; // //would be an error, because Box<T> for Bag resolves to i32, but we provide a u32 for the next element. \n  */\n      let bigger_bag = BigBag {\n          stuff: vec![Box::new(1i32), Box::new(2u32)],\n      }; //works\n  }\n   \n  struct Bag<T: Tiffin> {\n      stuff: Vec<Box<T>>,\n  }\n   \n  struct BigBag {\n      stuff: Vec<Box<dyn Tiffin>>,\n  }\n   \n  trait Tiffin {}\n   \n  impl Tiffin for i32 {}\n  impl Tiffin for u32 {}\n  \n  ```\n- With Trait Objects, Rust must use [[Dynamic Dispatch]].\n  This is in contrast to [[Static Dispatch]], where the compiler knows at compile-time all the methods and addresses to call. Here, it doesn't and instead internal pointers are used to denote where the actual method is at runtime. This prevents some optimizations, and also incurs a small lookup cost at runtime. \n  This is why Trait Objects must be used sparingly.",536870920]],["^15",[1494,"^17",1700492155713,536870920]],["^15",[1494,"^Z","Rust/pages/Trait Object.md",536870920]],["^15",[1495,"^K",1700492155713,536870920]],["^15",[1495,"^@",false,536870920]],["^15",[1495,"^Y","dynamic dispatch",536870920]],["^15",[1495,"^11","Dynamic Dispatch",536870920]],["^15",[1495,"^B",1700492155713,536870920]],["^15",[1495,"^;","~u655b737b-351c-4477-a4b6-3088108f9c70",536870920]],["^15",[1496,"^Q","Trait Objects are much like [[Generic Type]]s where we define a [[Trait]] and instead of providing a concrete type at compile-time we provide it at runtime. So rust knows at compile-time only 2 things, that it should wait for the types till runtime and at compile time just ensure that any provided types do implement the given trait. \nHowever, as we know, Rust requires a fixed size at compile time for every definition, this is why we have to make use of [[Pointer]]s. And the pointers theirselves need to know the size of the type, they can use ``dyn`` keyword which allows [[Dynamically Sized Type]]s. \nFinally we get a [[Data Type]] definition that looks like ``Box<dyn someTrait>``.\n\nFor ex.:\n```rust\nfn main() {\n /*\nlet bag = Bag {\n        stuff: vec![Box::new(1i32), Box::new(2u32)], \n    }; // //would be an error, because Box<T> for Bag resolves to i32, but we provide a u32 for the next element. \n*/\n    let bigger_bag = BigBag {\n        stuff: vec![Box::new(1i32), Box::new(2u32)],\n    }; //works\n}\n \nstruct Bag<T: Tiffin> {\n    stuff: Vec<Box<T>>,\n}\n \nstruct BigBag {\n    stuff: Vec<Box<dyn Tiffin>>,\n}\n \ntrait Tiffin {}\n \nimpl Tiffin for i32 {}\nimpl Tiffin for u32 {}\n\n```",536870920]],["^15",[1496,"^O","^16",536870920]],["^15",[1496,"^F",1174,536870920]],["^15",[1496,"^X",1174,536870920]],["^15",[1496,"^V",1174,536870920]],["^15",[1496,"^U",1073,536870920]],["^15",[1496,"^U",1087,536870920]],["^15",[1496,"^U",1090,536870920]],["^15",[1496,"^U",1094,536870920]],["^15",[1496,"^U",1174,536870920]],["^15",[1496,"^U",1223,536870920]],["^15",[1496,"^H",1073,536870920]],["^15",[1496,"^H",1087,536870920]],["^15",[1496,"^H",1090,536870920]],["^15",[1496,"^H",1094,536870920]],["^15",[1496,"^H",1223,536870920]],["^15",[1496,"^;","~u655b737b-5b5c-4ac2-994e-2cd827002252",536870920]],["^15",[1497,"^Q","With Trait Objects, Rust must use [[Dynamic Dispatch]].\nThis is in contrast to [[Static Dispatch]], where the compiler knows at compile-time all the methods and addresses to call. Here, it doesn't and instead internal pointers are used to denote where the actual method is at runtime. This prevents some optimizations, and also incurs a small lookup cost at runtime. \nThis is why Trait Objects must be used sparingly.",536870920]],["^15",[1497,"^O","^16",536870920]],["^15",[1497,"^F",1496,536870920]],["^15",[1497,"^X",1174,536870920]],["^15",[1497,"^V",1174,536870920]],["^15",[1497,"^U",1174,536870920]],["^15",[1497,"^U",1278,536870920]],["^15",[1497,"^U",1495,536870920]],["^15",[1497,"^H",1278,536870920]],["^15",[1497,"^H",1495,536870920]],["^15",[1497,"^;","~u655b737b-6b5a-468a-86fd-24bac3fcfae1",536870920]],["^15",[1498,"^3","- ``trait``\n  Kind of like an *interface* from other langs.\n  Traits allow us to define functionality that can be shared to one or more [[Data Type]]s. By [[Data Type]]s we refer to [[Struct]] and [[Enum]]s.\n- Traits are defined using ``trait``, and then for a type they are implemented using ``impl`` blocks.\n  Much like *interface*s, ``trait``s can just define the [[Method]] Signatures, and the actual implementation for the methods can be given by the type implementing the  Trait.\n  \n  Syntax:\n  ``\n  <Optional Access Modifier> trait <trait name> {\n   fn <method 1 name>(<params>)-> <Optional Return Type>;\n   //can define a default implementation\n  fn <method 2 name>(<params>)-> <Optional Return Type> { } //ok\n   ...\n    fn <method n name>(<params>)-> <Optional Return Type>;\n  }\n  ``\n  And then to implement them,\n  \n  ``\n  impl <trait name> for <Struct/Enum name> {\n   <Method 1 definition>{...}\n    <Method 2 definition>{...}\n   ...\n    <Method n definition>{...}\n  }\n  ``\n  \n  For ex.:\n  ```rust\n  pub trait Dance{\n   fn move(&Self)-> i32;\n   \n  }\n  \n  struct X{\n   x:i32,\n  }\n  \n  impl Dance for X {\n   fn move(&self)-> i32 {\n   2+2\n   }\n  }\n  \n  fn main() {\n   let x= X{2};\n   x.move(); //works\n  }\n  ```\n  \n  The [[Access Modifier]]s are applied to trait definitions too and they are *private* by default, so if a [[Crate]]/ [[Module]] has a private trait then it can't be used by an external [[Crate]] to implement the trait on its types, this doesn't mean private traits defined for public types have their implementations hidden, the implemented methods are still available to external [[Crate]]s.\n- Traits have to be implemented on [[Data Type]]s by the compile-time, Rust doesn't support dynamically implementing traits on types at runtime. So [[Function]]s can't implement Traits, but [[Macro]]s can.\n- All [[Method]]s in a trait definition without a default implementation need to be defined when the trait is implemented for a [[Data Type]].\n- Default implementation\n  A trait definition can define a default implementation for a [[Method]], and then that definition is used if the implementing type doesn't override it.\n  \n  For ex.:\n  \n  ```rust\n  pub trait Dance{\n   fn move(&Self)-> i32 { }\n  }\n  \n  struct X{\n   x:i32,\n  }\n  \n  impl Dance for X {\n  \n  }\n  //ok\n  \n  ```\n  The empty ``impl`` block is necessary as it defines ``Dance`` is being implemented on ``X``.\n  \n  Trait implementations with empty bodies are called *Marker Trait*s or *Tag Trait*s.\n- Orphan Rule\n  This is part of a property called [[coherence]]. According to it, a ``trait`` can be implemented for a type iff either the trait or the [[Data Type]] is local to the [[Crate]] (defined in the same [[Crate]]). \n  \n  For ex.:\n  If crate ``A`` defines a trait ``X`` then it can define the trait ``X`` for any [[Data Type]] , local or external, such as a type ``T`` from crate ``B``. \n  Similarly, if crate ``A`` defines a type ``T`` then it can implement trait ``X`` defined in crate B for its type ``T``. \n  But if crate ``C`` defines neither type ``T`` or trait ``X`` but takes them from crate ``A`` and ``B``, i.e., both are external then this is not allowed according to this rule.\n  \n  This is to ensure the Parent type exists, and other people’s code can’t break our own or theirs because a trait/type is defined at a place different from the crate where it is created.\n  \n  * Newtype Pattern: It is possible to avoid the Orphan Rule by simply wrapping the external type ``T`` in a new type and then implementing a trait on this new type. It's called so because of a similar pattern in Haskell.\n  For ex.:\n  ```rust\n  use std::fmt;\n   \n  struct Wrapper{\n      v: Vec<String>\n  }\n   \n  impl fmt::Display for Wrapper {\n      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n          write!(f, \"[{}]\", self.v.join(\", \"))\n      }\n  }\n   \n  fn main() {\n      let w = Wrapper{v:vec![String::from(\"hello\"), String::from(\"world\")]};\n      println!(\"w = {}\", w);\n  }\n  \n  ```\n- ``self``\n  We use ``self`` in a trait to pass an instance of the type to the function, allowing us to call other [[Method]]s and fields.\n  While this means we can’t access a type-specific method/field in a trait’s default method, we can access trait-specific methods because of it. \n  For ex.:\n  ```rust\n  pub trait X {\n      fn na();\n      fn ya(&self);\n      fn yo(&self) -> String {\n          Self::na();\n          self.ya();\n          return \"na\".to_string();\n      } //works because self will always have na() and ya() as it’s defined on trait itself.\n      fn ayo(&mut self);\n  }\n  \n  struct A {\n      x: i32,\n  }\n  \n  impl X for A {\n      fn na() {}\n      fn ya(&self) {}\n      fn ayo(&mut self) {\n          self.x += 2;\n      }\n  }\n  \n  fn main() {\n      let mut a = A { x: 2 };\n      a.ayo();\n  }\n  ```\n  However, non-default implemented trait methods can access instance fields and methods.\n- [[Function]]/ [[Method]] Parameters/Return Types can use [[Trait]]s too\n  When Parameters use traits, they require the type of object being passed as argument to implement the trait(s).\n  These are simply a syntax sugar for using [[Generic Type]]s, aka ``Trait Bound`` Syntax.\n  \n  Syntax:\n  \n  ``\n  fn <somename>(<param name>: <optional reference &> impl <trait name> + <any other trait> + .., <param 2>) {...}\n  ``\n  \n  For ex.:\n  ```rust\n  pub trait X {\n   fn notify() {}\n  }\n  pub fn notify(item: &impl X) { //Requires the type of object being passed to notify() to implement the trait X\n      println!(\"Breaking news! {}\", item.notify());\n  }\n  ```\n  \n  * ``Trait Bound`` Syntax: \n  The ``impl Trait`` is simply a syntax sugar for a longer syntax which is just the [[Generic Type]] syntax.\n  \n  For ex.:\n  ```rust\n  pub trait X {\n   fn notify() {}\n  }\n  pub fn notify<T: X>(item: &T) { \n      println!(\"Breaking news! {}\", item.notify());\n  }\n  ```\n  There's a slight difference between the 2 syntaxes, the ``impl Trait`` syntax requires simply the type of the argument object to implement the trait, but it doesn't require the object's types to be the same.\n  For ex.:\n  ```rust\n  pub trait X {\n   fn notify() {}\n  }\n  pub fn notify<T: X>(item: &T, item2: &T) {  //accepts a single type T and that T must be the same for both the args/params\n  }\n  pub fn notify(item: &impl X, item2: &impl X) {  //accepts 2 types, they can be the same, they just need to implement the trait X\n  }\n  \n  ```\n  \n  * The Return types can use the ``impl Trait`` and [[Generic Type]]s too\n  However, there's a limitation with the Rust Compiler that disallows different code paths returning different types. All code paths in a [[Function]]/ [[Method]] must return the same [[Data Type]] object, and that type must implement the given trait(s). \n  For ex.:\n  ```rust\n  pub trait X {}\n  \n  struct A{ }\n  \n  impl X for A {}\n  \n  struct B{ }\n  \n  impl X for B {}\n  \n  fn yo()-> impl X {\n   if (1==2) {\n     return A{};\n    }\n  else {\n    return B{};\n   }\n  }\n  //whilst it should work, doesn't. Gives an error as both must return the same type of object.\n  ```\n- Conditionally implementing [[Method]]s and Traits for custom [[Data Type]]s\n  Using ``Trait Bound`` Syntax, we can define methods or traits for types that have\n  given traits.\n  For ex.:\n  ```rust\n  struct X<T> {…}\n  trait Y {}\n  trait Z {\n  fn na() {}\n  }\n  \n  impl<T: Y> X<T> {\n  \tfn yo() { }\n  }\n  \n  impl<T: Y> Z for X<T> {\n  \t\n  }\n  \n  impl<T> Y for X<T> {\n  \n  }\n  ```\n  For a type ``T`` used to create the object of ``X``, the method ``yo()`` can only be called if ``T`` implements the trait ``Y`` and the methods of trait ``Z``, i.e., ``na()`` can only be called if ``T`` implements the trait ``Y``.\n  \n  This is how we conditionally implement [[Method]]s/Traits for a [[Data Type]]. Yes, this condition is resolved at compile-time itself as the concrete definitions are put in by the compiler.\n  \n  * Blanket Implementation\n  We can also apply traits to [[Generic Type]]s directly. These are known as blanket implementations as they apply a trait to multiple types.\n  \n  For ex.:\n  ```rust\n  impl<T: Display> ToString for T {\n      // --snip--\n  }\n  ```\n  This is how the ``ToString`` trait is already applied in the [[Standard Library]], for any [[Data Type]] that implements the trait ``Display``, the trait ``ToString`` is automatically applied. Similarly we can apply our own traits to multiple types at once too.\n- Multiple Traits for [[Generic Type]]s definition are combined with the ``+`` [[Operator]]\n  \n  For ex.:\n  ```rust\n  trait X{}\n  trait Y{}\n  pb fn yo<T: X+Y>() {}\n  ```\n- [[Generic Type]]s can use traits, and traits can use generics too.\n  For ex.:\n  ```rust\n  pub trait X<T> {\n      fn yo(x: T);\n      fn no(&self, x: T);\n      fn ok() -> Option<T>;\n      fn lol(&self) -> Option<T>;\n  }\n  \n  struct A {}\n  \n  impl<T> X<T> for A {\n      fn yo(x: T) {}\n      fn no(&self, x: T) {}\n      fn ok() -> Option<T> {\n          None\n      }\n      fn lol(&self) -> Option<T> {\n          None\n      }\n  }\n  \n  struct B {}\n  \n  impl X<i32> for B {\n      fn yo(x: i32) {}\n      fn no(&self, x: i32) {\n          println!(\"yo no\");\n      }\n      fn ok() -> Option<i32> {\n          println!(\"ok\");\n          None\n      }\n      fn lol(&self) -> Option<i32> {\n          None\n      }\n  }\n  \n  fn main() {\n      let a = A {};\n      a.no(2);\n      A::yo(4);\n      A::ok() as Option<i32>;\n      a.lol() as Option<i32>;\n  \n      let b = B {};\n      b.no(2);\n      //b.no(\"ab\"); //error\n      //B::ok() as Option<f64>; //error\n  } // works\n  \n  ```\n  Just like [[Method]] ``impl`` blocks we can conditionally define traits for [[Data Type]]s too. \n  However, generics or not, a trait can only be implemented once for any [[Data Type]]. So if we conditionally define a trait for a type, then it's methods are only available for that type.\n  \n  * [[Associated Type]]s provide an alternative to using traits with generics. The benefit of using associated types is that the caller code has no need of knowing the type or defining it, it is all handled by the type implementing the trait itself.\n- Common Traits in the [[Standard Library]] \n  * ``Copy``\n  The ``Copy`` trait can only be implemented for a [[Data Type]] if it doesn't implement the ``Drop`` Trait.\n  \n  * ``Sized``\n  This trait is automatically applied to all types whose size is known at compile time. We can apply it to [[Generic Type]]s and custom [[Data Type]]s too .\n   \n  For ex.:\n  ```rust\n  fn yo<T> (a: T) {}\n  //is actually\n  //fn yo <T:Sized> (a:T) {…}\n  \n  //Hence\n  //fn yo<T: ?Sized> (a: &T) {…} //allows DSTs to be passed to yo as well\n  ```\n  The ``?<trait>`` syntax says ``T`` may or may not implement the ``Sized`` trait. This syntax is only applicable for ``Sized`` trait. We can pass [[Dynamically Sized Type]]s using this trait.\n- Derivable Traits\n  By using ``#[derive]`` [[Macro Attribute]] we can make our [[Data Type]]s automatically implement a given trait. This only works for a few basic traits like ``PartialEq``. \n  For ex.:\n  ```rust\n  #[derive(PartialEq, Debug)]\n  struct X{}\n  ```\n  \n  These are some more derivable traits\n  * Comparison traits: [`Eq`](https://doc.rust-lang.org/std/cmp/trait.Eq.html), [`PartialEq`](https://doc.rust-lang.org/std/cmp/trait.PartialEq.html), [`Ord`](https://doc.rust-lang.org/std/cmp/trait.Ord.html), [`PartialOrd`](https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html).\n  * [`Clone`](https://doc.rust-lang.org/std/clone/trait.Clone.html), to create `T` from `&T` via a copy.\n  * [`Copy`](https://doc.rust-lang.org/core/marker/trait.Copy.html), to give a type 'copy semantics' instead of 'move semantics'.\n  * [`Hash`](https://doc.rust-lang.org/std/hash/trait.Hash.html), to compute a hash from `&T`.\n  * [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html), to create an empty instance of a data type.\n  * [`Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html), to format a value using the `{:?}` formatter.\n- ``Deref`` and ``DerefMut``\n  Traits defined in ``std::ops``.\n  \n  * ``Deref``: Any [[Data Type]] that implements this trait can use the dereference [[Operator]] ``*``. \n  [[Pointer]]s and non-primitive [[Reference Type]]s implement it in [[Standard Library]] .\n  \n  The main method of this trait is the ``deref()`` [[Method]] which is called when value of the implementing type is getting dereferenced.\n  ``Deref`` and its ``deref()`` return immutable [[Reference Type]]s.\n  \n  * Since [[Pointer]]s implement the ``Deref`` [[Trait]], they can be dereferenced.\n  For ex.:\n  ```rust\n  fn main {\n   let x = Box::new(2);\n   println!(\"{}\", *x);\n  }\n  ```\n  That is also to say, a pointer has a [[Reference Type]] to the data (as the data is stored in a separate memory address from the pointer itself). Since Reference values can't be used without being dereferenced we need to use the ``*`` [[Operator]].\n  \n  We can implement this Trait for our types too,\n  For ex.:\n  ```rust\n  use std::ops::Deref;\n  \n  struct MyBox<T>(T);\n  \n  impl<T> MyBox<T> {\n      fn new(x: T) -> MyBox<T> {\n          MyBox(x)\n      }\n  }\n  \n  impl<T> Deref for MyBox<T> {\n      type Target = T;\n  \n      fn deref(&self) -> &Self::Target { //notice dereference returns the &T\n          &self.0\n      }\n  }\n  \n  fn main() {\n   let x = MyBox::new(2);\n   *x; //returns 2\n   //is the same as\n   *(x.deref()); //also returns 2\n  }\n  ```\n  using an [[Associated Type]] ``target``.\n  The reason ``deref()`` [[Method]] returns a [[Reference Type]] is simply because if it returned the value directly, it would invoke [[Copy or Move]] and transfer the [[Ownership]] out of ``MyBox``. \n  The main goal dereferencing is to reach a primitive type, as primitive types have the concrete implementation for how actually dereferencing works without transferring [[Ownership]] or [[Copy or Move]]ing. \n  So if our type ``T`` dereferences into a value of type ``K`` (i.e., ``T``'s ``Deref`` trait's ``deref`` method returned ``&K``) which dereferences into a primitive type such as ``i32`` then the dereference chain to go from ``&T`` to ``i32`` would be\n  ``*<T value>``->``*<K value>``->``*<i32 value>`` where the dereference of ``*<i32 value>`` is defined internally.\n  \n  The feature by which Rust automatically goes from ``*<T value>`` to ``<i32 value>`` is called [[Deref Coercion]].```\n  \n  * ``DerefMut``:  This trait and its ``deref()`` method return mutable references.\n  Rust's [[Deref Coercion]] uses the following chain\n  \n  * From ``&T`` to ``&U`` if ``T: Deref<Target=U>``, i.e., ``T`` implements the ``Deref`` trait. and returns a value of type ``&U`` from its ``deref()`` [[Method]].\n   \n  * From ``&mut T`` to ``&mut U`` if ``T: DerefMut<Target=U>``\n  * From ``&mut T`` to ``&U`` if ``T: Deref<Target=U>``\n- ``Drop`` Trait\n  This trait needs implementation for the ``drop`` [[Method]] which takes a mutable [[Borrow]] of ``self`` and then runs some cleanup/deallocation code. The ``drop`` method is called automatically by the Rust compiler when the instance of the type goes out of [[Scope]]. ``Drop`` trait is included in the [[Prelude]]. Basically, the ``drop()`` method is much like a *Destructor* from other languages.\n  \n  For ex.:\n  ```rust\n  struct MyT{ yo:i32 }\n  impl Drop for MyT {\n  \tfn drop(&mut self) {\n  \t//do something with self.yo. \n   }\n  }\n  ```\n  \n  * Smart-[[Pointer]]s implement this trait.\n  \n  * We can't explicitly call the ``drop()`` [[Method]] as it leads to the *Double Free* error. So, Rust provides a way to let the compiler know as well as call it early. It is the ``std::mem::drop(<value of type T that implements Drop>)`` [[Function]] in the [[Prelude]].\n  For ex.:\n  ```rust\n  fn main() {\n   let x = Box::new(2);\n   drop(x); //works\n  }\n  ```\n- ``Send`` and ``Sync`` Traits\n  Defined in ``std::marker``.\n  \n  The send trait indicates the [[Ownership]] of the [[Data Type]] that implements it can be transferred between threads. Almost all types in Rust implement it, but not types such as [[Rc<T>]]. \n  \n  Similarly, the sync trait indicates the type implementing it is safe to be accessed from multiple threads. \n  \n  * Both of these are known as marker traits as they are in the marker Module and they have no [[Method]]s to implement either, they just mark a type and are used to indicate rust's concurrency rules are followed. \n  Still, we can have custom implementation for both but that is part of [[unsafe]] Rust. \n  * All primitive types implement both of these. \n  * If a type is composed only of Send Trait implementing types then that type implicitly implements the send trait as well. Same with Sync trait as well.\n  * These traits are [[unsafe]].\n- [[unsafe]] Traits\n  Traits which have some [[unsafe]] [[Method]]s. \n  We declare these traits with ``unsafe`` and same for their ``impl`` blocks .\n  \n  For ex.:\n  ```rust\n  unsafe trait Foo {\n      // methods go here\n  }\n  \n  unsafe impl Foo for i32 {\n      // method implementations go here\n  }\n  \n  fn main() {}\n  ```\n- [[Supertrait]]\n- [[Future]]'s ``Future`` Trait\n  The future trait’s working helps us understand [[Async and Await]] Rust better.\n  \n  It basically looks like this, \n  ```rust\n  trait SimpleFuture {\n      type Output;\n      fn poll(&mut self, wake: fn()) -> Poll<Self::Output>;\n  }\n   \n  enum Poll<T> {\n      Ready(T),\n      Pending,\n  }\n  ```\n  For ex. \n  ```rust\n  pub struct SocketRead<'a> {\n      socket: &'a Socket,\n  }\n   \n  impl SimpleFuture for SocketRead<'_> {\n      type Output = Vec<u8>;\n   \n      fn poll(&mut self, wake: fn()) -> Poll<Self::Output> {\n          if self.socket.has_data_to_read() {\n              // The socket has data -- read it into a buffer and return it.\n              Poll::Ready(self.socket.read_buf())\n          } else {\n              // The socket does not yet have data.\n              //\n              // Arrange for `wake` to be called once data is available.\n              // When data becomes available, `wake` will be called, and the\n              // user of this `Future` will know to call `poll` again and\n              // receive data.\n              self.socket.set_readable_callback(wake);\n              Poll::Pending\n          }\n      }\n  }\n  ```\n  Basically, ``Future`` returns a ``Poll`` [[Enum]] from the ``poll`` [[Function]]. The [[Executor]] calls the ``poll`` function and the enum indicates if the future is complete or pending. \n  The poll function gets a [[Closure]] ``wake`` which tells the executor when it can wake and call the ``poll`` function again to forward the future towards completion. Using this functionality ``Future`` trait allows multiple Futures to be run in the same [[Thread]] as when one is pending other is run and so on for all of them.\n  \n  The actual future trait looks like so\n  ```rust\n  trait Future {\n      type Output;\n      fn poll(\n          // Note the change from `&mut self` to `Pin<&mut Self>`:\n          self: Pin<&mut Self>,\n          // and the change from `wake: fn()` to `cx: &mut Context<'_>`:\n          cx: &mut Context<'_>,\n      ) -> Poll<Self::Output>;\n  }\n  ```\n  They used [[Pinned Trait]] and the ``context`` [[Closure]] here. The ``context`` closure allows identifying which [[Function]] called the wake, otherwise it’s god’s plan as it is just a [[Pointer]] .\n  \n  A ``Future`` is stored inside a ``Waker`` [[Data Type]], this type provides the ``wake`` function and the future is also stored in this type. The executor receives this type and calls it a ``Task``. \n  \n  The ``wake`` function is essentially called through integration with an *IO-aware* system blocking primitive, such as *epoll* on Linux, *kqueue* on FreeBSD and MacOS, *IOCP* on Windows, and *ports* on Fuchsia (all of which are exposed through the cross-platform Rust [[Crate]] ``mio``). These primitives all allow a thread to block on multiple asynchronous IO events, returning once one of the events completes.\n- ``Stream`` \n  Just like [[Iterator]]s, but uses [[Async and Await]] and [[Future]]s. \n  For ex.:\n  ```rust\n  async fn send_recv() {\n      const BUFFER_SIZE: usize = 10;\n      let (mut tx, mut rx) = mpsc::channel::<i32>(BUFFER_SIZE);\n   \n      tx.send(1).await.unwrap();\n      tx.send(2).await.unwrap();\n      drop(tx);\n   \n      // `StreamExt::next` is similar to `Iterator::next`, but returns a\n      // type that implements `Future<Output = Option<T>>`.\n      assert_eq!(Some(1), rx.next().await);\n      assert_eq!(Some(2), rx.next().await);\n      assert_eq!(None, rx.next().await);\n  }\n  ```\n  or \n  when used in a [[Loop]],\n  ```rust\n  async fn sum_with_next(mut stream: Pin<&mut dyn Stream<Item = i32>>) -> i32 {\n      use futures::stream::StreamExt; // for `next`\n      let mut sum = 0;\n      while let Some(item) = stream.next().await {\n          sum += item;\n      }\n      sum\n  }\n  //for loop doesn’t work with stream. \n  ```\n-",536870920]],["^15",[1498,"^17",1700492155821,536870920]],["^15",[1498,"^Z","Rust/pages/Trait.md",536870920]],["^15",[1499,"^K",1700492155821,536870920]],["^15",[1499,"^@",false,536870920]],["^15",[1499,"^Y","pinned trait",536870920]],["^15",[1499,"^11","Pinned Trait",536870920]],["^15",[1499,"^B",1700492155821,536870920]],["^15",[1499,"^;","~u655b737b-a95f-4c65-a388-a3835d7b4937",536870920]],["^15",[1500,"^K",1700492155818,536870920]],["^15",[1500,"^@",false,536870920]],["^15",[1500,"^Y","coherence",536870920]],["^15",[1500,"^11","coherence",536870920]],["^15",[1500,"^B",1700492155818,536870920]],["^15",[1500,"^;","~u655b737b-4b30-4ba2-a16f-585094daca67",536870920]],["^15",[1501,"^Q","Traits have to be implemented on [[Data Type]]s by the compile-time, Rust doesn't support dynamically implementing traits on types at runtime. So [[Function]]s can't implement Traits, but [[Macro]]s can.",536870920]],["^15",[1501,"^O","^16",536870920]],["^15",[1501,"^F",1510,536870920]],["^15",[1501,"^X",1073,536870920]],["^15",[1501,"^V",1073,536870920]],["^15",[1501,"^U",163,536870920]],["^15",[1501,"^U",1073,536870920]],["^15",[1501,"^U",1079,536870920]],["^15",[1501,"^U",1090,536870920]],["^15",[1501,"^H",163,536870920]],["^15",[1501,"^H",1079,536870920]],["^15",[1501,"^H",1090,536870920]],["^15",[1501,"^;","~u655b737b-c45e-45d0-a2cd-ff6d5cc88bd1",536870920]],["^15",[1502,"^Q","[[Supertrait]]",536870920]],["^15",[1502,"^O","^16",536870920]],["^15",[1502,"^F",1507,536870920]],["^15",[1502,"^X",1073,536870920]],["^15",[1502,"^V",1073,536870920]],["^15",[1502,"^U",1073,536870920]],["^15",[1502,"^U",1474,536870920]],["^15",[1502,"^H",1474,536870920]],["^15",[1502,"^;","~u655b737b-9d14-4870-a7eb-1f4756a06433",536870920]],["^15",[1503,"^Q","[[Future]]'s ``Future`` Trait\nThe future trait’s working helps us understand [[Async and Await]] Rust better.\n\nIt basically looks like this, \n```rust\ntrait SimpleFuture {\n    type Output;\n    fn poll(&mut self, wake: fn()) -> Poll<Self::Output>;\n}\n \nenum Poll<T> {\n    Ready(T),\n    Pending,\n}\n```\nFor ex. \n```rust\npub struct SocketRead<'a> {\n    socket: &'a Socket,\n}\n \nimpl SimpleFuture for SocketRead<'_> {\n    type Output = Vec<u8>;\n \n    fn poll(&mut self, wake: fn()) -> Poll<Self::Output> {\n        if self.socket.has_data_to_read() {\n            // The socket has data -- read it into a buffer and return it.\n            Poll::Ready(self.socket.read_buf())\n        } else {\n            // The socket does not yet have data.\n            //\n            // Arrange for `wake` to be called once data is available.\n            // When data becomes available, `wake` will be called, and the\n            // user of this `Future` will know to call `poll` again and\n            // receive data.\n            self.socket.set_readable_callback(wake);\n            Poll::Pending\n        }\n    }\n}\n```\nBasically, ``Future`` returns a ``Poll`` [[Enum]] from the ``poll`` [[Function]]. The [[Executor]] calls the ``poll`` function and the enum indicates if the future is complete or pending. \nThe poll function gets a [[Closure]] ``wake`` which tells the executor when it can wake and call the ``poll`` function again to forward the future towards completion. Using this functionality ``Future`` trait allows multiple Futures to be run in the same [[Thread]] as when one is pending other is run and so on for all of them.\n\nThe actual future trait looks like so\n```rust\ntrait Future {\n    type Output;\n    fn poll(\n        // Note the change from `&mut self` to `Pin<&mut Self>`:\n        self: Pin<&mut Self>,\n        // and the change from `wake: fn()` to `cx: &mut Context<'_>`:\n        cx: &mut Context<'_>,\n    ) -> Poll<Self::Output>;\n}\n```\nThey used [[Pinned Trait]] and the ``context`` [[Closure]] here. The ``context`` closure allows identifying which [[Function]] called the wake, otherwise it’s god’s plan as it is just a [[Pointer]] .\n\nA ``Future`` is stored inside a ``Waker`` [[Data Type]], this type provides the ``wake`` function and the future is also stored in this type. The executor receives this type and calls it a ``Task``. \n\nThe ``wake`` function is essentially called through integration with an *IO-aware* system blocking primitive, such as *epoll* on Linux, *kqueue* on FreeBSD and MacOS, *IOCP* on Windows, and *ports* on Fuchsia (all of which are exposed through the cross-platform Rust [[Crate]] ``mio``). These primitives all allow a thread to block on multiple asynchronous IO events, returning once one of the events completes.",536870920]],["^15",[1503,"^O","^16",536870920]],["^15",[1503,"^F",1502,536870920]],["^15",[1503,"^X",1073,536870920]],["^15",[1503,"^V",1073,536870920]],["^15",[1503,"^U",163,536870920]],["^15",[1503,"^U",1063,536870920]],["^15",[1503,"^U",1066,536870920]],["^15",[1503,"^U",1073,536870920]],["^15",[1503,"^U",1074,536870920]],["^15",[1503,"^U",1090,536870920]],["^15",[1503,"^U",1093,536870920]],["^15",[1503,"^U",1094,536870920]],["^15",[1503,"^U",1095,536870920]],["^15",[1503,"^U",1097,536870920]],["^15",[1503,"^U",1100,536870920]],["^15",[1503,"^U",1499,536870920]],["^15",[1503,"^H",163,536870920]],["^15",[1503,"^H",1063,536870920]],["^15",[1503,"^H",1066,536870920]],["^15",[1503,"^H",1074,536870920]],["^15",[1503,"^H",1090,536870920]],["^15",[1503,"^H",1093,536870920]],["^15",[1503,"^H",1094,536870920]],["^15",[1503,"^H",1095,536870920]],["^15",[1503,"^H",1097,536870920]],["^15",[1503,"^H",1100,536870920]],["^15",[1503,"^H",1499,536870920]],["^15",[1503,"^;","~u655b737b-753e-4eed-94dd-f947931f4a8f",536870920]],["^15",[1504,"^Q","Default implementation\nA trait definition can define a default implementation for a [[Method]], and then that definition is used if the implementing type doesn't override it.\n\nFor ex.:\n\n```rust\npub trait Dance{\n fn move(&Self)-> i32 { }\n}\n\nstruct X{\n x:i32,\n}\n\nimpl Dance for X {\n\n}\n//ok\n\n```\nThe empty ``impl`` block is necessary as it defines ``Dance`` is being implemented on ``X``.\n\nTrait implementations with empty bodies are called *Marker Trait*s or *Tag Trait*s.",536870920]],["^15",[1504,"^O","^16",536870920]],["^15",[1504,"^F",1516,536870920]],["^15",[1504,"^X",1073,536870920]],["^15",[1504,"^V",1073,536870920]],["^15",[1504,"^U",1065,536870920]],["^15",[1504,"^U",1073,536870920]],["^15",[1504,"^H",1065,536870920]],["^15",[1504,"^;","~u655b737b-bb8b-4efb-9d45-4777740356ea",536870920]],["^15",[1505,"^Q","~``Deref`` and ``DerefMut``\nTraits defined in ``std::ops``.\n\n* ``Deref``: Any [[Data Type]] that implements this trait can use the dereference [[Operator]] ``*``. \n[[Pointer]]s and non-primitive [[Reference Type]]s implement it in [[Standard Library]] .\n\nThe main method of this trait is the ``deref()`` [[Method]] which is called when value of the implementing type is getting dereferenced.\n``Deref`` and its ``deref()`` return immutable [[Reference Type]]s.\n\n* Since [[Pointer]]s implement the ``Deref`` [[Trait]], they can be dereferenced.\nFor ex.:\n```rust\nfn main {\n let x = Box::new(2);\n println!(\"{}\", *x);\n}\n```\nThat is also to say, a pointer has a [[Reference Type]] to the data (as the data is stored in a separate memory address from the pointer itself). Since Reference values can't be used without being dereferenced we need to use the ``*`` [[Operator]].\n\nWe can implement this Trait for our types too,\nFor ex.:\n```rust\nuse std::ops::Deref;\n\nstruct MyBox<T>(T);\n\nimpl<T> MyBox<T> {\n    fn new(x: T) -> MyBox<T> {\n        MyBox(x)\n    }\n}\n\nimpl<T> Deref for MyBox<T> {\n    type Target = T;\n\n    fn deref(&self) -> &Self::Target { //notice dereference returns the &T\n        &self.0\n    }\n}\n\nfn main() {\n let x = MyBox::new(2);\n *x; //returns 2\n //is the same as\n *(x.deref()); //also returns 2\n}\n```\nusing an [[Associated Type]] ``target``.\nThe reason ``deref()`` [[Method]] returns a [[Reference Type]] is simply because if it returned the value directly, it would invoke [[Copy or Move]] and transfer the [[Ownership]] out of ``MyBox``. \nThe main goal dereferencing is to reach a primitive type, as primitive types have the concrete implementation for how actually dereferencing works without transferring [[Ownership]] or [[Copy or Move]]ing. \nSo if our type ``T`` dereferences into a value of type ``K`` (i.e., ``T``'s ``Deref`` trait's ``deref`` method returned ``&K``) which dereferences into a primitive type such as ``i32`` then the dereference chain to go from ``&T`` to ``i32`` would be\n``*<T value>``->``*<K value>``->``*<i32 value>`` where the dereference of ``*<i32 value>`` is defined internally.\n\nThe feature by which Rust automatically goes from ``*<T value>`` to ``<i32 value>`` is called [[Deref Coercion]].```\n\n* ``DerefMut``:  This trait and its ``deref()`` method return mutable references.\nRust's [[Deref Coercion]] uses the following chain\n\n* From ``&T`` to ``&U`` if ``T: Deref<Target=U>``, i.e., ``T`` implements the ``Deref`` trait. and returns a value of type ``&U`` from its ``deref()`` [[Method]].\n \n* From ``&mut T`` to ``&mut U`` if ``T: DerefMut<Target=U>``\n* From ``&mut T`` to ``&U`` if ``T: Deref<Target=U>``",536870920]],["^15",[1505,"^O","^16",536870920]],["^15",[1505,"^F",1511,536870920]],["^15",[1505,"^X",1073,536870920]],["^15",[1505,"^V",1073,536870920]],["^15",[1505,"^U",339,536870920]],["^15",[1505,"^U",1065,536870920]],["^15",[1505,"^U",1073,536870920]],["^15",[1505,"^U",1086,536870920]],["^15",[1505,"^U",1090,536870920]],["^15",[1505,"^U",1091,536870920]],["^15",[1505,"^U",1094,536870920]],["^15",[1505,"^U",1096,536870920]],["^15",[1505,"^U",1160,536870920]],["^15",[1505,"^U",1171,536870920]],["^15",[1505,"^U",1239,536870920]],["^15",[1505,"^H",339,536870920]],["^15",[1505,"^H",1065,536870920]],["^15",[1505,"^H",1073,536870920]],["^15",[1505,"^H",1086,536870920]],["^15",[1505,"^H",1090,536870920]],["^15",[1505,"^H",1091,536870920]],["^15",[1505,"^H",1094,536870920]],["^15",[1505,"^H",1096,536870920]],["^15",[1505,"^H",1160,536870920]],["^15",[1505,"^H",1171,536870920]],["^15",[1505,"^H",1239,536870920]],["^15",[1505,"^;","~u655b737b-8596-4e2e-b1db-fc5d04e9187b",536870920]],["^15",[1506,"^Q","~``trait``\nKind of like an *interface* from other langs.\nTraits allow us to define functionality that can be shared to one or more [[Data Type]]s. By [[Data Type]]s we refer to [[Struct]] and [[Enum]]s.",536870920]],["^15",[1506,"^O","^16",536870920]],["^15",[1506,"^F",1073,536870920]],["^15",[1506,"^X",1073,536870920]],["^15",[1506,"^V",1073,536870920]],["^15",[1506,"^U",1064,536870920]],["^15",[1506,"^U",1066,536870920]],["^15",[1506,"^U",1073,536870920]],["^15",[1506,"^U",1090,536870920]],["^15",[1506,"^H",1064,536870920]],["^15",[1506,"^H",1066,536870920]],["^15",[1506,"^H",1090,536870920]],["^15",[1506,"^;","~u655b737b-19bc-472c-bffd-c74a23eb802d",536870920]],["^15",[1507,"^Q","[[unsafe]] Traits\nTraits which have some [[unsafe]] [[Method]]s. \nWe declare these traits with ``unsafe`` and same for their ``impl`` blocks .\n\nFor ex.:\n```rust\nunsafe trait Foo {\n    // methods go here\n}\n\nunsafe impl Foo for i32 {\n    // method implementations go here\n}\n\nfn main() {}\n```",536870920]],["^15",[1507,"^O","^16",536870920]],["^15",[1507,"^F",1521,536870920]],["^15",[1507,"^X",1073,536870920]],["^15",[1507,"^V",1073,536870920]],["^15",[1507,"^U",1065,536870920]],["^15",[1507,"^U",1073,536870920]],["^15",[1507,"^U",1296,536870920]],["^15",[1507,"^H",1065,536870920]],["^15",[1507,"^H",1296,536870920]],["^15",[1507,"^;","~u655b737b-da3e-472c-ad6b-13d3250d00d1",536870920]],["^15",[1508,"^Q","",536870920]],["^15",[1508,"^O","^16",536870920]],["^15",[1508,"^F",1513,536870920]],["^15",[1508,"^X",1073,536870920]],["^15",[1508,"^V",1073,536870920]],["^15",[1508,"^U",1073,536870920]],["^15",[1508,"^;","~u655b737b-4ee7-44d0-b83f-012992d0b5f5",536870920]],["^15",[1509,"^Q","~``Drop`` Trait\nThis trait needs implementation for the ``drop`` [[Method]] which takes a mutable [[Borrow]] of ``self`` and then runs some cleanup/deallocation code. The ``drop`` method is called automatically by the Rust compiler when the instance of the type goes out of [[Scope]]. ``Drop`` trait is included in the [[Prelude]]. Basically, the ``drop()`` method is much like a *Destructor* from other languages.\n\nFor ex.:\n```rust\nstruct MyT{ yo:i32 }\nimpl Drop for MyT {\n\tfn drop(&mut self) {\n\t//do something with self.yo. \n }\n}\n```\n\n* Smart-[[Pointer]]s implement this trait.\n\n* We can't explicitly call the ``drop()`` [[Method]] as it leads to the *Double Free* error. So, Rust provides a way to let the compiler know as well as call it early. It is the ``std::mem::drop(<value of type T that implements Drop>)`` [[Function]] in the [[Prelude]].\nFor ex.:\n```rust\nfn main() {\n let x = Box::new(2);\n drop(x); //works\n}\n```",536870920]],["^15",[1509,"^O","^16",536870920]],["^15",[1509,"^F",1505,536870920]],["^15",[1509,"^X",1073,536870920]],["^15",[1509,"^V",1073,536870920]],["^15",[1509,"^U",163,536870920]],["^15",[1509,"^U",345,536870920]],["^15",[1509,"^U",1065,536870920]],["^15",[1509,"^U",1073,536870920]],["^15",[1509,"^U",1094,536870920]],["^15",[1509,"^U",1117,536870920]],["^15",[1509,"^U",1212,536870920]],["^15",[1509,"^H",163,536870920]],["^15",[1509,"^H",345,536870920]],["^15",[1509,"^H",1065,536870920]],["^15",[1509,"^H",1094,536870920]],["^15",[1509,"^H",1117,536870920]],["^15",[1509,"^H",1212,536870920]],["^15",[1509,"^;","~u655b737b-3606-47a1-8a01-14a24ea2e7a4",536870920]],["^15",[1510,"^Q","Traits are defined using ``trait``, and then for a type they are implemented using ``impl`` blocks.\nMuch like *interface*s, ``trait``s can just define the [[Method]] Signatures, and the actual implementation for the methods can be given by the type implementing the  Trait.\n\nSyntax:\n``\n<Optional Access Modifier> trait <trait name> {\n fn <method 1 name>(<params>)-> <Optional Return Type>;\n //can define a default implementation\nfn <method 2 name>(<params>)-> <Optional Return Type> { } //ok\n ...\n  fn <method n name>(<params>)-> <Optional Return Type>;\n}\n``\nAnd then to implement them,\n\n``\nimpl <trait name> for <Struct/Enum name> {\n <Method 1 definition>{...}\n  <Method 2 definition>{...}\n ...\n  <Method n definition>{...}\n}\n``\n\nFor ex.:\n```rust\npub trait Dance{\n fn move(&Self)-> i32;\n \n}\n\nstruct X{\n x:i32,\n}\n\nimpl Dance for X {\n fn move(&self)-> i32 {\n 2+2\n }\n}\n\nfn main() {\n let x= X{2};\n x.move(); //works\n}\n```\n\nThe [[Access Modifier]]s are applied to trait definitions too and they are *private* by default, so if a [[Crate]]/ [[Module]] has a private trait then it can't be used by an external [[Crate]] to implement the trait on its types, this doesn't mean private traits defined for public types have their implementations hidden, the implemented methods are still available to external [[Crate]]s.",536870920]],["^15",[1510,"^O","^16",536870920]],["^15",[1510,"^F",1506,536870920]],["^15",[1510,"^X",1073,536870920]],["^15",[1510,"^V",1073,536870920]],["^15",[1510,"^U",287,536870920]],["^15",[1510,"^U",1062,536870920]],["^15",[1510,"^U",1063,536870920]],["^15",[1510,"^U",1065,536870920]],["^15",[1510,"^U",1073,536870920]],["^15",[1510,"^H",287,536870920]],["^15",[1510,"^H",1062,536870920]],["^15",[1510,"^H",1063,536870920]],["^15",[1510,"^H",1065,536870920]],["^15",[1510,"^;","~u655b737b-0337-4752-893b-f989922928e2",536870920]],["^15",[1511,"^Q","Derivable Traits\nBy using ``#[derive]`` [[Macro Attribute]] we can make our [[Data Type]]s automatically implement a given trait. This only works for a few basic traits like ``PartialEq``. \nFor ex.:\n```rust\n#[derive(PartialEq, Debug)]\nstruct X{}\n```\n\nThese are some more derivable traits\n* Comparison traits: [`Eq`](https://doc.rust-lang.org/std/cmp/trait.Eq.html), [`PartialEq`](https://doc.rust-lang.org/std/cmp/trait.PartialEq.html), [`Ord`](https://doc.rust-lang.org/std/cmp/trait.Ord.html), [`PartialOrd`](https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html).\n* [`Clone`](https://doc.rust-lang.org/std/clone/trait.Clone.html), to create `T` from `&T` via a copy.\n* [`Copy`](https://doc.rust-lang.org/core/marker/trait.Copy.html), to give a type 'copy semantics' instead of 'move semantics'.\n* [`Hash`](https://doc.rust-lang.org/std/hash/trait.Hash.html), to compute a hash from `&T`.\n* [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html), to create an empty instance of a data type.\n* [`Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html), to format a value using the `{:?}` formatter.",536870920]],["^15",[1511,"^O","^16",536870920]],["^15",[1511,"^F",1518,536870920]],["^15",[1511,"^X",1073,536870920]],["^15",[1511,"^V",1073,536870920]],["^15",[1511,"^U",1073,536870920]],["^15",[1511,"^U",1090,536870920]],["^15",[1511,"^U",1312,536870920]],["^15",[1511,"^H",1090,536870920]],["^15",[1511,"^H",1312,536870920]],["^15",[1511,"^;","~u655b737b-9389-477a-9062-74c6c3c8a759",536870920]],["^15",[1512,"^Q","Multiple Traits for [[Generic Type]]s definition are combined with the ``+`` [[Operator]]\n\nFor ex.:\n```rust\ntrait X{}\ntrait Y{}\npb fn yo<T: X+Y>() {}\n```",536870920]],["^15",[1512,"^O","^16",536870920]],["^15",[1512,"^F",1514,536870920]],["^15",[1512,"^X",1073,536870920]],["^15",[1512,"^V",1073,536870920]],["^15",[1512,"^U",339,536870920]],["^15",[1512,"^U",1073,536870920]],["^15",[1512,"^U",1087,536870920]],["^15",[1512,"^H",339,536870920]],["^15",[1512,"^H",1087,536870920]],["^15",[1512,"^;","~u655b737b-8e38-44a4-aae5-3b1a7fdeb9b8",536870920]],["^15",[1513,"^Q","~``Stream`` \nJust like [[Iterator]]s, but uses [[Async and Await]] and [[Future]]s. \nFor ex.:\n```rust\nasync fn send_recv() {\n    const BUFFER_SIZE: usize = 10;\n    let (mut tx, mut rx) = mpsc::channel::<i32>(BUFFER_SIZE);\n \n    tx.send(1).await.unwrap();\n    tx.send(2).await.unwrap();\n    drop(tx);\n \n    // `StreamExt::next` is similar to `Iterator::next`, but returns a\n    // type that implements `Future<Output = Option<T>>`.\n    assert_eq!(Some(1), rx.next().await);\n    assert_eq!(Some(2), rx.next().await);\n    assert_eq!(None, rx.next().await);\n}\n```\nor \nwhen used in a [[Loop]],\n```rust\nasync fn sum_with_next(mut stream: Pin<&mut dyn Stream<Item = i32>>) -> i32 {\n    use futures::stream::StreamExt; // for `next`\n    let mut sum = 0;\n    while let Some(item) = stream.next().await {\n        sum += item;\n    }\n    sum\n}\n//for loop doesn’t work with stream. \n```",536870920]],["^15",[1513,"^O","^16",536870920]],["^15",[1513,"^F",1503,536870920]],["^15",[1513,"^X",1073,536870920]],["^15",[1513,"^V",1073,536870920]],["^15",[1513,"^U",300,536870920]],["^15",[1513,"^U",1073,536870920]],["^15",[1513,"^U",1097,536870920]],["^15",[1513,"^U",1100,536870920]],["^15",[1513,"^U",1161,536870920]],["^15",[1513,"^H",300,536870920]],["^15",[1513,"^H",1097,536870920]],["^15",[1513,"^H",1100,536870920]],["^15",[1513,"^H",1161,536870920]],["^15",[1513,"^;","~u655b737b-1938-4c11-8b21-b0d3cba660c0",536870920]],["^15",[1514,"^Q","Conditionally implementing [[Method]]s and Traits for custom [[Data Type]]s\nUsing ``Trait Bound`` Syntax, we can define methods or traits for types that have\ngiven traits.\nFor ex.:\n```rust\nstruct X<T> {…}\ntrait Y {}\ntrait Z {\nfn na() {}\n}\n\nimpl<T: Y> X<T> {\n\tfn yo() { }\n}\n\nimpl<T: Y> Z for X<T> {\n\t\n}\n\nimpl<T> Y for X<T> {\n\n}\n```\nFor a type ``T`` used to create the object of ``X``, the method ``yo()`` can only be called if ``T`` implements the trait ``Y`` and the methods of trait ``Z``, i.e., ``na()`` can only be called if ``T`` implements the trait ``Y``.\n\nThis is how we conditionally implement [[Method]]s/Traits for a [[Data Type]]. Yes, this condition is resolved at compile-time itself as the concrete definitions are put in by the compiler.\n\n* Blanket Implementation\nWe can also apply traits to [[Generic Type]]s directly. These are known as blanket implementations as they apply a trait to multiple types.\n\nFor ex.:\n```rust\nimpl<T: Display> ToString for T {\n    // --snip--\n}\n```\nThis is how the ``ToString`` trait is already applied in the [[Standard Library]], for any [[Data Type]] that implements the trait ``Display``, the trait ``ToString`` is automatically applied. Similarly we can apply our own traits to multiple types at once too.",536870920]],["^15",[1514,"^O","^16",536870920]],["^15",[1514,"^F",1517,536870920]],["^15",[1514,"^X",1073,536870920]],["^15",[1514,"^V",1073,536870920]],["^15",[1514,"^U",1065,536870920]],["^15",[1514,"^U",1073,536870920]],["^15",[1514,"^U",1087,536870920]],["^15",[1514,"^U",1090,536870920]],["^15",[1514,"^U",1096,536870920]],["^15",[1514,"^H",1065,536870920]],["^15",[1514,"^H",1087,536870920]],["^15",[1514,"^H",1090,536870920]],["^15",[1514,"^H",1096,536870920]],["^15",[1514,"^;","~u655b737b-aa16-4a55-8da5-e37319bd4b96",536870920]],["^15",[1515,"^Q","Orphan Rule\nThis is part of a property called [[coherence]]. According to it, a ``trait`` can be implemented for a type iff either the trait or the [[Data Type]] is local to the [[Crate]] (defined in the same [[Crate]]). \n\nFor ex.:\nIf crate ``A`` defines a trait ``X`` then it can define the trait ``X`` for any [[Data Type]] , local or external, such as a type ``T`` from crate ``B``. \nSimilarly, if crate ``A`` defines a type ``T`` then it can implement trait ``X`` defined in crate B for its type ``T``. \nBut if crate ``C`` defines neither type ``T`` or trait ``X`` but takes them from crate ``A`` and ``B``, i.e., both are external then this is not allowed according to this rule.\n\nThis is to ensure the Parent type exists, and other people’s code can’t break our own or theirs because a trait/type is defined at a place different from the crate where it is created.\n\n* Newtype Pattern: It is possible to avoid the Orphan Rule by simply wrapping the external type ``T`` in a new type and then implementing a trait on this new type. It's called so because of a similar pattern in Haskell.\nFor ex.:\n```rust\nuse std::fmt;\n \nstruct Wrapper{\n    v: Vec<String>\n}\n \nimpl fmt::Display for Wrapper {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"[{}]\", self.v.join(\", \"))\n    }\n}\n \nfn main() {\n    let w = Wrapper{v:vec![String::from(\"hello\"), String::from(\"world\")]};\n    println!(\"w = {}\", w);\n}\n\n```",536870920]],["^15",[1515,"^O","^16",536870920]],["^15",[1515,"^F",1504,536870920]],["^15",[1515,"^X",1073,536870920]],["^15",[1515,"^V",1073,536870920]],["^15",[1515,"^U",1063,536870920]],["^15",[1515,"^U",1073,536870920]],["^15",[1515,"^U",1090,536870920]],["^15",[1515,"^U",1500,536870920]],["^15",[1515,"^H",1063,536870920]],["^15",[1515,"^H",1090,536870920]],["^15",[1515,"^H",1500,536870920]],["^15",[1515,"^;","~u655b737b-0115-4ee1-8095-16541a11cdb8",536870920]],["^15",[1516,"^Q","All [[Method]]s in a trait definition without a default implementation need to be defined when the trait is implemented for a [[Data Type]].",536870920]],["^15",[1516,"^O","^16",536870920]],["^15",[1516,"^F",1501,536870920]],["^15",[1516,"^X",1073,536870920]],["^15",[1516,"^V",1073,536870920]],["^15",[1516,"^U",1065,536870920]],["^15",[1516,"^U",1073,536870920]],["^15",[1516,"^U",1090,536870920]],["^15",[1516,"^H",1065,536870920]],["^15",[1516,"^H",1090,536870920]],["^15",[1516,"^;","~u655b737b-b278-41e7-8484-7b01880b8ddc",536870920]],["^15",[1517,"^Q","[[Function]]/ [[Method]] Parameters/Return Types can use [[Trait]]s too\nWhen Parameters use traits, they require the type of object being passed as argument to implement the trait(s).\nThese are simply a syntax sugar for using [[Generic Type]]s, aka ``Trait Bound`` Syntax.\n\nSyntax:\n\n``\nfn <somename>(<param name>: <optional reference &> impl <trait name> + <any other trait> + .., <param 2>) {...}\n``\n\nFor ex.:\n```rust\npub trait X {\n fn notify() {}\n}\npub fn notify(item: &impl X) { //Requires the type of object being passed to notify() to implement the trait X\n    println!(\"Breaking news! {}\", item.notify());\n}\n```\n\n* ``Trait Bound`` Syntax: \nThe ``impl Trait`` is simply a syntax sugar for a longer syntax which is just the [[Generic Type]] syntax.\n\nFor ex.:\n```rust\npub trait X {\n fn notify() {}\n}\npub fn notify<T: X>(item: &T) { \n    println!(\"Breaking news! {}\", item.notify());\n}\n```\nThere's a slight difference between the 2 syntaxes, the ``impl Trait`` syntax requires simply the type of the argument object to implement the trait, but it doesn't require the object's types to be the same.\nFor ex.:\n```rust\npub trait X {\n fn notify() {}\n}\npub fn notify<T: X>(item: &T, item2: &T) {  //accepts a single type T and that T must be the same for both the args/params\n}\npub fn notify(item: &impl X, item2: &impl X) {  //accepts 2 types, they can be the same, they just need to implement the trait X\n}\n\n```\n\n* The Return types can use the ``impl Trait`` and [[Generic Type]]s too\nHowever, there's a limitation with the Rust Compiler that disallows different code paths returning different types. All code paths in a [[Function]]/ [[Method]] must return the same [[Data Type]] object, and that type must implement the given trait(s). \nFor ex.:\n```rust\npub trait X {}\n\nstruct A{ }\n\nimpl X for A {}\n\nstruct B{ }\n\nimpl X for B {}\n\nfn yo()-> impl X {\n if (1==2) {\n   return A{};\n  }\nelse {\n  return B{};\n }\n}\n//whilst it should work, doesn't. Gives an error as both must return the same type of object.\n```",536870920]],["^15",[1517,"^O","^16",536870920]],["^15",[1517,"^F",1520,536870920]],["^15",[1517,"^X",1073,536870920]],["^15",[1517,"^V",1073,536870920]],["^15",[1517,"^U",163,536870920]],["^15",[1517,"^U",1065,536870920]],["^15",[1517,"^U",1073,536870920]],["^15",[1517,"^U",1087,536870920]],["^15",[1517,"^U",1090,536870920]],["^15",[1517,"^H",163,536870920]],["^15",[1517,"^H",1065,536870920]],["^15",[1517,"^H",1073,536870920]],["^15",[1517,"^H",1087,536870920]],["^15",[1517,"^H",1090,536870920]],["^15",[1517,"^;","~u655b737b-a984-4088-9353-698cb44b55ab",536870920]],["^15",[1518,"^Q","Common Traits in the [[Standard Library]] \n* ``Copy``\nThe ``Copy`` trait can only be implemented for a [[Data Type]] if it doesn't implement the ``Drop`` Trait.\n\n* ``Sized``\nThis trait is automatically applied to all types whose size is known at compile time. We can apply it to [[Generic Type]]s and custom [[Data Type]]s too .\n \nFor ex.:\n```rust\nfn yo<T> (a: T) {}\n//is actually\n//fn yo <T:Sized> (a:T) {…}\n\n//Hence\n//fn yo<T: ?Sized> (a: &T) {…} //allows DSTs to be passed to yo as well\n```\nThe ``?<trait>`` syntax says ``T`` may or may not implement the ``Sized`` trait. This syntax is only applicable for ``Sized`` trait. We can pass [[Dynamically Sized Type]]s using this trait.",536870920]],["^15",[1518,"^O","^16",536870920]],["^15",[1518,"^F",1519,536870920]],["^15",[1518,"^X",1073,536870920]],["^15",[1518,"^V",1073,536870920]],["^15",[1518,"^U",1073,536870920]],["^15",[1518,"^U",1087,536870920]],["^15",[1518,"^U",1090,536870920]],["^15",[1518,"^U",1096,536870920]],["^15",[1518,"^U",1223,536870920]],["^15",[1518,"^H",1087,536870920]],["^15",[1518,"^H",1090,536870920]],["^15",[1518,"^H",1096,536870920]],["^15",[1518,"^H",1223,536870920]],["^15",[1518,"^;","~u655b737b-c09f-4ad3-8967-5b300658736f",536870920]],["^15",[1519,"^Q","[[Generic Type]]s can use traits, and traits can use generics too.\nFor ex.:\n```rust\npub trait X<T> {\n    fn yo(x: T);\n    fn no(&self, x: T);\n    fn ok() -> Option<T>;\n    fn lol(&self) -> Option<T>;\n}\n\nstruct A {}\n\nimpl<T> X<T> for A {\n    fn yo(x: T) {}\n    fn no(&self, x: T) {}\n    fn ok() -> Option<T> {\n        None\n    }\n    fn lol(&self) -> Option<T> {\n        None\n    }\n}\n\nstruct B {}\n\nimpl X<i32> for B {\n    fn yo(x: i32) {}\n    fn no(&self, x: i32) {\n        println!(\"yo no\");\n    }\n    fn ok() -> Option<i32> {\n        println!(\"ok\");\n        None\n    }\n    fn lol(&self) -> Option<i32> {\n        None\n    }\n}\n\nfn main() {\n    let a = A {};\n    a.no(2);\n    A::yo(4);\n    A::ok() as Option<i32>;\n    a.lol() as Option<i32>;\n\n    let b = B {};\n    b.no(2);\n    //b.no(\"ab\"); //error\n    //B::ok() as Option<f64>; //error\n} // works\n\n```\nJust like [[Method]] ``impl`` blocks we can conditionally define traits for [[Data Type]]s too. \nHowever, generics or not, a trait can only be implemented once for any [[Data Type]]. So if we conditionally define a trait for a type, then it's methods are only available for that type.\n\n* [[Associated Type]]s provide an alternative to using traits with generics. The benefit of using associated types is that the caller code has no need of knowing the type or defining it, it is all handled by the type implementing the trait itself.",536870920]],["^15",[1519,"^O","^16",536870920]],["^15",[1519,"^F",1512,536870920]],["^15",[1519,"^X",1073,536870920]],["^15",[1519,"^V",1073,536870920]],["^15",[1519,"^U",1065,536870920]],["^15",[1519,"^U",1073,536870920]],["^15",[1519,"^U",1086,536870920]],["^15",[1519,"^U",1087,536870920]],["^15",[1519,"^U",1090,536870920]],["^15",[1519,"^H",1065,536870920]],["^15",[1519,"^H",1086,536870920]],["^15",[1519,"^H",1087,536870920]],["^15",[1519,"^H",1090,536870920]],["^15",[1519,"^;","~u655b737b-5da4-47fd-b892-c9e93ca417fc",536870920]],["^15",[1520,"^Q","~``self``\nWe use ``self`` in a trait to pass an instance of the type to the function, allowing us to call other [[Method]]s and fields.\nWhile this means we can’t access a type-specific method/field in a trait’s default method, we can access trait-specific methods because of it. \nFor ex.:\n```rust\npub trait X {\n    fn na();\n    fn ya(&self);\n    fn yo(&self) -> String {\n        Self::na();\n        self.ya();\n        return \"na\".to_string();\n    } //works because self will always have na() and ya() as it’s defined on trait itself.\n    fn ayo(&mut self);\n}\n\nstruct A {\n    x: i32,\n}\n\nimpl X for A {\n    fn na() {}\n    fn ya(&self) {}\n    fn ayo(&mut self) {\n        self.x += 2;\n    }\n}\n\nfn main() {\n    let mut a = A { x: 2 };\n    a.ayo();\n}\n```\nHowever, non-default implemented trait methods can access instance fields and methods.",536870920]],["^15",[1520,"^O","^16",536870920]],["^15",[1520,"^F",1515,536870920]],["^15",[1520,"^X",1073,536870920]],["^15",[1520,"^V",1073,536870920]],["^15",[1520,"^U",1065,536870920]],["^15",[1520,"^U",1073,536870920]],["^15",[1520,"^H",1065,536870920]],["^15",[1520,"^;","~u655b737b-a7cb-4c35-8495-b23ab9b0e78a",536870920]],["^15",[1521,"^Q","~``Send`` and ``Sync`` Traits\nDefined in ``std::marker``.\n\nThe send trait indicates the [[Ownership]] of the [[Data Type]] that implements it can be transferred between threads. Almost all types in Rust implement it, but not types such as [[Rc<T>]]. \n\nSimilarly, the sync trait indicates the type implementing it is safe to be accessed from multiple threads. \n\n* Both of these are known as marker traits as they are in the marker Module and they have no [[Method]]s to implement either, they just mark a type and are used to indicate rust's concurrency rules are followed. \nStill, we can have custom implementation for both but that is part of [[unsafe]] Rust. \n* All primitive types implement both of these. \n* If a type is composed only of Send Trait implementing types then that type implicitly implements the send trait as well. Same with Sync trait as well.\n* These traits are [[unsafe]].",536870920]],["^15",[1521,"^O","^16",536870920]],["^15",[1521,"^F",1509,536870920]],["^15",[1521,"^X",1073,536870920]],["^15",[1521,"^V",1073,536870920]],["^15",[1521,"^U",1065,536870920]],["^15",[1521,"^U",1073,536870920]],["^15",[1521,"^U",1075,536870920]],["^15",[1521,"^U",1090,536870920]],["^15",[1521,"^U",1160,536870920]],["^15",[1521,"^U",1296,536870920]],["^15",[1521,"^H",1065,536870920]],["^15",[1521,"^H",1075,536870920]],["^15",[1521,"^H",1090,536870920]],["^15",[1521,"^H",1160,536870920]],["^15",[1521,"^H",1296,536870920]],["^15",[1521,"^;","~u655b737b-2ec8-4330-9641-ed7a9f3d478f",536870920]],["^15",[1522,"^3","- Fixed-size, multi-type and immutable.\n  Syntax ``<let/const> <mutability> <varname>: (<type1>, <type2>...,<type n>) = (<value of type 1>, <value of type 2>..., <value of type n>)``\n  For ex.:\n  ```rust\n  let tup: (u8, bool, f32)= (1, true, 2.0);  //to declare\n  let x =tup.0; //to access\n  ```\n  A single variable can bind to a tuple with multiple values/types is because a tuple is seen as a single compound element, so the variable binds to that.\n- Defining the types is optional as they can be automatically inferred too.\n- We access a tuple's values by its indices and using the ``.`` [[Operator]] on its variable, this is called tuple indexing. Indices start at 0.\n  Alternative, we can also use [[Pattern Matching]] to get a bind multiple variables to an entire tuple.\n  For ex.:\n  ```rust\n      let tup = (500, 6.4, 1);\n  \n      let (x, y, z) = tup;\n      let k= tup.0; //access by index\n  ```\n  This is called Tuple [[Destructuring]] because we destructure a single variable into multiple variables.\n-\n-",536870920]],["^15",[1522,"^17",1700492155830,536870920]],["^15",[1522,"^Z","Rust/pages/Tuple.md",536870920]],["^15",[1523,"^Q","Fixed-size, multi-type and immutable.\nSyntax ``<let/const> <mutability> <varname>: (<type1>, <type2>...,<type n>) = (<value of type 1>, <value of type 2>..., <value of type n>)``\nFor ex.:\n```rust\nlet tup: (u8, bool, f32)= (1, true, 2.0);  //to declare\nlet x =tup.0; //to access\n```\nA single variable can bind to a tuple with multiple values/types is because a tuple is seen as a single compound element, so the variable binds to that.",536870920]],["^15",[1523,"^O","^16",536870920]],["^15",[1523,"^F",1159,536870920]],["^15",[1523,"^X",1159,536870920]],["^15",[1523,"^V",1159,536870920]],["^15",[1523,"^U",1159,536870920]],["^15",[1523,"^;","~u655b737b-f4bd-4fbf-a5ed-9c3eacb3db7f",536870920]],["^15",[1524,"^Q","Defining the types is optional as they can be automatically inferred too.",536870920]],["^15",[1524,"^O","^16",536870920]],["^15",[1524,"^F",1523,536870920]],["^15",[1524,"^X",1159,536870920]],["^15",[1524,"^V",1159,536870920]],["^15",[1524,"^U",1159,536870920]],["^15",[1524,"^;","~u655b737b-d3ee-4a8f-9f87-0ce34c871021",536870920]],["^15",[1525,"^Q","We access a tuple's values by its indices and using the ``.`` [[Operator]] on its variable, this is called tuple indexing. Indices start at 0.\nAlternative, we can also use [[Pattern Matching]] to get a bind multiple variables to an entire tuple.\nFor ex.:\n```rust\n    let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n    let k= tup.0; //access by index\n```\nThis is called Tuple [[Destructuring]] because we destructure a single variable into multiple variables.",536870920]],["^15",[1525,"^O","^16",536870920]],["^15",[1525,"^F",1524,536870920]],["^15",[1525,"^X",1159,536870920]],["^15",[1525,"^V",1159,536870920]],["^15",[1525,"^U",339,536870920]],["^15",[1525,"^U",574,536870920]],["^15",[1525,"^U",1159,536870920]],["^15",[1525,"^U",1253,536870920]],["^15",[1525,"^H",339,536870920]],["^15",[1525,"^H",574,536870920]],["^15",[1525,"^H",1253,536870920]],["^15",[1525,"^;","~u655b737b-b3a4-4cc8-ae72-9b0b48185ab7",536870920]],["^15",[1526,"^Q","",536870920]],["^15",[1526,"^O","^16",536870920]],["^15",[1526,"^F",1525,536870920]],["^15",[1526,"^X",1159,536870920]],["^15",[1526,"^V",1159,536870920]],["^15",[1526,"^U",1159,536870920]],["^15",[1526,"^;","~u655b737b-ac02-42ff-a3e0-be48cb441fe4",536870920]],["^15",[1527,"^Q","",536870920]],["^15",[1527,"^O","^16",536870920]],["^15",[1527,"^F",1526,536870920]],["^15",[1527,"^X",1159,536870920]],["^15",[1527,"^V",1159,536870920]],["^15",[1527,"^U",1159,536870920]],["^15",[1527,"^;","~u655b737b-d019-4737-a54d-db8067d3e371",536870920]],["^15",[1528,"^3","- Just like *typedef* in *C++*, we can have aliases for [[Data Type]]s in Rust.\n  The syntax is much like [[Associated Type]]s.\n  \n  For ex.:\n  ```rust\n  fn main() {\n   type yo= i32;\n   let x: i32= 2;\n   let y: yo = 4;\n   println!(\"{}\",x+y ); \n  } //works\n  ```",536870920]],["^15",[1528,"^17",1700492155842,536870920]],["^15",[1528,"^Z","Rust/pages/Type Alias.md",536870920]],["^15",[1529,"^Q","Just like *typedef* in *C++*, we can have aliases for [[Data Type]]s in Rust.\nThe syntax is much like [[Associated Type]]s.\n\nFor ex.:\n```rust\nfn main() {\n type yo= i32;\n let x: i32= 2;\n let y: yo = 4;\n println!(\"{}\",x+y ); \n} //works\n```",536870920]],["^15",[1529,"^O","^16",536870920]],["^15",[1529,"^F",1225,536870920]],["^15",[1529,"^X",1225,536870920]],["^15",[1529,"^V",1225,536870920]],["^15",[1529,"^U",1086,536870920]],["^15",[1529,"^U",1090,536870920]],["^15",[1529,"^U",1225,536870920]],["^15",[1529,"^H",1086,536870920]],["^15",[1529,"^H",1090,536870920]],["^15",[1529,"^;","~u655b737b-7e9d-410a-81ef-35b16476d7dd",536870920]],["^15",[1530,"^3","- The Unit [[Data Type]]\n  This is a data type in [[Rust]] that is simply a [[Tuple]] with neither any type nor any value. So the type and value both become ``( )``.\n  For ex.:\n  ```rust\n  let tup: () = (); //ok\n  ```",536870920]],["^15",[1530,"^17",1700492155852,536870920]],["^15",[1530,"^Z","Rust/pages/Unit Type.md",536870920]],["^15",[1531,"^Q","The Unit [[Data Type]]\nThis is a data type in [[Rust]] that is simply a [[Tuple]] with neither any type nor any value. So the type and value both become ``( )``.\nFor ex.:\n```rust\nlet tup: () = (); //ok\n```",536870920]],["^15",[1531,"^O","^16",536870920]],["^15",[1531,"^F",1264,536870920]],["^15",[1531,"^X",1264,536870920]],["^15",[1531,"^V",1264,536870920]],["^15",[1531,"^U",1090,536870920]],["^15",[1531,"^U",1159,536870920]],["^15",[1531,"^U",1264,536870920]],["^15",[1531,"^U",1431,536870920]],["^15",[1531,"^H",1090,536870920]],["^15",[1531,"^H",1159,536870920]],["^15",[1531,"^H",1431,536870920]],["^15",[1531,"^;","~u655b737b-81d8-4c19-b2eb-e1f44514996c",536870920]],["^15",[1532,"^3","- ``<T obj>.unwrap()`` or ``<Tobj>.unwrap_or(<V>)``\n  Works when T is [[Option Type]] or [[Result Type]].\n  There are other ``unwrap`` [[Method]]s too.\n- ``.unwrap()``\n  if the value is an ``Ok``/``Some`` it doesn't do anything. If it is ``Err``/``None`` then it [[Panic]]s.\n- ``.unwrap_or(<V value>)``\n  if the value is an ``Ok``/Some it doesn't do anything. If it is ``Err``/``Some`` then it returns the given value.\n- ``.unwrap_or_else(<closure>)`` \n  Takes a [[Closure]], runs it and returns its value if ``Err``/``None``.",536870920]],["^15",[1532,"^17",1700492155864,536870920]],["^15",[1532,"^Z","Rust/pages/Unwrap.md",536870920]],["^15",[1533,"^Q","~``<T obj>.unwrap()`` or ``<Tobj>.unwrap_or(<V>)``\nWorks when T is [[Option Type]] or [[Result Type]].\nThere are other ``unwrap`` [[Method]]s too.",536870920]],["^15",[1533,"^O","^16",536870920]],["^15",[1533,"^F",1173,536870920]],["^15",[1533,"^X",1173,536870920]],["^15",[1533,"^V",1173,536870920]],["^15",[1533,"^U",1065,536870920]],["^15",[1533,"^U",1098,536870920]],["^15",[1533,"^U",1173,536870920]],["^15",[1533,"^U",1254,536870920]],["^15",[1533,"^H",1065,536870920]],["^15",[1533,"^H",1098,536870920]],["^15",[1533,"^H",1254,536870920]],["^15",[1533,"^;","~u655b737b-a3d0-4405-a229-4eb126d1fe35",536870920]],["^15",[1534,"^Q","~``.unwrap()``\nif the value is an ``Ok``/``Some`` it doesn't do anything. If it is ``Err``/``None`` then it [[Panic]]s.",536870920]],["^15",[1534,"^O","^16",536870920]],["^15",[1534,"^F",1533,536870920]],["^15",[1534,"^X",1173,536870920]],["^15",[1534,"^V",1173,536870920]],["^15",[1534,"^U",1080,536870920]],["^15",[1534,"^U",1173,536870920]],["^15",[1534,"^H",1080,536870920]],["^15",[1534,"^;","~u655b737b-8abc-42fc-9587-107c45f88f9a",536870920]],["^15",[1535,"^Q","~``.unwrap_or(<V value>)``\nif the value is an ``Ok``/Some it doesn't do anything. If it is ``Err``/``Some`` then it returns the given value.",536870920]],["^15",[1535,"^O","^16",536870920]],["^15",[1535,"^F",1534,536870920]],["^15",[1535,"^X",1173,536870920]],["^15",[1535,"^V",1173,536870920]],["^15",[1535,"^U",1173,536870920]],["^15",[1535,"^;","~u655b737b-c614-4b08-a2e0-b20a5d42640e",536870920]],["^15",[1536,"^Q","~``.unwrap_or_else(<closure>)`` \nTakes a [[Closure]], runs it and returns its value if ``Err``/``None``.",536870920]],["^15",[1536,"^O","^16",536870920]],["^15",[1536,"^F",1535,536870920]],["^15",[1536,"^X",1173,536870920]],["^15",[1536,"^V",1173,536870920]],["^15",[1536,"^U",1093,536870920]],["^15",[1536,"^U",1173,536870920]],["^15",[1536,"^H",1093,536870920]],["^15",[1536,"^;","~u655b737b-e309-4a33-8a96-ba565d09ddf6",536870920]],["^15",[1537,"^3","- Variables in rust are immutable by default, meaning their value can’t be updated after initializing them once.\n  For ex.:\n  ```rust\n  let x: i32;\n  x=6; //works\n  x=7 //error.\n  ```\n  Declaration syntax is simply ``<let/const> <optional mut> <varname>: <var type> = <optional value>``.\n- NNBD\n  Rust is non-nullable by default, infact even the concept of ``null`` doesn’t exist in Rust. Every variable must either have a value or a type defined at-least and every variable must be assigned a value before being used. All of this is checked during compile time itself, and after compilation a variable must have a type. \n  For ex.:\n  ```rust\n  let y; // error as y doesn’t have a type\n  let z: i32; //ok\n  let x;\n  x=2; //ok and x’s type is inferred as i32.\n  let a:i32;\n  let b= a; //error as a doesn’t have a value.\n  let m=2; //ok and m’s type is inferred as i32.\n  ```\n- Mutable Variables\n  ``let mut <varname>:<var type>;``\n  \n  Whilst mutable variables allow reassignment of value, they forbade the reassignment of types so the variable can only get a value of the same type.\n- Constant\n  ``const <varname>:<type>= <value>;``\n  \n  Unlike variables created with ``let``, ``const`` vars are always immutable. Another feature of const is that it allows constant expressions like C++. So \n  ```rust\n  const ABC: u32 = 2*2*3+3; //works\n  ```\n- Shadowing\n  Allowed, even in the same [[Scope]].\n  We can create a new variable with the same name as a previous one. The new variable ‘overshadows’ the older one and will be accessed when called later in the scope instead of the variable being shadowed. The overshadowing variable won’t be accessed if not in present or parent [[Scope]]. This allows us to use some cool things like\n  ```rust\n  let spaces = \"   \";\n  let spaces = spaces.len();\n  ```\n  The first spaces is of type [[String]] while the latter is a [[Number]] [[Data Type]] .\n- Data types\n  Rust is a statically typed language, meaning the type of values must be resolved at compile time. Explicitly specifying a type isn’t required as the compiler can infer the type of a variable automatically. It is a bit more powerful than other languages as type can be inferred even after the declaration of variable. However, types must be specified when multiple types are possible from an expression. \n  For ex.\n  ```rust\n  #![allow(unused)]\n  fn main() {\n  let guess: u32 = \"42\".parse().expect(\"Not a number!\"); //works\n  }\n  ```\n  If we remove the type then it throws an [[Error]]. This is to say, the parse() [[Function]] picks up the \n   type given to the variable. The compiler passes the type given to the receiver to the function for its [[Generic Type]]s, so parse knows it has to work for [[Number]] [[Data Type]] ``u32``.\n- *Static Variable*s\n  Rust allows global variables, i.e., variables in the global [[Scope]]. They have be to declared with the ``static`` keyword. However, using them isn't a best practice as if we use them with [[Thread]]s, multiple threads accessing the same Global variables can cause *Data Race*.\n  Static variables can only have static [[Lifetime]]s and hence can only have values given at compile-time.\n  \n  \n  Syntax:\n  ``\n  static <optional mut> <varname>:<vartype>= <value>;\n  ``\n  For ex.\n  ```rust\n  static HELLO_WORLD: &str = \"Hello, world!\";\n  static mut YO: u32=0; \n  fn main() {\n      println!(\"name is: {}\", HELLO_WORLD);\n      unsafe {\n      YO= 2;\n       println!(\"yo: {}\", YO);\n    }\n  }\n  ```\n  It is in [[Default Linter Rule]]s to define static variables in *SCREAMING_SNAKE_CASE*.\n  Accessing/Mutating static variables is [[unsafe]] as it could lead to *Data Race*.\n  \n  * ``static`` variables are different from ``const`` variables as they have a fixed address throughout the runtime, however const variables depend on their [[Scope]] and can have any address as they are initialized/destroyed each time the scope starts/ends.\n-",536870920]],["^15",[1537,"^17",1700492155892,536870920]],["^15",[1537,"^Z","Rust/pages/Variable.md",536870920]],["^15",[1538,"^Q","Variables in rust are immutable by default, meaning their value can’t be updated after initializing them once.\nFor ex.:\n```rust\nlet x: i32;\nx=6; //works\nx=7 //error.\n```\nDeclaration syntax is simply ``<let/const> <optional mut> <varname>: <var type> = <optional value>``.",536870920]],["^15",[1538,"^O","^16",536870920]],["^15",[1538,"^F",161,536870920]],["^15",[1538,"^X",161,536870920]],["^15",[1538,"^V",161,536870920]],["^15",[1538,"^U",161,536870920]],["^15",[1538,"^;","~u655b737b-2647-4980-bd6a-fd1f0671f33e",536870920]],["^15",[1539,"^Q","NNBD\nRust is non-nullable by default, infact even the concept of ``null`` doesn’t exist in Rust. Every variable must either have a value or a type defined at-least and every variable must be assigned a value before being used. All of this is checked during compile time itself, and after compilation a variable must have a type. \nFor ex.:\n```rust\nlet y; // error as y doesn’t have a type\nlet z: i32; //ok\nlet x;\nx=2; //ok and x’s type is inferred as i32.\nlet a:i32;\nlet b= a; //error as a doesn’t have a value.\nlet m=2; //ok and m’s type is inferred as i32.\n```",536870920]],["^15",[1539,"^O","^16",536870920]],["^15",[1539,"^F",1538,536870920]],["^15",[1539,"^X",161,536870920]],["^15",[1539,"^V",161,536870920]],["^15",[1539,"^U",161,536870920]],["^15",[1539,"^;","~u655b737b-d6e8-4cb9-a43b-cb56a143940f",536870920]],["^15",[1540,"^Q","Mutable Variables\n``let mut <varname>:<var type>;``\n\nWhilst mutable variables allow reassignment of value, they forbade the reassignment of types so the variable can only get a value of the same type.",536870920]],["^15",[1540,"^O","^16",536870920]],["^15",[1540,"^F",1539,536870920]],["^15",[1540,"^X",161,536870920]],["^15",[1540,"^V",161,536870920]],["^15",[1540,"^U",161,536870920]],["^15",[1540,"^;","~u655b737b-3de1-431e-a827-6ebff553d743",536870920]],["^15",[1541,"^Q","Constant\n``const <varname>:<type>= <value>;``\n\nUnlike variables created with ``let``, ``const`` vars are always immutable. Another feature of const is that it allows constant expressions like C++. So \n```rust\nconst ABC: u32 = 2*2*3+3; //works\n```",536870920]],["^15",[1541,"^O","^16",536870920]],["^15",[1541,"^F",1540,536870920]],["^15",[1541,"^X",161,536870920]],["^15",[1541,"^V",161,536870920]],["^15",[1541,"^U",161,536870920]],["^15",[1541,"^;","~u655b737b-0fb7-41dc-aeaa-31e9dae25861",536870920]],["^15",[1542,"^Q","Shadowing\nAllowed, even in the same [[Scope]].\nWe can create a new variable with the same name as a previous one. The new variable ‘overshadows’ the older one and will be accessed when called later in the scope instead of the variable being shadowed. The overshadowing variable won’t be accessed if not in present or parent [[Scope]]. This allows us to use some cool things like\n```rust\nlet spaces = \"   \";\nlet spaces = spaces.len();\n```\nThe first spaces is of type [[String]] while the latter is a [[Number]] [[Data Type]] .",536870920]],["^15",[1542,"^O","^16",536870920]],["^15",[1542,"^F",1541,536870920]],["^15",[1542,"^X",161,536870920]],["^15",[1542,"^V",161,536870920]],["^15",[1542,"^U",80,536870920]],["^15",[1542,"^U",161,536870920]],["^15",[1542,"^U",162,536870920]],["^15",[1542,"^U",345,536870920]],["^15",[1542,"^U",1090,536870920]],["^15",[1542,"^H",80,536870920]],["^15",[1542,"^H",162,536870920]],["^15",[1542,"^H",345,536870920]],["^15",[1542,"^H",1090,536870920]],["^15",[1542,"^;","~u655b737b-14b4-418c-a788-ba8cdd1d04f8",536870920]],["^15",[1543,"^Q","Data types\nRust is a statically typed language, meaning the type of values must be resolved at compile time. Explicitly specifying a type isn’t required as the compiler can infer the type of a variable automatically. It is a bit more powerful than other languages as type can be inferred even after the declaration of variable. However, types must be specified when multiple types are possible from an expression. \nFor ex.\n```rust\n#![allow(unused)]\nfn main() {\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\"); //works\n}\n```\nIf we remove the type then it throws an [[Error]]. This is to say, the parse() [[Function]] picks up the \n type given to the variable. The compiler passes the type given to the receiver to the function for its [[Generic Type]]s, so parse knows it has to work for [[Number]] [[Data Type]] ``u32``.",536870920]],["^15",[1543,"^O","^16",536870920]],["^15",[1543,"^F",1542,536870920]],["^15",[1543,"^X",161,536870920]],["^15",[1543,"^V",161,536870920]],["^15",[1543,"^U",161,536870920]],["^15",[1543,"^U",162,536870920]],["^15",[1543,"^U",163,536870920]],["^15",[1543,"^U",340,536870920]],["^15",[1543,"^U",1087,536870920]],["^15",[1543,"^U",1090,536870920]],["^15",[1543,"^H",162,536870920]],["^15",[1543,"^H",163,536870920]],["^15",[1543,"^H",340,536870920]],["^15",[1543,"^H",1087,536870920]],["^15",[1543,"^H",1090,536870920]],["^15",[1543,"^;","~u655b737b-4fc2-442a-a00c-0967f9761096",536870920]],["^15",[1544,"^Q","*Static Variable*s\nRust allows global variables, i.e., variables in the global [[Scope]]. They have be to declared with the ``static`` keyword. However, using them isn't a best practice as if we use them with [[Thread]]s, multiple threads accessing the same Global variables can cause *Data Race*.\nStatic variables can only have static [[Lifetime]]s and hence can only have values given at compile-time.\n\n\nSyntax:\n``\nstatic <optional mut> <varname>:<vartype>= <value>;\n``\nFor ex.\n```rust\nstatic HELLO_WORLD: &str = \"Hello, world!\";\nstatic mut YO: u32=0; \nfn main() {\n    println!(\"name is: {}\", HELLO_WORLD);\n    unsafe {\n    YO= 2;\n     println!(\"yo: {}\", YO);\n  }\n}\n```\nIt is in [[Default Linter Rule]]s to define static variables in *SCREAMING_SNAKE_CASE*.\nAccessing/Mutating static variables is [[unsafe]] as it could lead to *Data Race*.\n\n* ``static`` variables are different from ``const`` variables as they have a fixed address throughout the runtime, however const variables depend on their [[Scope]] and can have any address as they are initialized/destroyed each time the scope starts/ends.",536870920]],["^15",[1544,"^O","^16",536870920]],["^15",[1544,"^F",1543,536870920]],["^15",[1544,"^X",161,536870920]],["^15",[1544,"^V",161,536870920]],["^15",[1544,"^U",161,536870920]],["^15",[1544,"^U",345,536870920]],["^15",[1544,"^U",1074,536870920]],["^15",[1544,"^U",1101,536870920]],["^15",[1544,"^U",1236,536870920]],["^15",[1544,"^U",1296,536870920]],["^15",[1544,"^H",345,536870920]],["^15",[1544,"^H",1074,536870920]],["^15",[1544,"^H",1101,536870920]],["^15",[1544,"^H",1236,536870920]],["^15",[1544,"^H",1296,536870920]],["^15",[1544,"^;","~u655b737b-4a19-4fc8-8212-4931ae05dd77",536870920]],["^15",[1545,"^Q","",536870920]],["^15",[1545,"^O","^16",536870920]],["^15",[1545,"^F",1544,536870920]],["^15",[1545,"^X",161,536870920]],["^15",[1545,"^V",161,536870920]],["^15",[1545,"^U",161,536870920]],["^15",[1545,"^;","~u655b737b-5dca-41d5-83ee-de468da70147",536870920]],["^15",[1546,"^3","- Just like vectors in C++. Contiguous blocks of dynamically allocated memory with same [[Data Type]]s. \n  They are defined as ``Vec<T>`` [[Struct]].\n  For ex.:\n  ```rust\n     let v: Vec<i32> = Vec::new(); //new empty vector\n  ```\n  Here defining the type is necessary as that is specifying the type for the [[Generic Type]] used in ``Vec::new()``, however Rust can infer the type automatically if the vector is initialized with some value or if the vector receives values after initialization.\n  For ex.:\n  ```rust\n  let mut v= Vec::new();\n  v.push(2); //ok\n  let v2= Vec::from([1,2]); //ok\n  ```\n  The variable must be mutable to make the vector mutable.\n- We can also use the ``vec!`` [[Macro]] to initialize vectors.\n  For ex.:\n  ```rust\n  let v= vec![1,2,3];\n  ```\n  Rust automatically infers the type as ``i32`` [[Number]] making the vector ``Vec<i32>``since the values are given.\n- ``.push(<value>)``\n  Pushes the value of the type to the vector.\n- Reading an individual value\n  We can do so like an array, or using the special ``.get(<int index>)`` [[Function]]. \n  ```rust\n  let arr=vec![1,2,3];\n  let elem= &arr[2]; //ok, gets an immutable reference\n  let elem2= arr[2]; //copies the value\n  let elem3= match arr.get(2) {\n  Some(value) => value,\n  None => 0\n  };\n  ```\n  The ``.get`` allows accessing invalid index without [[Panic]]king by using [[Option Type]]. The normal copy follows the [[Copy or Move]] behavior. The [[Reference Type]] access follows the [[Ownership]] and [[Borrow]] rules, i.e., if there's an immutable reference then a mutable reference can't exist.\n  For ex.:\n  ```rust\n  let mut v= vec![1,2,3];\n  let elem= &v[2]; //immutable reference\n  v.push(2); //error\n  ```\n  This code fails because even though the index itself won't be affected, the immutable reference stored in ``elem`` is pointing to a memory address that may change as the vector may need to allocate more memory with the push which takes a mutable reference and hence may need to copy all the values to the new addresses.\n- Reading the whole vector\n  We can use the ``for..in`` [[Loop]], like so\n  ```rust\n      let mut v = vec![100, 32, 57];\n      for i in &mut v {\n          *i += 50;\n      }\n  //or immutably\n      for i in &v {\n          println!(\"{i}\");\n      }\n  ```\n  The loop takes a [[Reference Type]]. We can directly use the variable to get the value, but to modify it we must use the Dereference [[Operator]] ``*``. The [[Borrow]] and [[Ownership]] rules prohibit modifying the vector inside its loop.\n- We can use [[Enumerated Type]]s or [[Trait Object]]s to store multiple [[Data Type]]s in a Vector.\n- Dropping a vector also cleans up its elements automatically\n  Meaning if we have\n  ```rust\n      {\n          let v = vec![1, 2, 3, 4];\n  \n          // do stuff with v\n      } // <- v goes out of scope and is freed here\n  ```\n  Then when ``v`` is dropped, its elements which are [[Number]]s here are cleaned up as well, the *[[Borrow]] Checker* ensures the references are valid so the dropped vector isn't accessed anymore.\n-\n-",536870920]],["^15",[1546,"^17",1700492155911,536870920]],["^15",[1546,"^Z","Rust/pages/Vector.md",536870920]],["^15",[1547,"^Q","We can also use the ``vec!`` [[Macro]] to initialize vectors.\nFor ex.:\n```rust\nlet v= vec![1,2,3];\n```\nRust automatically infers the type as ``i32`` [[Number]] making the vector ``Vec<i32>``since the values are given.",536870920]],["^15",[1547,"^O","^16",536870920]],["^15",[1547,"^F",1551,536870920]],["^15",[1547,"^X",160,536870920]],["^15",[1547,"^V",160,536870920]],["^15",[1547,"^U",160,536870920]],["^15",[1547,"^U",162,536870920]],["^15",[1547,"^U",1079,536870920]],["^15",[1547,"^H",162,536870920]],["^15",[1547,"^H",1079,536870920]],["^15",[1547,"^;","~u655b737b-e053-46b3-9e03-9d361e59809f",536870920]],["^15",[1548,"^Q","",536870920]],["^15",[1548,"^O","^16",536870920]],["^15",[1548,"^F",1555,536870920]],["^15",[1548,"^X",160,536870920]],["^15",[1548,"^V",160,536870920]],["^15",[1548,"^U",160,536870920]],["^15",[1548,"^;","~u655b737b-6010-420f-a946-312131a41581",536870920]],["^15",[1549,"^Q","~``.push(<value>)``\nPushes the value of the type to the vector.",536870920]],["^15",[1549,"^O","^16",536870920]],["^15",[1549,"^F",1547,536870920]],["^15",[1549,"^X",160,536870920]],["^15",[1549,"^V",160,536870920]],["^15",[1549,"^U",160,536870920]],["^15",[1549,"^;","~u655b737b-0cb7-45f4-8482-75714653a81e",536870920]],["^15",[1550,"^Q","Dropping a vector also cleans up its elements automatically\nMeaning if we have\n```rust\n    {\n        let v = vec![1, 2, 3, 4];\n\n        // do stuff with v\n    } // <- v goes out of scope and is freed here\n```\nThen when ``v`` is dropped, its elements which are [[Number]]s here are cleaned up as well, the *[[Borrow]] Checker* ensures the references are valid so the dropped vector isn't accessed anymore.",536870920]],["^15",[1550,"^O","^16",536870920]],["^15",[1550,"^F",1552,536870920]],["^15",[1550,"^X",160,536870920]],["^15",[1550,"^V",160,536870920]],["^15",[1550,"^U",160,536870920]],["^15",[1550,"^U",162,536870920]],["^15",[1550,"^U",1117,536870920]],["^15",[1550,"^H",162,536870920]],["^15",[1550,"^H",1117,536870920]],["^15",[1550,"^;","~u655b737b-76d0-4e4c-9d0d-92cddf6f6691",536870920]],["^15",[1551,"^Q","Just like vectors in C++. Contiguous blocks of dynamically allocated memory with same [[Data Type]]s. \nThey are defined as ``Vec<T>`` [[Struct]].\nFor ex.:\n```rust\n   let v: Vec<i32> = Vec::new(); //new empty vector\n```\nHere defining the type is necessary as that is specifying the type for the [[Generic Type]] used in ``Vec::new()``, however Rust can infer the type automatically if the vector is initialized with some value or if the vector receives values after initialization.\nFor ex.:\n```rust\nlet mut v= Vec::new();\nv.push(2); //ok\nlet v2= Vec::from([1,2]); //ok\n```\nThe variable must be mutable to make the vector mutable.",536870920]],["^15",[1551,"^O","^16",536870920]],["^15",[1551,"^F",160,536870920]],["^15",[1551,"^X",160,536870920]],["^15",[1551,"^V",160,536870920]],["^15",[1551,"^U",160,536870920]],["^15",[1551,"^U",1064,536870920]],["^15",[1551,"^U",1087,536870920]],["^15",[1551,"^U",1090,536870920]],["^15",[1551,"^H",1064,536870920]],["^15",[1551,"^H",1087,536870920]],["^15",[1551,"^H",1090,536870920]],["^15",[1551,"^;","~u655b737b-a3e3-4589-a149-eb25aaf6e55a",536870920]],["^15",[1552,"^Q","We can use [[Enumerated Type]]s or [[Trait Object]]s to store multiple [[Data Type]]s in a Vector.",536870920]],["^15",[1552,"^O","^16",536870920]],["^15",[1552,"^F",1553,536870920]],["^15",[1552,"^X",160,536870920]],["^15",[1552,"^V",160,536870920]],["^15",[1552,"^U",160,536870920]],["^15",[1552,"^U",1090,536870920]],["^15",[1552,"^U",1174,536870920]],["^15",[1552,"^U",1252,536870920]],["^15",[1552,"^H",1090,536870920]],["^15",[1552,"^H",1174,536870920]],["^15",[1552,"^H",1252,536870920]],["^15",[1552,"^;","~u655b737b-5f1c-4da0-95d2-6590866050ae",536870920]],["^15",[1553,"^Q","Reading the whole vector\nWe can use the ``for..in`` [[Loop]], like so\n```rust\n    let mut v = vec![100, 32, 57];\n    for i in &mut v {\n        *i += 50;\n    }\n//or immutably\n    for i in &v {\n        println!(\"{i}\");\n    }\n```\nThe loop takes a [[Reference Type]]. We can directly use the variable to get the value, but to modify it we must use the Dereference [[Operator]] ``*``. The [[Borrow]] and [[Ownership]] rules prohibit modifying the vector inside its loop.",536870920]],["^15",[1553,"^O","^16",536870920]],["^15",[1553,"^F",1554,536870920]],["^15",[1553,"^X",160,536870920]],["^15",[1553,"^V",160,536870920]],["^15",[1553,"^U",160,536870920]],["^15",[1553,"^U",300,536870920]],["^15",[1553,"^U",339,536870920]],["^15",[1553,"^U",1091,536870920]],["^15",[1553,"^U",1117,536870920]],["^15",[1553,"^U",1160,536870920]],["^15",[1553,"^H",300,536870920]],["^15",[1553,"^H",339,536870920]],["^15",[1553,"^H",1091,536870920]],["^15",[1553,"^H",1117,536870920]],["^15",[1553,"^H",1160,536870920]],["^15",[1553,"^;","~u655b737b-c296-45af-9fa3-641cc3c310ed",536870920]],["^15",[1554,"^Q","Reading an individual value\nWe can do so like an array, or using the special ``.get(<int index>)`` [[Function]]. \n```rust\nlet arr=vec![1,2,3];\nlet elem= &arr[2]; //ok, gets an immutable reference\nlet elem2= arr[2]; //copies the value\nlet elem3= match arr.get(2) {\nSome(value) => value,\nNone => 0\n};\n```\nThe ``.get`` allows accessing invalid index without [[Panic]]king by using [[Option Type]]. The normal copy follows the [[Copy or Move]] behavior. The [[Reference Type]] access follows the [[Ownership]] and [[Borrow]] rules, i.e., if there's an immutable reference then a mutable reference can't exist.\nFor ex.:\n```rust\nlet mut v= vec![1,2,3];\nlet elem= &v[2]; //immutable reference\nv.push(2); //error\n```\nThis code fails because even though the index itself won't be affected, the immutable reference stored in ``elem`` is pointing to a memory address that may change as the vector may need to allocate more memory with the push which takes a mutable reference and hence may need to copy all the values to the new addresses.",536870920]],["^15",[1554,"^O","^16",536870920]],["^15",[1554,"^F",1549,536870920]],["^15",[1554,"^X",160,536870920]],["^15",[1554,"^V",160,536870920]],["^15",[1554,"^U",160,536870920]],["^15",[1554,"^U",163,536870920]],["^15",[1554,"^U",1080,536870920]],["^15",[1554,"^U",1091,536870920]],["^15",[1554,"^U",1117,536870920]],["^15",[1554,"^U",1160,536870920]],["^15",[1554,"^U",1171,536870920]],["^15",[1554,"^U",1254,536870920]],["^15",[1554,"^H",163,536870920]],["^15",[1554,"^H",1080,536870920]],["^15",[1554,"^H",1091,536870920]],["^15",[1554,"^H",1117,536870920]],["^15",[1554,"^H",1160,536870920]],["^15",[1554,"^H",1171,536870920]],["^15",[1554,"^H",1254,536870920]],["^15",[1554,"^;","~u655b737b-444d-40c1-a129-c845759c5bbc",536870920]],["^15",[1555,"^Q","",536870920]],["^15",[1555,"^O","^16",536870920]],["^15",[1555,"^F",1550,536870920]],["^15",[1555,"^X",160,536870920]],["^15",[1555,"^V",160,536870920]],["^15",[1555,"^U",160,536870920]],["^15",[1555,"^;","~u655b737b-2f2d-46fc-9ef3-d44ef83fc74d",536870920]],["^15",[1556,"^3","- A [[cargo.toml]] file is a [[Cargo]] configuration file for the project, so it defines the version of the language, it's dependencies etc., it looks like so\n  ```toml\n  [package]\n  name = \"citorust_alpha\"\n  version = \"0.1.0\"\n  edition = \"2021\"\n   \n  [dependencies]\n  ```\n  Tom’s Obvious, Minimal Language.\n- More keys for the cargo.toml config can be found at [docs](https://doc.rust-lang.org/cargo/reference/manifest.html).\n- ``edition`` and ``rust-version``\n  These define what [Rust Edition](https://doc.rust-lang.org/edition-guide/index.html) and version the project is compiled with. \n  The latter is optional, a Rust Edition defines the compiler's version itself, it has breaking changes, whilst the version itself is just the language of the version to be compiled to.\n-\n-",536870920]],["^15",[1556,"^17",1700492155929,536870920]],["^15",[1556,"^Z","Rust/pages/cargo.toml.md",536870920]],["^15",[1557,"^K",1700492155927,536870920]],["^15",[1557,"^[",1556,536870920]],["^15",[1557,"^@",false,536870920]],["^15",[1557,"^Y","cargo/toml",536870920]],["^15",[1557,"^A",1132,536870920]],["^15",[1557,"^11","cargo/toml",536870920]],["^15",[1557,"^B",1700492155927,536870920]],["^15",[1557,"^;","~u655b737b-40d9-40bc-b3b1-11b804bccb57",536870920]],["^15",[1558,"^Q","A [[cargo.toml]] file is a [[Cargo]] configuration file for the project, so it defines the version of the language, it's dependencies etc., it looks like so\n```toml\n[package]\nname = \"citorust_alpha\"\nversion = \"0.1.0\"\nedition = \"2021\"\n \n[dependencies]\n```\nTom’s Obvious, Minimal Language.",536870920]],["^15",[1558,"^O","^16",536870920]],["^15",[1558,"^F",1557,536870920]],["^15",[1558,"^X",1557,536870920]],["^15",[1558,"^V",1557,536870920]],["^15",[1558,"^U",1099,536870920]],["^15",[1558,"^U",1132,536870920]],["^15",[1558,"^U",1557,536870920]],["^15",[1558,"^H",1099,536870920]],["^15",[1558,"^H",1132,536870920]],["^15",[1558,"^;","~u655b737b-e2ab-4f56-8e8f-2c13619a9fd3",536870920]],["^15",[1559,"^Q","More keys for the cargo.toml config can be found at [docs](https://doc.rust-lang.org/cargo/reference/manifest.html).",536870920]],["^15",[1559,"^O","^16",536870920]],["^15",[1559,"^F",1558,536870920]],["^15",[1559,"^X",1557,536870920]],["^15",[1559,"^V",1557,536870920]],["^15",[1559,"^U",1557,536870920]],["^15",[1559,"^;","~u655b737b-7506-427d-a26b-5c26b30dcfa0",536870920]],["^15",[1560,"^Q","~``edition`` and ``rust-version``\nThese define what [Rust Edition](https://doc.rust-lang.org/edition-guide/index.html) and version the project is compiled with. \nThe latter is optional, a Rust Edition defines the compiler's version itself, it has breaking changes, whilst the version itself is just the language of the version to be compiled to.",536870920]],["^15",[1560,"^O","^16",536870920]],["^15",[1560,"^F",1559,536870920]],["^15",[1560,"^X",1557,536870920]],["^15",[1560,"^V",1557,536870920]],["^15",[1560,"^U",1557,536870920]],["^15",[1560,"^;","~u655b737b-2ecc-42b0-aa2f-41167922265a",536870920]],["^15",[1561,"^Q","",536870920]],["^15",[1561,"^O","^16",536870920]],["^15",[1561,"^F",1560,536870920]],["^15",[1561,"^X",1557,536870920]],["^15",[1561,"^V",1557,536870920]],["^15",[1561,"^U",1557,536870920]],["^15",[1561,"^;","~u655b737b-b8bc-41bd-b820-b63d9a4a7097",536870920]],["^15",[1562,"^Q","",536870920]],["^15",[1562,"^O","^16",536870920]],["^15",[1562,"^F",1561,536870920]],["^15",[1562,"^X",1557,536870920]],["^15",[1562,"^V",1557,536870920]],["^15",[1562,"^U",1557,536870920]],["^15",[1562,"^;","~u655b737b-03f4-4e01-a472-61c1c3d9aec7",536870920]],["^15",[1563,"^3","- ``extern``\n  Rust also supports *FFI* (Foreign Function Interface) where Rust code can call a function written in another language, and other languages can call Rust code as well. We declare these external functions inside Rust within extern blocks and then call the functions using [[unsafe]] blocks. They are marked unsafe because other languages don’t employ Rust’s Safety system and hence they are always unsafe in Rust’s eyes.\n  We do so with the ``extern \"<ABI name>\" { <function declarations> }``.\n  \n  For ex.:\n  ```rust\n  extern \"C\" {\n      fn abs(input: i32) -> i32;\n  }\n  \n  fn main() {\n      unsafe {\n          println!(\"Absolute value of -3 according to C: {}\", abs(-3));\n      }\n  }\n  ``` \n  Here ``extern \"C\"`` defines the external [[ABI]] (Application Binary Interface) rust uses to locate the provided [[Function]]s in. ``abs()`` is part of *C*'s Standard Library so it will find it directly. \n  \n  Similarly, rust can allow other languages to pick up its [[Function]]s. We do so using almost the same syntax.\n  \n  For ex.:\n  ```rust\n  #[no_mangle]\n  pub extern \"C\" fn call_from_c() {\n      println!(\"Just called a Rust function from C!\");\n  }\n  ```\n  ``#[no_mangle]`` is a [[Macro]] which disables name mangling for the given [[Function]]/ [[Method]], ignoring the optimization to reduce the binary size by a bit but allowing the name to remain the same and hence be picked up by external linkers easily. This isn't [[unsafe]]. \n  Compiling this generates a ``.pdb`` file in the ``target/`` directory which can be linked with a *C* program and hence be picked up there.",536870920]],["^15",[1563,"^17",1700492155945,536870920]],["^15",[1563,"^Z","Rust/pages/extern.md",536870920]],["^15",[1564,"^K",1700492156010,536870920]],["^15",[1564,"^[",1563,536870920]],["^15",[1564,"^@",false,536870920]],["^15",[1564,"^Y","extern",536870920]],["^15",[1564,"^11","extern",536870920]],["^15",[1564,"^B",1700492156010,536870920]],["^15",[1564,"^;","~u655b737c-ff9d-4ad1-a3f3-e00fe9dcd65f",536870920]],["^15",[1565,"^K",1700492155992,536870920]],["^15",[1565,"^@",false,536870920]],["^15",[1565,"^Y","abi",536870920]],["^15",[1565,"^11","ABI",536870920]],["^15",[1565,"^B",1700492155992,536870920]],["^15",[1565,"^;","~u655b737b-b2a7-464c-ad91-baf6e8a11e35",536870920]],["^15",[1566,"^Q","~``extern``\nRust also supports *FFI* (Foreign Function Interface) where Rust code can call a function written in another language, and other languages can call Rust code as well. We declare these external functions inside Rust within extern blocks and then call the functions using [[unsafe]] blocks. They are marked unsafe because other languages don’t employ Rust’s Safety system and hence they are always unsafe in Rust’s eyes.\nWe do so with the ``extern \"<ABI name>\" { <function declarations> }``.\n\nFor ex.:\n```rust\nextern \"C\" {\n    fn abs(input: i32) -> i32;\n}\n\nfn main() {\n    unsafe {\n        println!(\"Absolute value of -3 according to C: {}\", abs(-3));\n    }\n}\n``` \nHere ``extern \"C\"`` defines the external [[ABI]] (Application Binary Interface) rust uses to locate the provided [[Function]]s in. ``abs()`` is part of *C*'s Standard Library so it will find it directly. \n\nSimilarly, rust can allow other languages to pick up its [[Function]]s. We do so using almost the same syntax.\n\nFor ex.:\n```rust\n#[no_mangle]\npub extern \"C\" fn call_from_c() {\n    println!(\"Just called a Rust function from C!\");\n}\n```\n``#[no_mangle]`` is a [[Macro]] which disables name mangling for the given [[Function]]/ [[Method]], ignoring the optimization to reduce the binary size by a bit but allowing the name to remain the same and hence be picked up by external linkers easily. This isn't [[unsafe]]. \nCompiling this generates a ``.pdb`` file in the ``target/`` directory which can be linked with a *C* program and hence be picked up there.",536870920]],["^15",[1566,"^O","^16",536870920]],["^15",[1566,"^F",1564,536870920]],["^15",[1566,"^X",1564,536870920]],["^15",[1566,"^V",1564,536870920]],["^15",[1566,"^U",163,536870920]],["^15",[1566,"^U",1065,536870920]],["^15",[1566,"^U",1079,536870920]],["^15",[1566,"^U",1296,536870920]],["^15",[1566,"^U",1564,536870920]],["^15",[1566,"^U",1565,536870920]],["^15",[1566,"^H",163,536870920]],["^15",[1566,"^H",1065,536870920]],["^15",[1566,"^H",1079,536870920]],["^15",[1566,"^H",1296,536870920]],["^15",[1566,"^H",1565,536870920]],["^15",[1566,"^;","~u655b737b-e4e3-4bd2-a68a-94e7c303fd1a",536870920]],["^15",[1567,"^3","- ``macro_rules!``\n  These [[Macro]]s work much like ``Match`` and use [[Pattern Matching]]. \n  A declarative macro like ``macro_rules!`` looks for given patterns in the passed source code, and replaces the matched code with provided code.\n  \n  For ex.:\n  ```rust\n  #[macro_export]\n  macro_rules! vec {\n      ( $( $x:expr ),* ) => {\n          {\n              let mut temp_vec = Vec::new();\n              $(\n                  temp_vec.push($x);\n              )*\n              temp_vec\n          }\n      };\n  }\n  ```\n  This is kind of how ``vec!`` declarative macro is defined for [[Vector]]s.\n  \n  ``#[macro_export]`` is an [[Macro Attribute]] itself, and it defines this macro wherever it is imported. \n  \n  ``macro_rules! <macro name>`` defines the declarative macro, for a ``<macro name>``, it is called with ``<macro name>!``, the ``!`` character denotes that a declarative macro is being used.\n  \n  The ``(<pattern>) => {<expression>}`` syntax defines a single arm of this declarative macro, it means that only code that matches this pattern can be passed to this macro. If we define more patterns, we can have pass more variety of code to this macro. Other patterns can be found at [Docs](https://doc.rust-lang.org/reference/macros-by-example.html).\n  \n  In the pattern, the outer ``()``  defines the whole value passed to the macro ``$()`` defines a [[Macro Variable]], this variable will be replaced with a value when the code matches the pattern, in it ``$x:expr`` matches any Rust expression and assigns its resultant value to x. Lastly the ``,*`` say that the literal character ``,`` will be followed by an expression and ``*`` says it can be any number of times. So ``vec![1,2,3]`` will pass ``1``, ``2`` and ``3`` to ``x`` [[Macro Variable]].\n  \n  In the expression, we have normal Rust code and then the ``$()*`` block, this block indicates that it must be replaced itself with some concrete code after completing all patterns inside it, the pattern here is ``temp_vec.push($x)`` and here the ``$x`` is the macro variable which is replaced with its concrete value, the ``*`` means, it can be generated any number of times.",536870920]],["^15",[1567,"^17",1700492155961,536870920]],["^15",[1567,"^Z","Rust/pages/macro_rules!.md",536870920]],["^15",[1568,"^K",1700492155960,536870920]],["^15",[1568,"^@",false,536870920]],["^15",[1568,"^Y","macro variable",536870920]],["^15",[1568,"^11","Macro Variable",536870920]],["^15",[1568,"^B",1700492155960,536870920]],["^15",[1568,"^;","~u655b737b-4e98-4489-af07-483afeef3fb5",536870920]],["^15",[1569,"^Q","~``macro_rules!``\nThese [[Macro]]s work much like ``Match`` and use [[Pattern Matching]]. \nA declarative macro like ``macro_rules!`` looks for given patterns in the passed source code, and replaces the matched code with provided code.\n\nFor ex.:\n```rust\n#[macro_export]\nmacro_rules! vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $(\n                temp_vec.push($x);\n            )*\n            temp_vec\n        }\n    };\n}\n```\nThis is kind of how ``vec!`` declarative macro is defined for [[Vector]]s.\n\n``#[macro_export]`` is an [[Macro Attribute]] itself, and it defines this macro wherever it is imported. \n\n``macro_rules! <macro name>`` defines the declarative macro, for a ``<macro name>``, it is called with ``<macro name>!``, the ``!`` character denotes that a declarative macro is being used.\n\nThe ``(<pattern>) => {<expression>}`` syntax defines a single arm of this declarative macro, it means that only code that matches this pattern can be passed to this macro. If we define more patterns, we can have pass more variety of code to this macro. Other patterns can be found at [Docs](https://doc.rust-lang.org/reference/macros-by-example.html).\n\nIn the pattern, the outer ``()``  defines the whole value passed to the macro ``$()`` defines a [[Macro Variable]], this variable will be replaced with a value when the code matches the pattern, in it ``$x:expr`` matches any Rust expression and assigns its resultant value to x. Lastly the ``,*`` say that the literal character ``,`` will be followed by an expression and ``*`` says it can be any number of times. So ``vec![1,2,3]`` will pass ``1``, ``2`` and ``3`` to ``x`` [[Macro Variable]].\n\nIn the expression, we have normal Rust code and then the ``$()*`` block, this block indicates that it must be replaced itself with some concrete code after completing all patterns inside it, the pattern here is ``temp_vec.push($x)`` and here the ``$x`` is the macro variable which is replaced with its concrete value, the ``*`` means, it can be generated any number of times.",536870920]],["^15",[1569,"^O","^16",536870920]],["^15",[1569,"^F",1318,536870920]],["^15",[1569,"^X",1318,536870920]],["^15",[1569,"^V",1318,536870920]],["^15",[1569,"^U",160,536870920]],["^15",[1569,"^U",1079,536870920]],["^15",[1569,"^U",1253,536870920]],["^15",[1569,"^U",1312,536870920]],["^15",[1569,"^U",1318,536870920]],["^15",[1569,"^U",1568,536870920]],["^15",[1569,"^H",160,536870920]],["^15",[1569,"^H",1079,536870920]],["^15",[1569,"^H",1253,536870920]],["^15",[1569,"^H",1312,536870920]],["^15",[1569,"^H",1568,536870920]],["^15",[1569,"^;","~u655b737b-3870-43bb-a429-b13b628a0516",536870920]],["^15",[1570,"^3","- For individual files, we compile them with ``rustc <filename>.rs``. It generates an *.exe in windows and that can be directly run with ``./filename.exe``.\n- Regardless of the approach used to generate an executable, it is always AOT (ahead-of-time) compiled, meaning, if we pass the executable to another system, it does not need to have Rust installed in order to run it. In contrast, ``*.py`` or ``*.js`` files need Python or JavaScript installed in\n  order to be run as they are interpreted languages.\n-",536870920]],["^15",[1570,"^17",1700492155970,536870920]],["^15",[1570,"^Z","Rust/pages/rustc.md",536870920]],["^15",[1571,"^Q","For individual files, we compile them with ``rustc <filename>.rs``. It generates an *.exe in windows and that can be directly run with ``./filename.exe``.",536870920]],["^15",[1571,"^O","^16",536870920]],["^15",[1571,"^F",1130,536870920]],["^15",[1571,"^X",1130,536870920]],["^15",[1571,"^V",1130,536870920]],["^15",[1571,"^U",1130,536870920]],["^15",[1571,"^;","~u655b737b-2868-4dde-accf-5174b9f94fed",536870920]],["^15",[1572,"^Q","Regardless of the approach used to generate an executable, it is always AOT (ahead-of-time) compiled, meaning, if we pass the executable to another system, it does not need to have Rust installed in order to run it. In contrast, ``*.py`` or ``*.js`` files need Python or JavaScript installed in\norder to be run as they are interpreted languages.",536870920]],["^15",[1572,"^O","^16",536870920]],["^15",[1572,"^F",1571,536870920]],["^15",[1572,"^X",1130,536870920]],["^15",[1572,"^V",1130,536870920]],["^15",[1572,"^U",1130,536870920]],["^15",[1572,"^;","~u655b737b-f902-4a17-9571-b03e906da390",536870920]],["^15",[1573,"^Q","",536870920]],["^15",[1573,"^O","^16",536870920]],["^15",[1573,"^F",1572,536870920]],["^15",[1573,"^X",1130,536870920]],["^15",[1573,"^V",1130,536870920]],["^15",[1573,"^U",1130,536870920]],["^15",[1573,"^;","~u655b737b-4890-4eda-b67e-86d553632b1d",536870920]],["^15",[1574,"^3","- This keyword can be only at the starting of a path, when used it goes one up in the hierarchy of modules where the current [[Module]] / [[Crate]] is the current position. \n  For ex.:\n  ```rust\n  mod x {\n    pub mod y {\n        pub mod z {\n            pub mod k {\n                pub fn aye() {\n                    super::super::super::yo();\n                }\n            }\n        }\n    }\n  - pub fn yo() {}\n  }\n  - fn main() {\n    crate::x::y::z::k::aye(); //works\n  }\n  ```\n- Similarly, by using ``use super::*`` with [[use]], we essentially open an entire parent namespace into the current namespace.\n-",536870920]],["^15",[1574,"^17",1700492155980,536870920]],["^15",[1574,"^Z","Rust/pages/super.md",536870920]],["^15",[1575,"^K",1700492155979,536870920]],["^15",[1575,"^[",1574,536870920]],["^15",[1575,"^@",false,536870920]],["^15",[1575,"^Y","super",536870920]],["^15",[1575,"^11","super",536870920]],["^15",[1575,"^B",1700492155979,536870920]],["^15",[1575,"^;","~u656462fe-f778-46f9-8931-60b0a522a95c",536870952]],["^15",[1576,"^Q","This keyword can be only at the starting of a path, when used it goes one up in the hierarchy of modules where the current [[Module]] / [[Crate]] is the current position. \nFor ex.:\n```rust\nmod x {\n  pub mod y {\n      pub mod z {\n          pub mod k {\n              pub fn aye() {\n                  super::super::super::yo();\n              }\n          }\n      }\n  }\n- pub fn yo() {}\n}\n- fn main() {\n  crate::x::y::z::k::aye(); //works\n}\n```",536870920]],["^15",[1576,"^O","^16",536870920]],["^15",[1576,"^F",1575,536870920]],["^15",[1576,"^X",1575,536870920]],["^15",[1576,"^V",1575,536870920]],["^15",[1576,"^U",287,536870920]],["^15",[1576,"^U",1063,536870920]],["^15",[1576,"^U",1575,536870920]],["^15",[1576,"^H",287,536870920]],["^15",[1576,"^H",1063,536870920]],["^15",[1576,"^;","~u655b737b-4a4a-4813-8f1b-6658c747ca58",536870920]],["^15",[1577,"^Q","Similarly, by using ``use super::*`` with [[use]], we essentially open an entire parent namespace into the current namespace.",536870920]],["^15",[1577,"^O","^16",536870920]],["^15",[1577,"^F",1576,536870920]],["^15",[1577,"^X",1575,536870920]],["^15",[1577,"^V",1575,536870920]],["^15",[1577,"^U",1133,536870920]],["^15",[1577,"^U",1575,536870920]],["^15",[1577,"^H",1133,536870920]],["^15",[1577,"^;","~u655b737b-cb41-4dc8-8d8c-d637eda22448",536870920]],["^15",[1578,"^Q","",536870920]],["^15",[1578,"^O","^16",536870920]],["^15",[1578,"^F",1577,536870920]],["^15",[1578,"^X",1575,536870920]],["^15",[1578,"^V",1575,536870920]],["^15",[1578,"^U",1575,536870920]],["^15",[1578,"^;","~u655b737b-f15c-46d9-982d-c8949729b5a3",536870920]],["^15",[1579,"^3","- ``union``\n  The same from the *C* or *C++* world. \n  That is, they are like [[Struct]]s but they can only have 1 field active at any time.\n  \n  For ex.:\n  ```rust\n  #[repr(C)]\n  union MyUnion {\n      f1: u32,\n      f2: f32,\n  }\n  \n  fn main() {\n  let u = MyUnion { f1: 1 };\n  let f = unsafe { u.f1 };\n  }\n  ```\n  It is [[unsafe]] to access a union as Rust can't ensure which field is active at compile-time and accessing an inactive field is an error.\n  \n  ``#[repr(C)]`` [[Macro]] says ``Do what this language does`` with data layout and everything about the structure. By using ``C`` as a value to it, we ensure the data layout used in ``C`` [[ABI]] is used here. Data layout refers to how data is structured in the memory.",536870920]],["^15",[1579,"^17",1700492155993,536870920]],["^15",[1579,"^Z","Rust/pages/union.md",536870920]],["^15",[1580,"^K",1700492156010,536870920]],["^15",[1580,"^[",1579,536870920]],["^15",[1580,"^@",false,536870920]],["^15",[1580,"^Y","union",536870920]],["^15",[1580,"^11","union",536870920]],["^15",[1580,"^B",1700492156010,536870920]],["^15",[1580,"^;","~u655b737c-ace5-4070-b071-3ab174461b1e",536870920]],["^15",[1581,"^Q","~``union``\nThe same from the *C* or *C++* world. \nThat is, they are like [[Struct]]s but they can only have 1 field active at any time.\n\nFor ex.:\n```rust\n#[repr(C)]\nunion MyUnion {\n    f1: u32,\n    f2: f32,\n}\n\nfn main() {\nlet u = MyUnion { f1: 1 };\nlet f = unsafe { u.f1 };\n}\n```\nIt is [[unsafe]] to access a union as Rust can't ensure which field is active at compile-time and accessing an inactive field is an error.\n\n``#[repr(C)]`` [[Macro]] says ``Do what this language does`` with data layout and everything about the structure. By using ``C`` as a value to it, we ensure the data layout used in ``C`` [[ABI]] is used here. Data layout refers to how data is structured in the memory.",536870920]],["^15",[1581,"^O","^16",536870920]],["^15",[1581,"^F",1580,536870920]],["^15",[1581,"^X",1580,536870920]],["^15",[1581,"^V",1580,536870920]],["^15",[1581,"^U",1064,536870920]],["^15",[1581,"^U",1079,536870920]],["^15",[1581,"^U",1296,536870920]],["^15",[1581,"^U",1565,536870920]],["^15",[1581,"^U",1580,536870920]],["^15",[1581,"^H",1064,536870920]],["^15",[1581,"^H",1079,536870920]],["^15",[1581,"^H",1296,536870920]],["^15",[1581,"^H",1565,536870920]],["^15",[1581,"^;","~u655b737b-44b1-42cd-ae70-8e625d3f6b69",536870920]],["^15",[1582,"^3","- Many of Rust's compile-time checks can be bypassed by unsafe rust. This allows more control over the behavior of the code however the checks aren't even performed and it's the duty of the programmers to ensure the code does not cause issues at runtime.\n  \n  Rust is inherently conservative with its rules at compile-time. That is, it would rather fail a correct program than allow a potentially error-causing code to run. By using unsafe rust, we disable these checks at compile time and taking the various guarantees in our hands.\n  \n  To use unsafe rust, we have a [[Scope]] block that starts with the ``unsafe`` keyword. \n  For ex.:\n  ```rust\n  unsafe fn foo() {}\n  fn main() {\n      unsafe {\n          foo();\n      }\n  }\n  \n  ```\n  \n  The unsafe blocks don't completely disable Rust's compile-time rules, they simply allow the unsafe superpowers to execute which would be disallowed in normal blocks.\n- unsafe superpowers\n  5 actions can be done in unsafe rust (inside the unsafe block), they are\n  * Dereferencing a Raw [[Pointer]] \n  * Calling an unsafe [[Function]]/ [[Method]]: \n  We declare [[Function]]s/ [[Method]]s as ``unsafe``. Then the entire function body is unsafe. We can only call these functions from unsafe blocks.\n  \n  For ex.:\n  ```rust\n  unsafe fn foo() {}\n  fn main() {\n      unsafe {\n          foo();\n      }\n  }\n  \n  ```\n  It is advisable to not mark functions as ``unsafe``, rather use unsafe blocks inside them. This way we create a safe abstraction over an unsafe code. \n  \n  This is required with [[extern]] methods.\n  * Access/Modify mutable static [[Variable]]s:\n  * Implement an unsafe [[Trait]]\n  * Access fields of [[union]]s\n-",536870920]],["^15",[1582,"^17",1700492156011,536870920]],["^15",[1582,"^Z","Rust/pages/unsafe.md",536870920]],["^15",[1583,"^Q","Many of Rust's compile-time checks can be bypassed by unsafe rust. This allows more control over the behavior of the code however the checks aren't even performed and it's the duty of the programmers to ensure the code does not cause issues at runtime.\n\nRust is inherently conservative with its rules at compile-time. That is, it would rather fail a correct program than allow a potentially error-causing code to run. By using unsafe rust, we disable these checks at compile time and taking the various guarantees in our hands.\n\nTo use unsafe rust, we have a [[Scope]] block that starts with the ``unsafe`` keyword. \nFor ex.:\n```rust\nunsafe fn foo() {}\nfn main() {\n    unsafe {\n        foo();\n    }\n}\n\n```\n\nThe unsafe blocks don't completely disable Rust's compile-time rules, they simply allow the unsafe superpowers to execute which would be disallowed in normal blocks.",536870920]],["^15",[1583,"^O","^16",536870920]],["^15",[1583,"^F",1296,536870920]],["^15",[1583,"^X",1296,536870920]],["^15",[1583,"^V",1296,536870920]],["^15",[1583,"^U",345,536870920]],["^15",[1583,"^U",1296,536870920]],["^15",[1583,"^H",345,536870920]],["^15",[1583,"^;","~u655b737c-a919-4f8a-9e76-df97cb508ea7",536870920]],["^15",[1584,"^Q","unsafe superpowers\n5 actions can be done in unsafe rust (inside the unsafe block), they are\n* Dereferencing a Raw [[Pointer]] \n* Calling an unsafe [[Function]]/ [[Method]]: \nWe declare [[Function]]s/ [[Method]]s as ``unsafe``. Then the entire function body is unsafe. We can only call these functions from unsafe blocks.\n\nFor ex.:\n```rust\nunsafe fn foo() {}\nfn main() {\n    unsafe {\n        foo();\n    }\n}\n\n```\nIt is advisable to not mark functions as ``unsafe``, rather use unsafe blocks inside them. This way we create a safe abstraction over an unsafe code. \n\nThis is required with [[extern]] methods.\n* Access/Modify mutable static [[Variable]]s:\n* Implement an unsafe [[Trait]]\n* Access fields of [[union]]s",536870920]],["^15",[1584,"^O","^16",536870920]],["^15",[1584,"^F",1583,536870920]],["^15",[1584,"^X",1296,536870920]],["^15",[1584,"^V",1296,536870920]],["^15",[1584,"^U",161,536870920]],["^15",[1584,"^U",163,536870920]],["^15",[1584,"^U",1065,536870920]],["^15",[1584,"^U",1073,536870920]],["^15",[1584,"^U",1094,536870920]],["^15",[1584,"^U",1296,536870920]],["^15",[1584,"^U",1564,536870920]],["^15",[1584,"^U",1580,536870920]],["^15",[1584,"^H",161,536870920]],["^15",[1584,"^H",163,536870920]],["^15",[1584,"^H",1065,536870920]],["^15",[1584,"^H",1073,536870920]],["^15",[1584,"^H",1094,536870920]],["^15",[1584,"^H",1564,536870920]],["^15",[1584,"^H",1580,536870920]],["^15",[1584,"^;","~u655b737c-988d-4a62-be0f-649e5631df12",536870920]],["^15",[1585,"^Q","",536870920]],["^15",[1585,"^O","^16",536870920]],["^15",[1585,"^F",1584,536870920]],["^15",[1585,"^X",1296,536870920]],["^15",[1585,"^V",1296,536870920]],["^15",[1585,"^U",1296,536870920]],["^15",[1585,"^;","~u655b737c-2cec-40ca-94af-80ceedd565c7",536870920]],["^15",[1586,"^3","- ``use``\n  This  keyword in Rust is much like the *using* keyword in C++. It is prepended to a [[Crate]]/ [[Module]]'s item name and then allows subsequent items in the same [[Scope]] to use the item as if they were in the same [[Scope]].\n  Syntax: \n  ``\n  use <some-path>;\n  ``\n  \n  For ex.:\n  ```rust\n  mod x {\n      pub mod y {\n          pub mod z {\n              pub fn yo() {}\n          }\n      }\n  }\n  \n  use crate::x::y::z;\n  \n  fn main() {\n      z::yo();\n  \n      use crate::x::y::z::yo;\n  \n      yo(); //also works\n  }\n  ```\n  As we can see, the last item in the path after ``use`` isn't opened, the keyword simply opens the namespace till that item and plops the item's name in the current namespace.\n- It's idiomatic in Rust to use ``use`` to only open up till the [[Module]]s and not the specific items, as it allows identifying if the item is in the current module or is present in some external module for maintainers. \n  But items in the [[Standard Library]] library, it is idiomatic to specify the full path to an item.\n- ``use`` does not import anything. It simply opens a namespace. \n  The actual import is only made when a [[Module]] is defined at the top of a file.\n  \n  * When we define external packages to the [[cargo.toml]], and compile with [[Cargo]], the external crates are already imported in the [[Prelude]]. So we can directly use ``use`` without defining the [[Module]]s.\n  For ex.:\n  For a cargo.toml\n  ```toml\n  ...\n  [dependencies]\n  rand = \"0.9.0\"\n  ```\n  \n  We can use a ``main.rs`` like so\n  ```rust\n  use std::io;\n  use rand::Rng; //works\n  \n  fn main() {\n      println!(\"Guess the number!\");\n  \n      let secret_number = rand::thread_rng().gen_range(1..=100);\n  }\n  ```\n- ``as``\n  We can give an alias to the item brought to the current namespace by this keyword.\n  \n  For ex.:\n  ```rust\n  use x::y::z as K;\n  \n  //and use K wherever z would have been used.\n  ```\n- Re-exporting\n  The ``pub`` [[Access Modifier]] can also be applied to ``use``.\n  \n  By default, when ``use`` is used in a [[Scope]] it works as if it only opens the namespace to an item as *private*. But by using ``pub`` to ``use`` we make the item *public*.\n  This effectively allows external [[Crate]]s/ [[Module]]s to also have a direct path to an item as if the item was in this scope. \n  For ex.:\n  ```rust \n  mod x {\n    pub mod y {}\n  }\n  \n  use crate::x::y; \n  //makes y available here, it is like we defined y here \n  // mod y { }\n  \n  mod n {\n   pub mod k {\n  \n    }\n  }\n  \n  pub use crate::n::k;\n  // however this is like we defined pub k here and not just k\n  // pub mod k {}\n  ```\n  \n  A better example:\n  ```rust\n  pub mod modA {\n      pub fn fnA() {}\n  }\n  pub mod modB {\n      pub use crate::modA;\n   \n      pub fn fnB() {\n          modA::fnA();\n      }\n  }\n   \n  mod modC {\n      use crate::modB;\n      pub fn fnC() {\n          modB::modA::fnA(); //works, as if modA is defined inside modB. It won't work if we hadn't used pub in pub use crate::modA;\n      }\n  }\n  \n  ```\n- Nested Paths\n  Using ‘use’ for each item in an item can be tedious, so we can use a single ‘use’ to open multiple items. \n  For ex.:\n  ```rust\n  use crate::x::{y, z, m::n}; //opens y, z and n from m\n  \n  //We can also nest the base path if we wish to open it too,\n  //use crate::x::{self, m::n}; opens crate::x; and crate::m::n;\n  \n  ```\n- Glob [[Operator]]\n  Used to open all items in an item.\n  ```rust\n  use crate::x::*;\n  \n  //opens all the public items in x in scope. Generally used in testing as in production projects this pollutes the scope.\n  \n  ```",536870920]],["^15",[1586,"^17",1700492156037,536870920]],["^15",[1586,"^Z","Rust/pages/use.md",536870920]],["^15",[1587,"^Q","~``use``\nThis  keyword in Rust is much like the *using* keyword in C++. It is prepended to a [[Crate]]/ [[Module]]'s item name and then allows subsequent items in the same [[Scope]] to use the item as if they were in the same [[Scope]].\nSyntax: \n``\nuse <some-path>;\n``\n\nFor ex.:\n```rust\nmod x {\n    pub mod y {\n        pub mod z {\n            pub fn yo() {}\n        }\n    }\n}\n\nuse crate::x::y::z;\n\nfn main() {\n    z::yo();\n\n    use crate::x::y::z::yo;\n\n    yo(); //also works\n}\n```\nAs we can see, the last item in the path after ``use`` isn't opened, the keyword simply opens the namespace till that item and plops the item's name in the current namespace.",536870920]],["^15",[1587,"^O","^16",536870920]],["^15",[1587,"^F",1133,536870920]],["^15",[1587,"^X",1133,536870920]],["^15",[1587,"^V",1133,536870920]],["^15",[1587,"^U",287,536870920]],["^15",[1587,"^U",345,536870920]],["^15",[1587,"^U",1063,536870920]],["^15",[1587,"^U",1133,536870920]],["^15",[1587,"^H",287,536870920]],["^15",[1587,"^H",345,536870920]],["^15",[1587,"^H",1063,536870920]],["^15",[1587,"^;","~u655b737c-6198-41a9-83ca-aa710b90990c",536870920]],["^15",[1588,"^Q","It's idiomatic in Rust to use ``use`` to only open up till the [[Module]]s and not the specific items, as it allows identifying if the item is in the current module or is present in some external module for maintainers. \nBut items in the [[Standard Library]] library, it is idiomatic to specify the full path to an item.",536870920]],["^15",[1588,"^O","^16",536870920]],["^15",[1588,"^F",1587,536870920]],["^15",[1588,"^X",1133,536870920]],["^15",[1588,"^V",1133,536870920]],["^15",[1588,"^U",287,536870920]],["^15",[1588,"^U",1096,536870920]],["^15",[1588,"^U",1133,536870920]],["^15",[1588,"^H",287,536870920]],["^15",[1588,"^H",1096,536870920]],["^15",[1588,"^;","~u655b737c-9dc0-43e2-9add-d42bf6db792f",536870920]],["^15",[1589,"^Q","~``use`` does not import anything. It simply opens a namespace. \nThe actual import is only made when a [[Module]] is defined at the top of a file.\n\n* When we define external packages to the [[cargo.toml]], and compile with [[Cargo]], the external crates are already imported in the [[Prelude]]. So we can directly use ``use`` without defining the [[Module]]s.\nFor ex.:\nFor a cargo.toml\n```toml\n...\n[dependencies]\nrand = \"0.9.0\"\n```\n\nWe can use a ``main.rs`` like so\n```rust\nuse std::io;\nuse rand::Rng; //works\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n}\n```",536870920]],["^15",[1589,"^O","^16",536870920]],["^15",[1589,"^F",1588,536870920]],["^15",[1589,"^X",1133,536870920]],["^15",[1589,"^V",1133,536870920]],["^15",[1589,"^U",287,536870920]],["^15",[1589,"^U",1099,536870920]],["^15",[1589,"^U",1132,536870920]],["^15",[1589,"^U",1133,536870920]],["^15",[1589,"^U",1212,536870920]],["^15",[1589,"^H",287,536870920]],["^15",[1589,"^H",1099,536870920]],["^15",[1589,"^H",1132,536870920]],["^15",[1589,"^H",1212,536870920]],["^15",[1589,"^;","~u655b737c-2432-4d3b-9c4d-fa9e24f4f97b",536870920]],["^15",[1590,"^Q","~``as``\nWe can give an alias to the item brought to the current namespace by this keyword.\n\nFor ex.:\n```rust\nuse x::y::z as K;\n\n//and use K wherever z would have been used.\n```",536870920]],["^15",[1590,"^O","^16",536870920]],["^15",[1590,"^F",1589,536870920]],["^15",[1590,"^X",1133,536870920]],["^15",[1590,"^V",1133,536870920]],["^15",[1590,"^U",1133,536870920]],["^15",[1590,"^;","~u655b737c-d160-46be-b160-b5c154668cc8",536870920]],["^15",[1591,"^Q","Re-exporting\nThe ``pub`` [[Access Modifier]] can also be applied to ``use``.\n\nBy default, when ``use`` is used in a [[Scope]] it works as if it only opens the namespace to an item as *private*. But by using ``pub`` to ``use`` we make the item *public*.\nThis effectively allows external [[Crate]]s/ [[Module]]s to also have a direct path to an item as if the item was in this scope. \nFor ex.:\n```rust \nmod x {\n  pub mod y {}\n}\n\nuse crate::x::y; \n//makes y available here, it is like we defined y here \n// mod y { }\n\nmod n {\n pub mod k {\n\n  }\n}\n\npub use crate::n::k;\n// however this is like we defined pub k here and not just k\n// pub mod k {}\n```\n\nA better example:\n```rust\npub mod modA {\n    pub fn fnA() {}\n}\npub mod modB {\n    pub use crate::modA;\n \n    pub fn fnB() {\n        modA::fnA();\n    }\n}\n \nmod modC {\n    use crate::modB;\n    pub fn fnC() {\n        modB::modA::fnA(); //works, as if modA is defined inside modB. It won't work if we hadn't used pub in pub use crate::modA;\n    }\n}\n\n```",536870920]],["^15",[1591,"^O","^16",536870920]],["^15",[1591,"^F",1590,536870920]],["^15",[1591,"^X",1133,536870920]],["^15",[1591,"^V",1133,536870920]],["^15",[1591,"^U",287,536870920]],["^15",[1591,"^U",345,536870920]],["^15",[1591,"^U",1062,536870920]],["^15",[1591,"^U",1063,536870920]],["^15",[1591,"^U",1133,536870920]],["^15",[1591,"^H",287,536870920]],["^15",[1591,"^H",345,536870920]],["^15",[1591,"^H",1062,536870920]],["^15",[1591,"^H",1063,536870920]],["^15",[1591,"^;","~u655b737c-7bcd-458c-a0b1-8b07b1aaedab",536870920]],["^15",[1592,"^Q","Nested Paths\nUsing ‘use’ for each item in an item can be tedious, so we can use a single ‘use’ to open multiple items. \nFor ex.:\n```rust\nuse crate::x::{y, z, m::n}; //opens y, z and n from m\n\n//We can also nest the base path if we wish to open it too,\n//use crate::x::{self, m::n}; opens crate::x; and crate::m::n;\n\n```",536870920]],["^15",[1592,"^O","^16",536870920]],["^15",[1592,"^F",1591,536870920]],["^15",[1592,"^X",1133,536870920]],["^15",[1592,"^V",1133,536870920]],["^15",[1592,"^U",1133,536870920]],["^15",[1592,"^;","~u655b737c-2298-436b-b35e-eea68347dc2e",536870920]],["^15",[1593,"^Q","Glob [[Operator]]\nUsed to open all items in an item.\n```rust\nuse crate::x::*;\n\n//opens all the public items in x in scope. Generally used in testing as in production projects this pollutes the scope.\n\n```",536870920]],["^15",[1593,"^O","^16",536870920]],["^15",[1593,"^F",1592,536870920]],["^15",[1593,"^X",1133,536870920]],["^15",[1593,"^V",1133,536870920]],["^15",[1593,"^U",339,536870920]],["^15",[1593,"^U",1133,536870920]],["^15",[1593,"^H",339,536870920]],["^15",[1593,"^;","~u655b737c-03eb-4494-98e3-7fc044946c68",536870920]],["^15",[1594,"^3","- Schematic\n  \n  [Alternative Link](https://epicgames.box.com/shared/static/vjvvazuhzgnofcwzzm9yjv2jcdqmoo0g.png)\n  \n  ![BeginPlay_Animation_Schematic.png](../assets/BeginPlay_Animation_Schematic_1693491679248_0.png)",536870920]],["^15",[1594,"^17",1700492156048,536870920]],["^15",[1594,"^Z","Unreal/pages/Animation.md",536870920]],["^15",[1595,"^Q","Schematic\n\n[Alternative Link](https://epicgames.box.com/shared/static/vjvvazuhzgnofcwzzm9yjv2jcdqmoo0g.png)\n\n![BeginPlay_Animation_Schematic.png](../assets/BeginPlay_Animation_Schematic_1693491679248_0.png)",536870920]],["^15",[1595,"^O","^16",536870920]],["^15",[1595,"^F",404,536870920]],["^15",[1595,"^X",404,536870920]],["^15",[1595,"^V",404,536870920]],["^15",[1595,"^U",404,536870920]],["^15",[1595,"^;","~u655b737c-ef93-4497-bb4c-2f143f87d823",536870920]],["^15",[1596,"^3","- Schematic\n  \n  [Alternative Link](https://epicgames.box.com/shared/static/lsr404kdgjknn4t3wrtl2pr7j46b7pac.png)\n  \n  ![Beginplay_Gameplay_Schematic.png](../assets/Beginplay_Gameplay_Schematic_1693206643817_0.png){:height 445, :width 778}",536870920]],["^15",[1596,"^17",1700492156054,536870920]],["^15",[1596,"^Z","Unreal/pages/Gameplay.md",536870920]],["^15",[1597,"^K",1700492156092,536870920]],["^15",[1597,"^[",1596,536870920]],["^15",[1597,"^@",false,536870920]],["^15",[1597,"^Y","gameplay",536870920]],["^15",[1597,"^11","Gameplay",536870920]],["^15",[1597,"^B",1700492156092,536870920]],["^15",[1597,"^;","~u655b737c-13b2-400c-82ec-913889938c0b",536870920]],["^15",[1598,"^Q","Schematic\n\n[Alternative Link](https://epicgames.box.com/shared/static/lsr404kdgjknn4t3wrtl2pr7j46b7pac.png)\n\n![Beginplay_Gameplay_Schematic.png](../assets/Beginplay_Gameplay_Schematic_1693206643817_0.png){:height 445, :width 778}",536870920]],["^15",[1598,"^O","^16",536870920]],["^15",[1598,"^F",1597,536870920]],["^15",[1598,"^X",1597,536870920]],["^15",[1598,"^V",1597,536870920]],["^15",[1598,"^U",1597,536870920]],["^15",[1598,"^;","~u655b737c-1bd9-4b50-8931-2eb314f6a4b1",536870920]],["^15",[1599,"^3","- Schematic\n  [Alternative Link](https://epicgames.box.com/shared/static/vo9sfe02ndl3f5ef75p5vahuxqh6hs6s.png)\n  \n  ![BeginPlay_Niagara_Schematic.png](../assets/BeginPlay_Niagara_Schematic_1693381386812_0.png)",536870920]],["^15",[1599,"^17",1700492156064,536870920]],["^15",[1599,"^Z","Unreal/pages/Niagra.md",536870920]],["^15",[1600,"^K",1700492156093,536870920]],["^15",[1600,"^[",1599,536870920]],["^15",[1600,"^@",false,536870920]],["^15",[1600,"^Y","niagra",536870920]],["^15",[1600,"^11","Niagra",536870920]],["^15",[1600,"^B",1700492156093,536870920]],["^15",[1600,"^;","~u655b737c-a7af-4063-8fe5-1a427df67941",536870920]],["^15",[1601,"^Q","Schematic\n[Alternative Link](https://epicgames.box.com/shared/static/vo9sfe02ndl3f5ef75p5vahuxqh6hs6s.png)\n\n![BeginPlay_Niagara_Schematic.png](../assets/BeginPlay_Niagara_Schematic_1693381386812_0.png)",536870920]],["^15",[1601,"^O","^16",536870920]],["^15",[1601,"^F",1600,536870920]],["^15",[1601,"^X",1600,536870920]],["^15",[1601,"^V",1600,536870920]],["^15",[1601,"^U",1600,536870920]],["^15",[1601,"^;","~u655b737c-9c85-4cdf-9058-6839f13c4780",536870920]],["^15",[1602,"^3","- Schematic\n  \n  [Alternative Link](https://epicgames.box.com/shared/static/fq9nepnq9khxjsi6a94unligz6lo3iif.png)\n  \n  ![BeginPlay_Rendering_Schematic.png](../assets/BeginPlay_Rendering_Schematic_1693151870278_0.png)",536870920]],["^15",[1602,"^17",1700492156072,536870920]],["^15",[1602,"^Z","Unreal/pages/Rendering.md",536870920]],["^15",[1603,"^Q","Schematic\n\n[Alternative Link](https://epicgames.box.com/shared/static/fq9nepnq9khxjsi6a94unligz6lo3iif.png)\n\n![BeginPlay_Rendering_Schematic.png](../assets/BeginPlay_Rendering_Schematic_1693151870278_0.png)",536870920]],["^15",[1603,"^O","^16",536870920]],["^15",[1603,"^F",806,536870920]],["^15",[1603,"^X",806,536870920]],["^15",[1603,"^V",806,536870920]],["^15",[1603,"^U",806,536870920]],["^15",[1603,"^;","~u655b737c-0170-45e5-a423-197b500a0da0",536870920]],["^15",[1604,"^3","- Various schematics or high level overview of Unreal Engine systems.\n  [Reference](https://dev.epicgames.com/community/learning/paths/0w/unreal-engine-beginplay)\n- [[Unreal Engine]] Schematic\n- [[Unreal Programming]] Schematic\n- [[Unreal Blueprint]] Schematic\n- [[Unreal World]] Worldbuilding Schematic\n- [[Rendering]] Schematic\n- [[Gameplay]] Schematic\n- [[Sound]] Schematic\n- [[Niagra]] Schematic\n- [[Animation]] Schematic\n- [[UMG]] Schematic",536870920]],["^15",[1604,"^17",1700492156093,536870920]],["^15",[1604,"^Z","Unreal/pages/Schematic.md",536870920]],["^15",[1605,"^K",1700492156106,536870920]],["^15",[1605,"^[",1622,536870920]],["^15",[1605,"^@",false,536870920]],["^15",[1605,"^Y","sound",536870920]],["^15",[1605,"^11","Sound",536870920]],["^15",[1605,"^B",1700492156106,536870920]],["^15",[1605,"^;","~u655b737c-e287-4b1c-b719-6162644ab53a",536870920]],["^15",[1606,"^K",1700492156161,536870920]],["^15",[1606,"^[",1644,536870920]],["^15",[1606,"^@",false,536870920]],["^15",[1606,"^Y","unreal programming",536870920]],["^15",[1606,"^11","Unreal Programming",536870920]],["^15",[1606,"^B",1700492156161,536870920]],["^15",[1606,"^;","~u655b737c-f390-4a7e-b3a8-fc42e6b9240c",536870920]],["^15",[1607,"^5",1625,536870920]],["^15",[1607,"^K",1700492156118,536870920]],["^15",[1607,"^[",1624,536870920]],["^15",[1607,"^@",false,536870920]],["^15",[1607,"^Y","umg",536870920]],["^15",[1607,"^11","UMG",536870920]],["^15",[1607,"^?",["^ ","^18",["^19",["Unreal Motion Graphics"]]],536870920]],["^15",[1607,"^4",["^ ","^18","Unreal Motion Graphics"],536870920]],["^15",[1607,"^B",1700492156118,536870920]],["^15",[1607,"^;","~u655b737c-911b-48bd-82d8-409293f52bbe",536870920]],["^15",[1608,"^K",1700492156171,536870920]],["^15",[1608,"^[",1647,536870920]],["^15",[1608,"^@",false,536870920]],["^15",[1608,"^Y","unreal world",536870920]],["^15",[1608,"^11","Unreal World",536870920]],["^15",[1608,"^B",1700492156171,536870920]],["^15",[1608,"^;","~u655b737c-23ff-49fc-99e5-7432acef93bf",536870920]],["^15",[1609,"^K",1700492156127,536870920]],["^15",[1609,"^[",1628,536870920]],["^15",[1609,"^@",false,536870920]],["^15",[1609,"^Y","unreal blueprint",536870920]],["^15",[1609,"^11","Unreal Blueprint",536870920]],["^15",[1609,"^B",1700492156127,536870920]],["^15",[1609,"^;","~u655b737c-a9fd-4330-b35a-7387ab3ac7b7",536870920]],["^15",[1610,"^K",1700492156089,536870920]],["^15",[1610,"^[",1604,536870920]],["^15",[1610,"^@",false,536870920]],["^15",[1610,"^Y","schematic",536870920]],["^15",[1610,"^11","Schematic",536870920]],["^15",[1610,"^B",1700492156089,536870920]],["^15",[1610,"^;","~u655b737c-4da6-4374-a78b-f486a85195d7",536870920]],["^15",[1611,"^Q","[[Unreal Blueprint]] Schematic",536870920]],["^15",[1611,"^O","^16",536870920]],["^15",[1611,"^F",1621,536870920]],["^15",[1611,"^X",1610,536870920]],["^15",[1611,"^V",1610,536870920]],["^15",[1611,"^U",1609,536870920]],["^15",[1611,"^U",1610,536870920]],["^15",[1611,"^H",1609,536870920]],["^15",[1611,"^;","~u655b737c-ddc9-4ab2-a193-500badc64118",536870920]],["^15",[1612,"^Q","[[Rendering]] Schematic",536870920]],["^15",[1612,"^O","^16",536870920]],["^15",[1612,"^F",1615,536870920]],["^15",[1612,"^X",1610,536870920]],["^15",[1612,"^V",1610,536870920]],["^15",[1612,"^U",806,536870920]],["^15",[1612,"^U",1610,536870920]],["^15",[1612,"^H",806,536870920]],["^15",[1612,"^;","~u655b737c-9a5f-4106-9dbf-69aaeab51532",536870920]],["^15",[1613,"^Q","Various schematics or high level overview of Unreal Engine systems.\n[Reference](https://dev.epicgames.com/community/learning/paths/0w/unreal-engine-beginplay)",536870920]],["^15",[1613,"^O","^16",536870920]],["^15",[1613,"^F",1610,536870920]],["^15",[1613,"^X",1610,536870920]],["^15",[1613,"^V",1610,536870920]],["^15",[1613,"^U",1610,536870920]],["^15",[1613,"^;","~u655b737c-7cb1-45e1-8c25-8d87bbfb2415",536870920]],["^15",[1614,"^Q","[[Gameplay]] Schematic",536870920]],["^15",[1614,"^O","^16",536870920]],["^15",[1614,"^F",1612,536870920]],["^15",[1614,"^X",1610,536870920]],["^15",[1614,"^V",1610,536870920]],["^15",[1614,"^U",1597,536870920]],["^15",[1614,"^U",1610,536870920]],["^15",[1614,"^H",1597,536870920]],["^15",[1614,"^;","~u655b737c-8d1e-4fda-aeaa-e1e0d9f8b7a6",536870920]],["^15",[1615,"^Q","[[Unreal World]] Worldbuilding Schematic",536870920]],["^15",[1615,"^O","^16",536870920]],["^15",[1615,"^F",1611,536870920]],["^15",[1615,"^X",1610,536870920]],["^15",[1615,"^V",1610,536870920]],["^15",[1615,"^U",1608,536870920]],["^15",[1615,"^U",1610,536870920]],["^15",[1615,"^H",1608,536870920]],["^15",[1615,"^;","~u655b737c-0414-42f9-a079-c00395d16f39",536870920]],["^15",[1616,"^Q","[[Niagra]] Schematic",536870920]],["^15",[1616,"^O","^16",536870920]],["^15",[1616,"^F",1618,536870920]],["^15",[1616,"^X",1610,536870920]],["^15",[1616,"^V",1610,536870920]],["^15",[1616,"^U",1600,536870920]],["^15",[1616,"^U",1610,536870920]],["^15",[1616,"^H",1600,536870920]],["^15",[1616,"^;","~u655b737c-a065-4d54-a6c1-baece7534d80",536870920]],["^15",[1617,"^Q","[[Animation]] Schematic",536870920]],["^15",[1617,"^O","^16",536870920]],["^15",[1617,"^F",1616,536870920]],["^15",[1617,"^X",1610,536870920]],["^15",[1617,"^V",1610,536870920]],["^15",[1617,"^U",404,536870920]],["^15",[1617,"^U",1610,536870920]],["^15",[1617,"^H",404,536870920]],["^15",[1617,"^;","~u655b737c-6516-4c9c-98cf-c39cdc438c21",536870920]],["^15",[1618,"^Q","[[Sound]] Schematic",536870920]],["^15",[1618,"^O","^16",536870920]],["^15",[1618,"^F",1614,536870920]],["^15",[1618,"^X",1610,536870920]],["^15",[1618,"^V",1610,536870920]],["^15",[1618,"^U",1605,536870920]],["^15",[1618,"^U",1610,536870920]],["^15",[1618,"^H",1605,536870920]],["^15",[1618,"^;","~u655b737c-614d-445c-95af-1f2249141b64",536870920]],["^15",[1619,"^Q","[[Unreal Engine]] Schematic",536870920]],["^15",[1619,"^O","^16",536870920]],["^15",[1619,"^F",1613,536870920]],["^15",[1619,"^X",1610,536870920]],["^15",[1619,"^V",1610,536870920]],["^15",[1619,"^U",27,536870920]],["^15",[1619,"^U",1610,536870920]],["^15",[1619,"^H",27,536870920]],["^15",[1619,"^;","~u655b737c-ad27-4f39-a163-88fa7f3c5039",536870920]],["^15",[1620,"^Q","[[UMG]] Schematic",536870920]],["^15",[1620,"^O","^16",536870920]],["^15",[1620,"^F",1617,536870920]],["^15",[1620,"^X",1610,536870920]],["^15",[1620,"^V",1610,536870920]],["^15",[1620,"^U",1607,536870920]],["^15",[1620,"^U",1610,536870920]],["^15",[1620,"^H",1607,536870920]],["^15",[1620,"^;","~u655b737c-2d89-4945-8593-223141cafede",536870920]],["^15",[1621,"^Q","[[Unreal Programming]] Schematic",536870920]],["^15",[1621,"^O","^16",536870920]],["^15",[1621,"^F",1619,536870920]],["^15",[1621,"^X",1610,536870920]],["^15",[1621,"^V",1610,536870920]],["^15",[1621,"^U",1606,536870920]],["^15",[1621,"^U",1610,536870920]],["^15",[1621,"^H",1606,536870920]],["^15",[1621,"^;","~u655b737c-c747-4f8a-b856-e9c80a8b9aad",536870920]],["^15",[1622,"^3","- Schematic\n  \n  [Alternative Link](https://epicgames.box.com/shared/static/b6dr9ffuq23j0cdvdhemdkgszw165fjw.png)\n  \n  ![BeginPlay_Audio_Schematic.png](../assets/BeginPlay_Audio_Schematic_1693224129101_0.png)",536870920]],["^15",[1622,"^17",1700492156106,536870920]],["^15",[1622,"^Z","Unreal/pages/Sound.md",536870920]],["^15",[1623,"^Q","Schematic\n\n[Alternative Link](https://epicgames.box.com/shared/static/b6dr9ffuq23j0cdvdhemdkgszw165fjw.png)\n\n![BeginPlay_Audio_Schematic.png](../assets/BeginPlay_Audio_Schematic_1693224129101_0.png)",536870920]],["^15",[1623,"^O","^16",536870920]],["^15",[1623,"^F",1605,536870920]],["^15",[1623,"^X",1605,536870920]],["^15",[1623,"^V",1605,536870920]],["^15",[1623,"^U",1605,536870920]],["^15",[1623,"^;","~u655b737c-c8a2-404d-b793-0a20d1ebc7bd",536870920]],["^15",[1624,"^3","alias:: Unreal Motion Graphics\n\n- Schematic\n  \n  [Alternative Link](https://epicgames.box.com/shared/static/pu3revf714eguoned8te84u1vpfqacel.png)\n  \n  ![BeginPlay_UMG_Schematic.png](../assets/BeginPlay_UMG_Schematic_1693491757334_0.png)",536870920]],["^15",[1624,"^17",1700492156119,536870920]],["^15",[1624,"^Z","Unreal/pages/UMG.md",536870920]],["^15",[1625,"^5",1607,536870920]],["^15",[1625,"^K",1700492156118,536870920]],["^15",[1625,"^@",false,536870920]],["^15",[1625,"^Y","unreal motion graphics",536870920]],["^15",[1625,"^11","Unreal Motion Graphics",536870920]],["^15",[1625,"^B",1700492156118,536870920]],["^15",[1625,"^;","~u655b737c-e83b-4282-9fdc-31143e561eb9",536870920]],["^15",[1626,"^Q","alias:: Unreal Motion Graphics\n\n",536870920]],["^15",[1626,"^O","^16",536870920]],["^15",[1626,"^1;",["^19",[]],536870920]],["^15",[1626,"^F",1607,536870920]],["^15",[1626,"^X",1607,536870920]],["^15",[1626,"^V",1607,536870920]],["^15",[1626,"^U",1607,536870920]],["^15",[1626,"^U",1625,536870920]],["^15",[1626,"^:",true,536870920]],["^15",[1626,"^?",["^ ","^18",["^19",["Unreal Motion Graphics"]]],536870920]],["^15",[1626,"^J",["^18"],536870920]],["^15",[1626,"^4",["^ ","^18","Unreal Motion Graphics"],536870920]],["^15",[1626,"^H",1625,536870920]],["^15",[1626,"^;","~u655b737c-c7df-487a-8bb5-9e96fe3a6022",536870920]],["^15",[1627,"^Q","Schematic\n\n[Alternative Link](https://epicgames.box.com/shared/static/pu3revf714eguoned8te84u1vpfqacel.png)\n\n![BeginPlay_UMG_Schematic.png](../assets/BeginPlay_UMG_Schematic_1693491757334_0.png)",536870920]],["^15",[1627,"^O","^16",536870920]],["^15",[1627,"^F",1626,536870920]],["^15",[1627,"^X",1607,536870920]],["^15",[1627,"^V",1607,536870920]],["^15",[1627,"^U",1607,536870920]],["^15",[1627,"^;","~u655b737c-0f88-4a40-bb98-2c40613d1b23",536870920]],["^15",[1628,"^3","- Schematic\n  \n  [Alternative Link](https://epicgames.box.com/shared/static/jqfmnwl0azel0nrxdff8c8zakgvl9bw7.png)\n  \n  ![BeginPlay_Blueprint_Schematic.png](../assets/BeginPlay_Blueprint_Schematic_1692787854779_0.png)",536870920]],["^15",[1628,"^17",1700492156127,536870920]],["^15",[1628,"^Z","Unreal/pages/Unreal Blueprint.md",536870920]],["^15",[1629,"^Q","Schematic\n\n[Alternative Link](https://epicgames.box.com/shared/static/jqfmnwl0azel0nrxdff8c8zakgvl9bw7.png)\n\n![BeginPlay_Blueprint_Schematic.png](../assets/BeginPlay_Blueprint_Schematic_1692787854779_0.png)",536870920]],["^15",[1629,"^O","^16",536870920]],["^15",[1629,"^F",1609,536870920]],["^15",[1629,"^X",1609,536870920]],["^15",[1629,"^V",1609,536870920]],["^15",[1629,"^U",1609,536870920]],["^15",[1629,"^;","~u655b737c-8818-44cb-b97f-91af89daf129",536870920]],["^15",[1630,"^3","- Uses the base *C++* but modifies all aspects of it, creating Unreal's own flavor of *C++*. Paired with [[Unreal Build Tool]] which is Unreal C++'s compiler.\n  There are new [[Unreal C++ Data Types]], implementations for existing structures and some new features on top of C++.\n  \n  There's also an [[Unreal C++ Garbage Collector]] which handles memory (de)allocation at runtime.\n-\n-",536870920]],["^15",[1630,"^17",1700492156140,536870920]],["^15",[1630,"^Z","Unreal/pages/Unreal C++.md",536870920]],["^15",[1631,"^K",1700492156161,536870920]],["^15",[1631,"^[",1630,536870920]],["^15",[1631,"^@",false,536870920]],["^15",[1631,"^Y","unreal c++",536870920]],["^15",[1631,"^11","Unreal C++",536870920]],["^15",[1631,"^B",1700492156161,536870920]],["^15",[1631,"^;","~u655b737c-540d-4056-a833-37c35669f602",536870920]],["^15",[1632,"^K",1700492156138,536870920]],["^15",[1632,"^@",false,536870920]],["^15",[1632,"^Y","unreal c++ garbage collector",536870920]],["^15",[1632,"^11","Unreal C++ Garbage Collector",536870920]],["^15",[1632,"^B",1700492156138,536870920]],["^15",[1632,"^;","~u655b737c-a1d3-4658-b138-121b2d91f230",536870920]],["^15",[1633,"^K",1700492156139,536870920]],["^15",[1633,"^@",false,536870920]],["^15",[1633,"^Y","unreal c++ data types",536870920]],["^15",[1633,"^11","Unreal C++ Data Types",536870920]],["^15",[1633,"^B",1700492156139,536870920]],["^15",[1633,"^;","~u655b737c-3c4c-4a78-b25b-b0efd6f262d3",536870920]],["^15",[1634,"^K",1700492156139,536870920]],["^15",[1634,"^@",false,536870920]],["^15",[1634,"^Y","unreal build tool",536870920]],["^15",[1634,"^11","Unreal Build Tool",536870920]],["^15",[1634,"^B",1700492156139,536870920]],["^15",[1634,"^;","~u655b737c-f1e3-4fe8-a09a-d5506cfbadeb",536870920]],["^15",[1635,"^Q","Uses the base *C++* but modifies all aspects of it, creating Unreal's own flavor of *C++*. Paired with [[Unreal Build Tool]] which is Unreal C++'s compiler.\nThere are new [[Unreal C++ Data Types]], implementations for existing structures and some new features on top of C++.\n\nThere's also an [[Unreal C++ Garbage Collector]] which handles memory (de)allocation at runtime.",536870920]],["^15",[1635,"^O","^16",536870920]],["^15",[1635,"^F",1631,536870920]],["^15",[1635,"^X",1631,536870920]],["^15",[1635,"^V",1631,536870920]],["^15",[1635,"^U",1631,536870920]],["^15",[1635,"^U",1632,536870920]],["^15",[1635,"^U",1633,536870920]],["^15",[1635,"^U",1634,536870920]],["^15",[1635,"^H",1632,536870920]],["^15",[1635,"^H",1633,536870920]],["^15",[1635,"^H",1634,536870920]],["^15",[1635,"^;","~u655b737c-c43f-4090-bb12-b393e1418385",536870920]],["^15",[1636,"^Q","",536870920]],["^15",[1636,"^O","^16",536870920]],["^15",[1636,"^F",1635,536870920]],["^15",[1636,"^X",1631,536870920]],["^15",[1636,"^V",1631,536870920]],["^15",[1636,"^U",1631,536870920]],["^15",[1636,"^;","~u655b737c-1cfe-42b7-ae7e-6396f890fb4a",536870920]],["^15",[1637,"^Q","",536870920]],["^15",[1637,"^O","^16",536870920]],["^15",[1637,"^F",1636,536870920]],["^15",[1637,"^X",1631,536870920]],["^15",[1637,"^V",1631,536870920]],["^15",[1637,"^U",1631,536870920]],["^15",[1637,"^;","~u655b737c-207f-4aa8-93e2-70a704f7d206",536870920]],["^15",[1638,"^3","- A versatile 3D creation tool, it can be used as a 3D game engine, video creation suite, simulation etc.\n- Schematic\n  [Alternative Link](https://epicgames.box.com/shared/static/s563f5kyt08tg3s6tc45xrnxf3xulmt2.png)\n  ![BeginPlay_Engine_Structure_Schematic.png](../assets/BeginPlay_Engine_Structure_Schematic_1692786144747_0.png)\n- [[Unreal C++]]\n-\n-",536870920]],["^15",[1638,"^17",1700492156152,536870920]],["^15",[1638,"^Z","Unreal/pages/Unreal Engine.md",536870920]],["^15",[1639,"^Q","A versatile 3D creation tool, it can be used as a 3D game engine, video creation suite, simulation etc.",536870920]],["^15",[1639,"^O","^16",536870920]],["^15",[1639,"^F",27,536870920]],["^15",[1639,"^X",27,536870920]],["^15",[1639,"^V",27,536870920]],["^15",[1639,"^U",27,536870920]],["^15",[1639,"^;","~u655b737c-96f9-4881-8ca5-28df71af9719",536870920]],["^15",[1640,"^Q","Schematic\n[Alternative Link](https://epicgames.box.com/shared/static/s563f5kyt08tg3s6tc45xrnxf3xulmt2.png)\n![BeginPlay_Engine_Structure_Schematic.png](../assets/BeginPlay_Engine_Structure_Schematic_1692786144747_0.png)",536870920]],["^15",[1640,"^O","^16",536870920]],["^15",[1640,"^F",1639,536870920]],["^15",[1640,"^X",27,536870920]],["^15",[1640,"^V",27,536870920]],["^15",[1640,"^U",27,536870920]],["^15",[1640,"^;","~u655b737c-206c-42cc-832d-7d8e8b1cf97d",536870920]],["^15",[1641,"^Q","[[Unreal C++]]",536870920]],["^15",[1641,"^O","^16",536870920]],["^15",[1641,"^F",1640,536870920]],["^15",[1641,"^X",27,536870920]],["^15",[1641,"^V",27,536870920]],["^15",[1641,"^U",27,536870920]],["^15",[1641,"^U",1631,536870920]],["^15",[1641,"^H",1631,536870920]],["^15",[1641,"^;","~u655b737c-3a10-40b7-8109-1ec349eb6f52",536870920]],["^15",[1642,"^Q","",536870920]],["^15",[1642,"^O","^16",536870920]],["^15",[1642,"^F",1641,536870920]],["^15",[1642,"^X",27,536870920]],["^15",[1642,"^V",27,536870920]],["^15",[1642,"^U",27,536870920]],["^15",[1642,"^;","~u655b737c-66ba-4236-9563-be8a1950d3f8",536870920]],["^15",[1643,"^Q","",536870920]],["^15",[1643,"^O","^16",536870920]],["^15",[1643,"^F",1642,536870920]],["^15",[1643,"^X",27,536870920]],["^15",[1643,"^V",27,536870920]],["^15",[1643,"^U",27,536870920]],["^15",[1643,"^;","~u655b737c-c4c3-4844-973a-cb77ddae7df8",536870920]],["^15",[1644,"^3","- Done in [[Unreal C++]]\n- Schematic\n  [Alternative Link](https://epicgames.box.com/shared/static/hqvk83lubfzyj942ifvze4jn14uc7ypp.png)\n  ![BeginPlay_Programming_Schematic.png](../assets/BeginPlay_Programming_Schematic_1692780742965_0.png)",536870920]],["^15",[1644,"^17",1700492156162,536870920]],["^15",[1644,"^Z","Unreal/pages/Unreal Programming.md",536870920]],["^15",[1645,"^Q","Done in [[Unreal C++]]",536870920]],["^15",[1645,"^O","^16",536870920]],["^15",[1645,"^F",1606,536870920]],["^15",[1645,"^X",1606,536870920]],["^15",[1645,"^V",1606,536870920]],["^15",[1645,"^U",1606,536870920]],["^15",[1645,"^U",1631,536870920]],["^15",[1645,"^H",1631,536870920]],["^15",[1645,"^;","~u655b737c-1748-4a42-bc7a-12b816a48394",536870920]],["^15",[1646,"^Q","Schematic\n[Alternative Link](https://epicgames.box.com/shared/static/hqvk83lubfzyj942ifvze4jn14uc7ypp.png)\n![BeginPlay_Programming_Schematic.png](../assets/BeginPlay_Programming_Schematic_1692780742965_0.png)",536870920]],["^15",[1646,"^O","^16",536870920]],["^15",[1646,"^F",1645,536870920]],["^15",[1646,"^X",1606,536870920]],["^15",[1646,"^V",1606,536870920]],["^15",[1646,"^U",1606,536870920]],["^15",[1646,"^;","~u655b737c-e8ea-45d1-ac51-29909b8548b2",536870920]],["^15",[1647,"^3","- Schematic\n  \n  [Alternative Link](https://epicgames.box.com/shared/static/v06yr59ta2drzruldefx83yqprkal0vf.png)\n  \n  ![BeginPlay_WorldBuilding_Schematic.png](../assets/BeginPlay_WorldBuilding_Schematic_1693119511394_0.png)",536870920]],["^15",[1647,"^17",1700492156171,536870920]],["^15",[1647,"^Z","Unreal/pages/Unreal World.md",536870920]],["^15",[1648,"^Q","Schematic\n\n[Alternative Link](https://epicgames.box.com/shared/static/v06yr59ta2drzruldefx83yqprkal0vf.png)\n\n![BeginPlay_WorldBuilding_Schematic.png](../assets/BeginPlay_WorldBuilding_Schematic_1693119511394_0.png)",536870920]],["^15",[1648,"^O","^16",536870920]],["^15",[1648,"^F",1608,536870920]],["^15",[1648,"^X",1608,536870920]],["^15",[1648,"^V",1608,536870920]],["^15",[1648,"^U",1608,536870920]],["^15",[1648,"^;","~u655b737c-a622-49c2-9caa-f7d4c3a1128d",536870920]],["^15",[1650,"^K",1700492156191,536870920]],["^15",[1650,"^@",false,536870920]],["^15",[1650,"^Y","workout routine",536870920]],["^15",[1650,"^11","Workout Routine",536870920]],["^15",[1650,"^B",1700492156191,536870920]],["^15",[1650,"^;","~u656462fe-b25f-4b0f-a13a-57b4ac7ce928",536870964]],["^15",[1659,"^3","- [[eshell]]",536870920]],["^15",[1659,"^17",1700492156200,536870920]],["^15",[1659,"^Z","emacs/pages/Emacs.md",536870920]],["^15",[1660,"^K",1700492156208,536870920]],["^15",[1660,"^[",1662,536870920]],["^15",[1660,"^@",false,536870920]],["^15",[1660,"^Y","eshell",536870920]],["^15",[1660,"^11","eshell",536870920]],["^15",[1660,"^B",1700492156208,536870920]],["^15",[1660,"^;","~u655b737c-f287-424a-9fff-b77ff531e7af",536870920]],["^15",[1661,"^Q","[[eshell]]",536870920]],["^15",[1661,"^O","^16",536870920]],["^15",[1661,"^F",22,536870920]],["^15",[1661,"^X",22,536870920]],["^15",[1661,"^V",22,536870920]],["^15",[1661,"^U",22,536870920]],["^15",[1661,"^U",1660,536870920]],["^15",[1661,"^H",1660,536870920]],["^15",[1661,"^;","~u655b737c-5b0e-4489-8b29-d267c512ab43",536870920]],["^15",[1662,"^3","- Disable AutoCompletion for the [[eshell]] with\n  ```common-lisp\n  (setq eshell-cmpl-cycle-completions nil)\n  ```\n  in the [[init.el]]",536870920]],["^15",[1662,"^17",1700492156209,536870920]],["^15",[1662,"^Z","emacs/pages/eshell.md",536870920]],["^15",[1663,"^K",1700492156208,536870920]],["^15",[1663,"^@",false,536870920]],["^15",[1663,"^Y","init.el",536870920]],["^15",[1663,"^11","init.el",536870920]],["^15",[1663,"^B",1700492156208,536870920]],["^15",[1663,"^;","~u655b737c-a802-4286-9766-67eddabf5ecb",536870920]],["^15",[1664,"^Q","Disable AutoCompletion for the [[eshell]] with\n```common-lisp\n(setq eshell-cmpl-cycle-completions nil)\n```\nin the [[init.el]]",536870920]],["^15",[1664,"^O","^16",536870920]],["^15",[1664,"^F",1660,536870920]],["^15",[1664,"^X",1660,536870920]],["^15",[1664,"^V",1660,536870920]],["^15",[1664,"^U",1660,536870920]],["^15",[1664,"^U",1663,536870920]],["^15",[1664,"^H",1660,536870920]],["^15",[1664,"^H",1663,536870920]],["^15",[1664,"^;","~u655b737c-ce65-410e-bd51-ee51501937d0",536870920]],["^15",[1665,"^2",1,536870921]],["^15",[1665,"^T","^2",536870921]],["^15",[1666,"^12",2,536870923]],["^15",[1667,"^K",1701077755394,536870924]],["^15",[1667,"^O","^16",536870924]],["^15",[1667,"^N",20231127,536870924]],["^15",[1667,"^@",true,536870924]],["^15",[1667,"^Y","nov 27th, 2023",536870924]],["^15",[1667,"^11","Nov 27th, 2023",536870924]],["^15",[1667,"^B",1701077755394,536870924]],["^15",[1667,"^;","~u656462fb-6c81-44b0-aac9-b9edf24f2ff0",536870924]],["^15",[1668,"^Q","",536870925]],["^15",[1668,"^O","^16",536870925]],["^15",[1668,"^N",20231127,536870925]],["^15",[1668,"^@",true,536870925]],["^15",[1668,"^F",1667,536870925]],["^15",[1668,"^X",1667,536870925]],["^15",[1668,"^V",1667,536870925]],["^15",[1668,"^U",1667,536870926]],["^15",[1668,"^?",["^ "],536870925]],["^15",[1668,"^;","~u656462fb-b5e7-46fe-ab8c-dbc8e3f8a429",536870925]],["^15",[1669,"^3","-",536870928]],["^15",[1669,"^17",1701077756477,536870928]],["^15",[1669,"~:file/last-modified-at","~m1688363410208",536870929]],["^15",[1669,"^Z","emacs/pages/contents.md",536870928]],["^15",[1670,"^3","-",536870930]],["^15",[1670,"^17",1701077756554,536870930]],["^15",[1670,"^1@","~m1693120103111",536870931]],["^15",[1670,"^Z","Git/pages/contents.md",536870930]],["^15",[1671,"^3","- [[ECMAScript]]\n  Last Updated: [[Jun 20th, 2023]] \n  Primary Source: https://javascript.info/\n  Language Version: ECMAScript 2022, Node.js 19.9.0\n  Major Update: May 2023\n  Minor Update: None yet.\n  Additional Notes:\n- Useful Links\n  \n  * MDN for anything JS, it is not the whole ECMA spec sheet but it is the  \n  closest to it with practical and concise examples.\n  * [https://caniuse.com/](https://caniuse.com/) To check what feature is supported in what browser.\n  * [https://kangax.github.io/compat-table](https://kangax.github.io/compat-table) Similar to it\n  * [https://tc39.es/ecma262/](https://tc39.es/ecma262/) New Proposals that are approved to be implemented by JS engines are appended to this list.\n-",536870932]],["^15",[1671,"^17",1701077756780,536870932]],["^15",[1671,"^1@","~m1687269266265",536870933]],["^15",[1671,"^Z","JS/pages/contents.md",536870932]],["^15",[1672,"^K",1701077756776,536870932]],["^15",[1672,"^N",20230620,536870932]],["^15",[1672,"^@",true,536870932]],["^15",[1672,"^Y","jun 20th, 2023",536870932]],["^15",[1672,"^11","Jun 20th, 2023",536870932]],["^15",[1672,"^B",1701077756776,536870932]],["^15",[1672,"^;","~u656462fc-e931-45a3-8882-893240a36163",536870932]],["^15",[1675,"^3","- [[Object]] wrapper for primitive type ``string``.\n- Strings are stored with UTF-16 encoding in JS.\n- There are 3 ways of declaring strings\n  For ex.:\n  ```js\n  //3 ways of declaring strings\n  let x= \"Yo\"\n  x= 'Yo'\n  let y=2\n  x= `Yo ${y}`\n  ```\n  The former 2 are the same, but backticks provide extended functionality, i.e., allowing us to embed other variables and expressions into them with ``${...}``\n- There is no char type in JS.\n- String concatenation:\n  We can concat 2 strings with <string val/var> + <string val/var>\n  \n  Any other type of value also gets converted to string.\n  For ex.:\n  ```js\n  let a= \"1\"+2+3; //is \"123\"\n  let b= 1+2+\"3\"; //is \"33\"\n  ```\n  This also shows that [[Operator]]s are solved from left to right if they have the same precedence, so if an operand on the left converts the result to string, the ones to the right follow string concatenation.\n- [Tagged Templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates): \n  We can call a function before a string is processed, the syntax is ``<func> <string enclosed in backticks>``. The function receives the string, processes it and returns the string.\n- Special Characters are supported in JS:\n  ![image.png](../assets/image_1685814128037_0.png){:height 265, :width 778}\n  \n  ``\\`` is the escape character in JS. \n  \n  Yes each special character is just a single character.\n- ``.length`` to get a string's length.\n- ``[<num>]`` or ``.at(<num>)`` to access individual character of a string. ``.at()`` can also go from the right end if we use a negative number.\n- Strings are immutable in JS, we can access individual chars but not mutate them.\n- Methods like ``<str>.toLowerCase()``, ``<str>.toUpperCase()``, ``<str>.slice(start, optional end)``, ``<str>.substring(start, optional end)``, ``<str>.substr(start,length)``, ``<str>.indexOf(<value>)`` etc exist.  \n  Slice and Substring are the same except substring swaps start and end if start>end.\n  \n  To convert a char to int, \n  ``<str>.codePointAt(<position>)``\n  To convert an int to char\n  ``String.fromCodePoint(<value>)``\n- ``.split(<str sep>)``: Returns an [[Array]] from a string.\n- Each string character is represented by 1-4 bytes in JS as strings are represented by Unicode in JS.\n  We can also use unicode directly\n  * ``\\xXX`` here \\x says this is a unicode char, and XX are 2 hex digits so the range is 00 to FF.\n  For ex.:\n  ```js\n  console.log(\"\\x7A\"); //prints z\n  ```\n  * ``\\uXXXX``\n  * ``\\u{X->XXXXXX}``, that is 1 to 6 hex chars.\n- Initially, JS only supported 2 bytes per char and this lead to ``surrogate pairs`` which are special representations of characters that took more than 2 bytes to be stored, as a result we get\n  ```js\n  console.log('𝒳'.length); //2\n  console.log('😂'.length); //2\n  console.log('𩷶'.length); //2\n  ```\n  Surrogate Pairs are useless without the whole, so visiting a byte of a surrogate pair returns weird symbols.\n- String to Int and Int to String\n  * [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) : Understands surrogate pairs\n  and\n  ``String.fromCharCode`` which doesn't\n  \n  * [str.codePointAt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt): Understands surrogate pairs\n  and\n  ``String.charCodeAt``which doesn't",536870934]],["^15",[1675,"^17",1701077757482,536870934]],["^15",[1675,"^1@","~m1687243483090",536870935]],["^15",[1675,"^Z","JS/pages/String.md",536870934]],["^15",[1690,"^3","MIT License\r\n\r\nCopyright (c) 2022 Arvind Sagar\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",536870936]],["^15",[1690,"^17",1701077757549,536870936]],["^15",[1690,"^1@","~m1683013624438",536870937]],["^15",[1690,"^Z","LICENSE",536870936]],["^15",[1691,"^3","-",536870938]],["^15",[1691,"^17",1701077757640,536870938]],["^15",[1691,"^1@","~m1688210299724",536870939]],["^15",[1691,"^Z","ML/pages/contents.md",536870938]],["^15",[1692,"^3","- Fixed-size, single-type & immutable\n  Syntax is ``<let/const> <mutability>: [<type>; <size n>]= [<elem1>, ..., <elem n>]``\n  For ex.:\n  ```rust\n  let arr: [i32;3]= [1,2,3];\n  let x= arr[0]; //to access\n  ```\n  The type and size can be omitted, and it is inferred.\n- Just like C++, arrays occupy space on the Stack.\n- Arrays can also be initialized with default values\n  For ex.:\n  ```rust\n  let arr = [3;5];  // Has 5 values, all are 3 and of type i32 as automatically inferred.\n  ```\n- Accessing a value out of bounds leads to a [[Panic]] at runtime/compile-time if the compiler has the index available at compile-time.\n- [[Destructuring]] using [[Pattern Matching]] also works for arrays\n  For ex.:\n  ```rust\n  let arr= [1,2,3];\n  let [x,y,z] = arr;\n  ```\n-",536870940]],["^15",[1692,"^17",1701077757668,536870940]],["^15",[1692,"^1@","~m1688890572361",536870941]],["^15",[1692,"^Z","Rust/pages/Array.md",536870940]],["^15",[1693,"^Q","Just like C++, arrays occupy space on the Stack.",536870940]],["^15",[1693,"^O","^16",536870940]],["^15",[1693,"^F",323,536870940]],["^15",[1693,"^X",305,536870940]],["^15",[1693,"^V",305,536870940]],["^15",[1693,"^U",305,536870940]],["^15",[1693,"^;","~u656462fd-c105-4c05-a058-1079b5ef9ef9",536870940]],["^15",[1694,"^Q","Arrays can also be initialized with default values\nFor ex.:\n```rust\nlet arr = [3;5];  // Has 5 values, all are 3 and of type i32 as automatically inferred.\n```",536870940]],["^15",[1694,"^O","^16",536870940]],["^15",[1694,"^F",1693,536870940]],["^15",[1694,"^X",305,536870940]],["^15",[1694,"^V",305,536870940]],["^15",[1694,"^U",305,536870940]],["^15",[1694,"^;","~u656462fd-ba7d-47ab-9889-2f1781d288c8",536870940]],["^15",[1695,"^Q","Accessing a value out of bounds leads to a [[Panic]] at runtime/compile-time if the compiler has the index available at compile-time.",536870940]],["^15",[1695,"^O","^16",536870940]],["^15",[1695,"^F",1694,536870940]],["^15",[1695,"^X",305,536870940]],["^15",[1695,"^V",305,536870940]],["^15",[1695,"^U",305,536870940]],["^15",[1695,"^U",1080,536870940]],["^15",[1695,"^H",1080,536870940]],["^15",[1695,"^;","~u656462fd-40a3-4a9d-9270-922418d8bfb2",536870940]],["^15",[1696,"^Q","[[Destructuring]] using [[Pattern Matching]] also works for arrays\nFor ex.:\n```rust\nlet arr= [1,2,3];\nlet [x,y,z] = arr;\n```",536870940]],["^15",[1696,"^O","^16",536870940]],["^15",[1696,"^F",1695,536870940]],["^15",[1696,"^X",305,536870940]],["^15",[1696,"^V",305,536870940]],["^15",[1696,"^U",305,536870940]],["^15",[1696,"^U",574,536870940]],["^15",[1696,"^U",1253,536870940]],["^15",[1696,"^H",574,536870940]],["^15",[1696,"^H",1253,536870940]],["^15",[1696,"^;","~u656462fd-a988-4fd5-9b78-ccc2efe9d8ba",536870940]],["^15",[1697,"^Q","",536870940]],["^15",[1697,"^O","^16",536870940]],["^15",[1697,"^F",1696,536870940]],["^15",[1697,"^X",305,536870940]],["^15",[1697,"^V",305,536870940]],["^15",[1697,"^U",305,536870940]],["^15",[1697,"^;","~u656462fd-3453-4f93-a724-9fed221e29eb",536870940]],["^15",[1698,"^3","- These statements allow simple branching. Unlike languages like JS, non- [[Bool]]s aren’t automatically converted to [[Bool]]s .\n- If-else if-else\n  The ``if``/``else if``/``else`` blocks, these blocks are also called ‘arms’.\n  Syntax:\n  ``if x< y {…}\n  else if x> y {…}\n  else {…}``\n  \n  * if is an expression. So it returns a value. Hence we can do this,\n  ```rust\n  let z = if 2<3 { 2 } else { 3 };\n  ```\n  However, if we return values of differing types then it is an [[Error]] as both arms have to return values of same [[Data Type]] and that type must be assignable.\n- if let-else if-else\n  Uses [[Pattern Matching]], it's a shorter form of ``match`` expressions, as it only cares about given arms.\n  Unlike match arms which covers all cases, matches one case, if-let covers one case and ignores all the rest. We can still have multiple arms with ``if let-else if-else``.\n  Syntax:\n  ``\n  if let <Pattern> = <variable/value> { }\n  else if <Pattern> = <variable/value> { }\n  else {}\n  ``\n  \n  For ex.:\n  ```rust\n  fn main() {\n   let x= Some(2);\n   if let Some(value) = x { //Pattern matching\n    //do something with value\n   } //that's it, it implicitly does _ => () to ignore all the rest cases.\n  \n   let y =2;\n   if let 3 = y {\n    //something\n   }\n   else if let 2 = y {\n    //ya\n   }\n   else {\n     //...\n    }\n  }\n  ```\n  \n  * Unlike ``match``, if let can even use pattern matching against different variables/values in each arm.\n-\n-",536870942]],["^15",[1698,"^17",1701077757814,536870942]],["^15",[1698,"^1@","~m1689185290750",536870943]],["^15",[1698,"^Z","Rust/pages/Conditional.md",536870942]],["^15",[1699,"^Q","If-else if-else\nThe ``if``/``else if``/``else`` blocks, these blocks are also called ‘arms’.\nSyntax:\n``if x< y {…}\nelse if x> y {…}\nelse {…}``\n\n* if is an expression. So it returns a value. Hence we can do this,\n```rust\nlet z = if 2<3 { 2 } else { 3 };\n```\nHowever, if we return values of differing types then it is an [[Error]] as both arms have to return values of same [[Data Type]] and that type must be assignable.",536870942]],["^15",[1699,"^O","^16",536870942]],["^15",[1699,"^F",497,536870942]],["^15",[1699,"^X",495,536870942]],["^15",[1699,"^V",495,536870942]],["^15",[1699,"^U",340,536870942]],["^15",[1699,"^U",495,536870942]],["^15",[1699,"^U",1090,536870942]],["^15",[1699,"^H",340,536870942]],["^15",[1699,"^H",1090,536870942]],["^15",[1699,"^;","~u656462fd-2805-461a-9cbd-35bbb5dcec99",536870942]],["^15",[1700,"^Q","if let-else if-else\nUses [[Pattern Matching]], it's a shorter form of ``match`` expressions, as it only cares about given arms.\nUnlike match arms which covers all cases, matches one case, if-let covers one case and ignores all the rest. We can still have multiple arms with ``if let-else if-else``.\nSyntax:\n``\nif let <Pattern> = <variable/value> { }\nelse if <Pattern> = <variable/value> { }\nelse {}\n``\n\nFor ex.:\n```rust\nfn main() {\n let x= Some(2);\n if let Some(value) = x { //Pattern matching\n  //do something with value\n } //that's it, it implicitly does _ => () to ignore all the rest cases.\n\n let y =2;\n if let 3 = y {\n  //something\n }\n else if let 2 = y {\n  //ya\n }\n else {\n   //...\n  }\n}\n```\n\n* Unlike ``match``, if let can even use pattern matching against different variables/values in each arm.",536870942]],["^15",[1700,"^O","^16",536870942]],["^15",[1700,"^F",1699,536870942]],["^15",[1700,"^X",495,536870942]],["^15",[1700,"^V",495,536870942]],["^15",[1700,"^U",495,536870942]],["^15",[1700,"^U",1253,536870942]],["^15",[1700,"^H",1253,536870942]],["^15",[1700,"^;","~u656462fd-cc2d-4df6-8e54-b20bc61cb961",536870942]],["^15",[1701,"^Q","",536870942]],["^15",[1701,"^O","^16",536870942]],["^15",[1701,"^F",1700,536870942]],["^15",[1701,"^X",495,536870942]],["^15",[1701,"^V",495,536870942]],["^15",[1701,"^U",495,536870942]],["^15",[1701,"^;","~u656462fd-9d28-4480-a765-d100131f16e3",536870942]],["^15",[1702,"^3","- [[Rust]]\n  ![image.png](../assets/image_1688829102595_0.png){:height 352, :width 433}\n  \n  Last Major Update: [[Jul 8th, 2023]] \n  Major Version: v1.70\n- Useful Links:\n  * Primary Book: [Rust Docs Book](https://doc.rust-lang.org/book/)\n  * Secondary Book: [Rust Docs Reference](https://doc.rust-lang.org/reference/index.html)\n  * Unsafe Rust Handbook: [Rust Nomicon](https://doc.rust-lang.org/nomicon/index.html)\n  * Async Book: [Rust Github Async Book](https://rust-lang.github.io/async-book/)",536870944]],["^15",[1702,"^17",1701077757835,536870944]],["^15",[1702,"^1@","~m1690895722424",536870945]],["^15",[1702,"^Z","Rust/pages/contents.md",536870944]],["^15",[1704,"^3","- Rust divides errors into 2 categories, *Recoverable* and *Non-Recoverable* Errors. \n  Simple errors like File not Found can be handled as their failing is expected so they are recoverable errors and are represented with the [[Result Type]], but errors such as accessing an invalid index in an [[Array]] is not expected so it is a type of non-recoverable error, these are triggered through the ``panic!`` [[Macro]].\n- [[Panic]]\n- The [[Result Type]] gets an Error [[Struct]] object when error .\n- Different error types in Rust are represented through a different variant of the ``ErrorKind`` [[Enum]]\n  So we can use ``<error obj>.kind()`` to get the kind and compare it.\n  \n  For ex.:\n  ```rust\n  use std::fs::File;\n  use std::io::ErrorKind;\n   \n  fn main() {\n      let f = File::open(\"hello.txt\");\n   \n      let f = match f {\n          Ok(file) => file,\n          Err(error) => match error.kind() {\n              ErrorKind::NotFound => match File::create(\"hello.txt\") {\n                  Ok(fc) => fc,\n                  Err(e) => panic!(\"Problem creating the file: {:?}\", e),\n              },\n              other_error => {\n                  panic!(\"Problem opening the file: {:?}\", other_error)\n              }\n          },\n      };\n  }\n  \n  ```\n  \n  We can also use [[Closure]]s and [[Unwrap]] to do the same\n  For ex.:\n  ```rust\n  use std::fs::File;\n  use std::io::ErrorKind;\n   \n  fn main() {\n      let f = File::open(\"hello.txt\").unwrap_or_else(|error| {\n          if error.kind() == ErrorKind::NotFound {\n              File::create(\"hello.txt\").unwrap_or_else(|error| {\n                  panic!(\"Problem creating the file: {:?}\", error);\n              })\n          } else {\n              panic!(\"Problem opening the file: {:?}\", error);\n          }\n      });\n  }\n  ```\n  \n  However, the error's type itself will be different. Like ``io::Error`` is a [[Struct]] that contains all the ``io`` errors.\n- Turning Result to panic\n  Using [[Unwrap]] we can get just the value into a variable, as on ``unwrap`` it will panic/return some custom value.\n- ``.expect(\"<string>\")``\n  [[Result Type]] also has this [[Method]] which prints the given message and aborts if ``Err``.\n- Propagating Errors\n  We can use [[Pattern Matching]] on a [[Result Type]] and return a [[Result Type]] again, this essentially *re-throws* or propagates the error back. \n  The ``?`` [[Operator]] is a shorthand for Returning an ``Err``, i.e., it returns an ``Err`` if Err is found and [[Copy or Move]]s the error object. If there's no Err then it does nothing.\n  \n  For ex.:\n  ```rust\n  fn yo()  -> Result<io::File, io::Error>{\n  \t let x =  File::open(\"hello.txt\");\n  return match x{\n          Ok(s) => Ok(s),\n          Err(e) => Err(e),\n      }\n   \n  }\n  //is the same as\n  fn yo2() -> Result<io::File, io::Error>{\n  let x = File::open(\"hello.txt\")?; //Returns an Ok into x, if there's an Err it returns the Err with its value immediately from the function\n  \n  Ok(x) //returns an Ok(x) \n  }\n  ```\n  \n  * ``?`` vs. [[Pattern Matching]]\n  A difference between these 2 is, ``?`` tries to coerce one error type into another. It does so by seeing what the expected return type of the current [[Function]]'s Result is then seeing if the error object has that type or its type has the ``From``[[Trait]] defined which converts the current error type into the return error type. If it is, then it calls the ``from`` [[Method]] of this [[Trait]] and does so.\n  \n  * This [[Operator]] can also be used with the [[Option Type]]\n  For ex.:\n  ```rust\n  fn last_char_of_first_line(text: &str) -> Option<char> {\n      text.lines().next()?.chars().last()\n  }\n  ```\n  If there's a ``None``, return None otherwise continue.\n- Main's return type\n  The ``fn main`` [[Function]] returns the [[Unit Type]] by default, but it can also return a [[Result Type]]. For ex.:\n  ```rust\n  use std::error::Error;\n  use std::fs::File;\n   \n  fn main() -> Result<(), Box<dyn Error>> {\n      let f = File::open(\"hello.txt\")?;\n   \n      Ok(())\n  }\n  ```\n  ``Box<dyn Error>`` is a [[Trait Object]], here it means return any type of Error object. This main [[Function]] returns a 0 to the OS if Ok() and another value otherwise, the value returned is defined by the ``ExitCode`` of the ``Termination`` [[Trait]] of the Error's type.\n-\n-",536870946]],["^15",[1704,"^17",1701077757990,536870946]],["^15",[1704,"^1@","~m1689878663237",536870947]],["^15",[1704,"^Z","Rust/pages/Error.md",536870946]],["^15",[1705,"^Q","Turning Result to panic\nUsing [[Unwrap]] we can get just the value into a variable, as on ``unwrap`` it will panic/return some custom value.",536870946]],["^15",[1705,"^O","^16",536870946]],["^15",[1705,"^F",1708,536870946]],["^15",[1705,"^X",340,536870946]],["^15",[1705,"^V",340,536870946]],["^15",[1705,"^U",340,536870946]],["^15",[1705,"^U",1173,536870946]],["^15",[1705,"^H",1173,536870946]],["^15",[1705,"^;","~u656462fd-40ae-49a6-84b3-df34c9e0d89a",536870946]],["^15",[1706,"^Q","~``.expect(\"<string>\")``\n[[Result Type]] also has this [[Method]] which prints the given message and aborts if ``Err``.",536870946]],["^15",[1706,"^O","^16",536870946]],["^15",[1706,"^F",1705,536870946]],["^15",[1706,"^X",340,536870946]],["^15",[1706,"^V",340,536870946]],["^15",[1706,"^U",340,536870946]],["^15",[1706,"^U",1065,536870946]],["^15",[1706,"^U",1098,536870946]],["^15",[1706,"^H",1065,536870946]],["^15",[1706,"^H",1098,536870946]],["^15",[1706,"^;","~u656462fd-ad8b-4da8-9bef-e5c7cc2a7cf1",536870946]],["^15",[1707,"^Q","The [[Result Type]] gets an Error [[Struct]] object when error .",536870946]],["^15",[1707,"^O","^16",536870946]],["^15",[1707,"^F",1712,536870946]],["^15",[1707,"^X",340,536870946]],["^15",[1707,"^V",340,536870946]],["^15",[1707,"^U",340,536870946]],["^15",[1707,"^U",1064,536870946]],["^15",[1707,"^U",1098,536870946]],["^15",[1707,"^H",1064,536870946]],["^15",[1707,"^H",1098,536870946]],["^15",[1707,"^;","~u656462fd-cfde-4c53-8ac1-d7b6b34c3f76",536870946]],["^15",[1708,"^Q","Different error types in Rust are represented through a different variant of the ``ErrorKind`` [[Enum]]\nSo we can use ``<error obj>.kind()`` to get the kind and compare it.\n\nFor ex.:\n```rust\nuse std::fs::File;\nuse std::io::ErrorKind;\n \nfn main() {\n    let f = File::open(\"hello.txt\");\n \n    let f = match f {\n        Ok(file) => file,\n        Err(error) => match error.kind() {\n            ErrorKind::NotFound => match File::create(\"hello.txt\") {\n                Ok(fc) => fc,\n                Err(e) => panic!(\"Problem creating the file: {:?}\", e),\n            },\n            other_error => {\n                panic!(\"Problem opening the file: {:?}\", other_error)\n            }\n        },\n    };\n}\n\n```\n\nWe can also use [[Closure]]s and [[Unwrap]] to do the same\nFor ex.:\n```rust\nuse std::fs::File;\nuse std::io::ErrorKind;\n \nfn main() {\n    let f = File::open(\"hello.txt\").unwrap_or_else(|error| {\n        if error.kind() == ErrorKind::NotFound {\n            File::create(\"hello.txt\").unwrap_or_else(|error| {\n                panic!(\"Problem creating the file: {:?}\", error);\n            })\n        } else {\n            panic!(\"Problem opening the file: {:?}\", error);\n        }\n    });\n}\n```\n\nHowever, the error's type itself will be different. Like ``io::Error`` is a [[Struct]] that contains all the ``io`` errors.",536870946]],["^15",[1708,"^O","^16",536870946]],["^15",[1708,"^F",1707,536870946]],["^15",[1708,"^X",340,536870946]],["^15",[1708,"^V",340,536870946]],["^15",[1708,"^U",340,536870946]],["^15",[1708,"^U",1064,536870946]],["^15",[1708,"^U",1066,536870946]],["^15",[1708,"^U",1093,536870946]],["^15",[1708,"^U",1173,536870946]],["^15",[1708,"^H",1064,536870946]],["^15",[1708,"^H",1066,536870946]],["^15",[1708,"^H",1093,536870946]],["^15",[1708,"^H",1173,536870946]],["^15",[1708,"^;","~u656462fd-2df9-4acc-be77-e6c469e7ff56",536870946]],["^15",[1709,"^Q","",536870946]],["^15",[1709,"^O","^16",536870946]],["^15",[1709,"^F",1710,536870946]],["^15",[1709,"^X",340,536870946]],["^15",[1709,"^V",340,536870946]],["^15",[1709,"^U",340,536870946]],["^15",[1709,"^;","~u656462fd-e690-4f37-93ed-2876c7ce23e0",536870946]],["^15",[1710,"^Q","Main's return type\nThe ``fn main`` [[Function]] returns the [[Unit Type]] by default, but it can also return a [[Result Type]]. For ex.:\n```rust\nuse std::error::Error;\nuse std::fs::File;\n \nfn main() -> Result<(), Box<dyn Error>> {\n    let f = File::open(\"hello.txt\")?;\n \n    Ok(())\n}\n```\n``Box<dyn Error>`` is a [[Trait Object]], here it means return any type of Error object. This main [[Function]] returns a 0 to the OS if Ok() and another value otherwise, the value returned is defined by the ``ExitCode`` of the ``Termination`` [[Trait]] of the Error's type.",536870946]],["^15",[1710,"^O","^16",536870946]],["^15",[1710,"^F",1711,536870946]],["^15",[1710,"^X",340,536870946]],["^15",[1710,"^V",340,536870946]],["^15",[1710,"^U",163,536870946]],["^15",[1710,"^U",340,536870946]],["^15",[1710,"^U",1073,536870946]],["^15",[1710,"^U",1098,536870946]],["^15",[1710,"^U",1174,536870946]],["^15",[1710,"^U",1264,536870946]],["^15",[1710,"^H",163,536870946]],["^15",[1710,"^H",1073,536870946]],["^15",[1710,"^H",1098,536870946]],["^15",[1710,"^H",1174,536870946]],["^15",[1710,"^H",1264,536870946]],["^15",[1710,"^;","~u656462fd-6248-44f5-b585-d365789a34d3",536870946]],["^15",[1711,"^Q","Propagating Errors\nWe can use [[Pattern Matching]] on a [[Result Type]] and return a [[Result Type]] again, this essentially *re-throws* or propagates the error back. \nThe ``?`` [[Operator]] is a shorthand for Returning an ``Err``, i.e., it returns an ``Err`` if Err is found and [[Copy or Move]]s the error object. If there's no Err then it does nothing.\n\nFor ex.:\n```rust\nfn yo()  -> Result<io::File, io::Error>{\n\t let x =  File::open(\"hello.txt\");\nreturn match x{\n        Ok(s) => Ok(s),\n        Err(e) => Err(e),\n    }\n \n}\n//is the same as\nfn yo2() -> Result<io::File, io::Error>{\nlet x = File::open(\"hello.txt\")?; //Returns an Ok into x, if there's an Err it returns the Err with its value immediately from the function\n\nOk(x) //returns an Ok(x) \n}\n```\n\n* ``?`` vs. [[Pattern Matching]]\nA difference between these 2 is, ``?`` tries to coerce one error type into another. It does so by seeing what the expected return type of the current [[Function]]'s Result is then seeing if the error object has that type or its type has the ``From``[[Trait]] defined which converts the current error type into the return error type. If it is, then it calls the ``from`` [[Method]] of this [[Trait]] and does so.\n\n* This [[Operator]] can also be used with the [[Option Type]]\nFor ex.:\n```rust\nfn last_char_of_first_line(text: &str) -> Option<char> {\n    text.lines().next()?.chars().last()\n}\n```\nIf there's a ``None``, return None otherwise continue.",536870946]],["^15",[1711,"^O","^16",536870946]],["^15",[1711,"^F",1706,536870946]],["^15",[1711,"^X",340,536870946]],["^15",[1711,"^V",340,536870946]],["^15",[1711,"^U",163,536870946]],["^15",[1711,"^U",339,536870946]],["^15",[1711,"^U",340,536870946]],["^15",[1711,"^U",1065,536870946]],["^15",[1711,"^U",1073,536870946]],["^15",[1711,"^U",1098,536870946]],["^15",[1711,"^U",1171,536870946]],["^15",[1711,"^U",1253,536870946]],["^15",[1711,"^U",1254,536870946]],["^15",[1711,"^H",163,536870946]],["^15",[1711,"^H",339,536870946]],["^15",[1711,"^H",1065,536870946]],["^15",[1711,"^H",1073,536870946]],["^15",[1711,"^H",1098,536870946]],["^15",[1711,"^H",1171,536870946]],["^15",[1711,"^H",1253,536870946]],["^15",[1711,"^H",1254,536870946]],["^15",[1711,"^;","~u656462fd-036d-4b6e-b063-88c21dc43195",536870946]],["^15",[1712,"^Q","[[Panic]]",536870946]],["^15",[1712,"^O","^16",536870946]],["^15",[1712,"^F",660,536870946]],["^15",[1712,"^X",340,536870946]],["^15",[1712,"^V",340,536870946]],["^15",[1712,"^U",340,536870946]],["^15",[1712,"^U",1080,536870946]],["^15",[1712,"^H",1080,536870946]],["^15",[1712,"^;","~u656462fd-c635-44d1-a980-f229fde2943a",536870946]],["^15",[1713,"^3","- Just like other languages. \n  However, functions by theirselves are not a data type and the compiler might inline them in some cases.\n  \n  Unlike *C++*, Functions can be defined anywhere, but they must be accessible by the caller’s scope.\n  Basic syntax:\n  ``fn <function name>(<params>)-> <return type> { \n  …  \n  return <value>;\n  }``\n  For ex.:\n  ```rust\n  fn another_function(x: i32, unit_label: char) {\n   println!(\"The value of x is: {x} and char is {unit_label}\");\n  }\n  ```\n  * Functions must define the types of their params in rust.\n- Return\n  Function [[Scope]] blocks follow the same return rules as any scope, also meaning that they implicitly return the [[Unit Type]] if no other type is defined . But they can also use the ``return`` keyword, which only works with functions. A return keyword immediately returns a result from a function.\n  For ex.:\n  ```rust\n  fn yo()->i32 {\n   return 2; //ok\n  }\n  \n  fn ayo()->i32 {\n   2 //also ok but '2;' won't be as this is a statement.\n  }\n  ```\n- The ``fn`` [[Data Type]] and the ``Fn`` [[Trait]]\n  Functions in Rust aren't a data type, but there's a type associated with them, the ``fn`` type. This is called a *Function Pointer* and is a [[Pointer]] type that can point to function definitions on the stack.\n  This allows us to pass functions around as arguments.\n  \n  Syntax:\n  ``\n  fn(<param type 1>, <param type n>) -> <return> type \n  ``\n  And that's how we define these types.\n  \n  For ex.:\n  ```rust\n  fn yo(x: i32) -> f64 {\n      2.0\n  }\n  \n  fn na(x: fn(i32) -> f64) {\n      x(2);\n  }\n  \n  fn main() {\n      let a: fn(i32) -> f64 = yo;\n      na(a); //works\n  }\n  ```\n  \n  * ``Fn`` [[Trait]]: Part of the 3 traits, ``Fn``, ``FnMut`` and ``FnOnce``. Function pointers implement all 3 of these traits that [[Closure]]s also use. \n  Meaning, we can use [[Generic Type]]s that constrain to [[Closure]]s with these traits, and also pass them Function Pointers. \n  \n  For ex.:\n  ```rust\n      enum Status {\n          Value(u32),\n          Stop,\n      }\n  \n  \n  fn main() {\n      let list_of_statuses: Vec<Status> = (0u32..20).map(Status::Value).collect(); //works\n  }\n  ```\n  Here, we can create a [[Vector]] of [[Enum]]s using a [[Range]] and passing a function to an argument that accepts [[Closure]]s. \n  \n  * [[Type Alias]]: We can use them with Function Pointers like so\n  ```rust\n  fn yo(x:i32, y:i32) {} \n  fn main() {\n  type Binop = fn(i32, i32) -> ();\n   let x: Binop = yo;\n   x(2,4);//ok\n  }\n  ```\n-",536870948]],["^15",[1713,"^17",1701077758095,536870948]],["^15",[1713,"^1@","~m1690519324999",536870949]],["^15",[1713,"^Z","Rust/pages/Function.md",536870948]],["^15",[1714,"^Q","Return\nFunction [[Scope]] blocks follow the same return rules as any scope, also meaning that they implicitly return the [[Unit Type]] if no other type is defined . But they can also use the ``return`` keyword, which only works with functions. A return keyword immediately returns a result from a function.\nFor ex.:\n```rust\nfn yo()->i32 {\n return 2; //ok\n}\n\nfn ayo()->i32 {\n 2 //also ok but '2;' won't be as this is a statement.\n}\n```",536870948]],["^15",[1714,"^O","^16",536870948]],["^15",[1714,"^F",713,536870948]],["^15",[1714,"^X",163,536870948]],["^15",[1714,"^V",163,536870948]],["^15",[1714,"^U",163,536870948]],["^15",[1714,"^U",345,536870948]],["^15",[1714,"^U",1264,536870948]],["^15",[1714,"^H",345,536870948]],["^15",[1714,"^H",1264,536870948]],["^15",[1714,"^;","~u656462fe-1ee7-4dd5-b294-c8ecfefcc9c0",536870948]],["^15",[1715,"^Q","The ``fn`` [[Data Type]] and the ``Fn`` [[Trait]]\nFunctions in Rust aren't a data type, but there's a type associated with them, the ``fn`` type. This is called a *Function Pointer* and is a [[Pointer]] type that can point to function definitions on the stack.\nThis allows us to pass functions around as arguments.\n\nSyntax:\n``\nfn(<param type 1>, <param type n>) -> <return> type \n``\nAnd that's how we define these types.\n\nFor ex.:\n```rust\nfn yo(x: i32) -> f64 {\n    2.0\n}\n\nfn na(x: fn(i32) -> f64) {\n    x(2);\n}\n\nfn main() {\n    let a: fn(i32) -> f64 = yo;\n    na(a); //works\n}\n```\n\n* ``Fn`` [[Trait]]: Part of the 3 traits, ``Fn``, ``FnMut`` and ``FnOnce``. Function pointers implement all 3 of these traits that [[Closure]]s also use. \nMeaning, we can use [[Generic Type]]s that constrain to [[Closure]]s with these traits, and also pass them Function Pointers. \n\nFor ex.:\n```rust\n    enum Status {\n        Value(u32),\n        Stop,\n    }\n\n\nfn main() {\n    let list_of_statuses: Vec<Status> = (0u32..20).map(Status::Value).collect(); //works\n}\n```\nHere, we can create a [[Vector]] of [[Enum]]s using a [[Range]] and passing a function to an argument that accepts [[Closure]]s. \n\n* [[Type Alias]]: We can use them with Function Pointers like so\n```rust\nfn yo(x:i32, y:i32) {} \nfn main() {\ntype Binop = fn(i32, i32) -> ();\n let x: Binop = yo;\n x(2,4);//ok\n}\n```",536870948]],["^15",[1715,"^O","^16",536870948]],["^15",[1715,"^F",1714,536870948]],["^15",[1715,"^X",163,536870948]],["^15",[1715,"^V",163,536870948]],["^15",[1715,"^U",160,536870948]],["^15",[1715,"^U",163,536870948]],["^15",[1715,"^U",1066,536870948]],["^15",[1715,"^U",1073,536870948]],["^15",[1715,"^U",1087,536870948]],["^15",[1715,"^U",1090,536870948]],["^15",[1715,"^U",1093,536870948]],["^15",[1715,"^U",1094,536870948]],["^15",[1715,"^U",1225,536870948]],["^15",[1715,"^U",1370,536870948]],["^15",[1715,"^H",160,536870948]],["^15",[1715,"^H",1066,536870948]],["^15",[1715,"^H",1073,536870948]],["^15",[1715,"^H",1087,536870948]],["^15",[1715,"^H",1090,536870948]],["^15",[1715,"^H",1093,536870948]],["^15",[1715,"^H",1094,536870948]],["^15",[1715,"^H",1225,536870948]],["^15",[1715,"^H",1370,536870948]],["^15",[1715,"^;","~u656462fe-8ae0-4990-a4fb-b87df069c62f",536870948]],["^15",[1716,"^3","- ``loop``, ``while`` and ``for``. ``break`` and ``continue`` are also expressions, and can be\n  used with loops for some neat operations.\n- ``break``\n  Breaks the loop. Unlike other langs, break in Rust can also return values.\n- ``loop``\n  Infinite loop.\n  For ex.:\n  ```rust\n      let mut x= 1;\n      let z = loop {\n          if x==20 {\n             break 25 //semicolon not required, but can be put.\n          }\n          x+=1;\n      }; //puts 25 in z\n  ```\n  \n  * loop label: Using a custom keyword we can break/continue a specific loop. \n  For ex.\n  ```rust\n      let z = 'xyz_loop: loop {\n          if x==20 {\n             'two: loop {\n              if x==25 {\n                  break 'two;\n              }\n              x+=1;\n             }\n             break 'xyz_loop x;\n          }\n          x+=1;\n      };\n  ```\n- ``while``\n  Works as other langs.\n  ``while <condition> {\n  …\n  }``\n  \n  * while let: Using [[Pattern Matching]], while let is another form of while that also initializes a variable.\n  For ex.:\n  ```rust\n      let mut stack = Vec::new();\n   \n      stack.push(1);\n      stack.push(2);\n      stack.push(3);\n   \n      while let Some(top) = stack.pop() {\n          println!(\"{}\", top);\n      }\n  \n  ```\n- ``for``\n  In Rust, only ``for..in`` type of Loop exists. So it can only loop over [[Collection]]s or more specifically [[Iterator]]s.\n  For ex.:\n  ```rust\n  let arr = [1,2,5,3]\n  for element in arr { //copies/moves each element to element and then passes it to the body\n  \t//yuh\n  }\n  ```\n  \n  * We can create an [[Iterable]] and assign it directly to a loop with [[Range]].\n  For ex.:\n  ```rust\n  for elem in (1..4).rev() { \\\\ 1..4 generates a Range with 3 elements 1, 2, 3 and rev() reverses the range. \n   \\\\aye\n  }\n  ```\n  * for with index: If we need the index too, we can use [[Destructuring]] and the ``.iter()`` [[Function]] already implemented for all [[Iterable]]s.\n  For ex.:\n  ```rust\n  for (index, elem) in arr.iter().enumerate() {\n  //\n  } //works\n  ```\n  ``.iter()`` is already defined for [T;KSize] [[Data Type]]s and enumerate() on it returns a tuple with index and value.\n-\n-\n-",536870950]],["^15",[1716,"^17",1701077758152,536870950]],["^15",[1716,"^1@","~m1690518351098",536870951]],["^15",[1716,"^Z","Rust/pages/Loop.md",536870950]],["^15",[1717,"^Q","~``break``\nBreaks the loop. Unlike other langs, break in Rust can also return values.",536870950]],["^15",[1717,"^O","^16",536870950]],["^15",[1717,"^F",790,536870950]],["^15",[1717,"^X",300,536870950]],["^15",[1717,"^V",300,536870950]],["^15",[1717,"^U",300,536870950]],["^15",[1717,"^;","~u656462fe-0e4c-499a-a639-485119452097",536870950]],["^15",[1718,"^Q","~``loop``\nInfinite loop.\nFor ex.:\n```rust\n    let mut x= 1;\n    let z = loop {\n        if x==20 {\n           break 25 //semicolon not required, but can be put.\n        }\n        x+=1;\n    }; //puts 25 in z\n```\n\n* loop label: Using a custom keyword we can break/continue a specific loop. \nFor ex.\n```rust\n    let z = 'xyz_loop: loop {\n        if x==20 {\n           'two: loop {\n            if x==25 {\n                break 'two;\n            }\n            x+=1;\n           }\n           break 'xyz_loop x;\n        }\n        x+=1;\n    };\n```",536870950]],["^15",[1718,"^O","^16",536870950]],["^15",[1718,"^F",1717,536870950]],["^15",[1718,"^X",300,536870950]],["^15",[1718,"^V",300,536870950]],["^15",[1718,"^U",300,536870950]],["^15",[1718,"^;","~u656462fe-0e07-4cdb-9d32-feced2d4798b",536870950]],["^15",[1719,"^Q","~``while``\nWorks as other langs.\n``while <condition> {\n…\n}``\n\n* while let: Using [[Pattern Matching]], while let is another form of while that also initializes a variable.\nFor ex.:\n```rust\n    let mut stack = Vec::new();\n \n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n \n    while let Some(top) = stack.pop() {\n        println!(\"{}\", top);\n    }\n\n```",536870950]],["^15",[1719,"^O","^16",536870950]],["^15",[1719,"^F",1718,536870950]],["^15",[1719,"^X",300,536870950]],["^15",[1719,"^V",300,536870950]],["^15",[1719,"^U",300,536870950]],["^15",[1719,"^U",1253,536870950]],["^15",[1719,"^H",1253,536870950]],["^15",[1719,"^;","~u656462fe-6753-4d68-b06f-faa1cab78d97",536870950]],["^15",[1720,"^Q","~``for``\nIn Rust, only ``for..in`` type of Loop exists. So it can only loop over [[Collection]]s or more specifically [[Iterator]]s.\nFor ex.:\n```rust\nlet arr = [1,2,5,3]\nfor element in arr { //copies/moves each element to element and then passes it to the body\n\t//yuh\n}\n```\n\n* We can create an [[Iterable]] and assign it directly to a loop with [[Range]].\nFor ex.:\n```rust\nfor elem in (1..4).rev() { \\\\ 1..4 generates a Range with 3 elements 1, 2, 3 and rev() reverses the range. \n \\\\aye\n}\n```\n* for with index: If we need the index too, we can use [[Destructuring]] and the ``.iter()`` [[Function]] already implemented for all [[Iterable]]s.\nFor ex.:\n```rust\nfor (index, elem) in arr.iter().enumerate() {\n//\n} //works\n```\n``.iter()`` is already defined for [T;KSize] [[Data Type]]s and enumerate() on it returns a tuple with index and value.",536870950]],["^15",[1720,"^O","^16",536870950]],["^15",[1720,"^F",1719,536870950]],["^15",[1720,"^X",300,536870950]],["^15",[1720,"^V",300,536870950]],["^15",[1720,"^U",163,536870950]],["^15",[1720,"^U",300,536870950]],["^15",[1720,"^U",304,536870950]],["^15",[1720,"^U",574,536870950]],["^15",[1720,"^U",1090,536870950]],["^15",[1720,"^U",1161,536870950]],["^15",[1720,"^U",1181,536870950]],["^15",[1720,"^U",1370,536870950]],["^15",[1720,"^H",163,536870950]],["^15",[1720,"^H",304,536870950]],["^15",[1720,"^H",574,536870950]],["^15",[1720,"^H",1090,536870950]],["^15",[1720,"^H",1161,536870950]],["^15",[1720,"^H",1181,536870950]],["^15",[1720,"^H",1370,536870950]],["^15",[1720,"^;","~u656462fe-5b57-4f1f-9b4b-24e95b0e0c93",536870950]],["^15",[1721,"^Q","",536870950]],["^15",[1721,"^O","^16",536870950]],["^15",[1721,"^F",1720,536870950]],["^15",[1721,"^X",300,536870950]],["^15",[1721,"^V",300,536870950]],["^15",[1721,"^U",300,536870950]],["^15",[1721,"^;","~u656462fe-928b-48d1-802c-7845676c7385",536870950]],["^15",[1722,"^Q","",536870950]],["^15",[1722,"^O","^16",536870950]],["^15",[1722,"^F",1721,536870950]],["^15",[1722,"^X",300,536870950]],["^15",[1722,"^V",300,536870950]],["^15",[1722,"^U",300,536870950]],["^15",[1722,"^;","~u656462fe-e9fc-4275-b9a8-3d9e68e2680c",536870950]],["^15",[1723,"^3","- ``mod``\n  A module allows us to group and organize code within a [[Crate]] for easy reusability and readability. It also puts [[Access Modifier]]s on its items, which is private by default. Module definitions need to be at the top of an ``.rs`` file.\n  \n  Syntax:\n  ``\n  <access modifier> mod <name> {\n   //stuff\n  } \n  \n  //or\n  <access modifier> mod <name>;\n  ``\n  \n  For ex.:\n  In main.rs,\n  ```rust\n  mod x { //module names must be in snake-case\n   pub fn yo() {}\n  }\n  \n  fn main() {\n   crate::x::yo(); //to access it\n  }\n  ```\n- Modules can be defined right away, which is done by having a ``{ }`` block after them, if we instead have a ``;`` semicolon after the definition, then the module is looked for in the places defined in [[Module System]]. Either way, this *imports* a module into our [[Crate]] and all the module's contents with the appropriate [[Access Modifier]] can be accessed by the crate.\n- Modules can nest other modules as well.\n- Path to an item in a module\n  The path to an item in a starts from the [[Crate]] Root to the module in it, then its submodules and so on.\n  \n  For ex.:\n  For this module definition in main.rs\n  ```rust\n  mod x {\n   mod y { \n   fn yo(){}\n   }\n   pub mod z { \n   pub fn yo(){}\n   }\n  }\n  ```\n  Rust would need to get\n  ```rust\n  crate::x::z::yo();\n  ```\n  \n  ``crate`` is the [[Crate]] Root, so here it is accessing itself. \n  \n  * Absolute vs. Relative Path\n  Whilst the absolute path starts from the [[Crate]] Root, a relative path is used when the item is within this crate.\n  For ex.:\n  In ``main.rs``\n  ```rust\n  mod front_of_house {\n      pub mod hosting {\n          pub fn add_to_waitlist() {}\n      }\n  }\n  \n  pub fn eat_at_restaurant() {\n      // Absolute path\n      crate::front_of_house::hosting::add_to_waitlist();\n  \n      // Relative path\n      front_of_house::hosting::add_to_waitlist();\n  }\n  ```\n  The relative path starts from the current crate.\n  \n  * [[super]]\n  \n  \n  \n  * [[use]]\n  This keyword basically opens a namespace.\n- Modules defined in separate files\n  As defined in [[Module System]], a module can either have its definition at the time of declaration\n  ``mod <name> {...}`` or it can have a semicolon ``mod <name>;``, in which case the module's definition is looked for in some specific places. \n  This allows us to break our project down into multiple modules and hence multiple files.\n  \n  For ex.:\n  In ``main.rs`` or ``lib.rs``,\n  ```rust\n  mod modA;\n  ```\n  \n  Create ``src/modA.rs`` or ``src/modA/mod.rs`` with content\n  ```rust\n  mod modA {\n  \tpub modB{\n  \t\tpub fnA(){}\t\n   }\n  }\n  \n  pub mod modC;\n  ```\n  \n  Then create ``src/modA/modC.rs`` or ``src/modA/modC/mod.rs`` \n  ```rust\n  pub mod modC {\n   pub fnA() {}\n  }\n  ```\n  \n  While using ``mod.rs`` seems more intuitive/organized, the same filenames make it confusing for working in IDEs but to the compiler it makes no difference and we can even mix both folder structures for a project. However each module must only be declared using any one method not both.\n-",536870952]],["^15",[1723,"^17",1701077758293,536870952]],["^15",[1723,"^1@","~m1689875758520",536870953]],["^15",[1723,"^Z","Rust/pages/Module.md",536870952]],["^15",[1724,"^Q","Modules can be defined right away, which is done by having a ``{ }`` block after them, if we instead have a ``;`` semicolon after the definition, then the module is looked for in the places defined in [[Module System]]. Either way, this *imports* a module into our [[Crate]] and all the module's contents with the appropriate [[Access Modifier]] can be accessed by the crate.",536870952]],["^15",[1724,"^O","^16",536870952]],["^15",[1724,"^F",826,536870952]],["^15",[1724,"^X",287,536870952]],["^15",[1724,"^V",287,536870952]],["^15",[1724,"^U",287,536870952]],["^15",[1724,"^U",1062,536870952]],["^15",[1724,"^U",1063,536870952]],["^15",[1724,"^U",1335,536870952]],["^15",[1724,"^H",1062,536870952]],["^15",[1724,"^H",1063,536870952]],["^15",[1724,"^H",1335,536870952]],["^15",[1724,"^;","~u656462fe-fdc8-493d-b668-6650036639ea",536870952]],["^15",[1725,"^Q","Modules can nest other modules as well.",536870952]],["^15",[1725,"^O","^16",536870952]],["^15",[1725,"^F",1724,536870952]],["^15",[1725,"^X",287,536870952]],["^15",[1725,"^V",287,536870952]],["^15",[1725,"^U",287,536870952]],["^15",[1725,"^;","~u656462fe-9614-4d47-b66c-f6d87aa9cf1c",536870952]],["^15",[1726,"^Q","Path to an item in a module\nThe path to an item in a starts from the [[Crate]] Root to the module in it, then its submodules and so on.\n\nFor ex.:\nFor this module definition in main.rs\n```rust\nmod x {\n mod y { \n fn yo(){}\n }\n pub mod z { \n pub fn yo(){}\n }\n}\n```\nRust would need to get\n```rust\ncrate::x::z::yo();\n```\n\n``crate`` is the [[Crate]] Root, so here it is accessing itself. \n\n* Absolute vs. Relative Path\nWhilst the absolute path starts from the [[Crate]] Root, a relative path is used when the item is within this crate.\nFor ex.:\nIn ``main.rs``\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\nThe relative path starts from the current crate.\n\n* [[super]]\n\n\n\n* [[use]]\nThis keyword basically opens a namespace.",536870952]],["^15",[1726,"^O","^16",536870952]],["^15",[1726,"^F",1725,536870952]],["^15",[1726,"^X",287,536870952]],["^15",[1726,"^V",287,536870952]],["^15",[1726,"^U",287,536870952]],["^15",[1726,"^U",1063,536870952]],["^15",[1726,"^U",1133,536870952]],["^15",[1726,"^U",1575,536870952]],["^15",[1726,"^H",1063,536870952]],["^15",[1726,"^H",1133,536870952]],["^15",[1726,"^H",1575,536870952]],["^15",[1726,"^;","~u656462fe-510f-4edd-a456-894112f7f60b",536870952]],["^15",[1727,"^Q","Modules defined in separate files\nAs defined in [[Module System]], a module can either have its definition at the time of declaration\n``mod <name> {...}`` or it can have a semicolon ``mod <name>;``, in which case the module's definition is looked for in some specific places. \nThis allows us to break our project down into multiple modules and hence multiple files.\n\nFor ex.:\nIn ``main.rs`` or ``lib.rs``,\n```rust\nmod modA;\n```\n\nCreate ``src/modA.rs`` or ``src/modA/mod.rs`` with content\n```rust\nmod modA {\n\tpub modB{\n\t\tpub fnA(){}\t\n }\n}\n\npub mod modC;\n```\n\nThen create ``src/modA/modC.rs`` or ``src/modA/modC/mod.rs`` \n```rust\npub mod modC {\n pub fnA() {}\n}\n```\n\nWhile using ``mod.rs`` seems more intuitive/organized, the same filenames make it confusing for working in IDEs but to the compiler it makes no difference and we can even mix both folder structures for a project. However each module must only be declared using any one method not both.",536870952]],["^15",[1727,"^O","^16",536870952]],["^15",[1727,"^F",1726,536870952]],["^15",[1727,"^X",287,536870952]],["^15",[1727,"^V",287,536870952]],["^15",[1727,"^U",287,536870952]],["^15",[1727,"^U",1335,536870952]],["^15",[1727,"^H",1335,536870952]],["^15",[1727,"^;","~u656462fe-a1e5-4037-8b62-8097d440d66a",536870952]],["^15",[1728,"^3","- integers: Numbers without fractional components.\n  ![image.png](../assets/image_1688833118249_0.png)\n  \n  For n bits,\n  * Signed ints are the ints that care for the sign, + or -. These can store -ve as well as +ve values. Stored using 2’s complement representation. \n  Value range: $$-2^{n-1}$$ < $$2^{n-1}$$\n  \n  * Unsigned ints can only be +ve. \n  Value range: 0 < $$2^n-1$$\n  \n  * The ``isize`` and ``usize`` are used to denote size of collections and depend on the architecture of the program, i.e. 64 bits on x64 and 32 bit on x86.\n- Numbers can use literals to allow inferring the right type automatically to the [[Variable]]\n  ![image.png](../assets/image_1688833517132_0.png)\n  Like ``57u8`` (57 of type u8).\n  \n  The ``_`` has 2 uses, for floating-point [[Data Type]]s, it means the decimal position and for ints it is just a visual separator.\n- Floating-Point\n  ``f32`` and ``f64``, 32 bits and single precision & 64 bits and double precision respectively. In modern CPUs, f64 is as fast as f32 but with greater precision, which is why if f32 isn’t explicitly specified, a floating number is inferred as f64 in rust.\n- Numeric Operations\n  Same as C++, here's reference: [Docs Book](https://doc.rust-lang.org/book/appendix-02-operators.html)\n- Overflow and prevention\n  In rust, if an integer overflows (value greater than the size allowed by type) then, if it’s in debug mode \n   then the program [[Panic]]s, and if it’s in release mode then the value wraps around (new value = overflowing value – size of type, if it’s still overflowing then repeat). To allow better checks against said  overflows, rust provides a few standard methods available in same named crates.\n  * Wrap in all modes with the ``wrapping_*`` methods, such as ``wrapping_add`` \n  * Return a [[Option Type]]::None value if there is overflow with the ``checked_*`` methods\n  * Return the value and a boolean indicating whether there was overflow with the ``overflowing_*`` methods\n  * Saturate (Clamp) at the value’s minimum or maximum values with ``saturating_*`` methods\n-",536870954]],["^15",[1728,"^17",1701077758331,536870954]],["^15",[1728,"^1@","~m1688890521440",536870955]],["^15",[1728,"^Z","Rust/pages/Number.md",536870954]],["^15",[1729,"^Q","Numbers can use literals to allow inferring the right type automatically to the [[Variable]]\n![image.png](../assets/image_1688833517132_0.png)\nLike ``57u8`` (57 of type u8).\n\nThe ``_`` has 2 uses, for floating-point [[Data Type]]s, it means the decimal position and for ints it is just a visual separator.",536870954]],["^15",[1729,"^O","^16",536870954]],["^15",[1729,"^F",850,536870954]],["^15",[1729,"^X",162,536870954]],["^15",[1729,"^V",162,536870954]],["^15",[1729,"^U",161,536870954]],["^15",[1729,"^U",162,536870954]],["^15",[1729,"^U",1090,536870954]],["^15",[1729,"^H",161,536870954]],["^15",[1729,"^H",1090,536870954]],["^15",[1729,"^;","~u656462fe-573e-47c0-847b-25127565acae",536870954]],["^15",[1730,"^Q","Floating-Point\n``f32`` and ``f64``, 32 bits and single precision & 64 bits and double precision respectively. In modern CPUs, f64 is as fast as f32 but with greater precision, which is why if f32 isn’t explicitly specified, a floating number is inferred as f64 in rust.",536870954]],["^15",[1730,"^O","^16",536870954]],["^15",[1730,"^F",1729,536870954]],["^15",[1730,"^X",162,536870954]],["^15",[1730,"^V",162,536870954]],["^15",[1730,"^U",162,536870954]],["^15",[1730,"^;","~u656462fe-c806-42fe-b4bc-dca217ea9acc",536870954]],["^15",[1731,"^Q","Numeric Operations\nSame as C++, here's reference: [Docs Book](https://doc.rust-lang.org/book/appendix-02-operators.html)",536870954]],["^15",[1731,"^O","^16",536870954]],["^15",[1731,"^F",1730,536870954]],["^15",[1731,"^X",162,536870954]],["^15",[1731,"^V",162,536870954]],["^15",[1731,"^U",162,536870954]],["^15",[1731,"^;","~u656462fe-bac3-4607-8465-037bcc65257a",536870954]],["^15",[1732,"^Q","Overflow and prevention\nIn rust, if an integer overflows (value greater than the size allowed by type) then, if it’s in debug mode \n then the program [[Panic]]s, and if it’s in release mode then the value wraps around (new value = overflowing value – size of type, if it’s still overflowing then repeat). To allow better checks against said  overflows, rust provides a few standard methods available in same named crates.\n* Wrap in all modes with the ``wrapping_*`` methods, such as ``wrapping_add`` \n* Return a [[Option Type]]::None value if there is overflow with the ``checked_*`` methods\n* Return the value and a boolean indicating whether there was overflow with the ``overflowing_*`` methods\n* Saturate (Clamp) at the value’s minimum or maximum values with ``saturating_*`` methods",536870954]],["^15",[1732,"^O","^16",536870954]],["^15",[1732,"^F",1731,536870954]],["^15",[1732,"^X",162,536870954]],["^15",[1732,"^V",162,536870954]],["^15",[1732,"^U",162,536870954]],["^15",[1732,"^U",1080,536870954]],["^15",[1732,"^U",1254,536870954]],["^15",[1732,"^H",1080,536870954]],["^15",[1732,"^H",1254,536870954]],["^15",[1732,"^;","~u656462fe-c6be-42d0-b37e-10f4e015907f",536870954]],["^15",[1733,"^3","- Operator Overloading\n  Rust doesn’t allow operator overloading like *C++*. \n  However we can define operator behavior using [[Trait]]s, these traits are defined in ``std::ops`` [[Module]] with the name of the operation they do.\n  \n  For ex.:\n  ```rust\n  use std::ops::Add;\n  \n  struct X {\n      Y: i32,\n  }\n  impl Add for X {\n      type Output = i32;\n      fn add(self, other: X) -> Self::Output {\n          self.Y + other.Y\n      }\n  }\n  fn main() {\n      let a = X { Y: 2 };\n      let b = X { Y: 3 };\n      let c = a + b; //works\n  }\n  ```\n- Explicit Type Annotation: \n  To explicitly give [[Data Type]] for any type annotation, such as in [[Generic Type]]s, we can use ``::<T>``. The ``::<>`` is called the [*Turbofish Operator*](https://turbo.fish/).\n  \n  For ex.:\n  ```rust\n  fn yo<T>(x:T){}\n  \n  fn main() {\n  let x= yo::<i32>(2); //works\n  }\n  ```",536870956]],["^15",[1733,"^17",1701077758358,536870956]],["^15",[1733,"^1@","~m1690967807841",536870957]],["^15",[1733,"^Z","Rust/pages/Operator.md",536870956]],["^15",[1734,"^Q","Explicit Type Annotation: \nTo explicitly give [[Data Type]] for any type annotation, such as in [[Generic Type]]s, we can use ``::<T>``. The ``::<>`` is called the [*Turbofish Operator*](https://turbo.fish/).\n\nFor ex.:\n```rust\nfn yo<T>(x:T){}\n\nfn main() {\nlet x= yo::<i32>(2); //works\n}\n```",536870956]],["^15",[1734,"^O","^16",536870956]],["^15",[1734,"^F",901,536870956]],["^15",[1734,"^X",339,536870956]],["^15",[1734,"^V",339,536870956]],["^15",[1734,"^U",339,536870956]],["^15",[1734,"^U",1087,536870956]],["^15",[1734,"^U",1090,536870956]],["^15",[1734,"^H",1087,536870956]],["^15",[1734,"^H",1090,536870956]],["^15",[1734,"^;","~u656462fe-4ea4-4923-ae83-b1faf77c928f",536870956]],["^15",[1735,"^3","- A scope is the range within a program for which an item is valid. There's a single global scope and many local scopes in any program. A new custom scope can be created with {…}.\n  title:: Scope\n  \n  For ex.:\n  ```rust\n  fn xyz() {\n  \t{\n  \t\tlet y:i32=2;\n  \t}\n  \tprintln!(y); //will throw error as y is not in the same scope, it is also already dropped.\n  }\n  ```\n- Return\n  A scope block always returns a value but that value is discarded if there is no receiver or there's no semicolon at the scope's end.\n  For ex.:\n  ```rust\n  let x = {\n  2\n  }; //works\n  ```\n  Scope blocks can return a custom value if there's an expression as the last instruction in them otherwise they return the [[Unit Type]] as default.\n- Variable Scope\n  \n  For ex.:\n  ```rust\n  {\n  \tlet s = “aa”; //immutable string\n  }\n  ```\n  In this example, ``s`` isn’t valid before being declared and is only valid till the end of the scope, after which it goes out of scope and is hence disposed. \n  \n  Variables also go out of scope after their last usage in the code. But this also means, that if a variable is used at the very end of the program then it will remain in scope until then. This ability of a compiler to tell if a variable is no longer is being used before the end of the scope block is called *Non-Lexical Lifetimes (NLL)*.\n  \n  * Just like RAII (Resource Acquisition Is Initialization) works in C++, the values on heap in rust are deallocated when the scope finishes. \n  For ex.:\n  ```rust\n  {\n  let s= String::from(“yo”)  //mutable string\n  }\n  ```\n  The ``s`` loses its value after the scope is finished. But this [[String]] is on the heap, so it actually has to deallocate the memory allocated for the strings. For this, rust requires the type to implement *drop* function. This function is called at the end of the scope automatically and must clear the memory.\n  \n  * [[Variable]]s are deallocated in the reverse order of their creation.",536870958]],["^15",[1735,"^17",1701077758438,536870958]],["^15",[1735,"^1@","~m1690039143929",536870959]],["^15",[1735,"^Z","Rust/pages/Scope.md",536870958]],["^15",[1736,"^Q","Return\nA scope block always returns a value but that value is discarded if there is no receiver or there's no semicolon at the scope's end.\nFor ex.:\n```rust\nlet x = {\n2\n}; //works\n```\nScope blocks can return a custom value if there's an expression as the last instruction in them otherwise they return the [[Unit Type]] as default.",536870958]],["^15",[1736,"^O","^16",536870958]],["^15",[1736,"^F",945,536870958]],["^15",[1736,"^X",345,536870958]],["^15",[1736,"^V",345,536870958]],["^15",[1736,"^U",345,536870958]],["^15",[1736,"^U",1264,536870958]],["^15",[1736,"^H",1264,536870958]],["^15",[1736,"^;","~u656462fe-5695-470b-a311-695727f7ceaf",536870958]],["^15",[1737,"^Q","Variable Scope\n\nFor ex.:\n```rust\n{\n\tlet s = “aa”; //immutable string\n}\n```\nIn this example, ``s`` isn’t valid before being declared and is only valid till the end of the scope, after which it goes out of scope and is hence disposed. \n\nVariables also go out of scope after their last usage in the code. But this also means, that if a variable is used at the very end of the program then it will remain in scope until then. This ability of a compiler to tell if a variable is no longer is being used before the end of the scope block is called *Non-Lexical Lifetimes (NLL)*.\n\n* Just like RAII (Resource Acquisition Is Initialization) works in C++, the values on heap in rust are deallocated when the scope finishes. \nFor ex.:\n```rust\n{\nlet s= String::from(“yo”)  //mutable string\n}\n```\nThe ``s`` loses its value after the scope is finished. But this [[String]] is on the heap, so it actually has to deallocate the memory allocated for the strings. For this, rust requires the type to implement *drop* function. This function is called at the end of the scope automatically and must clear the memory.\n\n* [[Variable]]s are deallocated in the reverse order of their creation.",536870958]],["^15",[1737,"^O","^16",536870958]],["^15",[1737,"^F",1736,536870958]],["^15",[1737,"^X",345,536870958]],["^15",[1737,"^V",345,536870958]],["^15",[1737,"^U",80,536870958]],["^15",[1737,"^U",161,536870958]],["^15",[1737,"^U",345,536870958]],["^15",[1737,"^H",80,536870958]],["^15",[1737,"^H",161,536870958]],["^15",[1737,"^;","~u656462fe-15ff-444b-b05c-ed61892c0c8f",536870958]],["^15",[1738,"^3","alias:: str\nNot really an alias, as String and str are different things but the term is used interchangeably.\n\n- Collection of bytes, the Collection itself provides many features on the underlying bytes and interprets them as text. At the core of rust, lies only a single type, the ``str`` [[Data Type]], then the [[Standard Library]] provides the ``String`` [[Data Type]] collection.\n  \n  The ``str`` type is a string [[Slice]] so it represents a fixed-size string whereas the ``String`` type is growable. There are various methods to convert value from either type into the other.\n  \n  Despite intuition, a ``String`` is *NOT* a collection over [[Char]]s. Infact, [[Char]]s have nothing to do with strings (be they ``str`` or ``String``).\n- ``String``\n  Growable, mutable and [[Owned]] Collection which parses its bytes as UTF-8 strings.\n  The ``String`` type is simply a wrapper over [[Vector]] of bytes but with certain restrictions, guarantees and features.\n  \n  To create a new String we use ``String::new()`` much like a Vector.\n  For ex.:\n  ```rust\n  let x= “abc”.to_string();\n  let mut y=String::new();\n  y=”abc”.to_string();\n  let z= String::from(“abc”);\n  ```\n- ``str``\n  An ``str`` is just a [[Slice]] of a string meaning it is a fixed-size immutable string slice. It is also called a String literal as the ``str`` can only be declared at compile-time. However, it's [[Reference Type]] ``&str`` can be created at any time.\n  \n  For ex.:\n  ```rust\n    let value = 3;\n      let yo = match value {\n          1 => \"1\",\n          other => {\n              let someOtherValue = other.to_string();\n              &someOtherValue[..]\n          }\n      };\n  ```\n  This code results in an error as the ``&str`` from ``1`` does not have the same [[Lifetime]] as the ``other`` arm in the [[Pattern Matching]]. The first arm has an ``&str`` with static lifetime as the str is known at compile time making its reference ``&str`` have a static lifetime but the latter is only known at run-time making its lifetime smaller than the other arm. We can fix it like so\n  ```rust\n      let value = 3;\n      let _yo = match value {\n          1 => \"1\".to_string(),\n          other => {\n              let someOtherValue = other.to_string();\n              (&someOtherValue[..]).to_string()\n          }\n      };\n  ```\n  So now both arms return a ``String`` [[Data Type]]. \n  \n  \n   \n  ``\"abc\".to_owned()`` [[TODO]] also define it all better here\n- Conversion between ``String`` and ``str``\n  To convert a ``String`` to a ``str`` we use the [[Slice]] [[Operator]] like so \n  ```rust\n  let s= String::from(\"axb\");\n  let x = &s[..];\n  ```\n  ``x `` is of type ``&str`` here.\n  \n  And to convert an ``str`` to ``String``, we can\n  ```rust\n  let s= \"x\";\n  let y= String::from(s); //ok\n  let z= x.to_string(); //ok\n  ```\n  We can also use ``&str`` [[Reference Type]] with these [[Function]]s.\n  \n  * ``.as_string()``\n  Gets a ``String`` as an ``&str``, equivalent to ``&<String object>[..]`` [[Slice]].\n- ``.push_str(<String>)`` or ``.push(<Char>)``\n  Appends a String or [[Char]] to a ``String`` object.\n  \n  * Concatenation\n  A bit different in Rust due to [[Ownership]] rules. \n  ``String`` can't be concatenated to another ``String``, it can only be concatenated to an ``&str``, or ``&String`` which would be automatically coerced into ``&str`` using [[Deref Coercion]].\n  For ex.:\n  ```rust\n  let s1= String::from(\"yo\");\n  let s2= String::from(\"na\");\n  let s3= s1+ &s2; //works but s1 loses Ownership of its data.\n  ```\n  This is because the ``+`` Operation is as ``Add`` [[Method]] on any custom [[Data Type]] in Rust and the ``Add`` method for String looks like so \n  ```rust\n  fn add(self, s: &str) -> String \n  ```\n  \n  In other words, every string concatenation requires at-least one ``String``, and then there can be any number of ``&str``s and we can concatenate them.\n  For ex.:\n  ```rust\n      let s1 = String::from(\"tic\");\n      let s2 = String::from(\"tac\");\n      let s3 = String::from(\"toe\");\n  \n      let s = s1 + \"-\" + &s2 + \"-\" + &s3;\n  ```\n  Intuitively, this makes sense because Rust needs to know of a place where to store the concatenated String, if there are only immutable [[Reference Type]]s then it doesn't have that, if it has more than one  ``String``s then it's not sure which String to use, and even if it is, the developer won't be sure which one it is and would lose [[Ownership]].\n  \n  * The ``format!(<String>)`` [[Macro]]\n  This macro is used for String concatenation as it returns a new ``String`` with all the strings concatenated.\n  For ex.:\n  ```rust\n  let s1= String::from(\"yo\");\n  let s2= String::from(\"yoaa\");\n  let s3= \"as\";\n  let s3= format!(\"{s1} and {s2} {s3}\"); //works\n  ```\n  Since it creates a new ``String``, it doesn't need the [[Ownership]] of any ``String`` and hence it takes the immutable [[Reference Type]] of all the strings passed to it.\n- Indexing\n  Integer indices to access characters (not [[Char]]) in a string in Rust isn't valid. This is because each character is UTF-8 encoded. \n  A ``String`` is a wrapper over ``Vec<u8>``, but UTF-8 requires 1 to 4 bytes (4*8 = 32 bits) per character, this variable size is by UTF-8 spec. This means it is not sure if a given index is a single character or a part of a multi-byte character and hence accessing ``String`` by index is not guaranteed to return the right character. \n  For ex.:\n  ```rust\n  let hello = \"Здравствуйте\";\n  let answer = &hello[0]; //is an error\n  ```\n  This doesn't compile in Rust as rust avoids such errors and here the error would be correct, as we are trying to get the first character, which we would expect would be the Cyrillic letter ``Ze`` and not Arabic Number ``3``, it takes 2 bytes according to UTF-8 and hence both index 0 and 1 make up the character ``Ze``. \n  \n  We can use ``&hello[0..2]`` (end exclusive) and that would work as string [[Slice]]s are allowed anyway. But String [[Slice]]s are risky, if the start or end index of a string slice bisects a character, it [[Panic]]s. \n  \n  We can see why [[Char]] isn't used to represent characters in ``String`` as string slice from 0 to 1 above would return a string with the right character, which has taken 2 bytes and Rust can't know if the string slice from 0 to 1 is a single character or it is a string.\n  \n  * There are 3 ways Rust sees characters in String. \n  For “नमस्ते”,\n  \n  It’s length is 18 in bytes and this is how it looks as a byte-array,\n  [224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164, 224, 165, 135]\n   \n  Rust sees chars as Unicode Scalar Values, basically like this \n  ['न', 'म', 'स', '्', 'त', 'े']\n  The 4th and 6th letter here are called *diacritics* as they don’t make sense on their own. \n  \n  Lastly, here’s how we interpret these letters,\n  [\"न\", \"म\", \"स्\", \"ते\"]\n  These are the *Grapheme Clusters* of the word Namaste.\n  A grapheme cluster is a more accurate name of what we call a letter in English. \n  \n  This is why indexing is not done in Rust. This is also why, [[Slice]] operations are risky, for ex.:\n  ```rust\n  let hello = String::from(\"Здравствуйте\");\n  //hello[0..1]; //will cause the program to panic as the first byte is a part of 2 to make up a Unicode Scalar value, so \n  hello[0..2] //works\n  ```\n-\n- ```\n  1.\tRaw string: Get a string as defined, we use “\\ … “\n  For ex.:\n  let contents = \"\\\n  Rust:\n  safe, fast, productive.\n  Pick three.\n  Duct tape.\";\n  or use r# and #\n  let abc= r# “my string”#;\n  \n  ```\n-\n-",536870960]],["^15",[1738,"^17",1701077758505,536870960]],["^15",[1738,"^1@","~m1689519203754",536870961]],["^15",[1738,"^Z","Rust/pages/String.md",536870960]],["^15",[1739,"^K",1701077758501,536870960]],["^15",[1739,"^@",false,536870960]],["^15",[1739,"^Y","owned",536870960]],["^15",[1739,"^11","Owned",536870960]],["^15",[1739,"^B",1701077758501,536870960]],["^15",[1739,"^;","~u656462fe-ce2a-484f-b823-ae9523939c49",536870960]],["^15",[1740,"^Q","~``String``\nGrowable, mutable and [[Owned]] Collection which parses its bytes as UTF-8 strings.\nThe ``String`` type is simply a wrapper over [[Vector]] of bytes but with certain restrictions, guarantees and features.\n\nTo create a new String we use ``String::new()`` much like a Vector.\nFor ex.:\n```rust\nlet x= “abc”.to_string();\nlet mut y=String::new();\ny=”abc”.to_string();\nlet z= String::from(“abc”);\n```",536870960]],["^15",[1740,"^O","^16",536870960]],["^15",[1740,"^F",1742,536870960]],["^15",[1740,"^X",80,536870960]],["^15",[1740,"^V",80,536870960]],["^15",[1740,"^U",80,536870960]],["^15",[1740,"^U",160,536870960]],["^15",[1740,"^U",1739,536870960]],["^15",[1740,"^H",160,536870960]],["^15",[1740,"^H",1739,536870960]],["^15",[1740,"^;","~u656462fe-901b-41b3-86cf-028b9371263d",536870960]],["^15",[1741,"^Q","~``.push_str(<String>)`` or ``.push(<Char>)``\nAppends a String or [[Char]] to a ``String`` object.\n\n* Concatenation\nA bit different in Rust due to [[Ownership]] rules. \n``String`` can't be concatenated to another ``String``, it can only be concatenated to an ``&str``, or ``&String`` which would be automatically coerced into ``&str`` using [[Deref Coercion]].\nFor ex.:\n```rust\nlet s1= String::from(\"yo\");\nlet s2= String::from(\"na\");\nlet s3= s1+ &s2; //works but s1 loses Ownership of its data.\n```\nThis is because the ``+`` Operation is as ``Add`` [[Method]] on any custom [[Data Type]] in Rust and the ``Add`` method for String looks like so \n```rust\nfn add(self, s: &str) -> String \n```\n\nIn other words, every string concatenation requires at-least one ``String``, and then there can be any number of ``&str``s and we can concatenate them.\nFor ex.:\n```rust\n    let s1 = String::from(\"tic\");\n    let s2 = String::from(\"tac\");\n    let s3 = String::from(\"toe\");\n\n    let s = s1 + \"-\" + &s2 + \"-\" + &s3;\n```\nIntuitively, this makes sense because Rust needs to know of a place where to store the concatenated String, if there are only immutable [[Reference Type]]s then it doesn't have that, if it has more than one  ``String``s then it's not sure which String to use, and even if it is, the developer won't be sure which one it is and would lose [[Ownership]].\n\n* The ``format!(<String>)`` [[Macro]]\nThis macro is used for String concatenation as it returns a new ``String`` with all the strings concatenated.\nFor ex.:\n```rust\nlet s1= String::from(\"yo\");\nlet s2= String::from(\"yoaa\");\nlet s3= \"as\";\nlet s3= format!(\"{s1} and {s2} {s3}\"); //works\n```\nSince it creates a new ``String``, it doesn't need the [[Ownership]] of any ``String`` and hence it takes the immutable [[Reference Type]] of all the strings passed to it.",536870960]],["^15",[1741,"^O","^16",536870960]],["^15",[1741,"^F",1747,536870960]],["^15",[1741,"^X",80,536870960]],["^15",[1741,"^V",80,536870960]],["^15",[1741,"^U",80,536870960]],["^15",[1741,"^U",1065,536870960]],["^15",[1741,"^U",1079,536870960]],["^15",[1741,"^U",1090,536870960]],["^15",[1741,"^U",1091,536870960]],["^15",[1741,"^U",1160,536870960]],["^15",[1741,"^U",1167,536870960]],["^15",[1741,"^U",1239,536870960]],["^15",[1741,"^H",1065,536870960]],["^15",[1741,"^H",1079,536870960]],["^15",[1741,"^H",1090,536870960]],["^15",[1741,"^H",1091,536870960]],["^15",[1741,"^H",1160,536870960]],["^15",[1741,"^H",1167,536870960]],["^15",[1741,"^H",1239,536870960]],["^15",[1741,"^;","~u656462fe-1731-4f44-b6a6-c90af5072332",536870960]],["^15",[1742,"^Q","Collection of bytes, the Collection itself provides many features on the underlying bytes and interprets them as text. At the core of rust, lies only a single type, the ``str`` [[Data Type]], then the [[Standard Library]] provides the ``String`` [[Data Type]] collection.\n\nThe ``str`` type is a string [[Slice]] so it represents a fixed-size string whereas the ``String`` type is growable. There are various methods to convert value from either type into the other.\n\nDespite intuition, a ``String`` is *NOT* a collection over [[Char]]s. Infact, [[Char]]s have nothing to do with strings (be they ``str`` or ``String``).",536870960]],["^15",[1742,"^O","^16",536870960]],["^15",[1742,"^F",236,536870960]],["^15",[1742,"^X",80,536870960]],["^15",[1742,"^V",80,536870960]],["^15",[1742,"^U",80,536870960]],["^15",[1742,"^U",1090,536870960]],["^15",[1742,"^U",1096,536870960]],["^15",[1742,"^U",1167,536870960]],["^15",[1742,"^U",1413,536870960]],["^15",[1742,"^H",1090,536870960]],["^15",[1742,"^H",1096,536870960]],["^15",[1742,"^H",1167,536870960]],["^15",[1742,"^H",1413,536870960]],["^15",[1742,"^;","~u656462fe-a6d0-45b8-9bda-7b37119856d4",536870960]],["^15",[1743,"^Q","Indexing\nInteger indices to access characters (not [[Char]]) in a string in Rust isn't valid. This is because each character is UTF-8 encoded. \nA ``String`` is a wrapper over ``Vec<u8>``, but UTF-8 requires 1 to 4 bytes (4*8 = 32 bits) per character, this variable size is by UTF-8 spec. This means it is not sure if a given index is a single character or a part of a multi-byte character and hence accessing ``String`` by index is not guaranteed to return the right character. \nFor ex.:\n```rust\nlet hello = \"Здравствуйте\";\nlet answer = &hello[0]; //is an error\n```\nThis doesn't compile in Rust as rust avoids such errors and here the error would be correct, as we are trying to get the first character, which we would expect would be the Cyrillic letter ``Ze`` and not Arabic Number ``3``, it takes 2 bytes according to UTF-8 and hence both index 0 and 1 make up the character ``Ze``. \n\nWe can use ``&hello[0..2]`` (end exclusive) and that would work as string [[Slice]]s are allowed anyway. But String [[Slice]]s are risky, if the start or end index of a string slice bisects a character, it [[Panic]]s. \n\nWe can see why [[Char]] isn't used to represent characters in ``String`` as string slice from 0 to 1 above would return a string with the right character, which has taken 2 bytes and Rust can't know if the string slice from 0 to 1 is a single character or it is a string.\n\n* There are 3 ways Rust sees characters in String. \nFor “नमस्ते”,\n\nIt’s length is 18 in bytes and this is how it looks as a byte-array,\n[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164, 224, 165, 135]\n \nRust sees chars as Unicode Scalar Values, basically like this \n['न', 'म', 'स', '्', 'त', 'े']\nThe 4th and 6th letter here are called *diacritics* as they don’t make sense on their own. \n\nLastly, here’s how we interpret these letters,\n[\"न\", \"म\", \"स्\", \"ते\"]\nThese are the *Grapheme Clusters* of the word Namaste.\nA grapheme cluster is a more accurate name of what we call a letter in English. \n\nThis is why indexing is not done in Rust. This is also why, [[Slice]] operations are risky, for ex.:\n```rust\nlet hello = String::from(\"Здравствуйте\");\n//hello[0..1]; //will cause the program to panic as the first byte is a part of 2 to make up a Unicode Scalar value, so \nhello[0..2] //works\n```",536870960]],["^15",[1743,"^O","^16",536870960]],["^15",[1743,"^F",1741,536870960]],["^15",[1743,"^X",80,536870960]],["^15",[1743,"^V",80,536870960]],["^15",[1743,"^U",80,536870960]],["^15",[1743,"^U",1080,536870960]],["^15",[1743,"^U",1167,536870960]],["^15",[1743,"^U",1413,536870960]],["^15",[1743,"^H",1080,536870960]],["^15",[1743,"^H",1167,536870960]],["^15",[1743,"^H",1413,536870960]],["^15",[1743,"^;","~u656462fe-153f-41e0-bb76-cc6b90dde928",536870960]],["^15",[1744,"^Q","~```\n1.\tRaw string: Get a string as defined, we use “\\ … “\nFor ex.:\nlet contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\nor use r# and #\nlet abc= r# “my string”#;\n\n```",536870960]],["^15",[1744,"^O","^16",536870960]],["^15",[1744,"^F",1749,536870960]],["^15",[1744,"^X",80,536870960]],["^15",[1744,"^V",80,536870960]],["^15",[1744,"^U",80,536870960]],["^15",[1744,"^;","~u656462fe-dffa-4a4e-8542-7ae36d1cec7d",536870960]],["^15",[1745,"^Q","",536870960]],["^15",[1745,"^O","^16",536870960]],["^15",[1745,"^F",1744,536870960]],["^15",[1745,"^X",80,536870960]],["^15",[1745,"^V",80,536870960]],["^15",[1745,"^U",80,536870960]],["^15",[1745,"^;","~u656462fe-6186-4d47-870f-4aca2950600c",536870960]],["^15",[1746,"^Q","",536870960]],["^15",[1746,"^O","^16",536870960]],["^15",[1746,"^F",1745,536870960]],["^15",[1746,"^X",80,536870960]],["^15",[1746,"^V",80,536870960]],["^15",[1746,"^U",80,536870960]],["^15",[1746,"^;","~u656462fe-8790-4596-aa89-8655d4a5067d",536870960]],["^15",[1747,"^Q","Conversion between ``String`` and ``str``\nTo convert a ``String`` to a ``str`` we use the [[Slice]] [[Operator]] like so \n```rust\nlet s= String::from(\"axb\");\nlet x = &s[..];\n```\n``x `` is of type ``&str`` here.\n\nAnd to convert an ``str`` to ``String``, we can\n```rust\nlet s= \"x\";\nlet y= String::from(s); //ok\nlet z= x.to_string(); //ok\n```\nWe can also use ``&str`` [[Reference Type]] with these [[Function]]s.\n\n* ``.as_string()``\nGets a ``String`` as an ``&str``, equivalent to ``&<String object>[..]`` [[Slice]].",536870960]],["^15",[1747,"^O","^16",536870960]],["^15",[1747,"^F",1748,536870960]],["^15",[1747,"^X",80,536870960]],["^15",[1747,"^V",80,536870960]],["^15",[1747,"^U",80,536870960]],["^15",[1747,"^U",163,536870960]],["^15",[1747,"^U",339,536870960]],["^15",[1747,"^U",1091,536870960]],["^15",[1747,"^U",1413,536870960]],["^15",[1747,"^H",163,536870960]],["^15",[1747,"^H",339,536870960]],["^15",[1747,"^H",1091,536870960]],["^15",[1747,"^H",1413,536870960]],["^15",[1747,"^;","~u656462fe-97c4-4bdc-88a9-9b48c70ee02e",536870960]],["^15",[1748,"^Q","~``str``\nAn ``str`` is just a [[Slice]] of a string meaning it is a fixed-size immutable string slice. It is also called a String literal as the ``str`` can only be declared at compile-time. However, it's [[Reference Type]] ``&str`` can be created at any time.\n\nFor ex.:\n```rust\n  let value = 3;\n    let yo = match value {\n        1 => \"1\",\n        other => {\n            let someOtherValue = other.to_string();\n            &someOtherValue[..]\n        }\n    };\n```\nThis code results in an error as the ``&str`` from ``1`` does not have the same [[Lifetime]] as the ``other`` arm in the [[Pattern Matching]]. The first arm has an ``&str`` with static lifetime as the str is known at compile time making its reference ``&str`` have a static lifetime but the latter is only known at run-time making its lifetime smaller than the other arm. We can fix it like so\n```rust\n    let value = 3;\n    let _yo = match value {\n        1 => \"1\".to_string(),\n        other => {\n            let someOtherValue = other.to_string();\n            (&someOtherValue[..]).to_string()\n        }\n    };\n```\nSo now both arms return a ``String`` [[Data Type]]. \n\n\n \n``\"abc\".to_owned()`` [[TODO]] also define it all better here",536870960]],["^15",[1748,"^O","^16",536870960]],["^15",[1748,"^F",1740,536870960]],["^15",[1748,"^X",80,536870960]],["^15",[1748,"^V",80,536870960]],["^15",[1748,"^U",4,536870960]],["^15",[1748,"^U",80,536870960]],["^15",[1748,"^U",1090,536870960]],["^15",[1748,"^U",1091,536870960]],["^15",[1748,"^U",1101,536870960]],["^15",[1748,"^U",1253,536870960]],["^15",[1748,"^U",1413,536870960]],["^15",[1748,"^H",4,536870960]],["^15",[1748,"^H",1090,536870960]],["^15",[1748,"^H",1091,536870960]],["^15",[1748,"^H",1101,536870960]],["^15",[1748,"^H",1253,536870960]],["^15",[1748,"^H",1413,536870960]],["^15",[1748,"^;","~u656462fe-c1e2-472c-8b3f-78ceb3a5bf38",536870960]],["^15",[1749,"^Q","",536870960]],["^15",[1749,"^O","^16",536870960]],["^15",[1749,"^F",1743,536870960]],["^15",[1749,"^X",80,536870960]],["^15",[1749,"^V",80,536870960]],["^15",[1749,"^U",80,536870960]],["^15",[1749,"^;","~u656462fe-6d90-4239-bb31-b04e04481b4e",536870960]],["^15",[1750,"^3","-",536870962]],["^15",[1750,"^17",1701077758662,536870962]],["^15",[1750,"^1@","~m1684621594936",536870963]],["^15",[1750,"^Z","Unreal/pages/contents.md",536870962]],["^15",[1752,"^K",1701077758673,536870964]],["^15",[1752,"^@",false,536870964]],["^15",[1752,"^Y","exercises",536870964]],["^15",[1752,"^11","Exercises",536870964]],["^15",[1752,"^B",1701077758673,536870964]],["^15",[1752,"^;","~u656462fe-f05e-4ac1-949b-faf1d3f55d0e",536870966]],["^15",[1759,"^12",2,536870969]]]]]]