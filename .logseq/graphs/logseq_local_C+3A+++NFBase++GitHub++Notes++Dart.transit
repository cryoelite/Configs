["~#datascript/DB",["^ ","~:schema",["^ ","~:ast/version",["^ "],"~:file/content",["^ "],"~:block/properties-text-values",["^ "],"~:block/alias",["^ ","~:db/valueType","~:db.type/ref","~:db/cardinality","~:db.cardinality/many"],"~:block/pre-block?",["^ "],"~:block/uuid",["^ ","~:db/unique","~:db.unique/identity"],"~:block/priority",["^ "],"~:block/properties",["^ "],"~:block/journal?",["^ "],"~:block/namespace",["^ ","^6","^7"],"~:block/updated-at",["^ "],"~:block/repeated?",["^ "],"~:db/type",["^ "],"~:file/handle",["^ "],"~:block/left",["^ ","^6","^7","~:db/index",true],"~:block/refs",["^ ","^6","^7","^8","^9"],"~:block/scheduled",["^ "],"~:block/properties-order",["^ "],"~:block/created-at",["^ "],"~:block/deadline",["^ "],"~:block/collapsed?",["^ ","^G",true],"~:block/journal-day",["^ "],"~:block/format",["^ "],"~:block/tags",["^ ","^6","^7","^8","^9"],"~:block/content",["^ "],"~:recent/pages",["^ "],"~:block/macros",["^ ","^6","^7","^8","^9"],"~:db/ident",["^ ","^<","^="],"~:block/path-refs",["^ ","^6","^7","^8","^9"],"~:block/parent",["^ ","^6","^7","^G",true],"~:block/type",["^ "],"~:block/page",["^ ","^6","^7","^G",true],"~:block/name",["^ ","^<","^="],"~:file/path",["^ ","^<","^="],"~:block/file",["^ ","^6","^7"],"~:block/marker",["^ "],"~:block/original-name",["^ ","^<","^="],"~:schema/version",["^ "]],"~:datoms",["~#list",[["~#datascript/Datom",[1,"^12",2,536870913]],["^15",[2,"^@",false,536870914]],["^15",[2,"^Y","card",536870913]],["^15",[2,"^11","card",536870913]],["^15",[2,"^;","~u7945e521-fbcf-459d-94c5-8d094ebd165d",536876068]],["^15",[3,"^@",false,536870914]],["^15",[3,"^Y","canceled",536870914]],["^15",[3,"^11","CANCELED",536870914]],["^15",[3,"^;","~u3c90195c-f0a0-466a-8f13-29081bcf4f16",536876068]],["^15",[4,"^@",false,536870914]],["^15",[4,"^Y","todo",536870914]],["^15",[4,"^11","TODO",536870914]],["^15",[4,"^;","~u396a499b-9ee5-49f3-9d78-6e63c694d660",536876068]],["^15",[5,"^@",false,536870914]],["^15",[5,"^Y","now",536870914]],["^15",[5,"^11","NOW",536870914]],["^15",[5,"^;","~u65def1ff-9bec-444e-bd50-043f2383f4ab",536876068]],["^15",[6,"^@",false,536870914]],["^15",[6,"^Y","later",536870914]],["^15",[6,"^11","LATER",536870914]],["^15",[6,"^;","~u0347d6e5-7e3d-41fd-8745-e4762e02737f",536876068]],["^15",[7,"^@",false,536870914]],["^15",[7,"^Y","done",536870914]],["^15",[7,"^11","DONE",536870914]],["^15",[7,"^;","~u41d75fa8-adf0-4a05-856f-a4a43a23be9a",536876068]],["^15",[8,"^@",false,536870914]],["^15",[8,"^Y","doing",536870914]],["^15",[8,"^11","DOING",536870914]],["^15",[8,"^;","~uedb0a6c7-d254-4806-88de-d394ef07eda5",536876068]],["^15",[9,"^@",false,536870914]],["^15",[9,"^Y","in-progress",536870914]],["^15",[9,"^11","IN-PROGRESS",536870914]],["^15",[9,"^;","~u530cec8a-5004-4255-8dcc-44e19ec8fc06",536876068]],["^15",[10,"^@",false,536870914]],["^15",[10,"^Y","c",536870914]],["^15",[10,"^11","C",536870914]],["^15",[10,"^;","~u9c9dfd4e-ee3d-4a1a-8d63-d1654ecca6da",536876068]],["^15",[11,"^@",false,536870914]],["^15",[11,"^Y","b",536870914]],["^15",[11,"^11","B",536870914]],["^15",[11,"^;","~u2abf8632-f4cc-4f13-a540-c2f98b9622a1",536876068]],["^15",[12,"^[",22,536870919]],["^15",[12,"^@",false,536870914]],["^15",[12,"^Y","contents",536870914]],["^15",[12,"^11","Contents",536870914]],["^15",[12,"^;","~u3f9511d0-58dd-47c7-8c05-2628acf8aebc",536876068]],["^15",[13,"^@",false,536870914]],["^15",[13,"^Y","waiting",536870914]],["^15",[13,"^11","WAITING",536870914]],["^15",[13,"^;","~uac2098f5-0b73-40b3-a5c9-e41b5380c3d1",536876068]],["^15",[14,"^@",false,536870914]],["^15",[14,"^Y","favorites",536870914]],["^15",[14,"^11","Favorites",536870914]],["^15",[14,"^;","~u631302cd-b60a-47be-8f19-6df94d704f79",536876068]],["^15",[15,"^@",false,536870914]],["^15",[15,"^Y","a",536870914]],["^15",[15,"^11","A",536870914]],["^15",[15,"^;","~u478a0ace-8bcb-41ed-b4e8-db3dcdb17eae",536876068]],["^15",[16,"^@",false,536870914]],["^15",[16,"^Y","cancelled",536870914]],["^15",[16,"^11","CANCELLED",536870914]],["^15",[16,"^;","~uc0ae6036-6646-4514-a9e2-0a737c7077bb",536876068]],["^15",[17,"^@",false,536870914]],["^15",[17,"^Y","wait",536870914]],["^15",[17,"^11","WAIT",536870914]],["^15",[17,"^;","~uf9a62ccd-5d48-4c0a-ad52-54a49d35681e",536876068]],["^15",[18,"^K",1714407348850,536870915]],["^15",[18,"^O","~:markdown",536870915]],["^15",[18,"^N",20240429,536870915]],["^15",[18,"^@",true,536870915]],["^15",[18,"^Y","apr 29th, 2024",536870915]],["^15",[18,"^11","Apr 29th, 2024",536870915]],["^15",[18,"^B",1714407348850,536870915]],["^15",[18,"^;","~u662fc7b4-2e1a-4de6-9637-1627970a037d",536870915]],["^15",[19,"^Q","",536870916]],["^15",[19,"^O","^16",536870916]],["^15",[19,"^N",20240429,536870916]],["^15",[19,"^@",true,536870916]],["^15",[19,"^F",18,536870916]],["^15",[19,"^X",18,536870916]],["^15",[19,"^V",18,536870916]],["^15",[19,"^U",18,536870917]],["^15",[19,"^?",["^ "],536870916]],["^15",[19,"^;","~u662fc7b4-6fff-4370-86f3-e3eecab0df3d",536870916]],["^15",[20,"^3","",536870918]],["^15",[20,"~:file/created-at",1714407349060,536870919]],["^15",[20,"^Z","logseq/custom.css",536870918]],["^15",[21,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage:\n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday)\n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;;  - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; Regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Define the default home page and sidebar status.\n ;; If unspecified, the journal page will be loaded on startup and the right sidebar will stay hidden.\n ;; The `:page` value represents the name of the page displayed at startup.\n ;; Available options for `:sidebar` are:\n ;; - \"Contents\" to display the Contents page in the right sidebar.\n ;; - A specific page name to display in the right sidebar.\n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"].\n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; Default value: \"whiteboards\"\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means\n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n ;; Default value: false\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?   true   ; Default value: true\n ;;  :builtin-pages?  false  ; Default value: false\n ;;  :excluded-pages? false  ; Default value: false\n ;;  :journal?        false} ; Default value: false\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/forcesettings\n ;; {:link-dist       180    ; Default value: 180\n ;;  :charge-strength -600   ; Default value: -600\n ;;  :charge-range    600}   ; Default value: 600\n\n ;; Favorites to list on the left sidebar\n :favorites [\"Dart\" \"Contents\"]\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: true\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile\n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false\n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false\n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Otherwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar}\n",536870928]],["^15",[21,"^17",1714407349033,536870919]],["^15",[21,"~:file/last-modified-at","~m1714429520108",536870929]],["^15",[21,"^Z","logseq/config.edn",536870919]],["^15",[22,"^3","- [[Dart]]",536870934]],["^15",[22,"^17",1714407349066,536870919]],["^15",[22,"^18","~m1714407359117",536870935]],["^15",[22,"^Z","pages/contents.md",536870919]],["^15",[23,"^Q","[[Dart]]",536870934]],["^15",[23,"^O","^16",536870919]],["^15",[23,"^F",12,536870919]],["^15",[23,"^X",12,536870919]],["^15",[23,"^V",12,536870919]],["^15",[23,"^U",12,536870919]],["^15",[23,"^U",38,536870934]],["^15",[23,"^H",38,536870934]],["^15",[23,"^;","~u662fc7b5-f93f-4a48-8554-52788a2fc67f",536870919]],["^15",[24,"^3","- An assert is a condition that has to be true. In dart these are only checked in ((6646544c-dbc1-4298-b2a6-b3c9ebbc32a0)), which if fails disrupts normal program execution. Done with the `assert(<bool condition>, <optional string message>);` [[Function]]. Has no effect in the ((66465448-de0b-48b4-abd6-6b9e86ca3121)).",536872975]],["^15",[24,"^17",1714407349084,536870919]],["^15",[24,"^18","~m1716373299420",536873381]],["^15",[24,"^Z","pages/Assert.md",536870919]],["^15",[25,"^K",1714407349173,536870919]],["^15",[25,"^[",24,536870919]],["^15",[25,"^@",false,536870919]],["^15",[25,"^Y","assert",536870919]],["^15",[25,"^11","Assert",536870919]],["^15",[25,"^B",1714407349173,536870919]],["^15",[25,"^;","~u664c94a3-c0f8-487e-aec3-eafc962cb479",536872995]],["^15",[27,"^K",1714407349108,536870919]],["^15",[27,"^[",271,536873871]],["^15",[27,"^O","^16",536873865]],["^15",[27,"^@",false,536870919]],["^15",[27,"^Y","function",536870919]],["^15",[27,"^11","Function",536870919]],["^15",[27,"^B",1716389055181,536873869]],["^15",[27,"^;","~u664c94a3-07be-4afb-ac7a-487b141c995a",536872995]],["^15",[29,"^Q","An assert is a condition that has to be true. In dart these are only checked in ((6646544c-dbc1-4298-b2a6-b3c9ebbc32a0)), which if fails disrupts normal program execution. Done with the `assert(<bool condition>, <optional string message>);` [[Function]]. Has no effect in the ((66465448-de0b-48b4-abd6-6b9e86ca3121)).",536872975]],["^15",[29,"^O","^16",536870919]],["^15",[29,"^F",25,536870919]],["^15",[29,"^X",25,536870919]],["^15",[29,"^V",25,536870919]],["^15",[29,"^U",25,536870919]],["^15",[29,"^U",27,536870919]],["^15",[29,"^H",27,536872975]],["^15",[29,"^H",159,536872975]],["^15",[29,"^H",160,536872975]],["^15",[29,"^;","~u662fc7b5-a85d-4a67-adda-8ac1132fb4b0",536870919]],["^15",[30,"^3","- `run`\n  id:: 662fc7b5-e50a-4a18-8486-a6139468038d\n  Builds the given file and executes it.\n-",536872978]],["^15",[30,"^17",1714407349093,536870919]],["^15",[30,"^18","~m1715617632790",536872979]],["^15",[30,"^Z","pages/Dart CLI.md",536870919]],["^15",[31,"^K",1714407349092,536870919]],["^15",[31,"^[",30,536870919]],["^15",[31,"^@",false,536870919]],["^15",[31,"^Y","dart cli",536870919]],["^15",[31,"^11","Dart CLI",536870919]],["^15",[31,"^B",1714407349092,536870919]],["^15",[31,"^;","~u664c94a3-9320-4ad1-bd09-b49288bb9a61",536872978]],["^15",[32,"^Q","~`run`\nid:: 662fc7b5-e50a-4a18-8486-a6139468038d\nBuilds the given file and executes it.",536872978]],["^15",[32,"^O","^16",536870919]],["^15",[32,"^F",31,536870919]],["^15",[32,"^X",31,536870919]],["^15",[32,"^V",31,536870919]],["^15",[32,"^U",31,536870919]],["^15",[32,"^?",["^ ","~:id","662fc7b5-e50a-4a18-8486-a6139468038d"],536872978]],["^15",[32,"^J",["^19"],536872978]],["^15",[32,"^4",["^ ","^19","662fc7b5-e50a-4a18-8486-a6139468038d"],536872978]],["^15",[32,"^;","~u662fc7b5-e50a-4a18-8486-a6139468038d",536870919]],["^15",[33,"^3","- [[Spec]]\n- Fast, multi-platform, null-safe (NNBD, non-nullable-by-default, introduced in Dart 2.12), strongly typed language developed by Google. Supports JIT (Compile as the app runs) and AOT (Compile everything beforehand) Compilation, and compiles natively to platforms, supports ios, windows, web (js) and android. Supports concurrency and parallelism with a first class support with [[Future]]s and [[Isolate]]s respectively.\n- Basic Program:\n  In a file with extension ``.dart``, \n  FE: `abc.dart`\n  ```dart\n  void main(){\n  print(\"yo\");\n  }\n  ```\n  Executed with `dart run abc.dart`\n  Uses the ((662fc7b5-e50a-4a18-8486-a6139468038d)) CLI command.\n- The `main()` [[Function]] is the entry-point of any dart app/project.\n  It must have the [[void]]return type. And it can have an optional parameter [[List]]<[[String]]>, this gets the arguments passed to the dart application.\n  FE:\n  A file `abc.dart`\n  ```dart\n  void main(List<String> arguments) {\n  \n  print(arguments);\n  \n  }\n  ```\n  If we execute it with `dart run abc.dart 1 2 \"yo\"`\n  Outputs \n  `[1,2,yo]` \n  to the console.\n- Lines have to end with `;` in dart.\n- [[Variable]]\n- [[Operator]]\n- [[Comment]]\n- [[Metadata]]\n- [[Library]]\n- [[Data Type]]\n-",536874100]],["^15",[33,"^17",1714407349109,536870919]],["^15",[33,"^18","~m1716389358668",536874099]],["^15",[33,"^Z","pages/Dart.md",536870919]],["^15",[35,"^K",1714407349145,536870919]],["^15",[35,"^[",53,536870919]],["^15",[35,"^@",false,536870919]],["^15",[35,"^Y","spec",536870919]],["^15",[35,"^11","Spec",536870919]],["^15",[35,"^B",1714407349145,536870919]],["^15",[35,"^;","~u664c94a3-98cb-4e69-9c32-5b3b0af1a32a",536872981]],["^15",[37,"^K",1714407349173,536870919]],["^15",[37,"^[",55,536870919]],["^15",[37,"^@",false,536870919]],["^15",[37,"^Y","variable",536870919]],["^15",[37,"^11","Variable",536870919]],["^15",[37,"^B",1716450400941,536875330]],["^15",[37,"^;","~u664c94a3-17ed-4a36-bda5-b9f1361e9bb7",536872995]],["^15",[38,"^K",1714407349108,536870919]],["^15",[38,"^[",33,536870919]],["^15",[38,"^@",false,536870919]],["^15",[38,"^Y","dart",536870919]],["^15",[38,"^11","Dart",536870919]],["^15",[38,"^B",1716389357798,536874097]],["^15",[38,"^;","~u664c94a3-a856-4f6d-b110-3ea130f1d5d5",536872995]],["^15",[39,"^K",1714407349108,536870919]],["^15",[39,"^@",false,536870919]],["^15",[39,"^Y","future",536870919]],["^15",[39,"^11","Future",536870919]],["^15",[39,"^B",1714407349108,536870919]],["^15",[39,"^;","~u664c94a3-5417-400e-a43e-1ad498811010",536872989]],["^15",[41,"^K",1714407349107,536870919]],["^15",[41,"^@",false,536870919]],["^15",[41,"^Y","isolate",536870919]],["^15",[41,"^11","Isolate",536870919]],["^15",[41,"^B",1714407349107,536870919]],["^15",[41,"^;","~u664c94a3-067d-497a-98d6-3d9db2a57f75",536872981]],["^15",[42,"^Q","[[Spec]]",536870962]],["^15",[42,"^O","^16",536870919]],["^15",[42,"^F",38,536870919]],["^15",[42,"^X",38,536870919]],["^15",[42,"^V",38,536870919]],["^15",[42,"^U",27,536870919]],["^15",[42,"^U",35,536870919]],["^15",[42,"^U",37,536870919]],["^15",[42,"^U",38,536870919]],["^15",[42,"^U",39,536870919]],["^15",[42,"^U",41,536870919]],["^15",[42,"^H",35,536872981]],["^15",[42,"^;","~u662fc7b5-fb10-47c1-b935-671bf22f5007",536870919]],["^15",[43,"^3","- Primitive Data Types\nid:: 6633e18f-d9eb-4359-990e-2e27bf271b93\n  Dart natively supports the following types\n  * Numbers ([[int]], [[double]])\n  * Strings ([[String]])\n  * Booleans ([[bool]])\n  * Records \\( [[Record]], like (value1, value2))\n  * Lists ([[List]], also known as arrays)\n  * Sets ([[Set]])\n  * Maps ([[Map]])\n  * Runes ([[Runes]]; often replaced by the characters API)\n  * Symbols ([[Symbol]])\n  * The value null ([[Null]])\n- ``object``\n  id:: 664dc836-dc7e-4d07-9dcf-731130436a8d\n  An instance of a class.\n- Every data type's value is an `object`.\n- We can create objects in Dart using literals, like ``'hello'`` is a [[String]] literal, ``true`` is a boolean literal. And so on.\n- In dart, every Data Type is a subclass of an [[Object]].\n- Since [[Variable]]s store references to objects, and all values are objects, and their types [[Object]] [[Class]]es we can use ctors to initialize values too, such as ``Map()`` for [[Map]] types.\n- There are other types too, such as\n  [[Enum]]\n  [[Future]] and [[Stream]]: These types are used for [[Asynchrony]]\n  [[Iterable]]\n  [[Never]]\n  [[dynamic]]\n  [[void]]\n- For every Data type `T` exists a nullable data type `T?` which can either have a value of type `T` or [[Null]]. That is null is not assignable to `T`, Dart enforces sound null safety. Whilst ``T`` variables can be declared as uninitialized, they can't be accessed until initialized.\n  id:: 66424513-072f-492a-afd4-a43fdfb810eb\n    FE:\n  ```dart\n  String? x; //initialied to null automatically by default\n  String y; //un-initialized, needs to be initialized before being used\n  ```\n  uses [[Variable]]s named `x` and `y`\n   * We can't access properties/[[Method]]s of a nullable data type with the normal ((6639395b-7171-49a2-a9a1-8e4c41405c90)) ``.``, we have to use the null-aware version of it.\n- Number Types\n  These types have the base class [[num]], we have\n  [[int]] and [[double]]\n- [[Collection Type]]s \n  These types collect multiple values.",536876564]],["^15",[43,"^17",1714407349125,536870919]],["^15",[43,"^18","~m1717080069617",536876563]],["^15",[43,"^Z","pages/Data Type.md",536870919]],["^15",[44,"^K",1714407349173,536870919]],["^15",[44,"^[",43,536870919]],["^15",[44,"^@",false,536870919]],["^15",[44,"^Y","data type",536870919]],["^15",[44,"^11","Data Type",536870919]],["^15",[44,"^B",1717080069456,536876562]],["^15",[44,"^;","~u664c94a3-c9fb-4179-a26b-79afa46f1db1",536872995]],["^15",[45,"^K",1714407349173,536870919]],["^15",[45,"^@",false,536870919]],["^15",[45,"^Y","null",536870919]],["^15",[45,"^11","Null",536870919]],["^15",[45,"^B",1714407349173,536870919]],["^15",[45,"^;","~u664c94a3-fd1b-4b5c-b79f-c7dd0cf2c863",536872995]],["^15",[47,"^K",1714407349124,536870919]],["^15",[47,"^@",false,536870919]],["^15",[47,"^Y","method",536870919]],["^15",[47,"^11","Method",536870919]],["^15",[47,"^B",1714407349124,536870919]],["^15",[47,"^;","~u664c94a3-eb2d-4946-9929-4c172d225cc2",536872992]],["^15",[48,"^K",1714407349124,536870919]],["^15",[48,"^[",257,536873754]],["^15",[48,"^O","^16",536873558]],["^15",[48,"^@",false,536870919]],["^15",[48,"^Y","object",536870919]],["^15",[48,"^11","Object",536870919]],["^15",[48,"^B",1716388906443,536873752]],["^15",[48,"^;","~u664c94a3-e017-4330-ba6b-da12b71fd94f",536872995]],["^15",[50,"^3","- Operator List\n  ![image.png](../assets/image_1714694155562_0.png)\n  \n  The list is sorted in decreasing order of precedence, that is the unary postfixes have the highest precedence and spread operators have the lowest precedence. \n  An expression is any combination of operators and operands (values/variables).\n  FE:\n  ``a++``\n  where `a` is a [[Variable]] and `++` is the unary postfix operator.\n   \n  A precedence defines which operator will be resolved first in an expression with multiple operators.\n  If 2 operators with same precedence are present in an expression then their associativity (which is guaranteed to be the same for both the operators) will be used, to determine which position operator will be resolved first, \n  FE: \n  In the expression`4+2-3`\n  The operators `+` and `-` have the same precedence so, their associativity, i.e., Left is used and hence the operators are resolved from Left to Right, and hence here the leftmost operator `+` is resolved first then the one to its right `-`.\n- When an operator takes 2 operands such as the `+` operator then the operator is called for the left operand with the right operand as it's argument.\n  FE: if we have a `SomeVector` [[Class]] object `v` and ``SomePoint`` [[Class]] object `p`, and we do `v+p` then the `SomeVector`'s addition [[Method]] is called with the ``SomePoint`` object `p`.\n- Arithmetic Operators\n  The usual\n  ![image.png](../assets/image_1714694766987_0.png)\n  But Dart also brings `~/` which divides left operand by right and if the result is a [[double]] then it truncates the values after the decimal.\n  FE:\n  ``5.4~/2`` is 2.7 and then it is truncated and hence the result is ``2``\n- Postfix and prefix ops supported as normal, `<operand>++/--` and `++/--<operand>`\n- Comparison and Relation Ops supported as normal, `>/</==/!=/<=/>=`\n  For equality,\n  Compares if 2 objects represent the same thing, but they must be the same type or be nullable [[Data Type]]. To check if they are the same types we can use the `identical()` [[Function]] in ``dart:core`` ((66342d21-0997-462e-9dee-e1fe8428fe6d)) instead.\n  That is,\n  * for 2 objects `x` and `y`, if `x` or `y` is null, then if both are null then equality returns true, and false if only one is.\n  * If they are the same type and non-nullable then the `==` method of the left operand is invoked with the `right` operand as the argument.\n- Type Test Operators\n  ![image.png](../assets/image_1714844863151_0.png)\n  * `is` in an expression like `a is T` checks if the type of `a` implements the interface T. \n  FE: `a is Object?` would always return `True` for any type of `a` because every class implements the [[Object]] class and since it is nullable, even a nullable type would be covered.\n  \n  * `as` in `a as T` typecasts an object of a's type to an object of type T. Throws an exception if `a` is either null or is not `T` or a derived class of `T`.\n  FE:\n  ```dart\n  void main() {\n    var x = Y();\n    print((x as X).x);\n  }\n  \n  class X {\n    final String x;\n    X({this.x = \"yo\"});\n  }\n  \n  class Y implements X {\n    @override\n    final String x;\n    Y({this.x = \"yas\"}) : super();\n  }\n  ```\n- Assignment Operators\n  Supports the operators such as `*=` or `+=`,\n  ![image.png](../assets/image_1714845840971_0.png)\n  \n  Where any compound assignment such as `a <operator>=b` is equivalent to `a = a <operator> b`.\n  \n  * There's also the ``??=`` called the assign-to-null operator, for an expression `a ??= b` it only assigns `b` to `a`  when `a` is null.\n- The usual logical operators `!` for inversion of a [[bool]], `&&` and `||` are supported.\n- Bitwise ops\n  ![image.png](../assets/image_1715018164317_0.png)\n- Conditional Expressions\n  Dart has ternary operator, `<bool expression> ? <compute and return on true> : <compute and return on false>` and it can use one more operator for conditional expressions, the null-coalescing operator `??`, `<expr 1> ?? <compute expr2 and return if expr1 is null>`\n  That is, if the left operand is null then compute the expression on the right and return its result.\n  FE:\n  ```dart\n  String? name = null;\n  String x = name ?? \"yo\"; //puts yo in x\n  ```\n- Cascade notation\n  This notation uses the cascade operators (`..` and `?..`) to chain multiple instance method calls and instance member accesses, i.e., it allows  us to call methods or modify members of the same object without specifying the object repeatedly. \n  \n  Syntax: ``<object instance>..<member expression (can use ops)>..<member expression (can use ops)>;`` any number of times and the semicolon is put at the end. [[Dart Style Guide]] recommends separating the subsequent operations with newlines.\n  The subsequent operations are performed on the modified object, so expression 1 modifies the object then the cascade operator applies the expression 2 on the previously modified object and so on, it is a chain and the order matters.\n  FE:\n  ```dart\n  var x= Car()\n   ..name= \"Yo\"\n   ..speed= 20;\n  \n  //is equivalent to\n  var x= Car();\n  x.name= \"Yo\";\n  x.speed= 20;\n  ```\n  uses the dot access operator.\n  \n  * Similarly, we have the null cascade operator `?..` which wouldn't do the subsequent operations if the object can be null. It needs to be specified only once at the beginning of the chain.\n  FE:\n  ```dart\n  var x= Car()\n   ?..name= \"Yo\"\n   ..speed= 20;\n  \n  //is equivalent to\n  var x= Car();\n  x?.name= \"Yo\";\n  x?.speed= 20;\n  ```\n  uses the null dot access operator.\n  \n  * Works for [[Function]]s and [[Method]]s too, for them , the cascade operators applies the expressions to their return types.\n  FE:\n  ```dart\n  String x= \"yo\";\n  x.toString().toString(); //works, applies tostring to yo then to its result.\n  ```\n  * The cascade operator is part of the language and is not exactly an operator.\n- Spread Operators\n  id:: 66393218-445e-4755-b430-19bb9b920954\n  These operator evaluates an expression that yields a [[Collection Type]], unpacks the values of the collection in-place and inserts them into another collection. \n  \n  There's ``...<expression>`` and it's null-aware version `...?<expr>` which only unpacks if the expression is not null, otherwise doesn't do anything.\n  \n  FE:\n  ```dart\n  var x= [1,2,3];\n  var y= [...x, 4]; //puts 1,2,3,4 in y.\n  List<int>? z= null;\n  var m= [...?z, 4]; //only puts 4 in m\n  ```\n  \n  * `...<expr>` and `...?<expr>` are not exactly an operator expression but part of the [[Collection Type]] Literal Syntax instead. \n  Since they are not exactly operators, they don't have any precedence, and if any they would have the lowest precedence , FE: `[...a+b]` would first compute `a+b` then apply the spread to that result.\n  \n  * Works for [[List]]s, [[Set]]s and [[Map]]s.\n- Function Application \n  ``()`` This op calls a [[Function]]\n- Subscript Access Operator\n  ``[ ]`` Used to call the ``[ ]`` operator defined for a type, overridable. \n  FE: In ``x[1]``, the [[Integer]] `1` is passed to the `[ ]` operator defined for the type of `x`.\n  \n  It has a null-aware version too, the `?[ ]` op, which only calls the `[ ]` op if the object is not null.\n- Member Access Operator\n  id:: 6639395b-7171-49a2-a9a1-8e4c41405c90\n  `.` Accesses the given property of an object/expression.\n  \n  null-aware version: `?.`\n  FE:\n  ```dart\n  var x= Car();\n  x.yo();\n  ```\n- Non-null assertion Operator\n  `!`: Casts an expression into it's non-null type. \n  \n  FE: \n  ```dart\n  String? x=\"yo\";\n  x!.toString(); //casts x's type String? to String and calls toString() on it\n  ```\n  Gives a ((66393a1d-7e50-4e42-84d6-3ee4edc72132)) if it fails.",536876536]],["^15",[50,"^17",1714407349136,536870919]],["^15",[50,"^18","~m1717080034256",536876535]],["^15",[50,"^Z","pages/Operator.md",536870919]],["^15",[51,"^K",1714407349135,536870919]],["^15",[51,"^[",50,536870919]],["^15",[51,"^@",false,536870919]],["^15",[51,"^Y","operator",536870919]],["^15",[51,"^11","Operator",536870919]],["^15",[51,"^B",1716389497427,536874174]],["^15",[51,"^;","~u664c94a3-1eb5-462e-a11d-d39cf5b70e4a",536872992]],["^15",[52,"^Q","Operator List\n![image.png](../assets/image_1714694155562_0.png)\n\nThe list is sorted in decreasing order of precedence, that is the unary postfixes have the highest precedence and spread operators have the lowest precedence. \nAn expression is any combination of operators and operands (values/variables).\nFE:\n``a++``\nwhere `a` is a [[Variable]] and `++` is the unary postfix operator.\n \nA precedence defines which operator will be resolved first in an expression with multiple operators.\nIf 2 operators with same precedence are present in an expression then their associativity (which is guaranteed to be the same for both the operators) will be used, to determine which position operator will be resolved first, \nFE: \nIn the expression`4+2-3`\nThe operators `+` and `-` have the same precedence so, their associativity, i.e., Left is used and hence the operators are resolved from Left to Right, and hence here the leftmost operator `+` is resolved first then the one to its right `-`.",536870968]],["^15",[52,"^O","^16",536870919]],["^15",[52,"^F",51,536870919]],["^15",[52,"^X",51,536870919]],["^15",[52,"^V",51,536870919]],["^15",[52,"^U",37,536870968]],["^15",[52,"^U",51,536870919]],["^15",[52,"^H",37,536872992]],["^15",[52,"^;","~u662fc7b5-97b1-4639-8a1f-0376963fc27b",536870919]],["^15",[53,"^3","- Last Updated: 2024-04-19\n- Dart Version: 3.3.4\n",536870949]],["^15",[53,"^17",1714407349145,536870919]],["^15",[53,"^18","~m1714407459556",536870950]],["^15",[53,"^Z","pages/Spec.md",536870919]],["^15",[54,"^Q","Last Updated: 2024-04-19",536870949]],["^15",[54,"^O","^16",536870919]],["^15",[54,"^F",35,536870919]],["^15",[54,"^X",35,536870919]],["^15",[54,"^V",35,536870919]],["^15",[54,"^U",35,536870919]],["^15",[54,"^;","~u662fc7b5-7226-4dbf-a9b6-dc4afc39e106",536870919]],["^15",[55,"^3","- Every variable in dart stores a reference to an ((664dc836-dc7e-4d07-9dcf-731130436a8d)). This is because every data type in Dart is a subclass of an [[Object]] so every value is an ``object``.\n- `var`\n  Variables whose values can change can be declared with ``var``, or [[Data Type]]s. \n  FE: \n  ```dart\n  var x= 'b';\n  ```\n  `x` will have a type [[String]] automatically, and this is done at compile-time.\n- Variables store reference in dart, so in \n  ```dart\n  var x = 'yo';\n  ```\n   `x`  contains a reference to a [[String]] object with a value `yo`\n- With explicit [[Data Type]]s  too. \n  FE:\n  ```dart\n  String x = 'yo';\n  ```\n  \n  We can use the [[Object]]  or the [[dynamic]] type too. These types can store a value of more than one type in a variable.\n- Once a variable is declared, it can only have a single type. Inference assigns that type automatically.\n- Variables can be inferred after declaration too. For that, they must be defined a value before being used after declaration.\n  FE:\n  ```dart\n  var x;\n  x=3;\n  print(x); \n  ```\n  Works. [[Dart Style Guide]] specifies that such variables be explicitly assigned a type rather than using `var`.\n- Variables of Non-nullable [[Data Type]]s can be declared uninitialized too,  but they must be assigned before being used. On the other hand, nullable data types are initialized to [[Null]] by default.\n  FE:\n  ```dart\n  String? x; //initialied to null automatically by default\n  String y; //un-initialized, needs to be initialized before being used\n  int? count; //initialized to null, not 0 (intuition) which is still a value of type int.\n  assert(count==null); //true\n  int lineCount;\n  if (weLikeToCount) {\n  lineCount = countLines();\n  } else {\n  lineCount = 0;\n  }\n  print(lineCount); //ok, dart knows lineCount isn't null by the time execution reaches here\n  ```\n  \n  Uses [[Assert]]\n- Top Level Variable\n  [[Class]] Variables ([[Static]] Variables and not class instance variables) and Top Level Variables aren't initialized as soon as the executor reaches the declaration, rather they are initialized lazily, i.e., whenever they are first accessed. \n  FE:\n  ```dart\n  String Y = getX();\n  String getX() {\n  print(\"In top level getX\");\n  return \"aye\";\n  }\n  \n  void main(List<String> arguments) {\n  var x = X();\n  print(\"x is here\");\n  print(X.x);\n  print(Y);\n  print(\"Y is here\");\n  }\n  class X {\n  static String x = getX(\"x\");\n  String y = getX(\"y\");\n  X();\n  static String getX(String value) {\n    print(\"Initializing $value\");\n    return \"yo\";\n  }\n  }\n  ```\n- ``late``\n  Late Variables\n  [[Dart]] requires variables are initialized before they are used during [[Compilation]]. But we can disable the check if we are sure the variable will be initialized before it is used, by using `late` modifier on its declaration.\n  Syntax: `late <type> <varname>;`\n  * If we fail to initialize a late var and use it, it's a ((66393a1d-7e50-4e42-84d6-3ee4edc72132))\n  * Late Variables are lazily initialized, that is until they are used their values are not computed/initialized.\n- `final`\n  Final Variables\n  These variables once assigned a value can't be reassigned another value. If the value is an object and not a ((6633e18f-d9eb-4359-990e-2e27bf271b93)) then the value can be modified but it still can't be reassigned. We use the `final` keyword to declare these variables, alternatively, we can use `final` alongside the Data Type too, necessary in cases such as when the variable is initialized later.\n  FE:\n  ```dart\n  final x = [2, 3];\n  x[0] = 4; //ok\n  final int y;\n  y = 2; //ok\n  y = 3; //error: can be only set once\n  ```\n- Strictly Compile-Time Constant Variables\n  id:: 66391976-dd8e-434f-a43a-4148f8d2757a\n  Declared with `const`\n  These variables must have a value at compile-time and that value must be constant too.\n  \n  Const Variables\n  Just like final variables, can be assigned a value only once but are [[Compile-Time Constant]], hence non-assignable plus non-modifiable too, and they must be initialized at the time of declaration.\n  > Syntax is the same as final variables, but `const` can be used to declare constant constructors too, i.e., [[Function]]s who will return a value at compile time.\n  FE:\n  ```dart\n  const x = 2;\n  var y = const [2, 3]; //ok\n  var foo = const []; //ok\n  final bar = const [];\n  const baz = []; // Equivalent to `const []\n  ```\n  * Here `y` is still a var, so it can be reassigned a value. That is `const` values can be assigned to `var` and  `final` variables and then they can be changed for those variables, but the opposite is not true, `const` variables need constant compile-time values.\n  \n   * `const` can be used with [[Type Cast]], [[Collection If]] and ((66393218-445e-4755-b430-19bb9b920954)) too\n  FE:\n  ```dart\n  const Object i = 3; // Where i is a const Object with an int value...\n  const list = [i as int]; // Use a typecast.\n  const map = {if (i is int) i: 'int'}; // Use is and collection if.\n  const set = {if (list is List<int>) ...list}; // ...and a spread.\n  ```\n-",536875332]],["^15",[55,"^17",1714407349174,536870919]],["^15",[55,"^18","~m1716450401901",536875331]],["^15",[55,"^Z","pages/Variable.md",536870919]],["^15",[56,"^K",1714407349173,536870919]],["^15",[56,"^@",false,536870919]],["^15",[56,"^Y","static",536870919]],["^15",[56,"^11","Static",536870919]],["^15",[56,"^B",1714407349173,536870919]],["^15",[56,"^;","~u664c94a3-6256-4578-bf6b-52f5a7bceefc",536872995]],["^15",[58,"^K",1714407349173,536870919]],["^15",[58,"^@",false,536870919]],["^15",[58,"^Y","dart style guide",536870919]],["^15",[58,"^11","Dart Style Guide",536870919]],["^15",[58,"^B",1714407349173,536870919]],["^15",[58,"^;","~u664c94a3-eb53-449f-b751-15221a403de3",536872995]],["^15",[60,"^K",1714407349173,536870919]],["^15",[60,"^[",162,536872959]],["^15",[60,"^@",false,536870919]],["^15",[60,"^Y","class",536870919]],["^15",[60,"^11","Class",536870919]],["^15",[60,"^B",1714407349173,536870919]],["^15",[60,"^;","~u664c94a3-2aea-4f8b-a5a8-f66a7ce6c204",536872995]],["^15",[63,"^Q","~`var`\nVariables whose values can change can be declared with ``var``, or [[Data Type]]s. \nFE: \n```dart\nvar x= 'b';\n```\n`x` will have a type [[String]] automatically, and this is done at compile-time.",536872995]],["^15",[63,"^O","^16",536870919]],["^15",[63,"^F",250,536873600]],["^15",[63,"^X",37,536870919]],["^15",[63,"^V",37,536870919]],["^15",[63,"^U",37,536873564]],["^15",[63,"^U",44,536873564]],["^15",[63,"^U",196,536873564]],["^15",[63,"^H",44,536873600]],["^15",[63,"^H",196,536873600]],["^15",[63,"^;","~u662fc7b5-48a9-4626-8f9b-0ad56cd4ae08",536870919]],["^15",[64,"^2",1,536870920]],["^15",[64,"^T","^2",536870920]],["^15",[65,"^12",2,536870922]],["^15",[66,"^K",1714676110191,536870923]],["^15",[66,"^O","^16",536870923]],["^15",[66,"^N",20240503,536870923]],["^15",[66,"^@",true,536870923]],["^15",[66,"^Y","may 3rd, 2024",536870923]],["^15",[66,"^11","May 3rd, 2024",536870923]],["^15",[66,"^B",1714676110191,536870923]],["^15",[66,"^;","~u6633e18e-0cbb-488c-8283-630938e14e51",536870923]],["^15",[67,"^Q","",536870924]],["^15",[67,"^O","^16",536870924]],["^15",[67,"^N",20240503,536870924]],["^15",[67,"^@",true,536870924]],["^15",[67,"^F",66,536870924]],["^15",[67,"^X",66,536870924]],["^15",[67,"^V",66,536870924]],["^15",[67,"^U",66,536870925]],["^15",[67,"^?",["^ "],536870924]],["^15",[67,"^;","~u6633e18e-6899-47fd-b5dc-632cf0c58f90",536870924]],["^15",[71,"^Q","",536870937]],["^15",[71,"^O","^16",536870937]],["^15",[71,"^F",32,536870937]],["^15",[71,"^X",31,536870937]],["^15",[71,"^V",31,536870937]],["^15",[71,"^U",31,536870937]],["^15",[71,"^;","~u6633e18f-e24d-4021-8538-523f02699da7",536870937]],["^15",[73,"^Q","Basic Program:\nIn a file with extension ``.dart``, \nFE: `abc.dart`\n```dart\nvoid main(){\nprint(\"yo\");\n}\n```\nExecuted with `dart run abc.dart`\nUses the ((662fc7b5-e50a-4a18-8486-a6139468038d)) CLI command.",536872981]],["^15",[73,"^O","^16",536870940]],["^15",[73,"^F",102,536870962]],["^15",[73,"^X",38,536870940]],["^15",[73,"^V",38,536870940]],["^15",[73,"^U",38,536870940]],["^15",[73,"^H",32,536872981]],["^15",[73,"^;","~u6633e18f-c520-41e8-98f7-9f5d9c96d7fe",536870940]],["^15",[75,"^Q","Lines have to end with `;` in dart.",536870940]],["^15",[75,"^O","^16",536870940]],["^15",[75,"^F",200,536872981]],["^15",[75,"^X",38,536870940]],["^15",[75,"^V",38,536870940]],["^15",[75,"^U",38,536870940]],["^15",[75,"^;","~u6633e18f-44e1-4e8a-8a98-a1114a7f7953",536870940]],["^15",[76,"^Q","[[Variable]]",536870940]],["^15",[76,"^O","^16",536870940]],["^15",[76,"^F",75,536870940]],["^15",[76,"^X",38,536870940]],["^15",[76,"^V",38,536870940]],["^15",[76,"^U",37,536870940]],["^15",[76,"^U",38,536870940]],["^15",[76,"^H",37,536872981]],["^15",[76,"^;","~u6633e18f-e2f1-4787-aded-1d462c46ea90",536870940]],["^15",[77,"^Q","[[Comment]]",536872981]],["^15",[77,"^O","^16",536870940]],["^15",[77,"^F",103,536870962]],["^15",[77,"^X",38,536870940]],["^15",[77,"^V",38,536870940]],["^15",[77,"^U",38,536870940]],["^15",[77,"^U",171,536872981]],["^15",[77,"^H",171,536872981]],["^15",[77,"^;","~u6633e18f-eab3-474b-8aab-fd85c8686e37",536870940]],["^15",[81,"^Q","Dart Version: 3.3.4",536870949]],["^15",[81,"^O","^16",536870949]],["^15",[81,"^F",54,536870949]],["^15",[81,"^X",35,536870949]],["^15",[81,"^V",35,536870949]],["^15",[81,"^U",35,536870949]],["^15",[81,"^;","~u6633e18f-c33d-4319-95eb-1e4ec974e896",536870949]],["^15",[85,"^K",1714676111717,536870952]],["^15",[85,"^@",false,536870952]],["^15",[85,"^Y","static analysis",536870952]],["^15",[85,"^11","Static Analysis",536870952]],["^15",[85,"^B",1714676111717,536870952]],["^15",[85,"^;","~u6633e18f-a113-436c-ab0a-c09f5279cb16",536870952]],["^15",[86,"^K",1714676111716,536870952]],["^15",[86,"^@",false,536870952]],["^15",[86,"^Y","compilation",536870952]],["^15",[86,"^11","Compilation",536870952]],["^15",[86,"^B",1714676111716,536870952]],["^15",[86,"^;","~u6656f801-8064-4d87-9a66-f95939736187",536876074]],["^15",[90,"^Q","Variables of Non-nullable [[Data Type]]s can be declared uninitialized too,  but they must be assigned before being used. On the other hand, nullable data types are initialized to [[Null]] by default.\nFE:\n```dart\nString? x; //initialied to null automatically by default\nString y; //un-initialized, needs to be initialized before being used\nint? count; //initialized to null, not 0 (intuition) which is still a value of type int.\nassert(count==null); //true\nint lineCount;\nif (weLikeToCount) {\nlineCount = countLines();\n} else {\nlineCount = 0;\n}\nprint(lineCount); //ok, dart knows lineCount isn't null by the time execution reaches here\n```\n\nUses [[Assert]]",536870952]],["^15",[90,"^O","^16",536870952]],["^15",[90,"^F",93,536870952]],["^15",[90,"^X",37,536870952]],["^15",[90,"^V",37,536870952]],["^15",[90,"^U",25,536870952]],["^15",[90,"^U",37,536870952]],["^15",[90,"^U",44,536870952]],["^15",[90,"^U",45,536870952]],["^15",[90,"^H",25,536872995]],["^15",[90,"^H",44,536872995]],["^15",[90,"^H",45,536872995]],["^15",[90,"^;","~u6633e18f-0d71-4ac6-ade6-d3c76d52e3b8",536870952]],["^15",[93,"^Q","Variables can be inferred after declaration too. For that, they must be defined a value before being used after declaration.\nFE:\n```dart\nvar x;\nx=3;\nprint(x); \n```\nWorks. [[Dart Style Guide]] specifies that such variables be explicitly assigned a type rather than using `var`.",536870952]],["^15",[93,"^O","^16",536870952]],["^15",[93,"^F",94,536870952]],["^15",[93,"^X",37,536870952]],["^15",[93,"^V",37,536870952]],["^15",[93,"^U",37,536870952]],["^15",[93,"^U",58,536870952]],["^15",[93,"^H",58,536872995]],["^15",[93,"^;","~u6633e18f-1ccd-4b2d-928c-fe969798eee5",536870952]],["^15",[94,"^Q","Once a variable is declared, it can only have a single type. Inference assigns that type automatically.",536870952]],["^15",[94,"^O","^16",536870952]],["^15",[94,"^F",216,536872995]],["^15",[94,"^X",37,536870952]],["^15",[94,"^V",37,536870952]],["^15",[94,"^U",37,536870952]],["^15",[94,"^;","~u6633e18f-553e-4b09-b4f7-8041428a0b4c",536870952]],["^15",[95,"^Q","Top Level Variable\n[[Class]] Variables ([[Static]] Variables and not class instance variables) and Top Level Variables aren't initialized as soon as the executor reaches the declaration, rather they are initialized lazily, i.e., whenever they are first accessed. \nFE:\n```dart\nString Y = getX();\nString getX() {\nprint(\"In top level getX\");\nreturn \"aye\";\n}\n\nvoid main(List<String> arguments) {\nvar x = X();\nprint(\"x is here\");\nprint(X.x);\nprint(Y);\nprint(\"Y is here\");\n}\nclass X {\nstatic String x = getX(\"x\");\nString y = getX(\"y\");\nX();\nstatic String getX(String value) {\n  print(\"Initializing $value\");\n  return \"yo\";\n}\n}\n```",536870971]],["^15",[95,"^O","^16",536870952]],["^15",[95,"^F",90,536870952]],["^15",[95,"^X",37,536870952]],["^15",[95,"^V",37,536870952]],["^15",[95,"^U",37,536870952]],["^15",[95,"^U",38,536870952]],["^15",[95,"^U",56,536870952]],["^15",[95,"^U",60,536870952]],["^15",[95,"^U",85,536870952]],["^15",[95,"^U",86,536870952]],["^15",[95,"^H",56,536872995]],["^15",[95,"^H",60,536872995]],["^15",[95,"^;","~u6633e18f-29e5-4ed4-a879-8fe115f0f8f1",536870952]],["^15",[96,"^12",2,536870955]],["^15",[97,"^K",1715018100872,536870956]],["^15",[97,"^O","^16",536870956]],["^15",[97,"^N",20240506,536870956]],["^15",[97,"^@",true,536870956]],["^15",[97,"^Y","may 6th, 2024",536870956]],["^15",[97,"^11","May 6th, 2024",536870956]],["^15",[97,"^B",1715018100872,536870956]],["^15",[97,"^;","~u66391974-ce11-4c61-9c71-4a27907aa1d4",536870956]],["^15",[98,"^Q","",536870957]],["^15",[98,"^O","^16",536870957]],["^15",[98,"^N",20240506,536870957]],["^15",[98,"^@",true,536870957]],["^15",[98,"^F",97,536870957]],["^15",[98,"^X",97,536870957]],["^15",[98,"^V",97,536870957]],["^15",[98,"^U",97,536870958]],["^15",[98,"^?",["^ "],536870957]],["^15",[98,"^;","~u66391974-fa42-4365-8a0c-52450e32daf5",536870957]],["^15",[99,"^3","- A library is a single compilation unit, made up of a single primary file and can have many [[Part File]]s. It has it's own ((663a2f7f-ee3d-411d-aba3-2857c50d6bd6)). It provides encapsulation and privacy to its components whilst providing APIs for other libraries.\n- Every dart file (including its [[Part File]]s) is a library, even if it doesn't use the `library` [[Directive]].\n- `library` [[Directive]]\n  Every library can define its name by giving it to `library <name>` where `name` is the library's name and it is optional, however if we define it we can add ((66395786-a715-4697-ab54-5de52efe3dbe)) to it. \n  FE:\n  ```dart\n  @pragma(\"Yo\")\n  library myLib;\n  \n  //... rest of the file\n  ```\n- If any identifier inside a library uses `_` prefix to its name, it is only visible inside the [[Scope]] of the library.\n- Libraries can be distributed using [[Package]]s\n- To open the namespace of one library in another, i.e., to import a library in the current file (and it's compilation unit), \n  we use\n  ``import'<lib name/path>';``\n  where we can either define the full [[Path URI]] of the other library such as `'../libs/abc.dart'`, or  use a `<package/dart>:<package name>/<path>` combination where 'package' is an identifier used for packages added through package managers like [[Pub]] \n  FE:\n  ```dart\n  import 'test:test/abc.dart';\n  ```\n  and there's a special syntax for for inbuilt `dart` libraries such as `dart:html` \n  FE:\n  ```dart\n  import 'dart:html';\n  ```\n- Prefix\n  Imported libraries can be given a custom identifier/prefix to avoid namespace clashes, i.e., say we import 2 libraries and they both have the same [[Function]] ``abc()`` then it will be ambiguous for the current library to select the right [[Function]], to avoid this Dart allows putting contents of any library a specified namespace, called a `prefix`. \n  Syntax\n  `import <lib> as <name>;`\n  where `<name>` can be anything except [[Reserved Keywords]].\n  And then to use anything from `<lib>`'s namespace we prefix `<name>.` to it.\n  \n  FE:\n  ```dart\n  import 'test:test/abc.dart' as yo;\n  \n  void aye(){\n   var x = yo.x(); //will call `x()` in abc.dart\n  }\n  ```\n- Importing only part of a library\n  We can import specific part(s) of a library or exclude them from being imported using `show` and `hide` [[Reserved Keywords]] respectively.\n  Syntax\n  `import <lib> show <identifier>,<identifier2>;` to only import these parts\n  `import <lib> hide <identifier>,<identifier2>;` to exclude these parts from being imported\n  FE:\n  ```dart\n  import 'test:test/abc.dart' show x; //if x is a function then only function x() is imported from abc.dart\n  ```\n- Deferred/Lazy Loading of a library\n  Only for [[WebApp]]s. \n  By default a library is imported at the compilation time itself and this increases the importing library size and opens the namespace at compile time itself. But we can choose to import the library on demand and hence avoid having it included in the current library, which avoids it being in the namespace until manually imported and reduces size until it is loaded.\n  \n  To do this we use ``deferred as <namespace>`` on an importing library like ``import '<library>' deferred as yo;`` and then when we wish to load the library, we call a [[Function]] ``loadlibrary()`` on the library, this function inserted automatically into the namespace by Dart and returns a [[Future]] which we can and ((664c94dc-087d-4269-8ac2-623a603b34a9)) to know when the library is fully loaded.\n  \n  FE:\n  ```dart\n  import 'test:test/abc.dart' deferred as yo;\n  \n  Future<void> ayo() async{\n   await yo.loadLibrary(); //yo gets loaded\n   yo.haiyoo(); //any function inside yo works\n  }\n  ```\n  \n  * We can call ``loadLibrary()`` as many  times as we want, it is loaded only once.\n  * [[Data Type]]s defined in the deferred library aren't available to the loading library as it's namespace is not loaded until dynamically requested. \n  * Constants in the deferred imported library aren't constants for the importing library as it's constants aren't available at compile-time.\n- Built-In Libraries\n  id:: 66342d21-0997-462e-9dee-e1fe8428fe6d\n-",536873244]],["^15",[99,"^17",1715018101929,536870959]],["^15",[99,"^18","~m1716372814087",536873243]],["^15",[99,"^Z","pages/Library.md",536870959]],["^15",[100,"^K",1715018101927,536870959]],["^15",[100,"^[",99,536870959]],["^15",[100,"^@",false,536870959]],["^15",[100,"^Y","library",536870959]],["^15",[100,"^11","Library",536870959]],["^15",[100,"^B",1716372814025,536873242]],["^15",[100,"^;","~u664c94a3-318d-4360-a96a-9420a83a2778",536872989]],["^15",[101,"^Q","Built-In Libraries\nid:: 66342d21-0997-462e-9dee-e1fe8428fe6d",536872989]],["^15",[101,"^O","^16",536870959]],["^15",[101,"^F",214,536872989]],["^15",[101,"^X",100,536870959]],["^15",[101,"^V",100,536870959]],["^15",[101,"^U",100,536870959]],["^15",[101,"^?",["^ ","^19","66342d21-0997-462e-9dee-e1fe8428fe6d"],536872989]],["^15",[101,"^J",["^19"],536872989]],["^15",[101,"^4",["^ ","^19","66342d21-0997-462e-9dee-e1fe8428fe6d"],536872989]],["^15",[101,"^;","~u66342d21-0997-462e-9dee-e1fe8428fe6d",536870959]],["^15",[102,"^Q","Fast, multi-platform, null-safe (NNBD, non-nullable-by-default, introduced in Dart 2.12), strongly typed language developed by Google. Supports JIT (Compile as the app runs) and AOT (Compile everything beforehand) Compilation, and compiles natively to platforms, supports ios, windows, web (js) and android. Supports concurrency and parallelism with a first class support with [[Future]]s and [[Isolate]]s respectively.",536870962]],["^15",[102,"^O","^16",536870962]],["^15",[102,"^F",42,536870962]],["^15",[102,"^X",38,536870962]],["^15",[102,"^V",38,536870962]],["^15",[102,"^U",38,536870962]],["^15",[102,"^U",39,536870962]],["^15",[102,"^U",41,536870962]],["^15",[102,"^H",39,536872981]],["^15",[102,"^H",41,536872981]],["^15",[102,"^;","~u66391976-cf76-4ad9-86a8-d57f8ba8e32d",536870962]],["^15",[103,"^Q","[[Operator]]",536870962]],["^15",[103,"^O","^16",536870962]],["^15",[103,"^F",76,536870962]],["^15",[103,"^X",38,536870962]],["^15",[103,"^V",38,536870962]],["^15",[103,"^U",38,536870962]],["^15",[103,"^U",51,536870962]],["^15",[103,"^H",51,536872981]],["^15",[103,"^;","~u66391976-8944-4825-9d0e-c430733239ad",536870962]],["^15",[104,"^Q","Primitive Data Types\nDart natively supports the following types\n* Numbers ([[int]], [[double]])\n* Strings ([[String]])\n* Booleans ([[bool]])\n* Records \\( [[Record]], like (value1, value2))\n* Lists ([[List]], also known as arrays)\n* Sets ([[Set]])\n* Maps ([[Map]])\n* Runes ([[Runes]]; often replaced by the characters API)\n* Symbols ([[Symbol]])\n* The value null ([[Null]])",536876510]],["^15",[104,"^O","^16",536870965]],["^15",[104,"^F",44,536870965]],["^15",[104,"^X",44,536870965]],["^15",[104,"^V",44,536870965]],["^15",[104,"^U",44,536876504]],["^15",[104,"^U",45,536876504]],["^15",[104,"^U",135,536876504]],["^15",[104,"^U",136,536876504]],["^15",[104,"^U",137,536876504]],["^15",[104,"^U",196,536876504]],["^15",[104,"^U",241,536876504]],["^15",[104,"^U",242,536876504]],["^15",[104,"^U",290,536876504]],["^15",[104,"^U",291,536876504]],["^15",[104,"^U",292,536876504]],["^15",[104,"^U",379,536876504]],["^15",[104,"^?",["^ "],536876510]],["^15",[104,"^H",45,536876510]],["^15",[104,"^H",135,536876510]],["^15",[104,"^H",136,536876510]],["^15",[104,"^H",137,536876510]],["^15",[104,"^H",196,536876510]],["^15",[104,"^H",241,536876510]],["^15",[104,"^H",242,536876510]],["^15",[104,"^H",290,536876510]],["^15",[104,"^H",291,536876510]],["^15",[104,"^H",292,536876510]],["^15",[104,"^H",379,536876510]],["^15",[104,"^;","~u6633e18f-d9eb-4359-990e-2e27bf271b93",536873431]],["^15",[107,"^Q","Arithmetic Operators\nThe usual\n![image.png](../assets/image_1714694766987_0.png)\nBut Dart also brings `~/` which divides left operand by right and if the result is a [[double]] then it truncates the values after the decimal.\nFE:\n``5.4~/2`` is 2.7 and then it is truncated and hence the result is ``2``",536874174]],["^15",[107,"^O","^16",536870968]],["^15",[107,"^F",111,536870968]],["^15",[107,"^X",51,536870968]],["^15",[107,"^V",51,536870968]],["^15",[107,"^U",51,536874175]],["^15",[107,"^U",291,536874175]],["^15",[107,"^?",["^ "],536874174]],["^15",[107,"^H",291,536874174]],["^15",[107,"^;","~u66391976-5582-4a72-aece-d10140803605",536870968]],["^15",[108,"^Q","Type Test Operators\n![image.png](../assets/image_1714844863151_0.png)\n* `is` in an expression like `a is T` checks if the type of `a` implements the interface T. \nFE: `a is Object?` would always return `True` for any type of `a` because every class implements the [[Object]] class and since it is nullable, even a nullable type would be covered.\n\n* `as` in `a as T` typecasts an object of a's type to an object of type T. Throws an exception if `a` is either null or is not `T` or a derived class of `T`.\nFE:\n```dart\nvoid main() {\n  var x = Y();\n  print((x as X).x);\n}\n\nclass X {\n  final String x;\n  X({this.x = \"yo\"});\n}\n\nclass Y implements X {\n  @override\n  final String x;\n  Y({this.x = \"yas\"}) : super();\n}\n```",536870968]],["^15",[108,"^O","^16",536870968]],["^15",[108,"^F",110,536870968]],["^15",[108,"^X",51,536870968]],["^15",[108,"^V",51,536870968]],["^15",[108,"^U",48,536870968]],["^15",[108,"^U",51,536870968]],["^15",[108,"^H",48,536872992]],["^15",[108,"^;","~u66391976-91ca-486f-8f3b-418b3d98a4ce",536870968]],["^15",[109,"^Q","Assignment Operators\nSupports the operators such as `*=` or `+=`,\n![image.png](../assets/image_1714845840971_0.png)\n\nWhere any compound assignment such as `a <operator>=b` is equivalent to `a = a <operator> b`.\n\n* There's also the ``??=`` called the assign-to-null operator, for an expression `a ??= b` it only assigns `b` to `a`  when `a` is null.",536870968]],["^15",[109,"^O","^16",536870968]],["^15",[109,"^F",108,536870968]],["^15",[109,"^X",51,536870968]],["^15",[109,"^V",51,536870968]],["^15",[109,"^U",51,536870968]],["^15",[109,"^;","~u66391976-e22d-4d6e-8000-89562d673c46",536870968]],["^15",[110,"^Q","Comparison and Relation Ops supported as normal, `>/</==/!=/<=/>=`\nFor equality,\nCompares if 2 objects represent the same thing, but they must be the same type or be nullable [[Data Type]]. To check if they are the same types we can use the `identical()` [[Function]] in ``dart:core`` ((66342d21-0997-462e-9dee-e1fe8428fe6d)) instead.\nThat is,\n* for 2 objects `x` and `y`, if `x` or `y` is null, then if both are null then equality returns true, and false if only one is.\n* If they are the same type and non-nullable then the `==` method of the left operand is invoked with the `right` operand as the argument.",536870968]],["^15",[110,"^O","^16",536870968]],["^15",[110,"^F",116,536870968]],["^15",[110,"^X",51,536870968]],["^15",[110,"^V",51,536870968]],["^15",[110,"^U",27,536870968]],["^15",[110,"^U",44,536870968]],["^15",[110,"^U",51,536870968]],["^15",[110,"^H",27,536872992]],["^15",[110,"^H",44,536872992]],["^15",[110,"^H",101,536872992]],["^15",[110,"^;","~u66391976-b57b-4ffc-b906-bb6bec88ae9a",536870968]],["^15",[111,"^Q","When an operator takes 2 operands such as the `+` operator then the operator is called for the left operand with the right operand as it's argument.\nFE: if we have a `SomeVector` [[Class]] object `v` and ``SomePoint`` [[Class]] object `p`, and we do `v+p` then the `SomeVector`'s addition [[Method]] is called with the ``SomePoint`` object `p`.",536870968]],["^15",[111,"^O","^16",536870968]],["^15",[111,"^F",52,536870968]],["^15",[111,"^X",51,536870968]],["^15",[111,"^V",51,536870968]],["^15",[111,"^U",47,536870968]],["^15",[111,"^U",51,536870968]],["^15",[111,"^U",60,536870968]],["^15",[111,"^H",47,536872992]],["^15",[111,"^H",60,536872992]],["^15",[111,"^;","~u66391976-5007-4e28-bf12-24fa6f9db5ee",536870968]],["^15",[112,"^Q","The usual logical operators `!` for inversion of a [[bool]], `&&` and `||` are supported.",536874163]],["^15",[112,"^O","^16",536870968]],["^15",[112,"^F",109,536870968]],["^15",[112,"^X",51,536870968]],["^15",[112,"^V",51,536870968]],["^15",[112,"^U",51,536874164]],["^15",[112,"^U",290,536874164]],["^15",[112,"^?",["^ "],536874163]],["^15",[112,"^H",290,536874163]],["^15",[112,"^;","~u66391976-cb7b-4d59-b65d-f8cdfd8c2552",536870968]],["^15",[115,"^Q","Bitwise ops\n![image.png](../assets/image_1715018164317_0.png)",536870975]],["^15",[115,"^O","^16",536870968]],["^15",[115,"^F",112,536870968]],["^15",[115,"^X",51,536870968]],["^15",[115,"^V",51,536870968]],["^15",[115,"^U",51,536870968]],["^15",[115,"^;","~u66391976-2d24-4dea-a7d7-ba9083923730",536870968]],["^15",[116,"^Q","Postfix and prefix ops supported as normal, `<operand>++/--` and `++/--<operand>`",536870968]],["^15",[116,"^O","^16",536870968]],["^15",[116,"^F",107,536870968]],["^15",[116,"^X",51,536870968]],["^15",[116,"^V",51,536870968]],["^15",[116,"^U",51,536870968]],["^15",[116,"^;","~u66391976-4cb4-4138-8fd0-6bbe9e2d92c4",536870968]],["^15",[119,"^K",1715018102332,536870971]],["^15",[119,"^@",false,536870971]],["^15",[119,"^Y","type cast",536870971]],["^15",[119,"^11","Type Cast",536870971]],["^15",[119,"^B",1715018102332,536870971]],["^15",[119,"^;","~u664c94a3-cd3c-40e2-933f-b8a68673dd9f",536872995]],["^15",[120,"^K",1715018102331,536870971]],["^15",[120,"^@",false,536870971]],["^15",[120,"^Y","collection if",536870971]],["^15",[120,"^11","Collection If",536870971]],["^15",[120,"^B",1715018102331,536870971]],["^15",[120,"^;","~u664c94a3-e837-4372-ba20-c7858f777663",536872995]],["^15",[121,"^Q","~``late``\nLate Variables\n[[Dart]] requires variables are initialized before they are used during [[Compilation]]. But we can disable the check if we are sure the variable will be initialized before it is used, by using `late` modifier on its declaration.\nSyntax: `late <type> <varname>;`\n* If we fail to initialize a late var and use it, it's a ((66393a1d-7e50-4e42-84d6-3ee4edc72132))\n* Late Variables are lazily initialized, that is until they are used their values are not computed/initialized.",536872995]],["^15",[121,"^O","^16",536870971]],["^15",[121,"^F",95,536870971]],["^15",[121,"^X",37,536870971]],["^15",[121,"^V",37,536870971]],["^15",[121,"^U",37,536870971]],["^15",[121,"^U",38,536870971]],["^15",[121,"^U",86,536870971]],["^15",[121,"^H",38,536872995]],["^15",[121,"^H",86,536872995]],["^15",[121,"^H",149,536872995]],["^15",[121,"^;","~u66391976-ba52-4f27-8061-67dc94966015",536870971]],["^15",[122,"^Q","",536870971]],["^15",[122,"^O","^16",536870971]],["^15",[122,"^F",123,536870971]],["^15",[122,"^X",37,536870971]],["^15",[122,"^V",37,536870971]],["^15",[122,"^U",37,536870971]],["^15",[122,"^;","~u66391976-49f3-4c8e-9c3c-0f1260b4f867",536870971]],["^15",[123,"^Q","Strictly Compile-Time Constant Variables\nid:: 66391976-dd8e-434f-a43a-4148f8d2757a\nDeclared with `const`\nThese variables must have a value at compile-time and that value must be constant too.\n\nConst Variables\nJust like final variables, can be assigned a value only once but are [[Compile-Time Constant]], hence non-assignable plus non-modifiable too, and they must be initialized at the time of declaration.\n> Syntax is the same as final variables, but `const` can be used to declare constant constructors too, i.e., [[Function]]s who will return a value at compile time.\nFE:\n```dart\nconst x = 2;\nvar y = const [2, 3]; //ok\nvar foo = const []; //ok\nfinal bar = const [];\nconst baz = []; // Equivalent to `const []\n```\n* Here `y` is still a var, so it can be reassigned a value. That is `const` values can be assigned to `var` and  `final` variables and then they can be changed for those variables, but the opposite is not true, `const` variables need constant compile-time values.\n\n * `const` can be used with [[Type Cast]], [[Collection If]] and ((66393218-445e-4755-b430-19bb9b920954)) too\nFE:\n```dart\nconst Object i = 3; // Where i is a const Object with an int value...\nconst list = [i as int]; // Use a typecast.\nconst map = {if (i is int) i: 'int'}; // Use is and collection if.\nconst set = {if (list is List<int>) ...list}; // ...and a spread.\n```",536875330]],["^15",[123,"^O","^16",536870971]],["^15",[123,"^F",124,536870971]],["^15",[123,"^X",37,536870971]],["^15",[123,"^V",37,536870971]],["^15",[123,"^U",27,536875285]],["^15",[123,"^U",37,536875285]],["^15",[123,"^U",119,536875285]],["^15",[123,"^U",120,536875285]],["^15",[123,"^U",133,536875285]],["^15",[123,"^U",340,536875285]],["^15",[123,"^?",["^ ","^19","66391976-dd8e-434f-a43a-4148f8d2757a"],536875330]],["^15",[123,"^J",["^14",["^19"]],536875330]],["^15",[123,"^4",["^ ","^19","66391976-dd8e-434f-a43a-4148f8d2757a"],536875330]],["^15",[123,"^H",27,536875330]],["^15",[123,"^H",119,536875330]],["^15",[123,"^H",120,536875330]],["^15",[123,"^H",133,536875330]],["^15",[123,"^H",340,536875330]],["^15",[123,"^;","~u66391976-dd8e-434f-a43a-4148f8d2757a",536870971]],["^15",[124,"^Q","~`final`\nFinal Variables\nThese variables once assigned a value can't be reassigned another value. If the value is an object and not a ((6633e18f-d9eb-4359-990e-2e27bf271b93)) then the value can be modified but it still can't be reassigned. We use the `final` keyword to declare these variables, alternatively, we can use `final` alongside the Data Type too, necessary in cases such as when the variable is initialized later.\nFE:\n```dart\nfinal x = [2, 3];\nx[0] = 4; //ok\nfinal int y;\ny = 2; //ok\ny = 3; //error: can be only set once\n```",536870971]],["^15",[124,"^O","^16",536870971]],["^15",[124,"^F",121,536870971]],["^15",[124,"^X",37,536870971]],["^15",[124,"^V",37,536870971]],["^15",[124,"^U",37,536870971]],["^15",[124,"^H",104,536873431]],["^15",[124,"^;","~u66391976-a002-4bdd-81ef-73ee647da4ea",536870971]],["^15",[125,"^T","^R",536870973]],["^15",[125,"^R",["^14",["record","collection type","data type","dart","contents","reflection","symbol","string","bool","double","int","compile-time constant","variable","num","conversion"]],536876565]],["^15",[126,"^Q","Conditional Expressions\nDart has ternary operator, `<bool expression> ? <compute and return on true> : <compute and return on false>` and it can use one more operator for conditional expressions, the null-coalescing operator `??`, `<expr 1> ?? <compute expr2 and return if expr1 is null>`\nThat is, if the left operand is null then compute the expression on the right and return its result.\nFE:\n```dart\nString? name = null;\nString x = name ?? \"yo\"; //puts yo in x\n```",536871233]],["^15",[126,"^O","^16",536870978]],["^15",[126,"^F",115,536870978]],["^15",[126,"^X",51,536870978]],["^15",[126,"^V",51,536870978]],["^15",[126,"^U",51,536870979]],["^15",[126,"^;","~u66391a55-39d4-405b-b612-2609a600aa14",536870978]],["^15",[128,"^Q","Cascade notation\nThis notation uses the cascade operators (`..` and `?..`) to chain multiple instance method calls and instance member accesses, i.e., it allows  us to call methods or modify members of the same object without specifying the object repeatedly. \n\nSyntax: ``<object instance>..<member expression (can use ops)>..<member expression (can use ops)>;`` any number of times and the semicolon is put at the end. [[Dart Style Guide]] recommends separating the subsequent operations with newlines.\nThe subsequent operations are performed on the modified object, so expression 1 modifies the object then the cascade operator applies the expression 2 on the previously modified object and so on, it is a chain and the order matters.\nFE:\n```dart\nvar x= Car()\n ..name= \"Yo\"\n ..speed= 20;\n\n//is equivalent to\nvar x= Car();\nx.name= \"Yo\";\nx.speed= 20;\n```\nuses the dot access operator.\n\n* Similarly, we have the null cascade operator `?..` which wouldn't do the subsequent operations if the object can be null. It needs to be specified only once at the beginning of the chain.\nFE:\n```dart\nvar x= Car()\n ?..name= \"Yo\"\n ..speed= 20;\n\n//is equivalent to\nvar x= Car();\nx?.name= \"Yo\";\nx?.speed= 20;\n```\nuses the null dot access operator.\n\n* Works for [[Function]]s and [[Method]]s too, for them , the cascade operators applies the expressions to their return types.\nFE:\n```dart\nString x= \"yo\";\nx.toString().toString(); //works, applies tostring to yo then to its result.\n```\n* The cascade operator is part of the language and is not exactly an operator.",536872184]],["^15",[128,"^O","^16",536871234]],["^15",[128,"^F",126,536871234]],["^15",[128,"^X",51,536871234]],["^15",[128,"^V",51,536871234]],["^15",[128,"^U",27,536872013]],["^15",[128,"^U",47,536872013]],["^15",[128,"^U",51,536872013]],["^15",[128,"^U",58,536872013]],["^15",[128,"^H",27,536872992]],["^15",[128,"^H",47,536872992]],["^15",[128,"^H",58,536872992]],["^15",[128,"^;","~u66391b6e-54d8-46e4-8e35-345e6a538520",536871234]],["^15",[131,"^K",1715020209201,536871908]],["^15",[131,"^O","^16",536871908]],["^15",[131,"^N",20240507,536871908]],["^15",[131,"^@",true,536871908]],["^15",[131,"^Y","may 7th, 2024",536871908]],["^15",[131,"^11","May 7th, 2024",536871908]],["^15",[131,"^B",1715020209201,536871908]],["^15",[131,"^;","~u663921b1-8258-4ce1-9515-942e11989572",536871908]],["^15",[132,"^Q","",536871909]],["^15",[132,"^O","^16",536871909]],["^15",[132,"^N",20240507,536871909]],["^15",[132,"^@",true,536871909]],["^15",[132,"^F",131,536871909]],["^15",[132,"^X",131,536871909]],["^15",[132,"^V",131,536871909]],["^15",[132,"^U",131,536871910]],["^15",[132,"^?",["^ "],536871909]],["^15",[132,"^;","~u663921b1-9e9a-4800-a495-42767528d695",536871909]],["^15",[133,"^Q","Spread Operators\nid:: 66393218-445e-4755-b430-19bb9b920954\nThese operator evaluates an expression that yields a [[Collection Type]], unpacks the values of the collection in-place and inserts them into another collection. \n\nThere's ``...<expression>`` and it's null-aware version `...?<expr>` which only unpacks if the expression is not null, otherwise doesn't do anything.\n\nFE:\n```dart\nvar x= [1,2,3];\nvar y= [...x, 4]; //puts 1,2,3,4 in y.\nList<int>? z= null;\nvar m= [...?z, 4]; //only puts 4 in m\n```\n\n* `...<expr>` and `...?<expr>` are not exactly an operator expression but part of the [[Collection Type]] Literal Syntax instead. \nSince they are not exactly operators, they don't have any precedence, and if any they would have the lowest precedence , FE: `[...a+b]` would first compute `a+b` then apply the spread to that result.\n\n* Works for [[List]]s, [[Set]]s and [[Map]]s.",536876533]],["^15",[133,"^O","^16",536872171]],["^15",[133,"^F",128,536872171]],["^15",[133,"^X",51,536872171]],["^15",[133,"^V",51,536872171]],["^15",[133,"^U",51,536872533]],["^15",[133,"^U",134,536872533]],["^15",[133,"^U",135,536872533]],["^15",[133,"^U",136,536872533]],["^15",[133,"^U",137,536872533]],["^15",[133,"^?",["^ ","^19","66393218-445e-4755-b430-19bb9b920954"],536872992]],["^15",[133,"^J",["^19"],536872992]],["^15",[133,"^4",["^ ","^19","66393218-445e-4755-b430-19bb9b920954"],536872992]],["^15",[133,"^H",134,536872992]],["^15",[133,"^H",135,536872992]],["^15",[133,"^H",136,536872992]],["^15",[133,"^H",137,536872992]],["^15",[133,"^;","~u66393218-445e-4755-b430-19bb9b920954",536872171]],["^15",[134,"^K",1715024466906,536872202]],["^15",[134,"^O","^16",536876526]],["^15",[134,"^@",false,536872202]],["^15",[134,"^Y","collection type",536876532]],["^15",[134,"^11","Collection Type",536876532]],["^15",[134,"^B",1715024466906,536872202]],["^15",[134,"^;","~u664c94a3-928c-4c91-8162-17d27fe56be1",536872992]],["^15",[135,"^K",1715026037502,536872522]],["^15",[135,"^@",false,536872522]],["^15",[135,"^Y","list",536872522]],["^15",[135,"^11","List",536872522]],["^15",[135,"^B",1715026037502,536872522]],["^15",[135,"^;","~u664c94a3-0dcf-442e-989e-c803dbeb047f",536872992]],["^15",[136,"^K",1715026052271,536872532]],["^15",[136,"^@",false,536872532]],["^15",[136,"^Y","map",536872532]],["^15",[136,"^11","Map",536872532]],["^15",[136,"^B",1715026052271,536872532]],["^15",[136,"^;","~u664c94a3-7f7d-47e5-bc27-11a3f0c1e560",536872992]],["^15",[137,"^K",1715026052271,536872532]],["^15",[137,"^@",false,536872532]],["^15",[137,"^Y","set",536872532]],["^15",[137,"^11","Set",536872532]],["^15",[137,"^B",1715026052271,536872532]],["^15",[137,"^;","~u664c94a3-eb3f-4c6d-8235-67ff62fccad6",536872992]],["^15",[139,"^Q","Function Application \n``()`` This op calls a [[Function]]",536872584]],["^15",[139,"^O","^16",536872564]],["^15",[139,"^F",133,536872564]],["^15",[139,"^X",51,536872564]],["^15",[139,"^V",51,536872564]],["^15",[139,"^U",27,536872585]],["^15",[139,"^U",51,536872585]],["^15",[139,"^H",27,536872992]],["^15",[139,"^;","~u663938a1-24c6-4fc7-be48-dfa065f61f6f",536872564]],["^15",[140,"^Q","Subscript Access Operator\n``[ ]`` Used to call the ``[ ]`` operator defined for a type, overridable. \nFE: In ``x[1]``, the [[Integer]] `1` is passed to the `[ ]` operator defined for the type of `x`.\n\nIt has a null-aware version too, the `?[ ]` op, which only calls the `[ ]` op if the object is not null.",536872737]],["^15",[140,"^O","^16",536872588]],["^15",[140,"^F",139,536872588]],["^15",[140,"^X",51,536872588]],["^15",[140,"^V",51,536872673]],["^15",[140,"^U",51,536872683]],["^15",[140,"^U",141,536872683]],["^15",[140,"^H",141,536872992]],["^15",[140,"^;","~u663938ba-2e1b-4876-bc02-3c2f24358dc2",536872588]],["^15",[141,"^K",1715026195547,536872665]],["^15",[141,"^@",false,536872665]],["^15",[141,"^Y","integer",536872665]],["^15",[141,"^11","Integer",536872665]],["^15",[141,"^B",1715026195547,536872665]],["^15",[141,"^;","~u664c94a3-12dd-467d-8439-38e6a1db647a",536872992]],["^15",[143,"^Q","Member Access Operator\nid:: 6639395b-7171-49a2-a9a1-8e4c41405c90\n`.` Accesses the given property of an object/expression.\n\nnull-aware version: `?.`\nFE:\n```dart\nvar x= Car();\nx.yo();\n```",536872986]],["^15",[143,"^O","^16",536872737]],["^15",[143,"^F",140,536872737]],["^15",[143,"^X",51,536872737]],["^15",[143,"^V",51,536872737]],["^15",[143,"^U",51,536872738]],["^15",[143,"^?",["^ ","^19","6639395b-7171-49a2-a9a1-8e4c41405c90"],536872992]],["^15",[143,"^J",["^19"],536872992]],["^15",[143,"^4",["^ ","^19","6639395b-7171-49a2-a9a1-8e4c41405c90"],536872992]],["^15",[143,"^;","~u6639395b-7171-49a2-a9a1-8e4c41405c90",536872737]],["^15",[146,"^Q","Non-null assertion Operator\n`!`: Casts an expression into it's non-null type. \n\nFE: \n```dart\nString? x=\"yo\";\nx!.toString(); //casts x's type String? to String and calls toString() on it\n```\nGives a ((66393a1d-7e50-4e42-84d6-3ee4edc72132)) if it fails.",536872943]],["^15",[146,"^O","^16",536872780]],["^15",[146,"^F",143,536872780]],["^15",[146,"^X",51,536872780]],["^15",[146,"^V",51,536872780]],["^15",[146,"^U",51,536872933]],["^15",[146,"^U",149,536872933]],["^15",[146,"^H",149,536872992]],["^15",[146,"^;","~u66393986-5db0-4a16-a6a4-435ad9da7882",536872780]],["^15",[147,"^K",1715026454225,536872895]],["^15",[147,"^[",150,536872911]],["^15",[147,"^O","^16",536872906]],["^15",[147,"^@",false,536872895]],["^15",[147,"^Y","exception",536872895]],["^15",[147,"^11","Exception",536872895]],["^15",[147,"^B",1715026506941,536872947]],["^15",[147,"^;","~u66393a16-f773-48d7-bd40-9c8fd6383085",536872895]],["^15",[149,"^Q","Runtime Exception\nid:: 66393a1d-7e50-4e42-84d6-3ee4edc72132",536872947]],["^15",[149,"^O","^16",536872907]],["^15",[149,"^@",false,536872907]],["^15",[149,"^F",147,536872907]],["^15",[149,"^X",147,536872907]],["^15",[149,"^V",147,536872907]],["^15",[149,"^U",147,536872908]],["^15",[149,"^?",["^ ","^19","66393a1d-7e50-4e42-84d6-3ee4edc72132"],536872947]],["^15",[149,"^J",["^14",["^19"]],536872947]],["^15",[149,"^4",["^ ","^19","66393a1d-7e50-4e42-84d6-3ee4edc72132"],536872947]],["^15",[149,"^;","~u66393a1d-7e50-4e42-84d6-3ee4edc72132",536872907]],["^15",[150,"^3","- Runtime Exception\n  id:: 66393a1d-7e50-4e42-84d6-3ee4edc72132\n\t-\n-",536872950]],["^15",[150,"^18","~m1715026507109",536872949]],["^15",[150,"^Z","pages/Exception.md",536872911]],["^15",[151,"^Q","",536872917]],["^15",[151,"^O","^16",536872917]],["^15",[151,"^@",false,536872917]],["^15",[151,"^F",149,536872917]],["^15",[151,"^X",147,536872917]],["^15",[151,"^V",147,536872917]],["^15",[151,"^U",147,536872918]],["^15",[151,"^?",["^ "],536872917]],["^15",[151,"^;","~u66393a21-3488-4afa-92c0-0a3f541bf921",536872917]],["^15",[153,"^Q","",536872947]],["^15",[153,"^O","^16",536872947]],["^15",[153,"^@",false,536872947]],["^15",[153,"^F",149,536872947]],["^15",[153,"^X",147,536872947]],["^15",[153,"^V",149,536872947]],["^15",[153,"^U",147,536872948]],["^15",[153,"^?",["^ "],536872947]],["^15",[153,"^;","~u66393a4a-483b-417f-b8c2-2613509e488a",536872947]],["^15",[154,"^12",2,536872952]],["^15",[155,"^K",1716294817984,536872953]],["^15",[155,"^O","^16",536872953]],["^15",[155,"^N",20240521,536872953]],["^15",[155,"^@",true,536872953]],["^15",[155,"^Y","may 21st, 2024",536872953]],["^15",[155,"^11","May 21st, 2024",536872953]],["^15",[155,"^B",1716294817984,536872953]],["^15",[155,"^;","~u664c94a1-1715-4bf6-9f7c-8a47dfdbc7b9",536872953]],["^15",[156,"^Q","",536872954]],["^15",[156,"^O","^16",536872954]],["^15",[156,"^N",20240521,536872954]],["^15",[156,"^@",true,536872954]],["^15",[156,"^F",155,536872954]],["^15",[156,"^X",155,536872954]],["^15",[156,"^V",155,536872954]],["^15",[156,"^U",155,536872955]],["^15",[156,"^?",["^ "],536872954]],["^15",[156,"^;","~u664c94a1-7179-4af1-8af9-22ea9ec65f34",536872954]],["^15",[157,"^3","- Release Mode\n  id:: 66465448-de0b-48b4-abd6-6b9e86ca3121\n- Debug Mode\n  id:: 6646544c-dbc1-4298-b2a6-b3c9ebbc32a0\n-",536872957]],["^15",[157,"^17",1716294818972,536872957]],["^15",[157,"^18","~m1715885175766",536872958]],["^15",[157,"^Z","pages/Build Mode.md",536872957]],["^15",[158,"^K",1716294818970,536872957]],["^15",[158,"^[",157,536872957]],["^15",[158,"^@",false,536872957]],["^15",[158,"^Y","build mode",536872957]],["^15",[158,"^11","Build Mode",536872957]],["^15",[158,"^B",1716294818970,536872957]],["^15",[158,"^;","~u664c94a2-5210-4011-9fcc-3fbfbe65ca7d",536872957]],["^15",[159,"^Q","Release Mode\nid:: 66465448-de0b-48b4-abd6-6b9e86ca3121",536872957]],["^15",[159,"^O","^16",536872957]],["^15",[159,"^F",158,536872957]],["^15",[159,"^X",158,536872957]],["^15",[159,"^V",158,536872957]],["^15",[159,"^U",158,536872957]],["^15",[159,"^?",["^ ","^19","66465448-de0b-48b4-abd6-6b9e86ca3121"],536872957]],["^15",[159,"^J",["^19"],536872957]],["^15",[159,"^4",["^ ","^19","66465448-de0b-48b4-abd6-6b9e86ca3121"],536872957]],["^15",[159,"^;","~u66465448-de0b-48b4-abd6-6b9e86ca3121",536872957]],["^15",[160,"^Q","Debug Mode\nid:: 6646544c-dbc1-4298-b2a6-b3c9ebbc32a0",536872957]],["^15",[160,"^O","^16",536872957]],["^15",[160,"^F",159,536872957]],["^15",[160,"^X",158,536872957]],["^15",[160,"^V",158,536872957]],["^15",[160,"^U",158,536872957]],["^15",[160,"^?",["^ ","^19","6646544c-dbc1-4298-b2a6-b3c9ebbc32a0"],536872957]],["^15",[160,"^J",["^19"],536872957]],["^15",[160,"^4",["^ ","^19","6646544c-dbc1-4298-b2a6-b3c9ebbc32a0"],536872957]],["^15",[160,"^;","~u6646544c-dbc1-4298-b2a6-b3c9ebbc32a0",536872957]],["^15",[161,"^Q","",536872957]],["^15",[161,"^O","^16",536872957]],["^15",[161,"^F",160,536872957]],["^15",[161,"^X",158,536872957]],["^15",[161,"^V",158,536872957]],["^15",[161,"^U",158,536872957]],["^15",[161,"^;","~u664c94a2-862e-409c-b374-13c6194d67bd",536872957]],["^15",[162,"^3","-\n- Constant Constructor\n  id:: 66396b29-b407-4b27-a417-7b34c32ffdbb\n- Extending a class\n  id:: 66396b2f-15f1-4e6a-ad0d-024a03f9d5bd\n-",536872959]],["^15",[162,"^17",1716294818988,536872959]],["^15",[162,"^18","~m1715039277183",536872960]],["^15",[162,"^Z","pages/Class.md",536872959]],["^15",[163,"^Q","",536872959]],["^15",[163,"^O","^16",536872959]],["^15",[163,"^F",60,536872959]],["^15",[163,"^X",60,536872959]],["^15",[163,"^V",60,536872959]],["^15",[163,"^U",60,536872959]],["^15",[163,"^;","~u664c94a2-016f-45ed-bfd9-cec79693860c",536872959]],["^15",[164,"^Q","Constant Constructor\nid:: 66396b29-b407-4b27-a417-7b34c32ffdbb",536872959]],["^15",[164,"^O","^16",536872959]],["^15",[164,"^F",163,536872959]],["^15",[164,"^X",60,536872959]],["^15",[164,"^V",60,536872959]],["^15",[164,"^U",60,536872959]],["^15",[164,"^?",["^ ","^19","66396b29-b407-4b27-a417-7b34c32ffdbb"],536872959]],["^15",[164,"^J",["^19"],536872959]],["^15",[164,"^4",["^ ","^19","66396b29-b407-4b27-a417-7b34c32ffdbb"],536872959]],["^15",[164,"^;","~u66396b29-b407-4b27-a417-7b34c32ffdbb",536872959]],["^15",[165,"^Q","Extending a class\nid:: 66396b2f-15f1-4e6a-ad0d-024a03f9d5bd",536872959]],["^15",[165,"^O","^16",536872959]],["^15",[165,"^F",164,536872959]],["^15",[165,"^X",60,536872959]],["^15",[165,"^V",60,536872959]],["^15",[165,"^U",60,536872959]],["^15",[165,"^?",["^ ","^19","66396b2f-15f1-4e6a-ad0d-024a03f9d5bd"],536872959]],["^15",[165,"^J",["^19"],536872959]],["^15",[165,"^4",["^ ","^19","66396b2f-15f1-4e6a-ad0d-024a03f9d5bd"],536872959]],["^15",[165,"^;","~u66396b2f-15f1-4e6a-ad0d-024a03f9d5bd",536872959]],["^15",[166,"^Q","",536872959]],["^15",[166,"^O","^16",536872959]],["^15",[166,"^F",165,536872959]],["^15",[166,"^X",60,536872959]],["^15",[166,"^V",60,536872959]],["^15",[166,"^U",60,536872959]],["^15",[166,"^;","~u664c94a2-3395-417e-b353-21f1297c9e98",536872959]],["^15",[167,"^3","- Single line `//`, multi-line `/* */` and [[Documentation]] Comments `///` for single line or `/** **/`for multi-line.\n- Documentation Comment\n  id:: 66395786-a715-4697-ab54-5de52efe3dbe\n  These are used to document a given [[Class]]/[[Method]]/[[Function]]/[[Variable]]/[[Interface]]/Function args etc. The ``dart doc`` [[Dart CLI]] tool generates documentation from all documentation comments for a project.\n  They are different from normal comments as everything inside them is ignored except anything between `[ ]` brackets, it resolves the given variable/function/fields etc. in the current Lexical [[Scope]]. \n  Then in the documentation, the items between the `[ ]` brackets have a hyperlink to the documentation for the given type.\n  \n  FE:\n  ```dart\n  ///Uses [food]\n  void eat(String food) {\n  }\n  \n  void main(){ \n   eat(\"yo\");\n  }\n  ```",536872961]],["^15",[167,"^17",1716294819010,536872961]],["^15",[167,"^18","~m1715104526992",536872962]],["^15",[167,"^Z","pages/Comment.md",536872961]],["^15",[168,"^K",1716294819006,536872961]],["^15",[168,"^@",false,536872961]],["^15",[168,"^Y","documentation",536872961]],["^15",[168,"^11","Documentation",536872961]],["^15",[168,"^B",1716294819006,536872961]],["^15",[168,"^;","~u664c94a3-1833-496e-a216-9b667dedcd5c",536872961]],["^15",[169,"^K",1716294819008,536872961]],["^15",[169,"^@",false,536872961]],["^15",[169,"^Y","interface",536872961]],["^15",[169,"^11","Interface",536872961]],["^15",[169,"^B",1716294819008,536872961]],["^15",[169,"^;","~u664c94a3-a2d3-4648-b4b9-4c95fc903999",536872961]],["^15",[170,"^K",1716294819007,536872961]],["^15",[170,"^[",193,536872972]],["^15",[170,"^@",false,536872961]],["^15",[170,"^Y","scope",536872961]],["^15",[170,"^11","Scope",536872961]],["^15",[170,"^B",1716294819007,536872961]],["^15",[170,"^;","~u664c94a3-75a6-4f5b-91c4-d3ddd8c89325",536872989]],["^15",[171,"^K",1716294819006,536872961]],["^15",[171,"^[",167,536872961]],["^15",[171,"^@",false,536872961]],["^15",[171,"^Y","comment",536872961]],["^15",[171,"^11","Comment",536872961]],["^15",[171,"^B",1716294819006,536872961]],["^15",[171,"^;","~u664c94a3-3dd4-4e51-802a-f1a73018392e",536872981]],["^15",[172,"^Q","Single line `//`, multi-line `/* */` and [[Documentation]] Comments `///` for single line or `/** **/`for multi-line.",536872961]],["^15",[172,"^O","^16",536872961]],["^15",[172,"^F",171,536872961]],["^15",[172,"^X",171,536872961]],["^15",[172,"^V",171,536872961]],["^15",[172,"^U",168,536872961]],["^15",[172,"^U",171,536872961]],["^15",[172,"^H",168,536872961]],["^15",[172,"^;","~u664c94a3-4d1a-415c-a764-198e4620f72e",536872961]],["^15",[173,"^Q","Documentation Comment\nid:: 66395786-a715-4697-ab54-5de52efe3dbe\nThese are used to document a given [[Class]]/[[Method]]/[[Function]]/[[Variable]]/[[Interface]]/Function args etc. The ``dart doc`` [[Dart CLI]] tool generates documentation from all documentation comments for a project.\nThey are different from normal comments as everything inside them is ignored except anything between `[ ]` brackets, it resolves the given variable/function/fields etc. in the current Lexical [[Scope]]. \nThen in the documentation, the items between the `[ ]` brackets have a hyperlink to the documentation for the given type.\n\nFE:\n```dart\n///Uses [food]\nvoid eat(String food) {\n}\n\nvoid main(){ \n eat(\"yo\");\n}\n```",536872961]],["^15",[173,"^O","^16",536872961]],["^15",[173,"^F",172,536872961]],["^15",[173,"^X",171,536872961]],["^15",[173,"^V",171,536872961]],["^15",[173,"^U",27,536872961]],["^15",[173,"^U",31,536872961]],["^15",[173,"^U",37,536872961]],["^15",[173,"^U",47,536872961]],["^15",[173,"^U",60,536872961]],["^15",[173,"^U",169,536872961]],["^15",[173,"^U",170,536872961]],["^15",[173,"^U",171,536872961]],["^15",[173,"^?",["^ ","^19","66395786-a715-4697-ab54-5de52efe3dbe"],536872961]],["^15",[173,"^J",["^19"],536872961]],["^15",[173,"^4",["^ ","^19","66395786-a715-4697-ab54-5de52efe3dbe"],536872961]],["^15",[173,"^H",27,536872961]],["^15",[173,"^H",31,536872961]],["^15",[173,"^H",37,536872961]],["^15",[173,"^H",47,536872961]],["^15",[173,"^H",60,536872961]],["^15",[173,"^H",169,536872961]],["^15",[173,"^H",170,536872961]],["^15",[173,"^;","~u66395786-a715-4697-ab54-5de52efe3dbe",536872961]],["^15",[174,"^3","alias:: Annotation\n\n- We can provide additional information about any code in Dart, this is done using Annotations, they have a syntax `@<constant value>`, where the constant value can be either ((66391976-dd8e-434f-a43a-4148f8d2757a)) or a call to a ((66396b29-b407-4b27-a417-7b34c32ffdbb)), and these define metadata about any piece of code.\n  \n  Dart provides `@override` used to indicate that the given code is ((66396b2f-15f1-4e6a-ad0d-024a03f9d5bd)), `@pragma` used to provide information to tools, i.e., external tools can use pragma annotations to modify their behavior, `@deprecated` and `@Deprecated(\"<message>\")` to indicate if the given code is deprecated, the former doesn't need a message but the latter does, it is recommended to use the latter.\n  \n  We can define custom annotations too,\n  FE:\n  ```dart\n  const String SOMETHING=\"Something\"; \n  \n  \n  @SOMETHING //works\n  class Tip{\n   final String value;\n   const Tip(this.value);\n  }\n  \n  @Tip(\"ayo\") //works\n  void yo(){\n  \n  }\n  \n  @Deprecated(\"No more no\")\n  void no(){\n  }\n  ```\n  works, uses ((66396b29-b407-4b27-a417-7b34c32ffdbb)) and ((66391976-dd8e-434f-a43a-4148f8d2757a)).\n-\n-",536872963]],["^15",[174,"^17",1716294819094,536872963]],["^15",[174,"^18","~m1715039619965",536872965]],["^15",[174,"^Z","pages/Metadata.md",536872963]],["^15",[175,"^5",176,536872963]],["^15",[175,"^K",1716294819093,536872963]],["^15",[175,"^[",174,536872963]],["^15",[175,"^@",false,536872963]],["^15",[175,"^Y","metadata",536872963]],["^15",[175,"^11","Metadata",536872963]],["^15",[175,"^?",["^ ","~:alias",["~#set",["Annotation"]]],536872963]],["^15",[175,"^4",["^ ","^1:","Annotation"],536872963]],["^15",[175,"^B",1716294819093,536872963]],["^15",[175,"^;","~u664c94a3-03dc-4289-8599-1245bf6f959e",536872981]],["^15",[176,"^5",175,536872963]],["^15",[176,"^K",1716294819092,536872963]],["^15",[176,"^@",false,536872963]],["^15",[176,"^Y","annotation",536872963]],["^15",[176,"^11","Annotation",536872963]],["^15",[176,"^B",1716294819092,536872963]],["^15",[176,"^;","~u664c94a3-1980-403a-8667-8f8d7c611b88",536872963]],["^15",[177,"^Q","alias:: Annotation\n\n",536872963]],["^15",[177,"^O","^16",536872963]],["^15",[177,"~:block/invalid-properties",["^1;",[]],536872963]],["^15",[177,"^F",175,536872963]],["^15",[177,"^X",175,536872963]],["^15",[177,"^V",175,536872963]],["^15",[177,"^U",175,536872963]],["^15",[177,"^U",176,536872963]],["^15",[177,"^:",true,536872963]],["^15",[177,"^?",["^ ","^1:",["^1;",["Annotation"]]],536872963]],["^15",[177,"^J",["^1:"],536872963]],["^15",[177,"^4",["^ ","^1:","Annotation"],536872963]],["^15",[177,"^H",176,536872963]],["^15",[177,"^;","~u664c94a3-5c51-4582-9325-33694594671c",536872963]],["^15",[178,"^Q","We can provide additional information about any code in Dart, this is done using Annotations, they have a syntax `@<constant value>`, where the constant value can be either ((66391976-dd8e-434f-a43a-4148f8d2757a)) or a call to a ((66396b29-b407-4b27-a417-7b34c32ffdbb)), and these define metadata about any piece of code.\n\nDart provides `@override` used to indicate that the given code is ((66396b2f-15f1-4e6a-ad0d-024a03f9d5bd)), `@pragma` used to provide information to tools, i.e., external tools can use pragma annotations to modify their behavior, `@deprecated` and `@Deprecated(\"<message>\")` to indicate if the given code is deprecated, the former doesn't need a message but the latter does, it is recommended to use the latter.\n\nWe can define custom annotations too,\nFE:\n```dart\nconst String SOMETHING=\"Something\"; \n\n\n@SOMETHING //works\nclass Tip{\n final String value;\n const Tip(this.value);\n}\n\n@Tip(\"ayo\") //works\nvoid yo(){\n\n}\n\n@Deprecated(\"No more no\")\nvoid no(){\n}\n```\nworks, uses ((66396b29-b407-4b27-a417-7b34c32ffdbb)) and ((66391976-dd8e-434f-a43a-4148f8d2757a)).",536872963]],["^15",[178,"^O","^16",536872963]],["^15",[178,"^F",177,536872963]],["^15",[178,"^X",175,536872963]],["^15",[178,"^V",175,536872963]],["^15",[178,"^U",175,536872963]],["^15",[178,"^H",123,536872963]],["^15",[178,"^H",164,536872963]],["^15",[178,"^H",165,536872963]],["^15",[178,"^;","~u664c94a3-804c-4153-93fe-d974cefc36e0",536872963]],["^15",[179,"^Q","",536872963]],["^15",[179,"^O","^16",536872963]],["^15",[179,"^F",178,536872963]],["^15",[179,"^X",175,536872963]],["^15",[179,"^V",175,536872963]],["^15",[179,"^U",175,536872963]],["^15",[179,"^;","~u664c94a3-0e87-4f75-959e-839cac20553a",536872963]],["^15",[180,"^Q","",536872963]],["^15",[180,"^O","^16",536872963]],["^15",[180,"^F",179,536872963]],["^15",[180,"^X",175,536872963]],["^15",[180,"^V",175,536872963]],["^15",[180,"^U",175,536872963]],["^15",[180,"^;","~u664c94a3-2d1f-4460-b2d7-e83b0a28e4c1",536872963]],["^15",[181,"^3","- [Dart Packages Doc](https://dart.dev/guides/packages)",536872966]],["^15",[181,"^17",1716294819156,536872966]],["^15",[181,"^18","~m1715125802046",536872967]],["^15",[181,"^Z","pages/Package.md",536872966]],["^15",[182,"^K",1716294819155,536872966]],["^15",[182,"^[",181,536872966]],["^15",[182,"^@",false,536872966]],["^15",[182,"^Y","package",536872966]],["^15",[182,"^11","Package",536872966]],["^15",[182,"^B",1716294819155,536872966]],["^15",[182,"^;","~u664c94a3-cc22-4dc8-956c-794777fa268e",536872989]],["^15",[183,"^Q","[Dart Packages Doc](https://dart.dev/guides/packages)",536872966]],["^15",[183,"^O","^16",536872966]],["^15",[183,"^F",182,536872966]],["^15",[183,"^X",182,536872966]],["^15",[183,"^V",182,536872966]],["^15",[183,"^U",182,536872966]],["^15",[183,"^;","~u664c94a3-67a7-4a35-b815-07cfaefb9c5a",536872966]],["^15",[184,"^3","- `part` and `part of` [[Directive]]s links files to a [[Library]] , where a single library can have many part files. These files simply allow the code to be maintained across multiple files instead of 1 big file, and they have access to the library and its other part files. After [[Compilation]], all part files are merged into the library's compilation unit.\n  \n  To use:\n  \n  In a file `myLib.dart`, filenames don't matter except for [[Path URI]]\n  ```dart \n  library myLib;\n  \n  part 'some/other/file.dart'; //Denotes this file is a part file for this library\n  //rest of the file\n  ```\n  And then in `file.dart` in `some/other/` directory,\n  \n  ```dart\n  part of '../../myLib.dart'; //denotes this file is a part of this library, can use library name too but it is unrecommended as it introduce ambiguity\n  \n  //rest of the file\n  ```\n-\n-",536872968]],["^15",[184,"^17",1716294819176,536872968]],["^15",[184,"^18","~m1715125770059",536872969]],["^15",[184,"^Z","pages/Part File.md",536872968]],["^15",[185,"^K",1716294819175,536872968]],["^15",[185,"^[",184,536872968]],["^15",[185,"^@",false,536872968]],["^15",[185,"^Y","part file",536872968]],["^15",[185,"^11","Part File",536872968]],["^15",[185,"^B",1716294819175,536872968]],["^15",[185,"^;","~u664c94a3-4f5e-406b-a580-85f86ae30045",536872989]],["^15",[186,"^K",1716294819171,536872968]],["^15",[186,"^@",false,536872968]],["^15",[186,"^Y","path uri",536872968]],["^15",[186,"^11","Path URI",536872968]],["^15",[186,"^B",1716294819171,536872968]],["^15",[186,"^;","~u664c94a3-398f-4f39-b357-a18b4ded5bac",536872989]],["^15",[187,"^K",1716294819175,536872968]],["^15",[187,"^@",false,536872968]],["^15",[187,"^Y","directive",536872968]],["^15",[187,"^11","Directive",536872968]],["^15",[187,"^B",1716294819175,536872968]],["^15",[187,"^;","~u664c94a3-3ac6-4621-b1a4-b2a2c537966d",536872989]],["^15",[188,"^Q","~`part` and `part of` [[Directive]]s links files to a [[Library]] , where a single library can have many part files. These files simply allow the code to be maintained across multiple files instead of 1 big file, and they have access to the library and its other part files. After [[Compilation]], all part files are merged into the library's compilation unit.\n\nTo use:\n\nIn a file `myLib.dart`, filenames don't matter except for [[Path URI]]\n```dart \nlibrary myLib;\n\npart 'some/other/file.dart'; //Denotes this file is a part file for this library\n//rest of the file\n```\nAnd then in `file.dart` in `some/other/` directory,\n\n```dart\npart of '../../myLib.dart'; //denotes this file is a part of this library, can use library name too but it is unrecommended as it introduce ambiguity\n\n//rest of the file\n```",536872968]],["^15",[188,"^O","^16",536872968]],["^15",[188,"^F",185,536872968]],["^15",[188,"^X",185,536872968]],["^15",[188,"^V",185,536872968]],["^15",[188,"^U",86,536872968]],["^15",[188,"^U",100,536872968]],["^15",[188,"^U",185,536872968]],["^15",[188,"^U",186,536872968]],["^15",[188,"^U",187,536872968]],["^15",[188,"^H",86,536872968]],["^15",[188,"^H",100,536872968]],["^15",[188,"^H",186,536872968]],["^15",[188,"^H",187,536872968]],["^15",[188,"^;","~u664c94a3-fc8a-4896-8224-41b462991f29",536872968]],["^15",[189,"^Q","",536872968]],["^15",[189,"^O","^16",536872968]],["^15",[189,"^F",188,536872968]],["^15",[189,"^X",185,536872968]],["^15",[189,"^V",185,536872968]],["^15",[189,"^U",185,536872968]],["^15",[189,"^;","~u664c94a3-9f95-4a69-a73d-47222692e7e7",536872968]],["^15",[190,"^Q","",536872968]],["^15",[190,"^O","^16",536872968]],["^15",[190,"^F",189,536872968]],["^15",[190,"^X",185,536872968]],["^15",[190,"^V",185,536872968]],["^15",[190,"^U",185,536872968]],["^15",[190,"^;","~u664c94a3-637a-48ec-bb94-ca096f4eae12",536872968]],["^15",[193,"^3","- Private Scope\n  id:: 663a2f7f-ee3d-411d-aba3-2857c50d6bd6\n-",536872972]],["^15",[193,"^17",1716294819302,536872972]],["^15",[193,"^18","~m1715089292919",536872973]],["^15",[193,"^Z","pages/Scope.md",536872972]],["^15",[194,"^Q","Private Scope\nid:: 663a2f7f-ee3d-411d-aba3-2857c50d6bd6",536872972]],["^15",[194,"^O","^16",536872972]],["^15",[194,"^F",170,536872972]],["^15",[194,"^X",170,536872972]],["^15",[194,"^V",170,536872972]],["^15",[194,"^U",170,536872972]],["^15",[194,"^?",["^ ","^19","663a2f7f-ee3d-411d-aba3-2857c50d6bd6"],536872972]],["^15",[194,"^J",["^19"],536872972]],["^15",[194,"^4",["^ ","^19","663a2f7f-ee3d-411d-aba3-2857c50d6bd6"],536872972]],["^15",[194,"^;","~u663a2f7f-ee3d-411d-aba3-2857c50d6bd6",536872972]],["^15",[195,"^Q","",536872972]],["^15",[195,"^O","^16",536872972]],["^15",[195,"^F",194,536872972]],["^15",[195,"^X",170,536872972]],["^15",[195,"^V",170,536872972]],["^15",[195,"^U",170,536872972]],["^15",[195,"^;","~u664c94a3-f82f-4413-892f-2e08898eb899",536872972]],["^15",[196,"^K",1716294819344,536872981]],["^15",[196,"^[",326,536874858]],["^15",[196,"^O","^16",536874853]],["^15",[196,"^@",false,536872981]],["^15",[196,"^Y","string",536872981]],["^15",[196,"^11","String",536872981]],["^15",[196,"^B",1716535708114,536875965]],["^15",[196,"^;","~u664c94a3-39c0-44d2-b22f-fc5b7e251b80",536872995]],["^15",[197,"^Q","[[Metadata]]",536872981]],["^15",[197,"^O","^16",536872981]],["^15",[197,"^F",77,536872981]],["^15",[197,"^X",38,536872981]],["^15",[197,"^V",38,536872981]],["^15",[197,"^U",38,536872981]],["^15",[197,"^U",175,536872981]],["^15",[197,"^H",175,536872981]],["^15",[197,"^;","~u664c94a3-96d0-486d-8008-3b91606c9a20",536872981]],["^15",[198,"^Q","[[Library]]",536872981]],["^15",[198,"^O","^16",536872981]],["^15",[198,"^F",197,536872981]],["^15",[198,"^X",38,536872981]],["^15",[198,"^V",38,536872981]],["^15",[198,"^U",38,536872981]],["^15",[198,"^U",100,536872981]],["^15",[198,"^H",100,536872981]],["^15",[198,"^;","~u664c94a3-26eb-40f7-92b5-3338aef6d475",536872981]],["^15",[199,"^Q","For every Data type `T` exists a nullable data type `T?` which can either have a value of type `T` or [[Null]]. That is null is not assignable to `T`, Dart enforces sound null safety. Whilst ``T`` variables can be declared as uninitialized, they can't be accessed until initialized.\nid:: 66424513-072f-492a-afd4-a43fdfb810eb\n  FE:\n```dart\nString? x; //initialied to null automatically by default\nString y; //un-initialized, needs to be initialized before being used\n```\nuses [[Variable]]s named `x` and `y`\n * We can't access properties/[[Method]]s of a nullable data type with the normal ((6639395b-7171-49a2-a9a1-8e4c41405c90)) ``.``, we have to use the null-aware version of it.",536874104]],["^15",[199,"^O","^16",536872985]],["^15",[199,"^F",255,536874178]],["^15",[199,"^X",44,536872985]],["^15",[199,"^V",44,536872985]],["^15",[199,"^U",37,536874104]],["^15",[199,"^U",44,536872985]],["^15",[199,"^U",45,536874104]],["^15",[199,"^U",47,536874104]],["^15",[199,"^?",["^ ","^19","66424513-072f-492a-afd4-a43fdfb810eb"],536874178]],["^15",[199,"^J",["^14",["^19"]],536874178]],["^15",[199,"^4",["^ ","^19","66424513-072f-492a-afd4-a43fdfb810eb"],536874178]],["^15",[199,"^H",37,536874178]],["^15",[199,"^H",45,536874178]],["^15",[199,"^H",47,536874178]],["^15",[199,"^H",143,536874178]],["^15",[199,"^;","~u66423f78-fb4c-49d0-93c4-f89358082751",536872981]],["^15",[200,"^Q","The `main()` [[Function]] is the entry-point of any dart app/project.\nIt must have the [[void]]return type. And it can have an optional parameter [[List]]<[[String]]>, this gets the arguments passed to the dart application.\nFE:\nA file `abc.dart`\n```dart\nvoid main(List<String> arguments) {\n\nprint(arguments);\n\n}\n```\nIf we execute it with `dart run abc.dart 1 2 \"yo\"`\nOutputs \n`[1,2,yo]` \nto the console.",536874097]],["^15",[200,"^O","^16",536872981]],["^15",[200,"^F",73,536872981]],["^15",[200,"^X",38,536872981]],["^15",[200,"^V",38,536872981]],["^15",[200,"^U",27,536874098]],["^15",[200,"^U",38,536874098]],["^15",[200,"^U",135,536874098]],["^15",[200,"^U",196,536874098]],["^15",[200,"^U",286,536874098]],["^15",[200,"^?",["^ "],536874097]],["^15",[200,"^H",27,536874097]],["^15",[200,"^H",135,536874097]],["^15",[200,"^H",196,536874097]],["^15",[200,"^H",286,536874097]],["^15",[200,"^;","~u664c94a3-d7b1-407e-8a7f-79534e2271a7",536872981]],["^15",[203,"^K",1716294819501,536872989]],["^15",[203,"^@",false,536872989]],["^15",[203,"^Y","webapp",536872989]],["^15",[203,"^11","WebApp",536872989]],["^15",[203,"^B",1716294819501,536872989]],["^15",[203,"^;","~u664c94a3-235a-4079-a8f5-ba68c848a3ad",536872989]],["^15",[204,"^K",1716294819500,536872989]],["^15",[204,"^@",false,536872989]],["^15",[204,"^Y","pub",536872989]],["^15",[204,"^11","Pub",536872989]],["^15",[204,"^B",1716294819500,536872989]],["^15",[204,"^;","~u664c94a3-4170-4845-a9c0-cf75c42412c0",536872989]],["^15",[205,"^K",1716294819501,536872989]],["^15",[205,"^[",226,536873252]],["^15",[205,"^O","^16",536873245]],["^15",[205,"^@",false,536872989]],["^15",[205,"^Y","reserved keywords",536872989]],["^15",[205,"^11","Reserved Keywords",536872989]],["^15",[205,"^B",1716372868892,536873249]],["^15",[205,"^;","~u664c94a3-6fcb-4866-85c9-3c4e7b3be5a5",536872989]],["^15",[206,"^Q","To open the namespace of one library in another, i.e., to import a library in the current file (and it's compilation unit), \nwe use\n``import'<lib name/path>';``\nwhere we can either define the full [[Path URI]] of the other library such as `'../libs/abc.dart'`, or  use a `<package/dart>:<package name>/<path>` combination where 'package' is an identifier used for packages added through package managers like [[Pub]] \nFE:\n```dart\nimport 'test:test/abc.dart';\n```\nand there's a special syntax for for inbuilt `dart` libraries such as `dart:html` \nFE:\n```dart\nimport 'dart:html';\n```",536872989]],["^15",[206,"^O","^16",536872989]],["^15",[206,"^F",210,536872989]],["^15",[206,"^X",100,536872989]],["^15",[206,"^V",100,536872989]],["^15",[206,"^U",100,536872989]],["^15",[206,"^U",186,536872989]],["^15",[206,"^U",204,536872989]],["^15",[206,"^H",186,536872989]],["^15",[206,"^H",204,536872989]],["^15",[206,"^;","~u664c94a3-9233-48cf-875b-1ba791eef41d",536872989]],["^15",[207,"^Q","",536872989]],["^15",[207,"^O","^16",536872989]],["^15",[207,"^F",101,536872989]],["^15",[207,"^X",100,536872989]],["^15",[207,"^V",100,536872989]],["^15",[207,"^U",100,536872989]],["^15",[207,"^;","~u664c94a3-301d-43fc-8616-e20870dd37d0",536872989]],["^15",[208,"^Q","A library is a single compilation unit, made up of a single primary file and can have many [[Part File]]s. It has it's own ((663a2f7f-ee3d-411d-aba3-2857c50d6bd6)). It provides encapsulation and privacy to its components whilst providing APIs for other libraries.",536872989]],["^15",[208,"^O","^16",536872989]],["^15",[208,"^F",100,536872989]],["^15",[208,"^X",100,536872989]],["^15",[208,"^V",100,536872989]],["^15",[208,"^U",100,536872989]],["^15",[208,"^U",185,536872989]],["^15",[208,"^H",185,536872989]],["^15",[208,"^H",194,536872989]],["^15",[208,"^;","~u664c94a3-91c4-48e0-9d3b-30695890fb86",536872989]],["^15",[209,"^Q","Prefix\nImported libraries can be given a custom identifier/prefix to avoid namespace clashes, i.e., say we import 2 libraries and they both have the same [[Function]] ``abc()`` then it will be ambiguous for the current library to select the right [[Function]], to avoid this Dart allows putting contents of any library a specified namespace, called a `prefix`. \nSyntax\n`import <lib> as <name>;`\nwhere `<name>` can be anything except [[Reserved Keywords]].\nAnd then to use anything from `<lib>`'s namespace we prefix `<name>.` to it.\n\nFE:\n```dart\nimport 'test:test/abc.dart' as yo;\n\nvoid aye(){\n var x = yo.x(); //will call `x()` in abc.dart\n}\n```",536872989]],["^15",[209,"^O","^16",536872989]],["^15",[209,"^F",206,536872989]],["^15",[209,"^X",100,536872989]],["^15",[209,"^V",100,536872989]],["^15",[209,"^U",27,536872989]],["^15",[209,"^U",100,536872989]],["^15",[209,"^U",205,536872989]],["^15",[209,"^H",27,536872989]],["^15",[209,"^H",205,536872989]],["^15",[209,"^;","~u664c94a3-1779-49de-a091-17750f36ceec",536872989]],["^15",[210,"^Q","Libraries can be distributed using [[Package]]s",536872989]],["^15",[210,"^O","^16",536872989]],["^15",[210,"^F",215,536872989]],["^15",[210,"^X",100,536872989]],["^15",[210,"^V",100,536872989]],["^15",[210,"^U",100,536872989]],["^15",[210,"^U",182,536872989]],["^15",[210,"^H",182,536872989]],["^15",[210,"^;","~u664c94a3-9ee7-440a-baeb-4bbb70a8b404",536872989]],["^15",[211,"^Q","~`library` [[Directive]]\nEvery library can define its name by giving it to `library <name>` where `name` is the library's name and it is optional, however if we define it we can add ((66395786-a715-4697-ab54-5de52efe3dbe)) to it. \nFE:\n```dart\n@pragma(\"Yo\")\nlibrary myLib;\n\n//... rest of the file\n```",536872989]],["^15",[211,"^O","^16",536872989]],["^15",[211,"^F",213,536872989]],["^15",[211,"^X",100,536872989]],["^15",[211,"^V",100,536872989]],["^15",[211,"^U",100,536872989]],["^15",[211,"^U",187,536872989]],["^15",[211,"^H",173,536872989]],["^15",[211,"^H",187,536872989]],["^15",[211,"^;","~u664c94a3-20ac-4414-8ff2-6de62c94a22c",536872989]],["^15",[212,"^Q","Importing only part of a library\nWe can import specific part(s) of a library or exclude them from being imported using `show` and `hide` [[Reserved Keywords]] respectively.\nSyntax\n`import <lib> show <identifier>,<identifier2>;` to only import these parts\n`import <lib> hide <identifier>,<identifier2>;` to exclude these parts from being imported\nFE:\n```dart\nimport 'test:test/abc.dart' show x; //if x is a function then only function x() is imported from abc.dart\n```",536872989]],["^15",[212,"^O","^16",536872989]],["^15",[212,"^F",209,536872989]],["^15",[212,"^X",100,536872989]],["^15",[212,"^V",100,536872989]],["^15",[212,"^U",100,536872989]],["^15",[212,"^U",205,536872989]],["^15",[212,"^H",205,536872989]],["^15",[212,"^;","~u664c94a3-0b98-43c6-8b7a-097e5aaa5544",536872989]],["^15",[213,"^Q","Every dart file (including its [[Part File]]s) is a library, even if it doesn't use the `library` [[Directive]].",536872989]],["^15",[213,"^O","^16",536872989]],["^15",[213,"^F",208,536872989]],["^15",[213,"^X",100,536872989]],["^15",[213,"^V",100,536872989]],["^15",[213,"^U",100,536872989]],["^15",[213,"^U",185,536872989]],["^15",[213,"^U",187,536872989]],["^15",[213,"^H",185,536872989]],["^15",[213,"^H",187,536872989]],["^15",[213,"^;","~u664c94a3-9283-4831-91a3-013a82e6fc2e",536872989]],["^15",[214,"^Q","Deferred/Lazy Loading of a library\nOnly for [[WebApp]]s. \nBy default a library is imported at the compilation time itself and this increases the importing library size and opens the namespace at compile time itself. But we can choose to import the library on demand and hence avoid having it included in the current library, which avoids it being in the namespace until manually imported and reduces size until it is loaded.\n\nTo do this we use ``deferred as <namespace>`` on an importing library like ``import '<library>' deferred as yo;`` and then when we wish to load the library, we call a [[Function]] ``loadlibrary()`` on the library, this function inserted automatically into the namespace by Dart and returns a [[Future]] which we can and ((664c94dc-087d-4269-8ac2-623a603b34a9)) to know when the library is fully loaded.\n\nFE:\n```dart\nimport 'test:test/abc.dart' deferred as yo;\n\nFuture<void> ayo() async{\n await yo.loadLibrary(); //yo gets loaded\n yo.haiyoo(); //any function inside yo works\n}\n```\n\n* We can call ``loadLibrary()`` as many  times as we want, it is loaded only once.\n* [[Data Type]]s defined in the deferred library aren't available to the loading library as it's namespace is not loaded until dynamically requested. \n* Constants in the deferred imported library aren't constants for the importing library as it's constants aren't available at compile-time.",536873242]],["^15",[214,"^O","^16",536872989]],["^15",[214,"^F",212,536872989]],["^15",[214,"^X",100,536872989]],["^15",[214,"^V",100,536872989]],["^15",[214,"^U",27,536873176]],["^15",[214,"^U",39,536873176]],["^15",[214,"^U",44,536873176]],["^15",[214,"^U",100,536873176]],["^15",[214,"^U",203,536873176]],["^15",[214,"^U",219,536873176]],["^15",[214,"^?",["^ "],536873242]],["^15",[214,"^H",27,536873242]],["^15",[214,"^H",39,536873242]],["^15",[214,"^H",44,536873242]],["^15",[214,"^H",203,536873242]],["^15",[214,"^H",219,536873242]],["^15",[214,"^;","~u664c94a3-4e2d-4b45-bc6a-1e092df0f00b",536872989]],["^15",[215,"^Q","If any identifier inside a library uses `_` prefix to its name, it is only visible inside the [[Scope]] of the library.",536872989]],["^15",[215,"^O","^16",536872989]],["^15",[215,"^F",211,536872989]],["^15",[215,"^X",100,536872989]],["^15",[215,"^V",100,536872989]],["^15",[215,"^U",100,536872989]],["^15",[215,"^U",170,536872989]],["^15",[215,"^H",170,536872989]],["^15",[215,"^;","~u664c94a3-a7d3-4663-9632-512dcac0e304",536872989]],["^15",[216,"^Q","With explicit [[Data Type]]s  too. \nFE:\n```dart\nString x = 'yo';\n```\n\nWe can use the [[Object]]  or the [[dynamic]] type too. These types can store a value of more than one type in a variable.",536874073]],["^15",[216,"^O","^16",536872995]],["^15",[216,"^F",217,536872995]],["^15",[216,"^X",37,536872995]],["^15",[216,"^V",37,536872995]],["^15",[216,"^U",37,536874074]],["^15",[216,"^U",44,536874074]],["^15",[216,"^U",48,536874074]],["^15",[216,"^U",279,536874074]],["^15",[216,"^?",["^ "],536874073]],["^15",[216,"^H",44,536874073]],["^15",[216,"^H",48,536874073]],["^15",[216,"^H",279,536874073]],["^15",[216,"^;","~u664c94a3-dc9e-49a3-92ad-1006bdd65067",536872995]],["^15",[217,"^Q","Variables store reference in dart, so in \n```dart\nvar x = 'yo';\n```\n `x`  contains a reference to a [[String]] object with a value `yo`",536872995]],["^15",[217,"^O","^16",536872995]],["^15",[217,"^F",63,536872995]],["^15",[217,"^X",37,536872995]],["^15",[217,"^V",37,536872995]],["^15",[217,"^U",37,536872995]],["^15",[217,"^U",196,536872995]],["^15",[217,"^H",196,536872995]],["^15",[217,"^;","~u664c94a3-049d-4b40-9ae3-747a6ee5c081",536872995]],["^15",[218,"^K",1716294875197,536873009]],["^15",[218,"^[",220,536873018]],["^15",[218,"^O","^16",536873013]],["^15",[218,"^@",false,536873009]],["^15",[218,"^Y","asynchrony",536873009]],["^15",[218,"^11","Asynchrony",536873009]],["^15",[218,"^B",1716294879218,536873021]],["^15",[218,"^;","~u664c94db-963b-47fe-a355-c5f815864c5e",536873009]],["^15",[219,"^Q","~``await``\nid:: 664c94dc-087d-4269-8ac2-623a603b34a9",536873028]],["^15",[219,"^O","^16",536873014]],["^15",[219,"^@",false,536873014]],["^15",[219,"^F",218,536873014]],["^15",[219,"^X",218,536873014]],["^15",[219,"^V",218,536873014]],["^15",[219,"^U",218,536873015]],["^15",[219,"^?",["^ ","^19","664c94dc-087d-4269-8ac2-623a603b34a9"],536873028]],["^15",[219,"^J",["^14",["^19"]],536873028]],["^15",[219,"^4",["^ ","^19","664c94dc-087d-4269-8ac2-623a603b34a9"],536873028]],["^15",[219,"^;","~u664c94dc-087d-4269-8ac2-623a603b34a9",536873014]],["^15",[220,"^3","- ``await``\n  id:: 664c94dc-087d-4269-8ac2-623a603b34a9\n-",536873030]],["^15",[220,"^18","~m1716294883696",536873029]],["^15",[220,"^Z","pages/Asynchrony.md",536873018]],["^15",[221,"^Q","",536873024]],["^15",[221,"^O","^16",536873024]],["^15",[221,"^@",false,536873024]],["^15",[221,"^F",219,536873024]],["^15",[221,"^X",218,536873024]],["^15",[221,"^V",218,536873024]],["^15",[221,"^U",218,536873025]],["^15",[221,"^?",["^ "],536873024]],["^15",[221,"^;","~u664c94e0-6ff2-4d78-abdb-ee2dae18e739",536873024]],["^15",[222,"^K",1716316225406,536873182]],["^15",[222,"^O","^16",536873182]],["^15",[222,"^N",20240522,536873182]],["^15",[222,"^@",true,536873182]],["^15",[222,"^Y","may 22nd, 2024",536873182]],["^15",[222,"^11","May 22nd, 2024",536873182]],["^15",[222,"^B",1716316225406,536873182]],["^15",[222,"^;","~u664ce841-2103-4a74-8a88-8af2763ac169",536873182]],["^15",[223,"^Q","",536873183]],["^15",[223,"^O","^16",536873183]],["^15",[223,"^N",20240522,536873183]],["^15",[223,"^@",true,536873183]],["^15",[223,"^F",222,536873183]],["^15",[223,"^X",222,536873183]],["^15",[223,"^V",222,536873183]],["^15",[223,"^U",222,536873184]],["^15",[223,"^?",["^ "],536873183]],["^15",[223,"^;","~u664ce841-381e-445e-911c-02e0c34ddc69",536873183]],["^15",[224,"^Q","https://dart.dev/language/keywords",536873249]],["^15",[224,"^O","^16",536873246]],["^15",[224,"^@",false,536873246]],["^15",[224,"^F",205,536873246]],["^15",[224,"^X",205,536873246]],["^15",[224,"^V",205,536873246]],["^15",[224,"^U",205,536873247]],["^15",[224,"^?",["^ "],536873249]],["^15",[224,"^;","~u664dc577-3c5b-453d-b088-60decf0d28d4",536873246]],["^15",[225,"^Q","",536873250]],["^15",[225,"^O","^16",536873250]],["^15",[225,"^@",false,536873250]],["^15",[225,"^F",224,536873250]],["^15",[225,"^X",205,536873250]],["^15",[225,"^V",205,536873250]],["^15",[225,"^U",205,536873251]],["^15",[225,"^?",["^ "],536873250]],["^15",[225,"^;","~u664dc585-6216-48da-baef-40d7e5e560e2",536873250]],["^15",[226,"^3","- https://dart.dev/language/keywords\n-",536873254]],["^15",[226,"^18","~m1716372869833",536873253]],["^15",[226,"^Z","pages/Reserved Keywords.md",536873252]],["^15",[227,"^Q","[[Data Type]]",536873262]],["^15",[227,"^O","^16",536873258]],["^15",[227,"^F",198,536873258]],["^15",[227,"^X",38,536873258]],["^15",[227,"^V",38,536873258]],["^15",[227,"^U",38,536873263]],["^15",[227,"^U",44,536873263]],["^15",[227,"^?",["^ "],536873262]],["^15",[227,"^H",44,536873262]],["^15",[227,"^;","~u664dc5f6-c3d5-4fdd-933b-51b7a7968748",536873258]],["^15",[228,"^Q","",536873266]],["^15",[228,"^O","^16",536873266]],["^15",[228,"^@",false,536873266]],["^15",[228,"^F",227,536873266]],["^15",[228,"^X",38,536873266]],["^15",[228,"^V",38,536873266]],["^15",[228,"^U",38,536873267]],["^15",[228,"^?",["^ "],536873266]],["^15",[228,"^;","~u664dc5fa-ab2c-4211-9d88-ef1885d22cfb",536873266]],["^15",[229,"^U",44,536873276]],["^15",[230,"^U",44,536873276]],["^15",[231,"^U",44,536873276]],["^15",[232,"^U",44,536873276]],["^15",[233,"^U",44,536873276]],["^15",[234,"^U",44,536873276]],["^15",[235,"^U",44,536873276]],["^15",[236,"^U",44,536873276]],["^15",[237,"^U",44,536873276]],["^15",[238,"^U",44,536873276]],["^15",[241,"^K",1716373344973,536873383]],["^15",[241,"^[",358,536875977]],["^15",[241,"^O","^16",536875972]],["^15",[241,"^@",false,536873383]],["^15",[241,"^Y","symbol",536873383]],["^15",[241,"^11","Symbol",536873383]],["^15",[241,"^B",1717074556429,536876497]],["^15",[241,"^;","~u6656f801-4163-4c59-932f-0673ec9e6cc5",536876074]],["^15",[242,"^K",1716373344974,536873383]],["^15",[242,"^O","^16",536876539]],["^15",[242,"^@",false,536873383]],["^15",[242,"^Y","runes",536873383]],["^15",[242,"^11","Runes",536873383]],["^15",[242,"^B",1716373344974,536873383]],["^15",[242,"^;","~u664dc760-c579-49f1-9358-ddafc5baed2f",536873383]],["^15",[243,"^Q","",536873392]],["^15",[243,"^O","^16",536873392]],["^15",[243,"^@",false,536873392]],["^15",[243,"^?",["^ "],536873392]],["^15",[243,"^;","~u664dc766-1ff5-4d2c-83a4-125021eed566",536873392]],["^15",[245,"^Q","~``object``\nid:: 664dc836-dc7e-4d07-9dcf-731130436a8d\nAn instance of a class.",536873589]],["^15",[245,"^O","^16",536873456]],["^15",[245,"^F",104,536873456]],["^15",[245,"^X",44,536873456]],["^15",[245,"^V",44,536873456]],["^15",[245,"^U",44,536873468]],["^15",[245,"^?",["^ ","^19","664dc836-dc7e-4d07-9dcf-731130436a8d"],536873589]],["^15",[245,"^J",["^14",["^19"]],536873589]],["^15",[245,"^4",["^ ","^19","664dc836-dc7e-4d07-9dcf-731130436a8d"],536873589]],["^15",[245,"^;","~u664dc836-dc7e-4d07-9dcf-731130436a8d",536873460]],["^15",[246,"^Q","In dart, every Data Type is a subclass of an [[Object]].",536873652]],["^15",[246,"^O","^16",536873471]],["^15",[246,"^F",247,536873646]],["^15",[246,"^X",44,536873471]],["^15",[246,"^V",44,536873471]],["^15",[246,"^U",44,536873474]],["^15",[246,"^U",48,536873474]],["^15",[246,"^?",["^ "],536873652]],["^15",[246,"^H",48,536873652]],["^15",[246,"^;","~u664dc848-d10a-4104-bfc9-dd9125c65e96",536873471]],["^15",[247,"^Q","We can create objects in Dart using literals, like ``'hello'`` is a [[String]] literal, ``true`` is a boolean literal. And so on.",536873639]],["^15",[247,"^O","^16",536873494]],["^15",[247,"^F",251,536873582]],["^15",[247,"^X",44,536873494]],["^15",[247,"^V",44,536873494]],["^15",[247,"^U",44,536873530]],["^15",[247,"^U",196,536873530]],["^15",[247,"^?",["^ "],536873639]],["^15",[247,"^H",196,536873639]],["^15",[247,"^;","~u664dc85f-7b75-44af-a862-eab254d062fa",536873494]],["^15",[248,"^Q","Number Types\nThese types have the base class [[num]], we have\n[[int]] and [[double]]",536874432]],["^15",[248,"^O","^16",536873554]],["^15",[248,"^F",199,536874104]],["^15",[248,"^X",44,536873554]],["^15",[248,"^V",44,536873554]],["^15",[248,"^U",44,536874405]],["^15",[248,"^U",291,536874405]],["^15",[248,"^U",292,536874405]],["^15",[248,"^U",303,536874405]],["^15",[248,"^?",["^ "],536874432]],["^15",[248,"^H",291,536874432]],["^15",[248,"^H",292,536874432]],["^15",[248,"^H",303,536874432]],["^15",[248,"^;","~u664de1cf-3332-4654-ab91-9f0b98c229d2",536873554]],["^15",[249,"^Q","The superclass to all types except [[Null]]",536873752]],["^15",[249,"^O","^16",536873559]],["^15",[249,"^@",false,536873559]],["^15",[249,"^F",48,536873559]],["^15",[249,"^X",48,536873559]],["^15",[249,"^V",48,536873559]],["^15",[249,"^U",45,536873753]],["^15",[249,"^U",48,536873753]],["^15",[249,"^?",["^ "],536873752]],["^15",[249,"^H",45,536873752]],["^15",[249,"^;","~u664de1f2-a772-44b7-951a-fd4e6a10b7cf",536873559]],["^15",[250,"^Q","Every variable in dart stores a reference to an ((664dc836-dc7e-4d07-9dcf-731130436a8d)). This is because every data type in Dart is a subclass of an [[Object]] so every value is an ``object``.",536873635]],["^15",[250,"^O","^16",536873563]],["^15",[250,"^F",37,536873563]],["^15",[250,"^X",37,536873563]],["^15",[250,"^V",37,536873563]],["^15",[250,"^U",37,536873620]],["^15",[250,"^U",48,536873620]],["^15",[250,"^U",245,536873620]],["^15",[250,"^?",["^ "],536873635]],["^15",[250,"^H",48,536873635]],["^15",[250,"^H",245,536873635]],["^15",[250,"^;","~u664de213-5abb-4676-8e7e-3f71de8084ac",536873563]],["^15",[251,"^Q","Every data type's value is an `object`.",536873586]],["^15",[251,"^O","^16",536873582]],["^15",[251,"^F",245,536873582]],["^15",[251,"^X",44,536873582]],["^15",[251,"^V",44,536873582]],["^15",[251,"^U",44,536873583]],["^15",[251,"^?",["^ "],536873586]],["^15",[251,"^;","~u664de3e9-41c7-4f9e-a7ce-b4b7b565c3fe",536873582]],["^15",[254,"^Q","Since [[Variable]]s store references to objects, and all values are objects, and their types [[Object]] [[Class]]es we can use ctors to initialize values too, such as ``Map()`` for [[Map]] types.",536873744]],["^15",[254,"^O","^16",536873653]],["^15",[254,"^F",246,536873653]],["^15",[254,"^X",44,536873653]],["^15",[254,"^V",44,536873653]],["^15",[254,"^U",37,536873738]],["^15",[254,"^U",44,536873738]],["^15",[254,"^U",48,536873738]],["^15",[254,"^U",60,536873738]],["^15",[254,"^U",136,536873738]],["^15",[254,"^?",["^ "],536873744]],["^15",[254,"^H",37,536873744]],["^15",[254,"^H",48,536873744]],["^15",[254,"^H",60,536873744]],["^15",[254,"^H",136,536873744]],["^15",[254,"^;","~u664de458-580e-4032-945d-a8e83f4490b8",536873653]],["^15",[255,"^Q","There are other types too, such as\n[[Enum]]\n[[Future]] and [[Stream]]: These types are used for [[Asynchrony]]\n[[Iterable]]\n[[Never]]\n[[dynamic]]\n[[void]]",536874093]],["^15",[255,"^O","^16",536873747]],["^15",[255,"^F",254,536873747]],["^15",[255,"^X",44,536873747]],["^15",[255,"^V",44,536873747]],["^15",[255,"^U",39,536874094]],["^15",[255,"^U",44,536874094]],["^15",[255,"^U",218,536874094]],["^15",[255,"^U",258,536874094]],["^15",[255,"^U",263,536874094]],["^15",[255,"^U",264,536874094]],["^15",[255,"^U",277,536874094]],["^15",[255,"^U",279,536874094]],["^15",[255,"^U",286,536874094]],["^15",[255,"^?",["^ "],536874093]],["^15",[255,"^H",39,536874093]],["^15",[255,"^H",218,536874093]],["^15",[255,"^H",258,536874093]],["^15",[255,"^H",263,536874093]],["^15",[255,"^H",264,536874093]],["^15",[255,"^H",277,536874093]],["^15",[255,"^H",279,536874093]],["^15",[255,"^H",286,536874093]],["^15",[255,"^;","~u664e0417-914a-4fae-a05d-fed37e628e41",536873747]],["^15",[256,"^Q","",536873752]],["^15",[256,"^O","^16",536873752]],["^15",[256,"^@",false,536873752]],["^15",[256,"^F",249,536873752]],["^15",[256,"^X",48,536873752]],["^15",[256,"^V",48,536873752]],["^15",[256,"^U",48,536873753]],["^15",[256,"^?",["^ "],536873752]],["^15",[256,"^;","~u664e042a-0e86-40cf-8711-0e61306d5b02",536873752]],["^15",[257,"^3","- The superclass to all types except [[Null]]\n-",536873756]],["^15",[257,"^18","~m1716388906540",536873755]],["^15",[257,"^Z","pages/Object.md",536873754]],["^15",[258,"^K",1716388915316,536873757]],["^15",[258,"^[",260,536873766]],["^15",[258,"^O","^16",536873761]],["^15",[258,"^@",false,536873757]],["^15",[258,"^Y","enum",536873757]],["^15",[258,"^11","Enum",536873757]],["^15",[258,"^B",1716388937261,536873781]],["^15",[258,"^;","~u664e0433-ddfd-4d02-9636-62dbdbac9471",536873757]],["^15",[259,"^Q","~``Enum``\nThe superclass of all Enums.",536873781]],["^15",[259,"^O","^16",536873762]],["^15",[259,"^@",false,536873762]],["^15",[259,"^F",262,536873785]],["^15",[259,"^X",258,536873762]],["^15",[259,"^V",258,536873762]],["^15",[259,"^U",258,536873763]],["^15",[259,"^?",["^ "],536873781]],["^15",[259,"^;","~u664e0434-7045-4158-b634-4f94c7b4694a",536873762]],["^15",[260,"^3","-\n- ``Enum``\n  The superclass of all Enums.\n-",536873788]],["^15",[260,"^18","~m1716388940396",536873787]],["^15",[260,"^Z","pages/Enum.md",536873766]],["^15",[261,"^Q","",536873781]],["^15",[261,"^O","^16",536873781]],["^15",[261,"^@",false,536873781]],["^15",[261,"^F",259,536873781]],["^15",[261,"^X",258,536873781]],["^15",[261,"^V",258,536873781]],["^15",[261,"^U",258,536873782]],["^15",[261,"^?",["^ "],536873781]],["^15",[261,"^;","~u664e0449-6840-4f99-94b9-649060f00879",536873781]],["^15",[262,"^Q","",536873785]],["^15",[262,"^O","^16",536873785]],["^15",[262,"^@",false,536873785]],["^15",[262,"^F",258,536873785]],["^15",[262,"^X",258,536873785]],["^15",[262,"^V",258,536873785]],["^15",[262,"^U",258,536873786]],["^15",[262,"^?",["^ "],536873785]],["^15",[262,"^;","~u664e044c-ba0e-4026-bc7f-4591f29bd6b4",536873785]],["^15",[263,"^K",1716388974265,536873810]],["^15",[263,"^@",false,536873810]],["^15",[263,"^Y","stream",536873810]],["^15",[263,"^11","Stream",536873810]],["^15",[263,"^B",1716388974265,536873810]],["^15",[263,"^;","~u664e046e-1e8d-4f00-804e-83483884ca21",536873810]],["^15",[264,"^K",1716389004580,536873823]],["^15",[264,"^[",283,536874046]],["^15",[264,"^O","^16",536874038]],["^15",[264,"^@",false,536873823]],["^15",[264,"^Y","iterable",536873823]],["^15",[264,"^11","Iterable",536873823]],["^15",[264,"^B",1716389273812,536874049]],["^15",[264,"^;","~u664e048c-cc92-48f0-a35b-4478e4f0bf40",536873823]],["^15",[265,"^K",1716389019505,536873833]],["^15",[265,"^[",267,536873850]],["^15",[265,"^O","^16",536873845]],["^15",[265,"^@",false,536873833]],["^15",[265,"^Y","loop",536873833]],["^15",[265,"^11","Loop",536873833]],["^15",[265,"^B",1716389037997,536873853]],["^15",[265,"^;","~u664e049b-66c5-49e0-84ba-0db35c0850e7",536873833]],["^15",[266,"^Q","for..in loop\nid:: 664e04a9-5e21-40ab-8e0c-da134a7cebfa",536873857]],["^15",[266,"^O","^16",536873846]],["^15",[266,"^@",false,536873846]],["^15",[266,"^F",265,536873846]],["^15",[266,"^X",265,536873846]],["^15",[266,"^V",265,536873846]],["^15",[266,"^U",265,536873847]],["^15",[266,"^?",["^ ","^19","664e04a9-5e21-40ab-8e0c-da134a7cebfa"],536873857]],["^15",[266,"^J",["^14",["^19"]],536873857]],["^15",[266,"^4",["^ ","^19","664e04a9-5e21-40ab-8e0c-da134a7cebfa"],536873857]],["^15",[266,"^;","~u664e04a9-5e21-40ab-8e0c-da134a7cebfa",536873846]],["^15",[267,"^3","- for..in loop\n  id:: 664e04a9-5e21-40ab-8e0c-da134a7cebfa\n-",536873859]],["^15",[267,"^18","~m1716389042921",536873858]],["^15",[267,"^Z","pages/Loop.md",536873850]],["^15",[268,"^Q","",536873853]],["^15",[268,"^O","^16",536873853]],["^15",[268,"^@",false,536873853]],["^15",[268,"^F",266,536873853]],["^15",[268,"^X",265,536873853]],["^15",[268,"^V",265,536873853]],["^15",[268,"^U",265,536873854]],["^15",[268,"^?",["^ "],536873853]],["^15",[268,"^;","~u664e04ad-79ac-4671-b4be-f7e7c4532c82",536873853]],["^15",[269,"^Q","Generator Function\nid:: 664e04b9-15ba-49d3-a76a-60e907ef7d61",536873874]],["^15",[269,"^O","^16",536873866]],["^15",[269,"^@",false,536873866]],["^15",[269,"^F",27,536873866]],["^15",[269,"^X",27,536873866]],["^15",[269,"^V",27,536873866]],["^15",[269,"^U",27,536873867]],["^15",[269,"^?",["^ ","^19","664e04b9-15ba-49d3-a76a-60e907ef7d61"],536873874]],["^15",[269,"^J",["^14",["^19"]],536873874]],["^15",[269,"^4",["^ ","^19","664e04b9-15ba-49d3-a76a-60e907ef7d61"],536873874]],["^15",[269,"^;","~u664e04b9-15ba-49d3-a76a-60e907ef7d61",536873866]],["^15",[270,"^Q","",536873869]],["^15",[270,"^O","^16",536873869]],["^15",[270,"^@",false,536873869]],["^15",[270,"^F",269,536873869]],["^15",[270,"^X",27,536873869]],["^15",[270,"^V",27,536873869]],["^15",[270,"^U",27,536873870]],["^15",[270,"^?",["^ "],536873869]],["^15",[270,"^;","~u664e04bf-24c7-4f01-8ebc-1b75d466a944",536873869]],["^15",[271,"^3","- Generator Function\n  id:: 664e04b9-15ba-49d3-a76a-60e907ef7d61\n-",536873876]],["^15",[271,"^18","~m1716389059111",536873875]],["^15",[271,"^Z","pages/Function.md",536873871]],["^15",[272,"^U",44,536873878]],["^15",[272,"^U",269,536873878]],["^15",[273,"^U",44,536873885]],["^15",[273,"^U",269,536873885]],["^15",[274,"^U",44,536873892]],["^15",[274,"^U",269,536873892]],["^15",[277,"^K",1716389097804,536873921]],["^15",[277,"^[",281,536874033]],["^15",[277,"^O","^16",536874028]],["^15",[277,"^@",false,536873921]],["^15",[277,"^Y","never",536873921]],["^15",[277,"^11","Never",536873921]],["^15",[277,"^B",1716389261417,536874032]],["^15",[277,"^;","~u664e04e9-0404-4667-abb8-fc27189cbbb5",536873921]],["^15",[279,"^K",1716389207682,536873983]],["^15",[279,"^[",285,536874062]],["^15",[279,"^O","^16",536874056]],["^15",[279,"^@",false,536873983]],["^15",[279,"^Y","dynamic",536873983]],["^15",[279,"^11","dynamic",536873983]],["^15",[279,"^B",1716389284832,536874065]],["^15",[279,"^;","~u664e0557-4d93-465d-a684-e3a5ef78d006",536873983]],["^15",[280,"^Q","Indicates the given expression can never finish, like for functions that never finish.",536874032]],["^15",[280,"^O","^16",536874029]],["^15",[280,"^@",false,536874029]],["^15",[280,"^F",277,536874029]],["^15",[280,"^X",277,536874029]],["^15",[280,"^V",277,536874029]],["^15",[280,"^U",277,536874030]],["^15",[280,"^?",["^ "],536874032]],["^15",[280,"^;","~u664e058c-0168-415e-8f7a-ebaf0fe534e4",536874029]],["^15",[281,"^3","- Indicates the given expression can never finish, like for functions that never finish.",536874035]],["^15",[281,"^18","~m1716389261627",536874034]],["^15",[281,"^Z","pages/Never.md",536874033]],["^15",[282,"^Q","Used in ((664e04a9-5e21-40ab-8e0c-da134a7cebfa)) and in synchronous ((664e04b9-15ba-49d3-a76a-60e907ef7d61))s",536874049]],["^15",[282,"^O","^16",536874039]],["^15",[282,"^@",false,536874039]],["^15",[282,"^F",264,536874039]],["^15",[282,"^X",264,536874039]],["^15",[282,"^V",264,536874039]],["^15",[282,"^U",264,536874045]],["^15",[282,"^U",266,536874045]],["^15",[282,"^U",269,536874045]],["^15",[282,"^?",["^ "],536874049]],["^15",[282,"^H",266,536874049]],["^15",[282,"^H",269,536874049]],["^15",[282,"^;","~u664e0596-9636-418a-b423-accb4456758e",536874039]],["^15",[283,"^3","- Used in ((664e04a9-5e21-40ab-8e0c-da134a7cebfa)) and in synchronous ((664e04b9-15ba-49d3-a76a-60e907ef7d61))s",536874051]],["^15",[283,"^18","~m1716389274709",536874050]],["^15",[283,"^Z","pages/Iterable.md",536874046]],["^15",[284,"^Q","Indicates we want to disable static type checking for a [[Variable]], preferrable to use [[Object]] or [[Object]]? instead.",536874065]],["^15",[284,"^O","^16",536874057]],["^15",[284,"^@",false,536874057]],["^15",[284,"^F",279,536874057]],["^15",[284,"^X",279,536874057]],["^15",[284,"^V",279,536874057]],["^15",[284,"^U",37,536874061]],["^15",[284,"^U",48,536874061]],["^15",[284,"^U",279,536874061]],["^15",[284,"^?",["^ "],536874065]],["^15",[284,"^H",37,536874065]],["^15",[284,"^H",48,536874065]],["^15",[284,"^;","~u664e05a2-eaed-4efa-8a8e-7bb9106673f5",536874057]],["^15",[285,"^3","- Indicates we want to disable static type checking for a [[Variable]], preferrable to use [[Object]] or [[Object]]? instead.",536874067]],["^15",[285,"^18","~m1716389285805",536874066]],["^15",[285,"^Z","pages/dynamic.md",536874062]],["^15",[286,"^K",1716389344135,536874093]],["^15",[286,"^[",288,536874113]],["^15",[286,"^O","^16",536874107]],["^15",[286,"^@",false,536874093]],["^15",[286,"^Y","void",536874093]],["^15",[286,"^11","void",536874093]],["^15",[286,"^B",1716389404876,536874142]],["^15",[286,"^;","~u664e05e0-a8bd-42f3-abfd-494822485204",536874093]],["^15",[287,"^Q","This type represents that its value is never used, used for [[Function]]s that don't return anything or their return types don't matter.",536874142]],["^15",[287,"^O","^16",536874108]],["^15",[287,"^@",false,536874108]],["^15",[287,"^F",286,536874108]],["^15",[287,"^X",286,536874108]],["^15",[287,"^V",286,536874108]],["^15",[287,"^U",27,536874139]],["^15",[287,"^U",286,536874139]],["^15",[287,"^?",["^ "],536874142]],["^15",[287,"^H",27,536874142]],["^15",[287,"^;","~u664e05f8-a830-49e2-bf35-751b77b49e7b",536874108]],["^15",[288,"^3","- This type represents that its value is never used, used for [[Function]]s that don't return anything or their return types don't matter.\n-",536874146]],["^15",[288,"^18","~m1716389405648",536874145]],["^15",[288,"^Z","pages/void.md",536874113]],["^15",[289,"^Q","",536874143]],["^15",[289,"^O","^16",536874143]],["^15",[289,"^@",false,536874143]],["^15",[289,"^F",287,536874143]],["^15",[289,"^X",286,536874143]],["^15",[289,"^V",286,536874143]],["^15",[289,"^U",286,536874144]],["^15",[289,"^?",["^ "],536874143]],["^15",[289,"^;","~u664e061d-4c5a-40e7-9c6b-97c22da9b8ea",536874143]],["^15",[290,"^K",1716389444139,536874151]],["^15",[290,"^[",346,536875389]],["^15",[290,"^O","^16",536875384]],["^15",[290,"^@",false,536874151]],["^15",[290,"^Y","bool",536874151]],["^15",[290,"^11","bool",536874151]],["^15",[290,"^B",1716459502782,536875407]],["^15",[290,"^;","~u664e0644-4daa-44b9-9122-591901b6ba07",536874151]],["^15",[291,"^K",1716389457801,536874155]],["^15",[291,"^[",300,536874356]],["^15",[291,"^O","^16",536874351]],["^15",[291,"^@",false,536874155]],["^15",[291,"^Y","double",536874155]],["^15",[291,"^11","double",536874155]],["^15",[291,"^B",1716459773169,536875593]],["^15",[291,"^;","~u664e0651-3284-42c0-9752-8f5535a0f623",536874155]],["^15",[292,"^K",1716389457802,536874155]],["^15",[292,"^[",295,536874204]],["^15",[292,"^O","^16",536874199]],["^15",[292,"^@",false,536874155]],["^15",[292,"^Y","int",536874155]],["^15",[292,"^11","int",536874155]],["^15",[292,"^B",1716459764468,536875584]],["^15",[292,"^;","~u664e0651-164c-40b6-a673-63053a93832c",536874155]],["^15",[293,"^Q","[[Collection Type]]s \nThese types collect multiple values.",536876562]],["^15",[293,"^O","^16",536874185]],["^15",[293,"^F",248,536874185]],["^15",[293,"^X",44,536874185]],["^15",[293,"^V",44,536874185]],["^15",[293,"^U",44,536876558]],["^15",[293,"^U",134,536876558]],["^15",[293,"^?",["^ "],536876562]],["^15",[293,"^H",134,536876562]],["^15",[293,"^;","~u664e0a64-e501-454a-8a70-0578c70ebe3b",536874185]],["^15",[294,"^Q","64-bit integers, on native platforms, from $$-2^{63}$$ to $$2^{63}-1$$. On browsers ints are represented as [[Javascript]] numbers, so range is  $$-2^{53}$$ to $$2^{53}-1$$",536874344]],["^15",[294,"^O","^16",536874200]],["^15",[294,"^@",false,536874200]],["^15",[294,"^F",304,536874390]],["^15",[294,"^X",292,536874200]],["^15",[294,"^V",292,536874200]],["^15",[294,"^U",292,536874326]],["^15",[294,"^U",297,536874326]],["^15",[294,"^?",["^ "],536874344]],["^15",[294,"^H",297,536874344]],["^15",[294,"^;","~u664e0a70-e582-427e-aaf0-1f8020b49012",536874200]],["^15",[295,"^3","- superclass: [[num]]\n- 64-bit integers, on native platforms, from $$-2^{63}$$ to $$2^{63}-1$$. On browsers ints are represented as [[Javascript]] numbers, so range is  $$-2^{53}$$ to $$2^{53}-1$$\n- `nums` that don't have a decimal point.\n  Define them with literals like so\n  ```dart\n  var x =1;\n  var y = 0xDEADBEEF;\n  ```\n- Has the default bitwise [[Operator]]s.\n  FE:\n  ```dart\n  assert((3 & 4) == 0); // 0011 & 0100 == 0000\n  ```\n- Can't hold non-integer values, or [[NaN]].\n-\n-\n-",536875587]],["^15",[295,"^18","~m1716459764956",536875586]],["^15",[295,"^Z","pages/int.md",536874204]],["^15",[296,"^Q","",536874267]],["^15",[296,"^O","^16",536874267]],["^15",[296,"^@",false,536874267]],["^15",[296,"^F",322,536874788]],["^15",[296,"^X",292,536874267]],["^15",[296,"^V",292,536874267]],["^15",[296,"^U",292,536874268]],["^15",[296,"^?",["^ "],536874267]],["^15",[296,"^;","~u664e0a99-d12d-43ea-aecd-56069cf71e2b",536874267]],["^15",[297,"^K",1716390606393,536874325]],["^15",[297,"^@",false,536874325]],["^15",[297,"^Y","javascript",536874325]],["^15",[297,"^11","Javascript",536874325]],["^15",[297,"^B",1716390606393,536874325]],["^15",[297,"^;","~u664e0ace-c521-481c-a8be-4e9501a3ea2a",536874325]],["^15",[298,"^Q","~`nums` that don't have a decimal point.\nDefine them with literals like so\n```dart\nvar x =1;\nvar y = 0xDEADBEEF;\n```",536874556]],["^15",[298,"^O","^16",536874347]],["^15",[298,"^@",false,536874347]],["^15",[298,"^F",294,536874347]],["^15",[298,"^X",292,536874347]],["^15",[298,"^V",292,536874534]],["^15",[298,"^U",292,536874544]],["^15",[298,"^?",["^ "],536874556]],["^15",[298,"^;","~u664e0aee-7cf6-41da-8b37-693e0f33b18e",536874347]],["^15",[299,"^Q","64-bit double precision numbers as represented in IEEE 754.",536874368]],["^15",[299,"^O","^16",536874352]],["^15",[299,"^@",false,536874352]],["^15",[299,"^F",302,536874375]],["^15",[299,"^X",291,536874352]],["^15",[299,"^V",291,536874352]],["^15",[299,"^U",291,536874353]],["^15",[299,"^?",["^ "],536874368]],["^15",[299,"^;","~u664e0b03-f3c9-4d65-ae55-81f202db49c8",536874352]],["^15",[300,"^3","- superclass: [[num]]\n- 64-bit double precision numbers as represented in IEEE 754.\n- `nums` that have a decimal point.\n  FE:\n  ```dart\n  var x =1.1;\n  var y = 1.42e5;\n  ```\n  supports `e` which is `1.42 * 10^5`.\n- ints are implicitly converted to doubles in a double [[Variable]].\n- Can hold [[NaN]].\n-",536875596]],["^15",[300,"^18","~m1716459774012",536875595]],["^15",[300,"^Z","pages/double.md",536874356]],["^15",[301,"^Q","~`nums` that have a decimal point.\nFE:\n```dart\nvar x =1.1;\nvar y = 1.42e5;\n```\nsupports `e` which is `1.42 * 10^5`.",536874623]],["^15",[301,"^O","^16",536874369]],["^15",[301,"^@",false,536874369]],["^15",[301,"^F",299,536874369]],["^15",[301,"^X",291,536874369]],["^15",[301,"^V",291,536874369]],["^15",[301,"^U",291,536874370]],["^15",[301,"^?",["^ "],536874623]],["^15",[301,"^;","~u664e0b18-3349-437d-9b01-6b37633b2fd6",536874369]],["^15",[302,"^Q","superclass: [[num]]",536874385]],["^15",[302,"^O","^16",536874375]],["^15",[302,"^@",false,536874375]],["^15",[302,"^F",291,536874375]],["^15",[302,"^X",291,536874375]],["^15",[302,"^V",291,536874375]],["^15",[302,"^U",291,536874386]],["^15",[302,"^U",303,536874386]],["^15",[302,"^?",["^ "],536874385]],["^15",[302,"^H",303,536874385]],["^15",[302,"^;","~u664e0b46-4ca5-4bae-95aa-35313048d59a",536874375]],["^15",[303,"^K",1716390733272,536874385]],["^15",[303,"^[",306,536874441]],["^15",[303,"^O","^16",536874435]],["^15",[303,"^@",false,536874385]],["^15",[303,"^Y","num",536874385]],["^15",[303,"^11","num",536874385]],["^15",[303,"^B",1716459751493,536875577]],["^15",[303,"^;","~u664e0b4d-b192-4a18-a86e-2ef96c1935c1",536874385]],["^15",[304,"^Q","superclass: [[num]]",536874394]],["^15",[304,"^O","^16",536874390]],["^15",[304,"^@",false,536874390]],["^15",[304,"^F",292,536874390]],["^15",[304,"^X",292,536874390]],["^15",[304,"^V",292,536874390]],["^15",[304,"^U",292,536874395]],["^15",[304,"^U",303,536874395]],["^15",[304,"^?",["^ "],536874394]],["^15",[304,"^H",303,536874394]],["^15",[304,"^;","~u664e0b52-f1fd-4755-9dfc-e7309f538a1a",536874390]],["^15",[305,"^Q","Both [[int]] and [[double]] are subtypes of this [[Data Type]], this is the type that implements basic operations like Arithmetic [[Operator]]s. It also defines other functions like `abs()`, `ceil()`,  `floor()`.\n\nOther numerical methods can be found in `dart:math` [[Library]]",536874515]],["^15",[305,"^O","^16",536874436]],["^15",[305,"^@",false,536874436]],["^15",[305,"^F",303,536874436]],["^15",[305,"^X",303,536874436]],["^15",[305,"^V",303,536874436]],["^15",[305,"^U",44,536874516]],["^15",[305,"^U",51,536874516]],["^15",[305,"^U",100,536874516]],["^15",[305,"^U",291,536874516]],["^15",[305,"^U",292,536874516]],["^15",[305,"^U",303,536874516]],["^15",[305,"^?",["^ "],536874515]],["^15",[305,"^H",44,536874515]],["^15",[305,"^H",51,536874515]],["^15",[305,"^H",100,536874515]],["^15",[305,"^H",291,536874515]],["^15",[305,"^H",292,536874515]],["^15",[305,"^;","~u664e0b80-aa6b-4fc7-aedf-7481f2cb9970",536874436]],["^15",[306,"^3","- Both [[int]] and [[double]] are subtypes of this [[Data Type]], this is the type that implements basic operations like Arithmetic [[Operator]]s. It also defines other functions like `abs()`, `ceil()`,  `floor()`.\n  \n  Other numerical methods can be found in `dart:math` [[Library]]\n- ``num``\n  type can store both ints and doubles\n  FE:\n  ```dart\n  num x = 1;\n  x = 1.5; //works\n  ```\n- [[Conversion]]\n- Literal numbers (numbers written manually) are compile-time constants. And [[Operator]]s that have compile-time constant operands also evaluate to compile-time constants.\n- There's a special value, [[NaN]] that only ``num`` and ``double`` can hold. \n  FE:\n  ```dart\n  double x = 0/0;\n  ```\n  stores `NaN` in x. We can check if a `double` has an [[NaN]] with `<var>.isNaN` and it returns a [[bool]].\n  \n  For [[int]], this results in an ``IntegerDivisionByZero`` [[Exception]].\n-\n-\n-",536875580]],["^15",[306,"^18","~m1716459751807",536875579]],["^15",[306,"^Z","pages/num.md",536874441]],["^15",[307,"^K",1716402627442,536874461]],["^15",[307,"^O","^16",536874461]],["^15",[307,"^N",20240523,536874461]],["^15",[307,"^@",true,536874461]],["^15",[307,"^Y","may 23rd, 2024",536874461]],["^15",[307,"^11","May 23rd, 2024",536874461]],["^15",[307,"^B",1716402627442,536874461]],["^15",[307,"^;","~u664e39c3-cc17-4300-86e7-8f3e3bbecb9b",536874461]],["^15",[308,"^Q","",536874462]],["^15",[308,"^O","^16",536874462]],["^15",[308,"^N",20240523,536874462]],["^15",[308,"^@",true,536874462]],["^15",[308,"^F",307,536874462]],["^15",[308,"^X",307,536874462]],["^15",[308,"^V",307,536874462]],["^15",[308,"^U",307,536874463]],["^15",[308,"^?",["^ "],536874462]],["^15",[308,"^;","~u664e39c3-6923-4f06-ae91-ff32305ecfe9",536874462]],["^15",[309,"^Q","",536874502]],["^15",[309,"^O","^16",536874502]],["^15",[309,"^@",false,536874502]],["^15",[309,"^F",350,536875540]],["^15",[309,"^X",303,536874502]],["^15",[309,"^V",303,536874502]],["^15",[309,"^U",303,536874503]],["^15",[309,"^?",["^ "],536874502]],["^15",[309,"^;","~u664eed6a-01aa-4958-9dd1-c80962a5b2b0",536874502]],["^15",[310,"^Q","~``num``\ntype can store both ints and doubles\nFE:\n```dart\nnum x = 1;\nx = 1.5; //works\n```",536874642]],["^15",[310,"^O","^16",536874519]],["^15",[310,"^@",false,536874519]],["^15",[310,"^F",305,536874519]],["^15",[310,"^X",303,536874519]],["^15",[310,"^V",303,536874519]],["^15",[310,"^U",303,536874520]],["^15",[310,"^?",["^ "],536874642]],["^15",[310,"^;","~u664eed85-8cc1-4d59-aaa5-92f317d2581a",536874519]],["^15",[311,"^Q","Has the default bitwise [[Operator]]s.\nFE:\n```dart\nassert((3 & 4) == 0); // 0011 & 0100 == 0000\n```",536874804]],["^15",[311,"^O","^16",536874559]],["^15",[311,"^@",false,536874559]],["^15",[311,"^F",298,536874559]],["^15",[311,"^X",292,536874559]],["^15",[311,"^V",292,536874559]],["^15",[311,"^U",51,536874779]],["^15",[311,"^U",292,536874779]],["^15",[311,"^?",["^ "],536874804]],["^15",[311,"^H",51,536874804]],["^15",[311,"^;","~u664eedb7-b9dc-4537-a044-ed1055c0bab2",536874559]],["^15",[312,"^Q","ints are implicitly converted to doubles in a double [[Variable]].",536874650]],["^15",[312,"^O","^16",536874623]],["^15",[312,"^@",false,536874623]],["^15",[312,"^F",301,536874623]],["^15",[312,"^X",291,536874623]],["^15",[312,"^V",291,536874623]],["^15",[312,"^U",37,536874651]],["^15",[312,"^U",291,536874651]],["^15",[312,"^?",["^ "],536874650]],["^15",[312,"^H",37,536874650]],["^15",[312,"^;","~u664eee36-abf7-4e00-ae7d-8119948d8301",536874623]],["^15",[313,"^Q","[[Conversion]]",536874672]],["^15",[313,"^O","^16",536874645]],["^15",[313,"^@",false,536874645]],["^15",[313,"^F",310,536874645]],["^15",[313,"^X",303,536874645]],["^15",[313,"^V",303,536874645]],["^15",[313,"^U",303,536874673]],["^15",[313,"^U",315,536874673]],["^15",[313,"^?",["^ "],536874672]],["^15",[313,"^H",315,536874672]],["^15",[313,"^;","~u664ef05e-276c-4392-a8ad-e98cdf1e9ef1",536874645]],["^15",[314,"^Q","Can hold [[NaN]].",536875593]],["^15",[314,"^O","^16",536874650]],["^15",[314,"^@",false,536874650]],["^15",[314,"^F",312,536874650]],["^15",[314,"^X",291,536874650]],["^15",[314,"^V",291,536874650]],["^15",[314,"^U",291,536875590]],["^15",[314,"^U",349,536875590]],["^15",[314,"^?",["^ "],536875593]],["^15",[314,"^H",349,536875593]],["^15",[314,"^;","~u664ef06f-b8e6-40c0-9eea-3e3bcd3f59b1",536874650]],["^15",[315,"^K",1716449439342,536874672]],["^15",[315,"^[",318,536874686]],["^15",[315,"^O","^16",536874680]],["^15",[315,"^@",false,536874672]],["^15",[315,"^Y","conversion",536874672]],["^15",[315,"^11","Conversion",536874672]],["^15",[315,"^B",1716449517354,536874762]],["^15",[315,"^;","~u664ef09f-5402-4826-bf16-e1799c760d7b",536874672]],["^15",[316,"^Q","Literal numbers (numbers written manually) are compile-time constants. And [[Operator]]s that have compile-time constant operands also evaluate to compile-time constants.",536874846]],["^15",[316,"^O","^16",536874674]],["^15",[316,"^@",false,536874674]],["^15",[316,"^F",313,536874674]],["^15",[316,"^X",303,536874674]],["^15",[316,"^V",303,536874674]],["^15",[316,"^U",51,536874834]],["^15",[316,"^U",303,536874834]],["^15",[316,"^?",["^ "],536874846]],["^15",[316,"^H",51,536874846]],["^15",[316,"^;","~u664ef09f-fed6-4f12-a303-f1730e7e717d",536874674]],["^15",[317,"^Q","[[String]] to [[int]]\nWe can use ``int.parse(<int>)``",536874699]],["^15",[317,"^O","^16",536874681]],["^15",[317,"^@",false,536874681]],["^15",[317,"^F",315,536874681]],["^15",[317,"^X",315,536874681]],["^15",[317,"^V",315,536874681]],["^15",[317,"^U",196,536874690]],["^15",[317,"^U",292,536874690]],["^15",[317,"^U",315,536874690]],["^15",[317,"^?",["^ "],536874699]],["^15",[317,"^H",196,536874699]],["^15",[317,"^H",292,536874699]],["^15",[317,"^;","~u664ef0a1-97aa-4248-af19-f1ca68aecba5",536874681]],["^15",[318,"^3","- [[String]] to [[int]]\n  We can use ``int.parse(<int>)``\n- [[int]] to [[String]]\n  We can use ``<int>.toString()``\n- [[double]] to fixed point decimal [[String]]\n  ``<double>.toStringFixed()``\n-",536874765]],["^15",[318,"^18","~m1716449517649",536874766]],["^15",[318,"^Z","pages/Conversion.md",536874686]],["^15",[319,"^Q","[[int]] to [[String]]\nWe can use ``<int>.toString()``",536874718]],["^15",[319,"^O","^16",536874700]],["^15",[319,"^@",false,536874700]],["^15",[319,"^F",317,536874700]],["^15",[319,"^X",315,536874700]],["^15",[319,"^V",315,536874700]],["^15",[319,"^U",196,536874711]],["^15",[319,"^U",292,536874711]],["^15",[319,"^U",315,536874711]],["^15",[319,"^?",["^ "],536874718]],["^15",[319,"^H",196,536874718]],["^15",[319,"^H",292,536874718]],["^15",[319,"^;","~u664ef0b3-ad82-4522-8c50-6ece3163f30e",536874700]],["^15",[320,"^Q","[[double]] to fixed point decimal [[String]]\n``<double>.toStringFixed()``",536874762]],["^15",[320,"^O","^16",536874721]],["^15",[320,"^@",false,536874721]],["^15",[320,"^F",319,536874721]],["^15",[320,"^X",315,536874721]],["^15",[320,"^V",315,536874721]],["^15",[320,"^U",196,536874743]],["^15",[320,"^U",291,536874743]],["^15",[320,"^U",315,536874743]],["^15",[320,"^?",["^ "],536874762]],["^15",[320,"^H",196,536874762]],["^15",[320,"^H",291,536874762]],["^15",[320,"^;","~u664ef0c1-4a71-4cf4-82fb-ee4407088c25",536874721]],["^15",[321,"^Q","",536874762]],["^15",[321,"^O","^16",536874762]],["^15",[321,"^@",false,536874762]],["^15",[321,"^F",320,536874762]],["^15",[321,"^X",315,536874762]],["^15",[321,"^V",315,536874762]],["^15",[321,"^U",315,536874763]],["^15",[321,"^?",["^ "],536874762]],["^15",[321,"^;","~u664ef0ed-9927-4fad-829d-23d8f9c86d8c",536874762]],["^15",[322,"^Q","",536874788]],["^15",[322,"^O","^16",536874788]],["^15",[322,"^@",false,536874788]],["^15",[322,"^F",352,536875584]],["^15",[322,"^X",292,536874788]],["^15",[322,"^V",292,536874788]],["^15",[322,"^U",292,536874789]],["^15",[322,"^?",["^ "],536874788]],["^15",[322,"^;","~u664ef11e-76e5-4e94-ac5c-7a2528dfc9ca",536874788]],["^15",[323,"^Q","Can't hold non-integer values, or [[NaN]].",536875584]],["^15",[323,"^O","^16",536874807]],["^15",[323,"^@",false,536874807]],["^15",[323,"^F",311,536874807]],["^15",[323,"^X",292,536874807]],["^15",[323,"^V",292,536874807]],["^15",[323,"^U",292,536875429]],["^15",[323,"^U",349,536875429]],["^15",[323,"^?",["^ "],536875584]],["^15",[323,"^H",349,536875584]],["^15",[323,"^;","~u664ef13f-aff5-4700-8178-933f26430322",536874807]],["^15",[324,"^Q","There's a special value, [[NaN]] that only ``num`` and ``double`` can hold. \nFE:\n```dart\ndouble x = 0/0;\n```\nstores `NaN` in x. We can check if a `double` has an [[NaN]] with `<var>.isNaN` and it returns a [[bool]].\n\nFor [[int]], this results in an ``IntegerDivisionByZero`` [[Exception]].",536875577]],["^15",[324,"^O","^16",536874847]],["^15",[324,"^@",false,536874847]],["^15",[324,"^F",316,536874847]],["^15",[324,"^X",303,536874847]],["^15",[324,"^V",303,536874847]],["^15",[324,"^U",147,536875573]],["^15",[324,"^U",290,536875573]],["^15",[324,"^U",292,536875573]],["^15",[324,"^U",303,536875573]],["^15",[324,"^U",349,536875573]],["^15",[324,"^?",["^ "],536875577]],["^15",[324,"^H",147,536875577]],["^15",[324,"^H",290,536875577]],["^15",[324,"^H",292,536875577]],["^15",[324,"^H",349,536875577]],["^15",[324,"^;","~u664ef177-0731-45de-9771-5e35a5c83b67",536874847]],["^15",[325,"^Q","Holds sequence of UTF-16 code units.",536874870]],["^15",[325,"^O","^16",536874854]],["^15",[325,"^@",false,536874854]],["^15",[325,"^F",196,536874854]],["^15",[325,"^X",196,536874854]],["^15",[325,"^V",196,536874854]],["^15",[325,"^U",196,536874855]],["^15",[325,"^?",["^ "],536874870]],["^15",[325,"^;","~u664ef181-43d9-48ff-85bc-093662c592da",536874854]],["^15",[326,"^3","- Holds sequence of UTF-16 code units.\n- Defined with ``' '`` or ``\" \"``\n  FE:\n  ```dart\n  var yo = \"Hiiiii\";\n  ```\n- Multi-line strings can be defined with ``''' '''`` or ``\"\"\" \"\"\"``\n  FE:\n  ```dart\n  var x = \"\"\" Yoooo\n  asssss \n  nyaaa\"\"\"; //puts the string in this way in x.\n  ```\n- Escape `'` or `\"` with `\\`.\n- Expressions can be embedded in strings with just `$<var>` for [[Variable]]s or `${<expression>}` for expressions, this is how string interpolation works in Dart.\n  FE:\n  ```dart\n  var x = \"Yoo ${2+3}\"; //is Yoo 5\n  ```\n- Strings can be broken into multiple lines without need to be concatenated\n  FE:\n  ```dart\n  var x = 'Hiii'\n             ' Yoo'; //puts Hiii Yoo in x\n  ```\n  ofcourse we can concatenate too\n  ```dart\n  var x = 'Hiii' +\n             ' Yoo'; //puts Hiii Yoo in x\n  ``` \n  works but voids [[Dart Linter Rules]]\n- Raw string\n  Prefixing ``r`` to any string literal. \n  Doesn't parse any expression or escape characters in it.\n- Literal Strings are [[Compile-Time Constant]], and when they have interpolated values, they are still [[Compile-Time Constant]]s as long as any interpolated values in them are also compile-time constants and evaluate to a constant [[String]], [[Null]], [[num]] or a [[bool]] value.\n  That is,\n  \n  FE:\n  ```dart\n  // These work in a const string.\n  const aConstNum = 0;\n  const aConstBool = true;\n  const aConstString = 'a constant string';\n  \n  // These do NOT work in a const string.\n  var aNum = 0;\n  var aBool = true;\n  var aString = 'a string';\n  const aConstList = [1, 2, 3];\n  \n  const validConstString = '$aConstNum $aConstBool $aConstString';\n  // const invalidConstString = '$aNum $aBool $aString $aConstList';\n  ```\n- Unicode values\n  Unicode is a system that maps user-perceived characters (called grapheme clusters, FE: '😂' which we perceive as a single character is a grapheme cluster) to unique integer values, these integer values are called runes.\n   \n  We can directly use unicode integer values in Dart Strings with `'\\uXXXX'` within `' '` or `\" \"` where XXXX is the 4 digit unicode integer value, if it's more or less than 4 digits we use `'\\u{<value>}'`.\n  \n  We can use the [Characters Package](https://pub.dev/packages/characters) to manipulate grapheme clusters because unlike normal string characters, a grapheme cluster can have multiple bytes (and hence string indices) for it. \n  \n  FE:\n  ```dart\n  import 'package:characters/characters.dart';\n  \n  void main() {\n    var hi = 'Hi 🇩🇰';\n    print(hi);\n    print('The end of the string: ${hi.substring(hi.length - 1)}'); //prints ???\n    print('The last character: ${hi.characters.last}'); //prints 🇩🇰\n  }\n  ```\n  Here even though both methods are accessing the last character, one is accessing the literal last character and the other is accessing the actual user-defined/perceived last character (aka grapheme cluster).\n-\n-\n-\n-\n-",536875969]],["^15",[326,"^18","~m1716535709041",536875970]],["^15",[326,"^Z","pages/String.md",536874858]],["^15",[327,"^Q","Defined with ``' '`` or ``\" \"``\nFE:\n```dart\nvar yo = \"Hiiiii\";\n```",536874953]],["^15",[327,"^O","^16",536874873]],["^15",[327,"^@",false,536874873]],["^15",[327,"^F",325,536874873]],["^15",[327,"^X",196,536874873]],["^15",[327,"^V",196,536874873]],["^15",[327,"^U",196,536874874]],["^15",[327,"^?",["^ "],536874953]],["^15",[327,"^;","~u664ef195-35b5-4909-9c2b-23cf29aa2690",536874873]],["^15",[328,"^Q","",536874899]],["^15",[328,"^O","^16",536874899]],["^15",[328,"^@",false,536874899]],["^15",[328,"^F",331,536875006]],["^15",[328,"^X",196,536874899]],["^15",[328,"^V",196,536874899]],["^15",[328,"^U",196,536874900]],["^15",[328,"^?",["^ "],536874899]],["^15",[328,"^;","~u664ef206-80d9-438c-9952-fccc38b47532",536874899]],["^15",[329,"^Q","Escape `'` or `\"` with `\\`.",536874929]],["^15",[329,"^O","^16",536874903]],["^15",[329,"^@",false,536874903]],["^15",[329,"^F",337,536875196]],["^15",[329,"^X",196,536874903]],["^15",[329,"^V",196,536874903]],["^15",[329,"^U",196,536874904]],["^15",[329,"^?",["^ "],536875196]],["^15",[329,"^;","~u664ef20b-1e6a-40a8-b214-1cb6aff2ab27",536874903]],["^15",[330,"^Q","Expressions can be embedded in strings with just `$<var>` for [[Variable]]s or `${<expression>}` for expressions, this is how string interpolation works in Dart.\nFE:\n```dart\nvar x = \"Yoo ${2+3}\"; //is Yoo 5\n```",536875034]],["^15",[330,"^O","^16",536874929]],["^15",[330,"^@",false,536874929]],["^15",[330,"^F",329,536874929]],["^15",[330,"^X",196,536874929]],["^15",[330,"^V",196,536874929]],["^15",[330,"^U",37,536874988]],["^15",[330,"^U",196,536874988]],["^15",[330,"^?",["^ "],536875034]],["^15",[330,"^H",37,536875034]],["^15",[330,"^;","~u664ef217-747f-424c-8967-1a075e79be44",536874929]],["^15",[331,"^Q","",536875006]],["^15",[331,"^O","^16",536875006]],["^15",[331,"^@",false,536875006]],["^15",[331,"^F",333,536875086]],["^15",[331,"^X",196,536875006]],["^15",[331,"^V",196,536875006]],["^15",[331,"^U",196,536875007]],["^15",[331,"^?",["^ "],536875006]],["^15",[331,"^;","~u664ef266-52db-4606-91d4-5780c4c4677b",536875006]],["^15",[332,"^Q","Strings can be broken into multiple lines without need to be concatenated\nFE:\n```dart\nvar x = 'Hiii'\n           ' Yoo'; //puts Hiii Yoo in x\n```\nofcourse we can concatenate too\n```dart\nvar x = 'Hiii' +\n           ' Yoo'; //puts Hiii Yoo in x\n``` \nworks but voids [[Dart Linter Rules]]",536875115]],["^15",[332,"^O","^16",536875037]],["^15",[332,"^@",false,536875037]],["^15",[332,"^F",330,536875037]],["^15",[332,"^X",196,536875037]],["^15",[332,"^V",196,536875037]],["^15",[332,"^U",196,536875116]],["^15",[332,"^U",335,536875116]],["^15",[332,"^?",["^ "],536875115]],["^15",[332,"^H",335,536875115]],["^15",[332,"^;","~u664ef27a-0c56-4b80-9c39-30019c4f4b26",536875037]],["^15",[333,"^Q","",536875086]],["^15",[333,"^O","^16",536875086]],["^15",[333,"^@",false,536875086]],["^15",[333,"^F",334,536875105]],["^15",[333,"^X",196,536875086]],["^15",[333,"^V",196,536875086]],["^15",[333,"^U",196,536875087]],["^15",[333,"^?",["^ "],536875086]],["^15",[333,"^;","~u664ef2a8-23ab-4e41-aea9-351cee4a0a6e",536875086]],["^15",[334,"^Q","",536875105]],["^15",[334,"^O","^16",536875105]],["^15",[334,"^@",false,536875105]],["^15",[334,"^F",356,536875966]],["^15",[334,"^X",196,536875105]],["^15",[334,"^V",196,536875105]],["^15",[334,"^U",196,536875106]],["^15",[334,"^?",["^ "],536875105]],["^15",[334,"^;","~u664ef2f3-bfb3-4d7b-b585-9672c61fcb58",536875105]],["^15",[335,"^K",1716450053207,536875115]],["^15",[335,"^@",false,536875115]],["^15",[335,"^Y","dart linter rules",536875115]],["^15",[335,"^11","Dart Linter Rules",536875115]],["^15",[335,"^B",1716450053207,536875115]],["^15",[335,"^;","~u664ef305-b974-4a09-a921-27956443b8ef",536875115]],["^15",[336,"^Q","Raw string\nPrefixing ``r`` to any string literal. \nDoesn't parse any expression or escape characters in it.",536875232]],["^15",[336,"^O","^16",536875115]],["^15",[336,"^@",false,536875115]],["^15",[336,"^F",332,536875115]],["^15",[336,"^X",196,536875115]],["^15",[336,"^V",196,536875115]],["^15",[336,"^U",196,536875116]],["^15",[336,"^?",["^ "],536875232]],["^15",[336,"^;","~u664ef305-9bd2-4a9e-8340-e29a2f9429c0",536875115]],["^15",[337,"^Q","Multi-line strings can be defined with ``''' '''`` or ``\"\"\" \"\"\"``\nFE:\n```dart\nvar x = \"\"\" Yoooo\nasssss \nnyaaa\"\"\"; //puts the string in this way in x.\n```",536875189]],["^15",[337,"^O","^16",536875119]],["^15",[337,"^@",false,536875119]],["^15",[337,"^F",327,536875119]],["^15",[337,"^X",196,536875119]],["^15",[337,"^V",196,536875119]],["^15",[337,"^U",196,536875120]],["^15",[337,"^?",["^ "],536875189]],["^15",[337,"^;","~u664ef326-8d30-4848-898d-0571483c102d",536875119]],["^15",[339,"^Q","Literal Strings are [[Compile-Time Constant]], and when they have interpolated values, they are still [[Compile-Time Constant]]s as long as any interpolated values in them are also compile-time constants and evaluate to a constant [[String]], [[Null]], [[num]] or a [[bool]] value.\nThat is,\n\nFE:\n```dart\n// These work in a const string.\nconst aConstNum = 0;\nconst aConstBool = true;\nconst aConstString = 'a constant string';\n\n// These do NOT work in a const string.\nvar aNum = 0;\nvar aBool = true;\nvar aString = 'a string';\nconst aConstList = [1, 2, 3];\n\nconst validConstString = '$aConstNum $aConstBool $aConstString';\n// const invalidConstString = '$aNum $aBool $aString $aConstList';\n```",536875377]],["^15",[339,"^O","^16",536875233]],["^15",[339,"^@",false,536875233]],["^15",[339,"^F",336,536875233]],["^15",[339,"^X",196,536875233]],["^15",[339,"^V",196,536875233]],["^15",[339,"^U",45,536875362]],["^15",[339,"^U",196,536875362]],["^15",[339,"^U",290,536875362]],["^15",[339,"^U",303,536875362]],["^15",[339,"^U",340,536875362]],["^15",[339,"^?",["^ "],536875377]],["^15",[339,"^H",45,536875377]],["^15",[339,"^H",196,536875377]],["^15",[339,"^H",290,536875377]],["^15",[339,"^H",303,536875377]],["^15",[339,"^H",340,536875377]],["^15",[339,"^;","~u664ef38d-212e-4e7e-aaab-8e1bda69f986",536875233]],["^15",[340,"^K",1716450304674,536875276]],["^15",[340,"^[",342,536875305]],["^15",[340,"^O","^16",536875300]],["^15",[340,"^@",false,536875276]],["^15",[340,"^Y","compile-time constant",536875276]],["^15",[340,"^11","Compile-Time Constant",536875276]],["^15",[340,"^B",1716450353648,536875308]],["^15",[340,"^;","~u664ef400-724f-4390-9f18-79e536fa723b",536875276]],["^15",[341,"^Q","The value is evaluated at compile time and hence must be available at compile time itself",536875308]],["^15",[341,"^O","^16",536875301]],["^15",[341,"^@",false,536875301]],["^15",[341,"^F",340,536875301]],["^15",[341,"^X",340,536875301]],["^15",[341,"^V",340,536875301]],["^15",[341,"^U",340,536875302]],["^15",[341,"^?",["^ "],536875308]],["^15",[341,"^;","~u664ef42d-fe27-4780-b972-200c2315e406",536875301]],["^15",[342,"^3","- The value is evaluated at compile time and hence must be available at compile time itself",536875310]],["^15",[342,"^18","~m1716450354549",536875309]],["^15",[342,"^Z","pages/Compile-Time Constant.md",536875305]],["^15",[344,"^Q","Unicode values\nUnicode is a system that maps user-perceived characters (called grapheme clusters, FE: '😂' which we perceive as a single character is a grapheme cluster) to unique integer values, these integer values are called runes.\n \nWe can directly use unicode integer values in Dart Strings with `'\\uXXXX'` within `' '` or `\" \"` where XXXX is the 4 digit unicode integer value, if it's more or less than 4 digits we use `'\\u{<value>}'`.\n\nWe can use the [Characters Package](https://pub.dev/packages/characters) to manipulate grapheme clusters because unlike normal string characters, a grapheme cluster can have multiple bytes (and hence string indices) for it. \n\nFE:\n```dart\nimport 'package:characters/characters.dart';\n\nvoid main() {\n  var hi = 'Hi 🇩🇰';\n  print(hi);\n  print('The end of the string: ${hi.substring(hi.length - 1)}'); //prints ???\n  print('The last character: ${hi.characters.last}'); //prints 🇩🇰\n}\n```\nHere even though both methods are accessing the last character, one is accessing the literal last character and the other is accessing the actual user-defined/perceived last character (aka grapheme cluster).",536875965]],["^15",[344,"^O","^16",536875380]],["^15",[344,"^@",false,536875380]],["^15",[344,"^F",339,536875380]],["^15",[344,"^X",196,536875380]],["^15",[344,"^V",196,536875380]],["^15",[344,"^U",196,536875381]],["^15",[344,"^?",["^ "],536875965]],["^15",[344,"^;","~u664f01af-03b4-47bd-afe6-def7c99e4175",536875380]],["^15",[345,"^Q","Only 2 objects have the type bool in Dart, `true` and `false`, both these literals are compile-time constants.",536875407]],["^15",[345,"^O","^16",536875385]],["^15",[345,"^@",false,536875385]],["^15",[345,"^F",290,536875385]],["^15",[345,"^X",290,536875385]],["^15",[345,"^V",290,536875385]],["^15",[345,"^U",290,536875386]],["^15",[345,"^?",["^ "],536875407]],["^15",[345,"^;","~u664f17a0-5c51-4d9b-91d6-504bfef4def8",536875385]],["^15",[346,"^3","- Only 2 objects have the type bool in Dart, `true` and `false`, both these literals are compile-time constants.\n-",536875413]],["^15",[346,"^18","~m1716459503976",536875412]],["^15",[346,"^Z","pages/bool.md",536875389]],["^15",[347,"^Q","",536875410]],["^15",[347,"^O","^16",536875410]],["^15",[347,"^@",false,536875410]],["^15",[347,"^F",345,536875410]],["^15",[347,"^X",290,536875410]],["^15",[347,"^V",290,536875410]],["^15",[347,"^U",290,536875411]],["^15",[347,"^?",["^ "],536875410]],["^15",[347,"^;","~u664f17ef-3228-4d90-857a-63c6866c9243",536875410]],["^15",[349,"^K",1716459608250,536875428]],["^15",[349,"^@",false,536875428]],["^15",[349,"^Y","nan",536875428]],["^15",[349,"^11","NaN",536875428]],["^15",[349,"^B",1716459608250,536875428]],["^15",[349,"^;","~u664f1858-eb1f-4c95-885d-f5bc26874021",536875428]],["^15",[350,"^Q","",536875540]],["^15",[350,"^O","^16",536875540]],["^15",[350,"^@",false,536875540]],["^15",[350,"^F",351,536875577]],["^15",[350,"^X",303,536875540]],["^15",[350,"^V",303,536875540]],["^15",[350,"^U",303,536875541]],["^15",[350,"^?",["^ "],536875540]],["^15",[350,"^;","~u664f18c0-7386-458b-9c55-abc9cd38f19c",536875540]],["^15",[351,"^Q","",536875577]],["^15",[351,"^O","^16",536875577]],["^15",[351,"^@",false,536875577]],["^15",[351,"^F",324,536875577]],["^15",[351,"^X",303,536875577]],["^15",[351,"^V",303,536875577]],["^15",[351,"^U",303,536875578]],["^15",[351,"^?",["^ "],536875577]],["^15",[351,"^;","~u664f18e7-9800-4a40-bd89-9b32db3dcec8",536875577]],["^15",[352,"^Q","",536875584]],["^15",[352,"^O","^16",536875584]],["^15",[352,"^@",false,536875584]],["^15",[352,"^F",323,536875584]],["^15",[352,"^X",292,536875584]],["^15",[352,"^V",292,536875584]],["^15",[352,"^U",292,536875585]],["^15",[352,"^?",["^ "],536875584]],["^15",[352,"^;","~u664f18f4-7165-4966-89d6-e7d1d1e194c4",536875584]],["^15",[353,"^Q","",536875593]],["^15",[353,"^O","^16",536875593]],["^15",[353,"^@",false,536875593]],["^15",[353,"^F",314,536875593]],["^15",[353,"^X",291,536875593]],["^15",[353,"^V",291,536875593]],["^15",[353,"^U",291,536875594]],["^15",[353,"^?",["^ "],536875593]],["^15",[353,"^;","~u664f18fd-0c1d-4af3-81f2-2ccc4a10b3cd",536875593]],["^15",[354,"^K",1716489027446,536875699]],["^15",[354,"^O","^16",536875699]],["^15",[354,"^N",20240524,536875699]],["^15",[354,"^@",true,536875699]],["^15",[354,"^Y","may 24th, 2024",536875699]],["^15",[354,"^11","May 24th, 2024",536875699]],["^15",[354,"^B",1716489027446,536875699]],["^15",[354,"^;","~u664f8b43-2cb4-470c-b83a-069b7a746592",536875699]],["^15",[355,"^Q","",536875700]],["^15",[355,"^O","^16",536875700]],["^15",[355,"^N",20240524,536875700]],["^15",[355,"^@",true,536875700]],["^15",[355,"^F",354,536875700]],["^15",[355,"^X",354,536875700]],["^15",[355,"^V",354,536875700]],["^15",[355,"^U",354,536875701]],["^15",[355,"^?",["^ "],536875700]],["^15",[355,"^;","~u664f8b43-1d88-446c-b1de-b256540c015b",536875700]],["^15",[356,"^Q","",536875966]],["^15",[356,"^O","^16",536875966]],["^15",[356,"^@",false,536875966]],["^15",[356,"^F",344,536875966]],["^15",[356,"^X",196,536875966]],["^15",[356,"^V",196,536875966]],["^15",[356,"^U",196,536875967]],["^15",[356,"^?",["^ "],536875966]],["^15",[356,"^;","~u6650419c-9fd1-4e1a-b7e5-8eb5f7295470",536875966]],["^15",[357,"^Q","A Symbol is an object used to represent other operators or identifiers. \nIt takes a string which remains constant inside the Symbol object. Symbols can be compared and 2 symbols with the same string inside them are equal, symbols stored by [[Reflection]] during [[Compilation]] can hence be compared too. \n\nTo create a symbol:\n``#<any string no quotes needed>``\nor by using Symbol [[Object]]'s ctor \n``Symbol(\"<string>\")``\n\nFE:\n```dart\nvoid main() {\n  var x = #abc;\n  print(x); //prints Symbol(\"abc\")\n}\n```\nSymbol is kinda like a [[String]],i.e., it stores a string inside its object.\nIt can be used to obtain information about an identifier at runtime as well, we can do so by using the symbol with a mirroring/reflection package which would store the identifier symbols at compile time and compare them at runtime as we can't directly get identifier information at runtime without reflection because of minification on their names.",536876497]],["^15",[357,"^O","^16",536875973]],["^15",[357,"^@",false,536875973]],["^15",[357,"^F",241,536875973]],["^15",[357,"^X",241,536875973]],["^15",[357,"^V",241,536875973]],["^15",[357,"^U",48,536876342]],["^15",[357,"^U",86,536876342]],["^15",[357,"^U",196,536876342]],["^15",[357,"^U",241,536876342]],["^15",[357,"^U",375,536876342]],["^15",[357,"^?",["^ "],536876497]],["^15",[357,"^H",48,536876497]],["^15",[357,"^H",86,536876497]],["^15",[357,"^H",196,536876497]],["^15",[357,"^H",375,536876497]],["^15",[357,"^;","~u665041a6-a981-485c-832d-ef35aa8bcd46",536875973]],["^15",[358,"^3","- A Symbol is an object used to represent other operators or identifiers. \n  It takes a string which remains constant inside the Symbol object. Symbols can be compared and 2 symbols with the same string inside them are equal, symbols stored by [[Reflection]] during [[Compilation]] can hence be compared too. \n  \n  To create a symbol:\n  ``#<any string no quotes needed>``\n  or by using Symbol [[Object]]'s ctor \n  ``Symbol(\"<string>\")``\n  \n  FE:\n  ```dart\n  void main() {\n    var x = #abc;\n    print(x); //prints Symbol(\"abc\")\n  }\n  ```\n  Symbol is kinda like a [[String]],i.e., it stores a string inside its object.\n  It can be used to obtain information about an identifier at runtime as well, we can do so by using the symbol with a mirroring/reflection package which would store the identifier symbols at compile time and compare them at runtime as we can't directly get identifier information at runtime without reflection because of minification on their names.\n-",536876499]],["^15",[358,"^18","~m1717074557052",536876498]],["^15",[358,"^Z","pages/Symbol.md",536875977]],["^15",[361,"^K",1716575427455,536876060]],["^15",[361,"^O","^16",536876060]],["^15",[361,"^N",20240525,536876060]],["^15",[361,"^@",true,536876060]],["^15",[361,"^Y","may 25th, 2024",536876060]],["^15",[361,"^11","May 25th, 2024",536876060]],["^15",[361,"^B",1716575427455,536876060]],["^15",[361,"^;","~u6650dcc3-1220-4267-8edf-0d8ff661d82e",536876060]],["^15",[362,"^Q","",536876061]],["^15",[362,"^O","^16",536876061]],["^15",[362,"^N",20240525,536876061]],["^15",[362,"^@",true,536876061]],["^15",[362,"^F",361,536876061]],["^15",[362,"^X",361,536876061]],["^15",[362,"^V",361,536876061]],["^15",[362,"^U",361,536876062]],["^15",[362,"^?",["^ "],536876061]],["^15",[362,"^;","~u6650dcc3-5d99-4a9d-8db2-63cd50c77372",536876061]],["^15",[363,"^12",2,536876064]],["^15",[364,"^K",1716804739101,536876065]],["^15",[364,"^O","^16",536876065]],["^15",[364,"^N",20240527,536876065]],["^15",[364,"^@",true,536876065]],["^15",[364,"^Y","may 27th, 2024",536876065]],["^15",[364,"^11","May 27th, 2024",536876065]],["^15",[364,"^B",1716804739101,536876065]],["^15",[364,"^;","~u66545c83-2afb-42ee-b6ba-88381ed29c4d",536876065]],["^15",[365,"^Q","",536876066]],["^15",[365,"^O","^16",536876066]],["^15",[365,"^N",20240527,536876066]],["^15",[365,"^@",true,536876066]],["^15",[365,"^F",364,536876066]],["^15",[365,"^X",364,536876066]],["^15",[365,"^V",364,536876066]],["^15",[365,"^U",364,536876067]],["^15",[365,"^?",["^ "],536876066]],["^15",[365,"^;","~u66545c83-19da-4185-a479-0add129df02e",536876066]],["^15",[366,"^12",2,536876069]],["^15",[367,"^K",1716975616386,536876070]],["^15",[367,"^O","^16",536876070]],["^15",[367,"^N",20240529,536876070]],["^15",[367,"^@",true,536876070]],["^15",[367,"^Y","may 29th, 2024",536876070]],["^15",[367,"^11","May 29th, 2024",536876070]],["^15",[367,"^B",1716975616386,536876070]],["^15",[367,"^;","~u6656f800-e74b-4fd3-a5b2-1722706178ee",536876070]],["^15",[368,"^Q","",536876071]],["^15",[368,"^O","^16",536876071]],["^15",[368,"^N",20240529,536876071]],["^15",[368,"^@",true,536876071]],["^15",[368,"^F",367,536876071]],["^15",[368,"^X",367,536876071]],["^15",[368,"^V",367,536876071]],["^15",[368,"^U",367,536876072]],["^15",[368,"^?",["^ "],536876071]],["^15",[368,"^;","~u6656f800-a639-40b5-95ff-17c28bce41ce",536876071]],["^15",[369,"^Q","",536876089]],["^15",[369,"^O","^16",536876089]],["^15",[369,"^@",false,536876089]],["^15",[369,"^F",357,536876089]],["^15",[369,"^X",241,536876089]],["^15",[369,"^V",241,536876089]],["^15",[369,"^U",241,536876090]],["^15",[369,"^?",["^ "],536876089]],["^15",[369,"^;","~u6656f840-3336-4d3d-b4ec-1ee2afde41ab",536876089]],["^15",[372,"^K",1717007405028,536876217]],["^15",[372,"^O","^16",536876217]],["^15",[372,"^N",20240530,536876217]],["^15",[372,"^@",true,536876217]],["^15",[372,"^Y","may 30th, 2024",536876217]],["^15",[372,"^11","May 30th, 2024",536876217]],["^15",[372,"^B",1717007405028,536876217]],["^15",[372,"^;","~u6657742d-63d8-4d1d-8a8d-9c6d1247ff76",536876217]],["^15",[373,"^Q","",536876218]],["^15",[373,"^O","^16",536876218]],["^15",[373,"^N",20240530,536876218]],["^15",[373,"^@",true,536876218]],["^15",[373,"^F",372,536876218]],["^15",[373,"^X",372,536876218]],["^15",[373,"^V",372,536876218]],["^15",[373,"^U",372,536876219]],["^15",[373,"^?",["^ "],536876218]],["^15",[373,"^;","~u6657742d-ca43-4e44-80a5-47d36b628f99",536876218]],["^15",[375,"^5",377,536876291]],["^15",[375,"^K",1717070287282,536876283]],["^15",[375,"^[",378,536876293]],["^15",[375,"^O","^16",536876287]],["^15",[375,"^@",false,536876283]],["^15",[375,"^Y","reflection",536876283]],["^15",[375,"^11","Reflection",536876283]],["^15",[375,"^?",["^ ","^1:",["^1;",["Mirroring"]]],536876291]],["^15",[375,"^4",["^ ","^1:","Mirroring"],536876291]],["^15",[375,"^B",1717070294031,536876291]],["^15",[375,"^;","~u665869cf-c9ad-47d9-8770-76d53431e4a1",536876283]],["^15",[376,"^Q","alias:: Mirroring",536876291]],["^15",[376,"^O","^16",536876288]],["^15",[376,"^1<",["^1;",[]],536876291]],["^15",[376,"^@",false,536876288]],["^15",[376,"^F",375,536876288]],["^15",[376,"^X",375,536876288]],["^15",[376,"^V",375,536876288]],["^15",[376,"^U",375,536876292]],["^15",[376,"^U",377,536876292]],["^15",[376,"^:",true,536876291]],["^15",[376,"^?",["^ ","^1:",["^1;",["Mirroring"]]],536876291]],["^15",[376,"^J",["^14",["^1:"]],536876291]],["^15",[376,"^4",["^ ","^1:","Mirroring"],536876291]],["^15",[376,"^H",377,536876291]],["^15",[376,"^;","~u665869d0-16ee-4a9c-be9f-51418786e503",536876288]],["^15",[377,"^K",1717070294031,536876291]],["^15",[377,"^@",false,536876291]],["^15",[377,"^Y","mirroring",536876291]],["^15",[377,"^11","Mirroring",536876291]],["^15",[377,"^B",1717070294031,536876291]],["^15",[378,"^3","alias:: Mirroring\n",536876295]],["^15",[378,"^18","~m1717070294740",536876294]],["^15",[378,"^Z","pages/Reflection.md",536876293]],["^15",[379,"^K",1717079998938,536876503]],["^15",[379,"^[",381,536876518]],["^15",[379,"^O","^16",536876513]],["^15",[379,"^@",false,536876503]],["^15",[379,"^Y","record",536876503]],["^15",[379,"^11","Record",536876503]],["^15",[379,"^B",1717080111675,536876593]],["^15",[379,"^;","~u66588fbe-76f0-41de-9614-210015a66a53",536876503]],["^15",[380,"^Q","Record Types are like [[Collection Type]], they're an anonymous, immutable aggregate data type that store .",536876593]],["^15",[380,"^O","^16",536876514]],["^15",[380,"^@",false,536876514]],["^15",[380,"^F",379,536876514]],["^15",[380,"^X",379,536876514]],["^15",[380,"^V",379,536876514]],["^15",[380,"^U",134,536876525]],["^15",[380,"^U",379,536876525]],["^15",[380,"^?",["^ "],536876593]],["^15",[380,"^H",134,536876593]],["^15",[380,"^;","~u66588fc5-dcef-43c0-947f-56e65b0e9e38",536876514]],["^15",[381,"^3","- Record Types are like [[Collection Type]], they're an anonymous, immutable aggregate data type that store .",536876595]],["^15",[381,"^18","~m1717080112557",536876594]],["^15",[381,"^Z","pages/Record.md",536876518]],["^15",[382,"^Q","",536876527]],["^15",[382,"^O","^16",536876527]],["^15",[382,"^@",false,536876527]],["^15",[382,"^F",134,536876527]],["^15",[382,"^X",134,536876527]],["^15",[382,"^V",134,536876527]],["^15",[382,"^U",134,536876528]],["^15",[382,"^?",["^ "],536876527]],["^15",[382,"^;","~u66588fd9-8bc0-4e89-98ca-ad6604892423",536876527]],["^15",[383,"^Q","",536876540]],["^15",[383,"^O","^16",536876540]],["^15",[383,"^@",false,536876540]],["^15",[383,"^F",242,536876540]],["^15",[383,"^X",242,536876540]],["^15",[383,"^V",242,536876540]],["^15",[383,"^U",242,536876541]],["^15",[383,"^?",["^ "],536876540]],["^15",[383,"^;","~u66588fe7-36bb-493c-bff0-51661b984d4d",536876540]],["^15",[384,"^K",1717093801394,536876596]],["^15",[384,"^O","^16",536876596]],["^15",[384,"^N",20240531,536876596]],["^15",[384,"^@",true,536876596]],["^15",[384,"^Y","may 31st, 2024",536876596]],["^15",[384,"^11","May 31st, 2024",536876596]],["^15",[384,"^B",1717093801394,536876596]],["^15",[384,"^;","~u6658c5a9-7400-4df0-806a-b264fa9df6ac",536876596]],["^15",[385,"^Q","",536876597]],["^15",[385,"^O","^16",536876597]],["^15",[385,"^N",20240531,536876597]],["^15",[385,"^@",true,536876597]],["^15",[385,"^F",384,536876597]],["^15",[385,"^X",384,536876597]],["^15",[385,"^V",384,536876597]],["^15",[385,"^U",384,536876598]],["^15",[385,"^?",["^ "],536876597]],["^15",[385,"^;","~u6658c5a9-2b10-41d0-8212-430e4c3ee372",536876597]]]]]]