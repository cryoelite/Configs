["~#datascript/DB",["^ ","~:schema",["^ ","~:ast/version",["^ "],"~:file/content",["^ "],"~:block/properties-text-values",["^ "],"~:block/alias",["^ ","~:db/valueType","~:db.type/ref","~:db/cardinality","~:db.cardinality/many"],"~:block/pre-block?",["^ "],"~:block/uuid",["^ ","~:db/unique","~:db.unique/identity"],"~:block/priority",["^ "],"~:block/properties",["^ "],"~:block/journal?",["^ "],"~:block/namespace",["^ ","^6","^7"],"~:block/updated-at",["^ "],"~:block/repeated?",["^ "],"~:db/type",["^ "],"~:file/handle",["^ "],"~:block/left",["^ ","^6","^7","~:db/index",true],"~:block/refs",["^ ","^6","^7","^8","^9"],"~:block/scheduled",["^ "],"~:block/properties-order",["^ "],"~:block/created-at",["^ "],"~:block/deadline",["^ "],"~:block/collapsed?",["^ ","^G",true],"~:block/journal-day",["^ "],"~:block/format",["^ "],"~:block/tags",["^ ","^6","^7","^8","^9"],"~:block/content",["^ "],"~:recent/pages",["^ "],"~:block/macros",["^ ","^6","^7","^8","^9"],"~:db/ident",["^ ","^<","^="],"~:block/path-refs",["^ ","^6","^7","^8","^9"],"~:block/parent",["^ ","^6","^7","^G",true],"~:block/type",["^ "],"~:block/page",["^ ","^6","^7","^G",true],"~:block/name",["^ ","^<","^="],"~:file/path",["^ ","^<","^="],"~:block/file",["^ ","^6","^7"],"~:block/marker",["^ "],"~:block/original-name",["^ ","^<","^="],"~:schema/version",["^ "]],"~:datoms",["~#list",[["~#datascript/Datom",[1,"^12",2,536870913]],["^15",[2,"^O","~:markdown",536885228]],["^15",[2,"^@",false,536870914]],["^15",[2,"^Y","card",536870913]],["^15",[2,"^11","card",536870913]],["^15",[2,"^;","~uac68b3a8-441b-480e-9b65-9a8022463a0b",536885546]],["^15",[3,"^@",false,536870914]],["^15",[3,"^Y","canceled",536870914]],["^15",[3,"^11","CANCELED",536870914]],["^15",[3,"^;","~uf63fdcf3-5736-4371-9224-ec441c18eec4",536885546]],["^15",[4,"^@",false,536870914]],["^15",[4,"^Y","todo",536870914]],["^15",[4,"^11","TODO",536870914]],["^15",[4,"^;","~u952ead69-1c3b-4e5e-8d33-fd787870d0fe",536885546]],["^15",[5,"^@",false,536870914]],["^15",[5,"^Y","now",536870914]],["^15",[5,"^11","NOW",536870914]],["^15",[5,"^;","~u1144a2f3-eaee-42dc-a4a8-6f41ecee0570",536885546]],["^15",[6,"^@",false,536870914]],["^15",[6,"^Y","later",536870914]],["^15",[6,"^11","LATER",536870914]],["^15",[6,"^;","~u1f618f19-227d-4a87-91d5-c4cc2e82e7ae",536885546]],["^15",[7,"^@",false,536870914]],["^15",[7,"^Y","done",536870914]],["^15",[7,"^11","DONE",536870914]],["^15",[7,"^;","~u7cfbe6ba-edb8-42f4-b712-3d2128a0953b",536885546]],["^15",[8,"^@",false,536870914]],["^15",[8,"^Y","doing",536870914]],["^15",[8,"^11","DOING",536870914]],["^15",[8,"^;","~ub4a946c7-9d78-4eb2-b8a9-d495115e0507",536885546]],["^15",[9,"^@",false,536870914]],["^15",[9,"^Y","in-progress",536870914]],["^15",[9,"^11","IN-PROGRESS",536870914]],["^15",[9,"^;","~u1ad6942d-030d-4398-ae05-e9207c613eb2",536885546]],["^15",[10,"^@",false,536870914]],["^15",[10,"^Y","c",536870914]],["^15",[10,"^11","C",536870914]],["^15",[10,"^;","~u4a8db6c3-48da-4f60-b60d-38a874363b5f",536885546]],["^15",[11,"^@",false,536870914]],["^15",[11,"^Y","b",536870914]],["^15",[11,"^11","B",536870914]],["^15",[11,"^;","~ufb4835f3-d99d-4cc1-998c-80f9f7c6fef6",536885546]],["^15",[12,"^[",22,536870919]],["^15",[12,"^@",false,536870914]],["^15",[12,"^Y","contents",536870914]],["^15",[12,"^11","Contents",536870914]],["^15",[12,"^;","~ufc4f2019-fb34-486b-9712-e90d6d77da0c",536885546]],["^15",[13,"^@",false,536870914]],["^15",[13,"^Y","waiting",536870914]],["^15",[13,"^11","WAITING",536870914]],["^15",[13,"^;","~u7cab319d-c5b1-495e-a49f-406ecb6897ed",536885546]],["^15",[14,"^@",false,536870914]],["^15",[14,"^Y","favorites",536870914]],["^15",[14,"^11","Favorites",536870914]],["^15",[14,"^;","~u6cd950c3-f793-427a-9ef3-d4028c563ee8",536885546]],["^15",[15,"^@",false,536870914]],["^15",[15,"^Y","a",536870914]],["^15",[15,"^11","A",536870914]],["^15",[15,"^;","~ud253be6c-adc6-4c5b-a87e-0b02957bbbc7",536885546]],["^15",[16,"^@",false,536870914]],["^15",[16,"^Y","cancelled",536870914]],["^15",[16,"^11","CANCELLED",536870914]],["^15",[16,"^;","~u67309034-35d0-458e-b042-4b9b24bd66a0",536885546]],["^15",[17,"^@",false,536870914]],["^15",[17,"^Y","wait",536870914]],["^15",[17,"^11","WAIT",536870914]],["^15",[17,"^;","~u7fbee871-75f3-4dc7-bb70-a0e5a69c4f61",536885546]],["^15",[18,"^K",1687830958305,536870915]],["^15",[18,"^O","^16",536870915]],["^15",[18,"^N",20230627,536870915]],["^15",[18,"^@",true,536870915]],["^15",[18,"^Y","jun 27th, 2023",536870915]],["^15",[18,"^11","Jun 27th, 2023",536870915]],["^15",[18,"^B",1687830958305,536870915]],["^15",[18,"^;","~u649a41ae-1176-407c-9b49-65d05aa0812e",536870915]],["^15",[19,"^Q","",536870916]],["^15",[19,"^O","^16",536870916]],["^15",[19,"^N",20230627,536870916]],["^15",[19,"^@",true,536870916]],["^15",[19,"^F",18,536870916]],["^15",[19,"^X",18,536870916]],["^15",[19,"^V",18,536870916]],["^15",[19,"^U",18,536870917]],["^15",[19,"^?",["^ "],536870916]],["^15",[19,"~:block/unordered",true,536870916]],["^15",[19,"^;","~u649a41ae-6c31-41ed-b9d4-4a29c42d0b9f",536870916]],["^15",[20,"^3","\n",536880568]],["^15",[20,"~:file/created-at",1687830958497,536870919]],["^15",[20,"~:file/last-modified-at","~m1688025402037",536880569]],["^15",[20,"^Z","logseq/custom.css",536870918]],["^15",[21,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage: \n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday) \n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;; - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Set the default home page and sidebar status.\n ;; Define the default home page and sidebar status. \n ;; If unspecified, Logseq will load the journal page by default on startup. \n ;; The `:page` value represents the name of the page displayed at startup. \n ;; Available options for `:sidebar` are: \n ;; - \"Contents\" to display the Contents page in the right sidebar. \n ;; - A specific page name to display in the right sidebar. \n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"]. \n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; If not specified, whiteboards will be stored in the 'whiteboards' subdirectory.\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means \n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?  true   ; Default value: true\n ;;  :builtin-pages? false  ; Default value: false\n ;;  :excluded-pages? false ; Default value: false\n ;;  :journal?       false} ; Default value: false\n\n ;; Favorites to list on the left sidebar\n :favorites [\"Contents\" \"ECMAScript\"]\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: false\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile \n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false \n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false \n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Othwerwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar\n :graph/settings {:builtin-pages? false, :journal? false}}\n\n\n;; Custom Config\n:custom-css-url \"@import url('https://logseq.catppuccin.com/ctp-latte.css');\"\n:custom-css-url \"@import url('https://logseq.catppuccin.com/ctp-frappe.css');\"\n:custom-css-url \"@import url('https://logseq.catppuccin.com/ctp-macchiato.css');\"\n:custom-css-url \"@import url('https://logseq.catppuccin.com/ctp-mocha.css');\"\n",536880516]],["^15",[21,"^18",1687830958470,536870919]],["^15",[21,"^19","~m1688024349637",536880517]],["^15",[21,"^Z","logseq/config.edn",536870919]],["^15",[22,"^3","- [[ECMAScript]]\n  Last Updated: [[Jun 20th, 2023]] \n  Primary Source: https://javascript.info/\n  Language Version: ECMAScript 2022, Node.js 19.9.0\n  Major Update: May 2023\n  Minor Update: None yet.\n  Additional Notes:\n- Useful Links\n  \n  * MDN for anything JS, it is not the whole ECMA spec sheet but it is the  \n  closest to it with practical and concise examples.\n  * [https://caniuse.com/](https://caniuse.com/) To check what feature is supported in what browser.\n  * [https://kangax.github.io/compat-table](https://kangax.github.io/compat-table) Similar to it\n  * [https://tc39.es/ecma262/](https://tc39.es/ecma262/) New Proposals that are approved to be implemented by JS engines are appended to this list.\n-",536870919]],["^15",[22,"^18",1687830958520,536870919]],["^15",[22,"^Z","pages/contents.md",536870919]],["^15",[23,"^K",1687830958517,536870919]],["^15",[23,"^N",20230620,536870919]],["^15",[23,"^@",true,536870919]],["^15",[23,"^Y","jun 20th, 2023",536870919]],["^15",[23,"^11","Jun 20th, 2023",536870919]],["^15",[23,"^B",1687830958517,536870919]],["^15",[23,"^;","~u649a41ae-5f7e-48ea-8cc0-79c7d8cf0208",536870919]],["^15",[24,"^5",294,536885544]],["^15",[24,"^K",1687830960297,536870919]],["^15",[24,"^[",280,536870919]],["^15",[24,"^@",false,536870919]],["^15",[24,"^Y","ecmascript",536870919]],["^15",[24,"^11","ECMAScript",536870919]],["^15",[24,"^?",["^ ","~:alias",["~#set",["JavaScript"]]],536870919]],["^15",[24,"^4",["^ ","^1:","JavaScript"],536870919]],["^15",[24,"^B",1712760488976,536885477]],["^15",[24,"^;","~u662fc702-ed0a-457b-a5d9-f7c822d27c89",536885544]],["^15",[25,"^Q","[[ECMAScript]]\nLast Updated: [[Jun 20th, 2023]] \nPrimary Source: https://javascript.info/\nLanguage Version: ECMAScript 2022, Node.js 19.9.0\nMajor Update: May 2023\nMinor Update: None yet.\nAdditional Notes:",536870919]],["^15",[25,"^O","^16",536870919]],["^15",[25,"^F",12,536870919]],["^15",[25,"^X",12,536870919]],["^15",[25,"^V",12,536870919]],["^15",[25,"^U",12,536870919]],["^15",[25,"^U",23,536870919]],["^15",[25,"^U",24,536870919]],["^15",[25,"^H",23,536870919]],["^15",[25,"^H",24,536870919]],["^15",[25,"^17",true,536870919]],["^15",[25,"^;","~u649a41ae-1aaa-46af-9b5e-8616908f9060",536870919]],["^15",[26,"^Q","Useful Links\n\n* MDN for anything JS, it is not the whole ECMA spec sheet but it is the  \nclosest to it with practical and concise examples.\n* [https://caniuse.com/](https://caniuse.com/) To check what feature is supported in what browser.\n* [https://kangax.github.io/compat-table](https://kangax.github.io/compat-table) Similar to it\n* [https://tc39.es/ecma262/](https://tc39.es/ecma262/) New Proposals that are approved to be implemented by JS engines are appended to this list.",536870919]],["^15",[26,"^O","^16",536870919]],["^15",[26,"^F",25,536870919]],["^15",[26,"^X",12,536870919]],["^15",[26,"^V",12,536870919]],["^15",[26,"^U",12,536870919]],["^15",[26,"^17",true,536870919]],["^15",[26,"^;","~u649a41ae-4098-406b-bca7-3331720ab614",536870919]],["^15",[27,"^Q","",536870919]],["^15",[27,"^O","^16",536870919]],["^15",[27,"^F",26,536870919]],["^15",[27,"^X",12,536870919]],["^15",[27,"^V",12,536870919]],["^15",[27,"^U",12,536870919]],["^15",[27,"^17",true,536870919]],["^15",[27,"^;","~u649a41ae-9459-4e8a-b09b-87e0061ebf04",536870919]],["^15",[28,"^3","- This [[HTML]] tag allows importing JS code into the HTML document, which is how the page can then execute the code.\n- ``defer`` script\n  [[Defer]]rs the script loading.\n  The script is loaded in the background and the rest of the [[HTML]] document doesn't wait for it. Then when the DOM is built and ready, just before the ``DOMContentLoaded`` [[Browser Event]], the deferred scripts are executed. The event waits for these scripts to finish loading and executing and then finally triggers.\n  \n  That is, the order of loading and execution is\n  [[HTML]] Document is loaded\n  DOM is loaded\n  Deferred Scripts are loaded parallely to each other, but executed in their relative order on the Document.\n  ``DOMContentLoaded`` event is triggered\n  \n  For ex.:\n  ```html\n  <script defer src=\"https://javascript.info/article/script-async-defer/long.js\"></script>\n  ```\n  This attribute is only valid on external scripts.\n- ``Async`` script\n  id:: 649a41ae-15f0-41c8-997d-018557f4ce6f\n  If a script tag uses this attribute then its execution is independent from the rest of the [[HTML]] page , it can even be loaded and executed before the page is fully loaded. \n  \n  The script must be independent of the rest of the scripts and the page.\n  \n  This only works for external scripts, meaning scripts that are imported from an src attribute\n  or if the script is a [[Module]]. In the latter case, if the script imports other modules then it waits until they are loaded so if they are not async then it is basically [[Defer]]red.\n  For ex.:\n  ```html\n  <script async type=\"module\">\n    import {counter} from './analytics.js';\n  \n    counter.count();\n  </script>\n  ```\n  This inline script is ran as soon as ``./analytics.js`` is ready.\n  \n  So async is like the defer attribute but the ``DOMContentLoaded`` event is independent to it as well. \n  \n  Dynamically added scripts (scripts that are added to the [[DOM]] from the JS) behave like async and defer by default.\n-\n- ``nomodule``\n  Older [[Browser]]s that  don't understand ``type= module`` for [[<script>]] ignore the script, but they accept this attribute and so they execute the script. Modern browsers ignore this script.\n  For ex.:\n  ```html\n  <script type=\"module\">\n  //ignored by old browsers\n  </script>\n  <script nomodule>\n  //ignored by new browsers\n  </script>\n  \n  ```\n- ``crossorigin``\n  This attribute is necessary for cross-origin access/[[CORS]], that is when the external script being loaded is on another domain.",536885255]],["^15",[28,"^18",1687830958544,536870919]],["^15",[28,"^19","~m1712760352179",536885254]],["^15",[28,"^Z","pages/%3Cscript%3E.md",536870919]],["^15",[29,"^K",1687830960199,536870919]],["^15",[29,"^[",28,536870919]],["^15",[29,"^@",false,536870919]],["^15",[29,"^Y","<script>",536870919]],["^15",[29,"^11","<script>",536870919]],["^15",[29,"^B",1688009260569,536879138]],["^15",[29,"^;","~u662fc702-c5ef-4877-a6f3-c0932502c984",536885544]],["^15",[30,"^5",439,536870919]],["^15",[30,"^K",1687830960047,536870919]],["^15",[30,"^[",438,536870919]],["^15",[30,"^@",false,536870919]],["^15",[30,"^Y","html",536870919]],["^15",[30,"^11","HTML",536870919]],["^15",[30,"^?",["^ ","^1:",["^1;",["Hyper Text Markup Language"]]],536870919]],["^15",[30,"^4",["^ ","^1:","Hyper Text Markup Language"],536870919]],["^15",[30,"^B",1687834881851,536871261]],["^15",[30,"^;","~u649a41b0-355b-40cc-b649-78395a8071a2",536870919]],["^15",[31,"^K",1687830959815,536870919]],["^15",[31,"^O","^16",536878629]],["^15",[31,"^@",false,536870919]],["^15",[31,"^Y","defer",536870919]],["^15",[31,"^11","Defer",536870919]],["^15",[31,"^B",1687830959815,536870919]],["^15",[31,"^;","~u649a41af-33dc-4cce-a074-461a6595a224",536870919]],["^15",[32,"^K",1687830960199,536870919]],["^15",[32,"^[",499,536870919]],["^15",[32,"^@",false,536870919]],["^15",[32,"^Y","module",536870919]],["^15",[32,"^11","Module",536870919]],["^15",[32,"^B",1687830960199,536870919]],["^15",[32,"^;","~u649a41b0-d08b-4efa-a22f-294bb7a361f2",536870919]],["^15",[33,"^K",1687830960342,536870919]],["^15",[33,"^[",111,536870919]],["^15",[33,"^@",false,536870919]],["^15",[33,"^Y","browser",536870919]],["^15",[33,"^11","Browser",536870919]],["^15",[33,"^B",1687830960342,536870919]],["^15",[33,"^;","~u662fc702-b3c8-41e0-b0c3-b2fb8c2ba682",536885544]],["^15",[34,"^Q","This [[HTML]] tag allows importing JS code into the HTML document, which is how the page can then execute the code.",536870919]],["^15",[34,"^O","^16",536870919]],["^15",[34,"^F",29,536870919]],["^15",[34,"^X",29,536870919]],["^15",[34,"^V",29,536870919]],["^15",[34,"^U",29,536870919]],["^15",[34,"^U",30,536870919]],["^15",[34,"^H",30,536870919]],["^15",[34,"^17",true,536870919]],["^15",[34,"^;","~u649a41ae-2fcf-4921-b862-bbe2bf632617",536870919]],["^15",[35,"^Q","~``Async`` script\nid:: 649a41ae-15f0-41c8-997d-018557f4ce6f\nIf a script tag uses this attribute then its execution is independent from the rest of the [[HTML]] page , it can even be loaded and executed before the page is fully loaded. \n\nThe script must be independent of the rest of the scripts and the page.\n\nThis only works for external scripts, meaning scripts that are imported from an src attribute\nor if the script is a [[Module]]. In the latter case, if the script imports other modules then it waits until they are loaded so if they are not async then it is basically [[Defer]]red.\nFor ex.:\n```html\n<script async type=\"module\">\n  import {counter} from './analytics.js';\n\n  counter.count();\n</script>\n```\nThis inline script is ran as soon as ``./analytics.js`` is ready.\n\nSo async is like the defer attribute but the ``DOMContentLoaded`` event is independent to it as well. \n\nDynamically added scripts (scripts that are added to the [[DOM]] from the JS) behave like async and defer by default.",536885253]],["^15",[35,"^O","^16",536870919]],["^15",[35,"^F",784,536878813]],["^15",[35,"^X",29,536870919]],["^15",[35,"^V",29,536870919]],["^15",[35,"^U",29,536878984]],["^15",[35,"^U",30,536878984]],["^15",[35,"^U",31,536878984]],["^15",[35,"^U",32,536878984]],["^15",[35,"^U",114,536878984]],["^15",[35,"^?",["^ ","~:id","649a41ae-15f0-41c8-997d-018557f4ce6f"],536885253]],["^15",[35,"^J",["^14",["^1<"]],536885253]],["^15",[35,"^4",["^ ","^1<","649a41ae-15f0-41c8-997d-018557f4ce6f"],536885253]],["^15",[35,"^H",30,536879011]],["^15",[35,"^H",31,536879011]],["^15",[35,"^H",32,536879011]],["^15",[35,"^H",114,536879011]],["^15",[35,"^17",true,536870919]],["^15",[35,"^;","~u649a41ae-15f0-41c8-997d-018557f4ce6f",536870919]],["^15",[36,"^Q","~``nomodule``\nOlder [[Browser]]s that  don't understand ``type= module`` for [[<script>]] ignore the script, but they accept this attribute and so they execute the script. Modern browsers ignore this script.\nFor ex.:\n```html\n<script type=\"module\">\n//ignored by old browsers\n</script>\n<script nomodule>\n//ignored by new browsers\n</script>\n\n```",536870919]],["^15",[36,"^O","^16",536870919]],["^15",[36,"^F",783,536878640]],["^15",[36,"^X",29,536870919]],["^15",[36,"^V",29,536870919]],["^15",[36,"^U",29,536870919]],["^15",[36,"^U",33,536870919]],["^15",[36,"^H",29,536870919]],["^15",[36,"^H",33,536870919]],["^15",[36,"^17",true,536870919]],["^15",[36,"^;","~u649a41ae-5ff2-48da-968b-2ac6f4b79c20",536870919]],["^15",[37,"^3","- This is a special data structure in JS.\n  ```js\n  let x = new Array();\n  let y= []; \n  ```\n  are the 2 syntaxes to create an Array.\n  \n  It is still just an [[Object]], just quite optimized by the JS engine.\n- 0-indexed.\n- Access is the same with ``<array obj>[<int>]`` as in [[C++]], but it doesn't support going from the end using negative int value. The ``.at(<int>)`` method is the same as ``[ ]`` but also supports indexing from the right end using negative int value.\n- For size we have ``.length``.\n  However, it doesn't give the actual count of the values in the array, just the max. index + 1.\n  For ex.:\n  ```js\n  let fruits = [];\n  fruits[123] = \"Apple\";\n  \n  fruits.length; // 124\n  ```\n  using Array as an Object we have broken ``length`` here.\n  \n  Similarly, we can modify the length property directly and that works as well.\n- Arrays in JS are not homogenous, so they can hold values of any type and any element can be any type, even [[Object]]s\n- Stack/Queue like methods\n  ``.push(<val>)``: Push an element to the end of an array\n  ``.pop()``: Get an element from the end of an array and remove it\n  ``.shift()``: Get an element from the front and remove it\n  ``.unshift(<val>)``: Push an element to the front.\n  \n  Yes shift and unshift have a TC of O(n).\n- Unlike an [[Object]], Arrays are special as the engine performs various optimizations with this Object such as storing all elements in contiguous memory locations.\n- Arrays can still be used like an [[Object]], however it is unadvised to do so as it breaks various optimizations on them.\n- for..of [[Loop]] works with Array. We can use for..in too but it is not optimized for looping over arrays and also visits internal properties of the array Object. Arrays implement [[Iterable]]s so they work directly with for..of.\n  \n  ``.forEach(<func>(item,index,array)`` \n  For each element of the array, call the [[Function]] and pass it the given 3 items.\n  For ex.:\n  ```js\n  let x =[1,2];\n  x.forEach(alert); //passes each element to alert.\n  ```\n  This is also to say, Functions in JS can be passed around like so and JS automatically passes them the arguments.\n- Multi-dimensional arrays work in JS like normal.\n- ``.toString()`` returns a string with comma-separated list of elements.\n  For ex.:\n  ```js\n  alert([1,2] + 1); // \"1,21\"\n  ```\n- Delete an element:\n  We can use ``delete arr[2];`` and it deletes the element but this is an [[Object]] way of deletion and is hence unrecommended, also it doesn't modify the length of the array and if we access the element we get [[undefined]].\n  \n  Alternatively, we can use ``.splice(<start>, <deleteCount>);``\n  Removes from given index to given number of elements and shifts the rest of the array. It also accepts negative index.\n  For ex.:\n  ```js\n  let arr = [\"1\",\"2\",\"3\"];\n  arr.splice(1,1);\n  console.log(arr); //prints 1,3\n  ```\n- We can also use ``.splice()`` to insert elements at a given index.\n  For ex.:\n  ```js\n  let arr = [\"1\",\"2\",\"3\"];\n  arr.splice(1,0, \"a\", 3);\n  console.log(arr); //prints 1,2,3,a,3\n  ```\n- ``.slice(<optional start>, <optional end>)`` returns an array from an array from start (inclusive) to end (exclusive).\n- Concatenation\n  ``.concat(<arg1>,<arg2>...)`` adds given element to the array. If the arg is an array, or more specifically is an [[Object]] with a [[Symbol]] property Symbol.isConcatSpreadable with value ``true`` then all the elements/values from K:V pairs added to the array except some special ones like ``length``.\n  For ex.:\n  ```js\n  let x =[1,2];\n  x.concat(2,4); //ok, makes x 1,2,2,4\n  x.concat([2,3]); //1,2,2,4,2,3\n  \n  let y= {\n   0: \"yo\",\n   1: \"noo\",\n   [Symbol.isConcatSpreadable]: true,\n   length: 2,\n  };\n  \n  x.concat(y); //ok, 1,2,2,4,2,3,\"yo\", \"noo\"\n  ```\n- Searching an element:\n  The usual ``.indexOf()/.lastIndexOf()/.includes()/.find()/.findIndex()/.findLastIndex()/.filter()`` etc.\n- ``.map(<func>(item,index,array))`` Returns an array after applying the given function to the item and getting its return value.\n  \n  Also passes ``this`` to the func.\n- ``.reverse()`` to modify the array and reverse its elements.\n- ``.join(<optional str>)`` Joins an array and returns a [[String]] with the optional string used to specify where each element was joined.\n- ``.sort(<optional func>(a,b))`` modify an array by sorting all elements. Optional func is custom comparator.\n- ``.reduce(<func>(accumulatedValue, item, index, array), <optional initial value>)`` to reduce an array.\n  Similarly we have ``.reduceRight(...)`` which goes from right end to the left end.\n  Also passes ``this`` to the func.\n- [[typeOf]] doesn't work with arrays, it returns ``Object``. \n  We use ``Array.isArray(<obj>)`` instead.\n- ``Array.from(<obj>, <optional mapping function>(item), <this arg>)`` Takes an object and returns an Array Object from it. it takes the value of every key in the Object except a few special properties such as ``length``, also making it an [[Iterable]] in the process. The custom mapping function takes each value and can process it and return a new value.\n- Since an Array is built on an [[Object]], a variable comparing one Array to another variable compares the reference and not the individual elements.",536885124]],["^15",[37,"^18",1687830958605,536870919]],["^15",[37,"^19","~m1712315133560",536885125]],["^15",[37,"^Z","pages/Array.md",536870919]],["^15",[38,"^K",1687830960305,536870919]],["^15",[38,"^[",715,536870919]],["^15",[38,"^@",false,536870919]],["^15",[38,"^Y","typeof",536870919]],["^15",[38,"^11","typeOf",536870919]],["^15",[38,"^B",1687830960305,536870919]],["^15",[38,"^;","~u662fc702-76dd-4d13-ab0e-b9f0c06bf23d",536885544]],["^15",[39,"^K",1687830960342,536870919]],["^15",[39,"^[",541,536870919]],["^15",[39,"^@",false,536870919]],["^15",[39,"^Y","object",536870919]],["^15",[39,"^11","Object",536870919]],["^15",[39,"^B",1712761145835,536885483]],["^15",[39,"^;","~u662fc702-3ae7-44c6-9dc5-1e467e2fb9bc",536885544]],["^15",[40,"^K",1687830959934,536870919]],["^15",[40,"^[",474,536870919]],["^15",[40,"^@",false,536870919]],["^15",[40,"^Y","loop",536870919]],["^15",[40,"^11","Loop",536870919]],["^15",[40,"^B",1687830959934,536870919]],["^15",[40,"^;","~u662fc702-ddf6-413d-b743-26f3423276e8",536885544]],["^15",[41,"^K",1687830960251,536870919]],["^15",[41,"^[",633,536870919]],["^15",[41,"^@",false,536870919]],["^15",[41,"^Y","string",536870919]],["^15",[41,"^11","String",536870919]],["^15",[41,"^B",1687830960251,536870919]],["^15",[41,"^;","~u662fc702-6294-4434-8efc-c6c73530c392",536885544]],["^15",[42,"^K",1687830960250,536870919]],["^15",[42,"^@",false,536870919]],["^15",[42,"^Y","c++",536870919]],["^15",[42,"^11","C++",536870919]],["^15",[42,"^B",1687830960250,536870919]],["^15",[42,"^;","~u6616a43b-86ad-4da9-93c3-be614fc66f55",536885124]],["^15",[43,"^K",1687830960134,536870919]],["^15",[43,"^[",649,536870919]],["^15",[43,"^@",false,536870919]],["^15",[43,"^Y","symbol",536870919]],["^15",[43,"^11","Symbol",536870919]],["^15",[43,"^B",1687830960134,536870919]],["^15",[43,"^;","~u662fc702-87ef-449c-8f44-1dd786a27183",536885544]],["^15",[44,"^K",1687830960332,536870919]],["^15",[44,"^[",363,536870919]],["^15",[44,"^@",false,536870919]],["^15",[44,"^Y","function",536870919]],["^15",[44,"^11","Function",536870919]],["^15",[44,"^?",["^ ","~:filters","{\"generator function\" true}"],536870919]],["^15",[44,"^4",["^ ","^1=","{\"generator function\" true}"],536870919]],["^15",[44,"^B",1713385611993,536885529]],["^15",[44,"^;","~u662fc702-f874-43ad-8ba6-43f8ecc318b8",536885544]],["^15",[45,"^K",1687830960317,536870919]],["^15",[45,"^[",719,536870919]],["^15",[45,"^@",false,536870919]],["^15",[45,"^Y","undefined",536870919]],["^15",[45,"^11","undefined",536870919]],["^15",[45,"^B",1687830960317,536870919]],["^15",[45,"^;","~u662fc702-ab20-4cf4-be18-f0e8e2f97524",536885544]],["^15",[46,"^K",1687830960180,536870919]],["^15",[46,"^[",453,536870919]],["^15",[46,"^@",false,536870919]],["^15",[46,"^Y","iterable",536870919]],["^15",[46,"^11","Iterable",536870919]],["^15",[46,"^B",1687830960180,536870919]],["^15",[46,"^;","~u6616a43b-7e5c-499f-aef3-1bd4078c4335",536885130]],["^15",[47,"^K",1687830960252,536870919]],["^15",[47,"^[",37,536870919]],["^15",[47,"^@",false,536870919]],["^15",[47,"^Y","array",536870919]],["^15",[47,"^11","Array",536870919]],["^15",[47,"^B",1687830960252,536870919]],["^15",[47,"^;","~u662fc702-a11a-48ca-91ff-2faf0af0ff9b",536885544]],["^15",[48,"^Q","~``Array.from(<obj>, <optional mapping function>(item), <this arg>)`` Takes an object and returns an Array Object from it. it takes the value of every key in the Object except a few special properties such as ``length``, also making it an [[Iterable]] in the process. The custom mapping function takes each value and can process it and return a new value.",536870919]],["^15",[48,"^O","^16",536870919]],["^15",[48,"^F",68,536870919]],["^15",[48,"^X",47,536870919]],["^15",[48,"^V",47,536870919]],["^15",[48,"^U",46,536870919]],["^15",[48,"^U",47,536870919]],["^15",[48,"^H",46,536885124]],["^15",[48,"^17",true,536870919]],["^15",[48,"^;","~u649a41ae-0148-4487-9e28-7931ce147136",536870919]],["^15",[49,"^Q","0-indexed.",536870919]],["^15",[49,"^O","^16",536870919]],["^15",[49,"^F",65,536870919]],["^15",[49,"^X",47,536870919]],["^15",[49,"^V",47,536870919]],["^15",[49,"^U",47,536870919]],["^15",[49,"^17",true,536870919]],["^15",[49,"^;","~u649a41ae-499b-43a8-88b6-8fb2d7a18c0f",536870919]],["^15",[50,"^Q","~``.slice(<optional start>, <optional end>)`` returns an array from an array from start (inclusive) to end (exclusive).",536870919]],["^15",[50,"^O","^16",536870919]],["^15",[50,"^F",60,536870919]],["^15",[50,"^X",47,536870919]],["^15",[50,"^V",47,536870919]],["^15",[50,"^U",47,536870919]],["^15",[50,"^17",true,536870919]],["^15",[50,"^;","~u649a41ae-d39d-47e7-b8f2-221c650702ea",536870919]],["^15",[51,"^Q","Arrays can still be used like an [[Object]], however it is unadvised to do so as it breaks various optimizations on them.",536870919]],["^15",[51,"^O","^16",536870919]],["^15",[51,"^F",56,536870919]],["^15",[51,"^X",47,536870919]],["^15",[51,"^V",47,536870919]],["^15",[51,"^U",39,536870919]],["^15",[51,"^U",47,536870919]],["^15",[51,"^H",39,536885124]],["^15",[51,"^17",true,536870919]],["^15",[51,"^;","~u649a41ae-1f33-4aae-87cc-be0169a76891",536870919]],["^15",[52,"^Q","For size we have ``.length``.\nHowever, it doesn't give the actual count of the values in the array, just the max. index + 1.\nFor ex.:\n```js\nlet fruits = [];\nfruits[123] = \"Apple\";\n\nfruits.length; // 124\n```\nusing Array as an Object we have broken ``length`` here.\n\nSimilarly, we can modify the length property directly and that works as well.",536870919]],["^15",[52,"^O","^16",536870919]],["^15",[52,"^F",61,536870919]],["^15",[52,"^X",47,536870919]],["^15",[52,"^V",47,536870919]],["^15",[52,"^U",47,536870919]],["^15",[52,"^17",true,536870919]],["^15",[52,"^;","~u649a41ae-b38b-4d7b-bbb8-2d60213fc186",536870919]],["^15",[53,"^Q","Searching an element:\nThe usual ``.indexOf()/.lastIndexOf()/.includes()/.find()/.findIndex()/.findLastIndex()/.filter()`` etc.",536870919]],["^15",[53,"^O","^16",536870919]],["^15",[53,"^F",66,536870919]],["^15",[53,"^X",47,536870919]],["^15",[53,"^V",47,536870919]],["^15",[53,"^U",47,536870919]],["^15",[53,"^17",true,536870919]],["^15",[53,"^;","~u649a41ae-5332-4eab-81b7-4968dbd454dd",536870919]],["^15",[54,"^Q","~``.join(<optional str>)`` Joins an array and returns a [[String]] with the optional string used to specify where each element was joined.",536870919]],["^15",[54,"^O","^16",536870919]],["^15",[54,"^F",67,536870919]],["^15",[54,"^X",47,536870919]],["^15",[54,"^V",47,536870919]],["^15",[54,"^U",41,536870919]],["^15",[54,"^U",47,536870919]],["^15",[54,"^H",41,536885124]],["^15",[54,"^17",true,536870919]],["^15",[54,"^;","~u649a41ae-8651-4719-b2c7-30e02b5a6741",536870919]],["^15",[55,"^Q","~``.map(<func>(item,index,array))`` Returns an array after applying the given function to the item and getting its return value.\n\nAlso passes ``this`` to the func.",536870919]],["^15",[55,"^O","^16",536870919]],["^15",[55,"^F",53,536870919]],["^15",[55,"^X",47,536870919]],["^15",[55,"^V",47,536870919]],["^15",[55,"^U",47,536870919]],["^15",[55,"^17",true,536870919]],["^15",[55,"^;","~u649a41ae-5298-4e3f-9218-010a77a4635e",536870919]],["^15",[56,"^Q","Unlike an [[Object]], Arrays are special as the engine performs various optimizations with this Object such as storing all elements in contiguous memory locations.",536870919]],["^15",[56,"^O","^16",536870919]],["^15",[56,"^F",70,536870919]],["^15",[56,"^X",47,536870919]],["^15",[56,"^V",47,536870919]],["^15",[56,"^U",39,536870919]],["^15",[56,"^U",47,536870919]],["^15",[56,"^H",39,536885124]],["^15",[56,"^17",true,536870919]],["^15",[56,"^;","~u649a41ae-9f4c-4a4d-9d2d-93014c1879db",536870919]],["^15",[57,"^Q","~``.sort(<optional func>(a,b))`` modify an array by sorting all elements. Optional func is custom comparator.",536870919]],["^15",[57,"^O","^16",536870919]],["^15",[57,"^F",54,536870919]],["^15",[57,"^X",47,536870919]],["^15",[57,"^V",47,536870919]],["^15",[57,"^U",47,536870919]],["^15",[57,"^17",true,536870919]],["^15",[57,"^;","~u649a41ae-b8b9-47a2-bdc1-1b874630ae83",536870919]],["^15",[58,"^Q","~``.toString()`` returns a string with comma-separated list of elements.\nFor ex.:\n```js\nalert([1,2] + 1); // \"1,21\"\n```",536870919]],["^15",[58,"^O","^16",536870919]],["^15",[58,"^F",62,536870919]],["^15",[58,"^X",47,536870919]],["^15",[58,"^V",47,536870919]],["^15",[58,"^U",47,536870919]],["^15",[58,"^17",true,536870919]],["^15",[58,"^;","~u649a41ae-492d-4272-8d7b-9df45f286939",536870919]],["^15",[59,"^Q","Delete an element:\nWe can use ``delete arr[2];`` and it deletes the element but this is an [[Object]] way of deletion and is hence unrecommended, also it doesn't modify the length of the array and if we access the element we get [[undefined]].\n\nAlternatively, we can use ``.splice(<start>, <deleteCount>);``\nRemoves from given index to given number of elements and shifts the rest of the array. It also accepts negative index.\nFor ex.:\n```js\nlet arr = [\"1\",\"2\",\"3\"];\narr.splice(1,1);\nconsole.log(arr); //prints 1,3\n```",536870919]],["^15",[59,"^O","^16",536870919]],["^15",[59,"^F",58,536870919]],["^15",[59,"^X",47,536870919]],["^15",[59,"^V",47,536870919]],["^15",[59,"^U",39,536870919]],["^15",[59,"^U",45,536870919]],["^15",[59,"^U",47,536870919]],["^15",[59,"^H",39,536885124]],["^15",[59,"^H",45,536885124]],["^15",[59,"^17",true,536870919]],["^15",[59,"^;","~u649a41ae-a0ce-45a8-b808-024dab5701bd",536870919]],["^15",[60,"^Q","We can also use ``.splice()`` to insert elements at a given index.\nFor ex.:\n```js\nlet arr = [\"1\",\"2\",\"3\"];\narr.splice(1,0, \"a\", 3);\nconsole.log(arr); //prints 1,2,3,a,3\n```",536870919]],["^15",[60,"^O","^16",536870919]],["^15",[60,"^F",59,536870919]],["^15",[60,"^X",47,536870919]],["^15",[60,"^V",47,536870919]],["^15",[60,"^U",47,536870919]],["^15",[60,"^17",true,536870919]],["^15",[60,"^;","~u649a41ae-4774-4d1d-842e-f510ea7721bf",536870919]],["^15",[61,"^Q","Access is the same with ``<array obj>[<int>]`` as in [[C++]], but it doesn't support going from the end using negative int value. The ``.at(<int>)`` method is the same as ``[ ]`` but also supports indexing from the right end using negative int value.",536885124]],["^15",[61,"^O","^16",536870919]],["^15",[61,"^F",49,536870919]],["^15",[61,"^X",47,536870919]],["^15",[61,"^V",47,536870919]],["^15",[61,"^U",42,536870919]],["^15",[61,"^U",47,536870919]],["^15",[61,"^H",42,536885124]],["^15",[61,"^17",true,536870919]],["^15",[61,"^;","~u649a41ae-e314-41a3-a199-ecace154f0eb",536870919]],["^15",[62,"^Q","Multi-dimensional arrays work in JS like normal.",536870919]],["^15",[62,"^O","^16",536870919]],["^15",[62,"^F",69,536870919]],["^15",[62,"^X",47,536870919]],["^15",[62,"^V",47,536870919]],["^15",[62,"^U",47,536870919]],["^15",[62,"^17",true,536870919]],["^15",[62,"^;","~u649a41ae-1acb-4e11-8f47-42ab878bcac1",536870919]],["^15",[63,"^Q","Since an Array is built on an [[Object]], a variable comparing one Array to another variable compares the reference and not the individual elements.",536870919]],["^15",[63,"^O","^16",536870919]],["^15",[63,"^F",48,536870919]],["^15",[63,"^X",47,536870919]],["^15",[63,"^V",47,536870919]],["^15",[63,"^U",39,536870919]],["^15",[63,"^U",47,536870919]],["^15",[63,"^H",39,536885124]],["^15",[63,"^17",true,536870919]],["^15",[63,"^;","~u649a41ae-ee88-4713-87f9-90771fe9c554",536870919]],["^15",[64,"^Q","Arrays in JS are not homogenous, so they can hold values of any type and any element can be any type, even [[Object]]s",536870919]],["^15",[64,"^O","^16",536870919]],["^15",[64,"^F",52,536870919]],["^15",[64,"^X",47,536870919]],["^15",[64,"^V",47,536870919]],["^15",[64,"^U",39,536870919]],["^15",[64,"^U",47,536870919]],["^15",[64,"^H",39,536885124]],["^15",[64,"^17",true,536870919]],["^15",[64,"^;","~u649a41ae-f6fb-49e5-9af0-929cf1dcfeea",536870919]],["^15",[65,"^Q","This is a special data structure in JS.\n```js\nlet x = new Array();\nlet y= []; \n```\nare the 2 syntaxes to create an Array.\n\nIt is still just an [[Object]], just quite optimized by the JS engine.",536870919]],["^15",[65,"^O","^16",536870919]],["^15",[65,"^F",47,536870919]],["^15",[65,"^X",47,536870919]],["^15",[65,"^V",47,536870919]],["^15",[65,"^U",39,536870919]],["^15",[65,"^U",47,536870919]],["^15",[65,"^H",39,536885124]],["^15",[65,"^17",true,536870919]],["^15",[65,"^;","~u649a41ae-3411-4d85-bdb6-0831bd84c6c5",536870919]],["^15",[66,"^Q","Concatenation\n``.concat(<arg1>,<arg2>...)`` adds given element to the array. If the arg is an array, or more specifically is an [[Object]] with a [[Symbol]] property Symbol.isConcatSpreadable with value ``true`` then all the elements/values from K:V pairs added to the array except some special ones like ``length``.\nFor ex.:\n```js\nlet x =[1,2];\nx.concat(2,4); //ok, makes x 1,2,2,4\nx.concat([2,3]); //1,2,2,4,2,3\n\nlet y= {\n 0: \"yo\",\n 1: \"noo\",\n [Symbol.isConcatSpreadable]: true,\n length: 2,\n};\n\nx.concat(y); //ok, 1,2,2,4,2,3,\"yo\", \"noo\"\n```",536870919]],["^15",[66,"^O","^16",536870919]],["^15",[66,"^F",50,536870919]],["^15",[66,"^X",47,536870919]],["^15",[66,"^V",47,536870919]],["^15",[66,"^U",39,536870919]],["^15",[66,"^U",43,536870919]],["^15",[66,"^U",47,536870919]],["^15",[66,"^H",39,536885124]],["^15",[66,"^H",43,536885124]],["^15",[66,"^17",true,536870919]],["^15",[66,"^;","~u649a41ae-e0e5-40e4-aa62-c39ef6396896",536870919]],["^15",[67,"^Q","~``.reverse()`` to modify the array and reverse its elements.",536870919]],["^15",[67,"^O","^16",536870919]],["^15",[67,"^F",55,536870919]],["^15",[67,"^X",47,536870919]],["^15",[67,"^V",47,536870919]],["^15",[67,"^U",47,536870919]],["^15",[67,"^17",true,536870919]],["^15",[67,"^;","~u649a41ae-37f6-4729-ac85-89fd2120834d",536870919]],["^15",[68,"^Q","[[typeOf]] doesn't work with arrays, it returns ``Object``. \nWe use ``Array.isArray(<obj>)`` instead.",536870919]],["^15",[68,"^O","^16",536870919]],["^15",[68,"^F",71,536870919]],["^15",[68,"^X",47,536870919]],["^15",[68,"^V",47,536870919]],["^15",[68,"^U",38,536870919]],["^15",[68,"^U",47,536870919]],["^15",[68,"^H",38,536885124]],["^15",[68,"^17",true,536870919]],["^15",[68,"^;","~u649a41ae-1f10-42f8-aae5-e6b01893a3c5",536870919]],["^15",[69,"^Q","for..of [[Loop]] works with Array. We can use for..in too but it is not optimized for looping over arrays and also visits internal properties of the array Object. Arrays implement [[Iterable]]s so they work directly with for..of.\n\n``.forEach(<func>(item,index,array)`` \nFor each element of the array, call the [[Function]] and pass it the given 3 items.\nFor ex.:\n```js\nlet x =[1,2];\nx.forEach(alert); //passes each element to alert.\n```\nThis is also to say, Functions in JS can be passed around like so and JS automatically passes them the arguments.",536870919]],["^15",[69,"^O","^16",536870919]],["^15",[69,"^F",51,536870919]],["^15",[69,"^X",47,536870919]],["^15",[69,"^V",47,536870919]],["^15",[69,"^U",40,536870919]],["^15",[69,"^U",44,536870919]],["^15",[69,"^U",46,536870919]],["^15",[69,"^U",47,536870919]],["^15",[69,"^H",40,536885124]],["^15",[69,"^H",44,536885124]],["^15",[69,"^H",46,536885124]],["^15",[69,"^17",true,536870919]],["^15",[69,"^;","~u649a41ae-2b30-42d3-a47f-444e50263b65",536870919]],["^15",[70,"^Q","Stack/Queue like methods\n``.push(<val>)``: Push an element to the end of an array\n``.pop()``: Get an element from the end of an array and remove it\n``.shift()``: Get an element from the front and remove it\n``.unshift(<val>)``: Push an element to the front.\n\nYes shift and unshift have a TC of O(n).",536870919]],["^15",[70,"^O","^16",536870919]],["^15",[70,"^F",64,536870919]],["^15",[70,"^X",47,536870919]],["^15",[70,"^V",47,536870919]],["^15",[70,"^U",47,536870919]],["^15",[70,"^17",true,536870919]],["^15",[70,"^;","~u649a41ae-64c9-4d08-9a34-d3c0edfe8bf2",536870919]],["^15",[71,"^Q","~``.reduce(<func>(accumulatedValue, item, index, array), <optional initial value>)`` to reduce an array.\nSimilarly we have ``.reduceRight(...)`` which goes from right end to the left end.\nAlso passes ``this`` to the func.",536870919]],["^15",[71,"^O","^16",536870919]],["^15",[71,"^F",57,536870919]],["^15",[71,"^X",47,536870919]],["^15",[71,"^V",47,536870919]],["^15",[71,"^U",47,536870919]],["^15",[71,"^17",true,536870919]],["^15",[71,"^;","~u649a41ae-63f3-4c4e-be99-aca2ab4284b1",536870919]],["^15",[72,"^3","alias:: Async\n\n- JS supports async, albeit weakly. This is because JS is a single-threaded language. That is, all JS code in a script can only ever execute on a single thread. Various [[Optimization]]s to the execution and how [[V8]] works ensure the execution remains smooth but it remains on a single thread per process. \n  Node introduces the concept of [[Web Worker]]s which do multi-threading but that is done by spawning other processes, each process has an overhead associated with it, and a thread, this thread is then monitored by a main thread in another process and that is how multi-threading is achieved but true multi-threading is there in JS (or it is, idk yet).\n- ``Callbacks``\n  Normal [[Function]]s that are passed to other functions and are then executed from these functions when they are finished processing whatever they had. \n  This approach is simple enough but it leads to a huge bloat named ``Callback Hell`` as we can have multiple levels of nesting with these and if they also include something like [[Error]] Handling, it adds complexity.\n- ``Promise``\n  JS natively supports promises, these are like so\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // executor (the producing code, \"singer\")\n  });\n  ```\n  The function passed to the Promise is called the ``executor`` and it accepts 2 callback [[Function]]s, ``resolve(value)`` and ``reject(error)``, both of these are implicitly passed by the ``Promise`` [[Class]]. However, executor has to call these with the result, if it was a success the ``resolve(...)`` should be called and for an error, ``reject(...)``. \n  \n  The executor is ran automatically by the Promise.\n  ![image.png](../assets/image_1686945239138_0.png)\n  For ex.:\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    resolve(\"done\");\n  \n    reject(new Error(\"…\")); // ignored\n    setTimeout(() => resolve(\"…\")); // ignored\n  });\n  ```\n  \n  \n  * The Promise is ran automatically so it has 3 states, \n   ``Pending``\n  ``Successful``\n  ``Failed``\n  and the success or failure is determined by which callback was called by us, either resolve or reject.\n  However, the state can only change once after Pending, so if the executor calls ``resolve(...)`` then the Promise's state is successful and it can't change, even if we call ``reject(...)`` later. However, it will process the rest of the body, it just won't be able to change the state.\n  \n  The result obtained after the executor's execution is the value passed to either the ``resolve(...)`` or ``reject(...)``. Both the result and state are internal properties of the Promise [[Object]].\n  \n  * An executor can call ``..reject(...)`` in 2 ways, either explicitly or it is called implicitly if there's an uncaught [[Error]] in the executor.\n  Similarly, ``return`` also implicitly uses ``.resolve(...)``.\n  \n  * Producer and Consumer\n  The Promise Object is an interface between a producer, which is the executor which produces some result and the consumer is a function that reads this produced value.\n  To consume a promise, we use ``.then(<func1>,<func2>)``, ``.catch(err)``, ``.finally()`` on the Promise' object. These 3 methods are known as ``Promise Handlers``.\n  For ex.:\n  ```js\n  let promise= new Promise(...);\n  promise.then(\n  function(result) {},\n  function(rejectedValue){},\n  ); //And they do as they are named.\n  \n  promise.catch(\n  function(err) { },\n  );\n  \n  promise.finally(\n  function() {\n  ...\n  }\n  );\n  ```\n  For ``.then(...)``, if the state was successful then the first callback is called, otherwise the second. Both are optional.\n  ``.catch(<func>)`` is a shorthand for ``.then(null, <func>)``.\n  ``.finally(<func>)`` is ran despite the state and it is a [[monad]], i.e., it returns the same object back allowing us to passthrough the promise events.\n  For ex.:\n  ```js\n  new Promise(...)\n  .finally(() => {})\n  .then(result=> console.log(result)\n  );\n  ```\n  Here after the Promise is finished, ``.finally(...)`` is ran then ``.then(...)`` is ran.\n  \n  We don't need multiple ``.catch(...)``, or in other words, ``.then(null, rejects)``. if we have a single ``.catch`` in a promise chain, then it's ``reject`` method is used and the error is considered handled. If there are multiple ``.catch`` then the nearest one is used and then the rest of the chain continues.\n  For ex.:\n  ```js\n  new Promise(...)\n  .then(...) //then's without a reject handler\n  .then(...)  //assume this one has an error\n  .then(...) //assume it doesnt have a reject handler too\n  .catch(...) //will be triggered\n  .then(...) //will be executed normally, i.e., the catch didn't halt the chain.\n  ```\n  But the key point is, there must always be a ``reject`` handler at the end using either ``.then`` or ``.catch``, errors that are unhandled crash the whole script in JS and raise an ``unhandledrejection`` [[Browser Event]] in the [[Browser]].\n    \n  \n  * We can have a Promise executed immediately too, such are Promises that have no async code inside them.\n  For ex.:\n  ```js\n  let promise = new Promise(resolve => resolve(\"done!\"));\n  ```\n  Handlers attached to a resolved promise are executed immediately.\n  \n  * Thenable\n  The Promise Constructor and ``.then(<func1>, <func2>)`` handler return a ``Thenable``, this is an Object that also has a ``.then(<func1>, <func2>)``, which also returns a Thenable and so on. The logic is, we can chain these Thenables to process events one after another modularly. \n  It looks like so\n  \n  ```js\n  class X {\n   constructor(value) {\n   this.value= value\n   }\n   then(resolve,reject) {\n    try {\n      return X(resolve(value))\n     } catch(err) {\n      return X(reject(value))\n    }\n   }\n  }\n  \n  let x= new X(2);\n  x.then(\n  function(result) { return 4;}, //result gets 2\n  function(rejectedValue) { } //same\n  ).then(\n   function(result) { return 5;}, //result gets 4 after previous then is finished processing\n   function(rejectedValue) { } //same\n  );\n  //and so on\n  ```\n  The flow looks like so\n  ![image.png](../assets/image_1687009322810_0.png)\n  \n  This is kind of how ``Thenable`` returned by a promise works too, a big difference is that the thenable returned by a Promise is actually just the Promise class itself, this is why its called ``Promise Chain``. \n  Note: Chaining thenables is not the same as assigning multiple ``.then``'s to an object. \n  Each would finish and not recieve value from its predecessor but only the main object,\n  for ex.:\n  ```js\n  ...\n  x.then(..);\n  x.then(...);\n  ```\n  would have a flow like so\n  ![image.png](../assets/image_1687009526218_0.png)\n  \n  Ofc, since thenables just return whatever their callbacks return but wrapped in a Thenable, this means we can return anything, even another Promise which also returns a Thenable\n  For ex.:\n  ```js\n  let x = new Promise(...)\n  .then((result)=> new Promise(...))\n  .then(...);\n  ```\n  works. And works like expected, until the first promise is resolved the first ``.then(...)`` isn't executed and the same for the second one.\n  Kind of like so\n  ![image.png](../assets/image_1687009984701_0.png)\n- Promise API\n  Provides other features to work with Promises.\n  ``Promise.all(<iterable>)``: Takes an [[Iterable]] of executors and processes them all concurrently, when all the executors are finished, then the handlers are executed. Can accept raw values, Promises and normal functions. When any one of the executors fail or reject, all other executors are halted and the rejection passed to the handlers. The value to the resolve handler is also an iterable, of results.\n  ``Promise.allSettled(<iterable>)``: Same as ``.all()``, except doesn't halt and lets all executors finish then passes an [[Object]] to the handlers with results where each result Object is\n  *`{status:\"fulfilled\", value:result}` for successful responses,\n  *`{status:\"rejected\", reason:error}` for errors.\n  Yes, this means, reject isn't called after ``.allSettled()``\n  ``Promise.race(<iterable>)``: Waits as long as the first executor finishes, then immediately halts all others and passes the result to handlers.\n  ``Promise.any(<iterable>)``: Similar to race, but waits as long as an executor with success state is finished. If all executors fail, then an ``AggregateError`` Object is returned with a list of errors.\n  ``Promise.resolve(<func>)`` and ``Promise.reject(<func>)``: Returns a Promise with its state already set at success or failure despite whatever the passed callback function does.\n  \n  Promisification\n  We can turn normal functions into Promises, this is called Promisification and is helpful when when want to turn sync code async.\n  Other than manually writing helper functions that do so, we have [es6-promisify](https://github.com/digitaldesignlabs/es6-promisify) and ``util.promisify`` in Node.\n-\n- Async/Await\n  Using the [[Operator]] ``async`` on a [[Function]] turns its body into an executor of a Promise.\n  The await [[Operator]] is used on a Promise and pauses the execution until the Promise is finished, yes since this pauses the execution, or in other words, suspends the function, it can't be used in the macrotask [[Message Queue]] directly and can only be used inside Promises (or async functions). Then after the Promise is finished, it's returned value is returned by await.\n  For ex.:\n  ```js\n  async function noo() {\n   return 2;\n  }\n  async function yo() { \n   let x = await noo(); //pauses yo until Promise function noo() is finished, then puts 2 in x.\n   return 1; \n  } \n  //is the same as\n  /*\n  new Promise(function(resolve,reject){\n     let x = await noo();\n     resolve(1);\n  });\n  */\n  \n  yo(); // Puts yo() in the microtask queue\n  let x = await noo(); //also works if this script is a Module\n  ```\n  We can ``await`` in the top-level [[Scope]] of [[Module]]s.\n  \n  * async can also be used with methods.\n  * If the Promise being awaited fails with an error or reject, then await rethrows the [[Error]].\n  But since it can only be used in Promises itself, we can ``catch`` it quite easily.\n  For ex.\n  ```js\n  async function yo() {\n    throw new Error();\n  }\n  async function no() {\n    let x = await yo();\n  }\n  no().catch((er)=>{...}) ; //since no() returns a Promise itself, we can use the Thenable of Promise to handle the error.\n  ```\n  We can use a simple ``try{...} catch{...}`` above an await too.\n-",536870919]],["^15",[72,"^18",1687830958684,536870919]],["^15",[72,"^Z","pages/Asynchronous.md",536870919]],["^15",[73,"^K",1687830959770,536870919]],["^15",[73,"^[",735,536870929]],["^15",[73,"^O","^16",536870925]],["^15",[73,"^@",false,536870919]],["^15",[73,"^Y","browser event",536870919]],["^15",[73,"^11","Browser Event",536870919]],["^15",[73,"^B",1688630513626,536883585]],["^15",[73,"^;","~u649a41af-519e-4b72-8116-4aa6ef87c4a2",536870919]],["^15",[74,"^K",1687830958681,536870919]],["^15",[74,"^@",false,536870919]],["^15",[74,"^Y","monad",536870919]],["^15",[74,"^11","monad",536870919]],["^15",[74,"^B",1687830958681,536870919]],["^15",[74,"^;","~u649a41ae-89e5-4d85-9ef6-51c195dacb74",536870919]],["^15",[75,"^K",1687830960032,536870919]],["^15",[75,"^[",142,536870919]],["^15",[75,"^@",false,536870919]],["^15",[75,"^Y","class",536870919]],["^15",[75,"^11","Class",536870919]],["^15",[75,"^B",1687830960032,536870919]],["^15",[75,"^;","~u662fc702-7989-4a43-b9c8-b4f67075f579",536885544]],["^15",[76,"^K",1687830960305,536870919]],["^15",[76,"^[",578,536870919]],["^15",[76,"^@",false,536870919]],["^15",[76,"^Y","operator",536870919]],["^15",[76,"^11","Operator",536870919]],["^15",[76,"^B",1713380044479,536885519]],["^15",[76,"^;","~u662fc702-81af-4ff5-b344-cc7c1dd101ea",536885544]],["^15",[77,"^5",344,536870919]],["^15",[77,"^K",1687830959936,536870919]],["^15",[77,"^[",343,536870919]],["^15",[77,"^@",false,536870919]],["^15",[77,"^Y","error",536870919]],["^15",[77,"^11","Error",536870919]],["^15",[77,"^?",["^ ","^1:",["^1;",["Exception"]]],536870919]],["^15",[77,"^4",["^ ","^1:","Exception"],536870919]],["^15",[77,"^B",1687830959936,536870919]],["^15",[77,"^;","~u6616a43c-1fb7-4360-9bd9-1ec1288eaf2b",536885136]],["^15",[78,"^5",83,536870919]],["^15",[78,"^K",1687830959659,536870919]],["^15",[78,"^@",false,536870919]],["^15",[78,"^Y","async",536870919]],["^15",[78,"^11","Async",536870919]],["^15",[78,"^B",1687830959659,536870919]],["^15",[78,"^;","~u649a41af-ed41-4808-b431-8860f78b3732",536870919]],["^15",[79,"^K",1687830960184,536870919]],["^15",[79,"^[",675,536870919]],["^15",[79,"^@",false,536870919]],["^15",[79,"^Y","web worker",536870919]],["^15",[79,"^11","Web Worker",536870919]],["^15",[79,"^B",1687830960184,536870919]],["^15",[79,"^;","~u649a41b0-074d-4bf9-a813-806ec4f16af3",536870919]],["^15",[80,"^K",1687830959769,536870919]],["^15",[80,"^[",490,536870919]],["^15",[80,"^@",false,536870919]],["^15",[80,"^Y","message queue",536870919]],["^15",[80,"^11","Message Queue",536870919]],["^15",[80,"^B",1687830959769,536870919]],["^15",[80,"^;","~u662fc702-323b-49cb-9ce6-bc6bed29073b",536885544]],["^15",[81,"^K",1687830958677,536870919]],["^15",[81,"^@",false,536870919]],["^15",[81,"^Y","v8",536870919]],["^15",[81,"^11","V8",536870919]],["^15",[81,"^B",1687830958677,536870919]],["^15",[81,"^;","~u649a41ae-8c7a-4412-a1c1-b6a20b6aa3d0",536870919]],["^15",[82,"^K",1687830960332,536870919]],["^15",[82,"^[",617,536870919]],["^15",[82,"^@",false,536870919]],["^15",[82,"^Y","scope",536870919]],["^15",[82,"^11","Scope",536870919]],["^15",[82,"^B",1687830960332,536870919]],["^15",[82,"^;","~u6616a43c-c7a6-402c-afda-f97b4ef5ceed",536885133]],["^15",[83,"^5",78,536870919]],["^15",[83,"^K",1687830959814,536870919]],["^15",[83,"^[",72,536870919]],["^15",[83,"^@",false,536870919]],["^15",[83,"^Y","asynchronous",536870919]],["^15",[83,"^11","Asynchronous",536870919]],["^15",[83,"^?",["^ ","^1:",["^1;",["Async"]]],536870919]],["^15",[83,"^4",["^ ","^1:","Async"],536870919]],["^15",[83,"^B",1687830959814,536870919]],["^15",[83,"^;","~u662fc702-e68c-484f-8715-8e3e96e54c61",536885544]],["^15",[84,"^K",1687830960199,536870919]],["^15",[84,"^@",false,536870919]],["^15",[84,"^Y","optimization",536870919]],["^15",[84,"^11","Optimization",536870919]],["^15",[84,"^B",1687830960199,536870919]],["^15",[84,"^;","~u6616a43c-3538-4d47-8ec0-a96bdca4a67a",536885133]],["^15",[85,"^Q","alias:: Async\n\n",536870919]],["^15",[85,"^O","^16",536870919]],["^15",[85,"~:block/invalid-properties",["^1;",[]],536870919]],["^15",[85,"^F",83,536870919]],["^15",[85,"^X",83,536870919]],["^15",[85,"^V",83,536870919]],["^15",[85,"^U",78,536870919]],["^15",[85,"^U",83,536870919]],["^15",[85,"^:",true,536870919]],["^15",[85,"^?",["^ ","^1:",["^1;",["Async"]]],536870919]],["^15",[85,"^J",["^1:"],536870919]],["^15",[85,"^4",["^ ","^1:","Async"],536870919]],["^15",[85,"^H",78,536870919]],["^15",[85,"^17",true,536870919]],["^15",[85,"^;","~u649a41ae-8955-4bb9-9145-2138a08272f6",536870919]],["^15",[86,"^Q","JS supports async, albeit weakly. This is because JS is a single-threaded language. That is, all JS code in a script can only ever execute on a single thread. Various [[Optimization]]s to the execution and how [[V8]] works ensure the execution remains smooth but it remains on a single thread per process. \nNode introduces the concept of [[Web Worker]]s which do multi-threading but that is done by spawning other processes, each process has an overhead associated with it, and a thread, this thread is then monitored by a main thread in another process and that is how multi-threading is achieved but true multi-threading is there in JS (or it is, idk yet).",536870919]],["^15",[86,"^O","^16",536870919]],["^15",[86,"^F",85,536870919]],["^15",[86,"^X",83,536870919]],["^15",[86,"^V",83,536870919]],["^15",[86,"^U",79,536870919]],["^15",[86,"^U",81,536870919]],["^15",[86,"^U",83,536870919]],["^15",[86,"^U",84,536870919]],["^15",[86,"^H",79,536870919]],["^15",[86,"^H",81,536870919]],["^15",[86,"^H",84,536870919]],["^15",[86,"^17",true,536870919]],["^15",[86,"^;","~u649a41ae-9784-4cb7-acce-dca7a462212f",536870919]],["^15",[87,"^Q","~``Callbacks``\nNormal [[Function]]s that are passed to other functions and are then executed from these functions when they are finished processing whatever they had. \nThis approach is simple enough but it leads to a huge bloat named ``Callback Hell`` as we can have multiple levels of nesting with these and if they also include something like [[Error]] Handling, it adds complexity.",536870919]],["^15",[87,"^O","^16",536870919]],["^15",[87,"^F",86,536870919]],["^15",[87,"^X",83,536870919]],["^15",[87,"^V",83,536870919]],["^15",[87,"^U",44,536870919]],["^15",[87,"^U",77,536870919]],["^15",[87,"^U",83,536870919]],["^15",[87,"^H",44,536870919]],["^15",[87,"^H",77,536870919]],["^15",[87,"^17",true,536870919]],["^15",[87,"^;","~u649a41ae-e2e9-4fb9-a65f-e37574da87af",536870919]],["^15",[88,"^Q","~``Promise``\nJS natively supports promises, these are like so\n```js\nlet promise = new Promise(function(resolve, reject) {\n  // executor (the producing code, \"singer\")\n});\n```\nThe function passed to the Promise is called the ``executor`` and it accepts 2 callback [[Function]]s, ``resolve(value)`` and ``reject(error)``, both of these are implicitly passed by the ``Promise`` [[Class]]. However, executor has to call these with the result, if it was a success the ``resolve(...)`` should be called and for an error, ``reject(...)``. \n\nThe executor is ran automatically by the Promise.\n![image.png](../assets/image_1686945239138_0.png)\nFor ex.:\n```js\nlet promise = new Promise(function(resolve, reject) {\n  resolve(\"done\");\n\n  reject(new Error(\"…\")); // ignored\n  setTimeout(() => resolve(\"…\")); // ignored\n});\n```\n\n\n* The Promise is ran automatically so it has 3 states, \n ``Pending``\n``Successful``\n``Failed``\nand the success or failure is determined by which callback was called by us, either resolve or reject.\nHowever, the state can only change once after Pending, so if the executor calls ``resolve(...)`` then the Promise's state is successful and it can't change, even if we call ``reject(...)`` later. However, it will process the rest of the body, it just won't be able to change the state.\n\nThe result obtained after the executor's execution is the value passed to either the ``resolve(...)`` or ``reject(...)``. Both the result and state are internal properties of the Promise [[Object]].\n\n* An executor can call ``..reject(...)`` in 2 ways, either explicitly or it is called implicitly if there's an uncaught [[Error]] in the executor.\nSimilarly, ``return`` also implicitly uses ``.resolve(...)``.\n\n* Producer and Consumer\nThe Promise Object is an interface between a producer, which is the executor which produces some result and the consumer is a function that reads this produced value.\nTo consume a promise, we use ``.then(<func1>,<func2>)``, ``.catch(err)``, ``.finally()`` on the Promise' object. These 3 methods are known as ``Promise Handlers``.\nFor ex.:\n```js\nlet promise= new Promise(...);\npromise.then(\nfunction(result) {},\nfunction(rejectedValue){},\n); //And they do as they are named.\n\npromise.catch(\nfunction(err) { },\n);\n\npromise.finally(\nfunction() {\n...\n}\n);\n```\nFor ``.then(...)``, if the state was successful then the first callback is called, otherwise the second. Both are optional.\n``.catch(<func>)`` is a shorthand for ``.then(null, <func>)``.\n``.finally(<func>)`` is ran despite the state and it is a [[monad]], i.e., it returns the same object back allowing us to passthrough the promise events.\nFor ex.:\n```js\nnew Promise(...)\n.finally(() => {})\n.then(result=> console.log(result)\n);\n```\nHere after the Promise is finished, ``.finally(...)`` is ran then ``.then(...)`` is ran.\n\nWe don't need multiple ``.catch(...)``, or in other words, ``.then(null, rejects)``. if we have a single ``.catch`` in a promise chain, then it's ``reject`` method is used and the error is considered handled. If there are multiple ``.catch`` then the nearest one is used and then the rest of the chain continues.\nFor ex.:\n```js\nnew Promise(...)\n.then(...) //then's without a reject handler\n.then(...)  //assume this one has an error\n.then(...) //assume it doesnt have a reject handler too\n.catch(...) //will be triggered\n.then(...) //will be executed normally, i.e., the catch didn't halt the chain.\n```\nBut the key point is, there must always be a ``reject`` handler at the end using either ``.then`` or ``.catch``, errors that are unhandled crash the whole script in JS and raise an ``unhandledrejection`` [[Browser Event]] in the [[Browser]].\n  \n\n* We can have a Promise executed immediately too, such are Promises that have no async code inside them.\nFor ex.:\n```js\nlet promise = new Promise(resolve => resolve(\"done!\"));\n```\nHandlers attached to a resolved promise are executed immediately.\n\n* Thenable\nThe Promise Constructor and ``.then(<func1>, <func2>)`` handler return a ``Thenable``, this is an Object that also has a ``.then(<func1>, <func2>)``, which also returns a Thenable and so on. The logic is, we can chain these Thenables to process events one after another modularly. \nIt looks like so\n\n```js\nclass X {\n constructor(value) {\n this.value= value\n }\n then(resolve,reject) {\n  try {\n    return X(resolve(value))\n   } catch(err) {\n    return X(reject(value))\n  }\n }\n}\n\nlet x= new X(2);\nx.then(\nfunction(result) { return 4;}, //result gets 2\nfunction(rejectedValue) { } //same\n).then(\n function(result) { return 5;}, //result gets 4 after previous then is finished processing\n function(rejectedValue) { } //same\n);\n//and so on\n```\nThe flow looks like so\n![image.png](../assets/image_1687009322810_0.png)\n\nThis is kind of how ``Thenable`` returned by a promise works too, a big difference is that the thenable returned by a Promise is actually just the Promise class itself, this is why its called ``Promise Chain``. \nNote: Chaining thenables is not the same as assigning multiple ``.then``'s to an object. \nEach would finish and not recieve value from its predecessor but only the main object,\nfor ex.:\n```js\n...\nx.then(..);\nx.then(...);\n```\nwould have a flow like so\n![image.png](../assets/image_1687009526218_0.png)\n\nOfc, since thenables just return whatever their callbacks return but wrapped in a Thenable, this means we can return anything, even another Promise which also returns a Thenable\nFor ex.:\n```js\nlet x = new Promise(...)\n.then((result)=> new Promise(...))\n.then(...);\n```\nworks. And works like expected, until the first promise is resolved the first ``.then(...)`` isn't executed and the same for the second one.\nKind of like so\n![image.png](../assets/image_1687009984701_0.png)",536870919]],["^15",[88,"^O","^16",536870919]],["^15",[88,"^F",87,536870919]],["^15",[88,"^X",83,536870919]],["^15",[88,"^V",83,536870919]],["^15",[88,"^U",33,536870919]],["^15",[88,"^U",39,536870919]],["^15",[88,"^U",44,536870919]],["^15",[88,"^U",73,536870919]],["^15",[88,"^U",74,536870919]],["^15",[88,"^U",75,536870919]],["^15",[88,"^U",77,536870919]],["^15",[88,"^U",83,536870919]],["^15",[88,"^H",33,536870919]],["^15",[88,"^H",39,536870919]],["^15",[88,"^H",44,536870919]],["^15",[88,"^H",73,536870919]],["^15",[88,"^H",74,536870919]],["^15",[88,"^H",75,536870919]],["^15",[88,"^H",77,536870919]],["^15",[88,"^17",true,536870919]],["^15",[88,"^;","~u649a41ae-64f5-4422-870d-aeb3bdf9c673",536870919]],["^15",[89,"^Q","Promise API\nProvides other features to work with Promises.\n``Promise.all(<iterable>)``: Takes an [[Iterable]] of executors and processes them all concurrently, when all the executors are finished, then the handlers are executed. Can accept raw values, Promises and normal functions. When any one of the executors fail or reject, all other executors are halted and the rejection passed to the handlers. The value to the resolve handler is also an iterable, of results.\n``Promise.allSettled(<iterable>)``: Same as ``.all()``, except doesn't halt and lets all executors finish then passes an [[Object]] to the handlers with results where each result Object is\n*`{status:\"fulfilled\", value:result}` for successful responses,\n*`{status:\"rejected\", reason:error}` for errors.\nYes, this means, reject isn't called after ``.allSettled()``\n``Promise.race(<iterable>)``: Waits as long as the first executor finishes, then immediately halts all others and passes the result to handlers.\n``Promise.any(<iterable>)``: Similar to race, but waits as long as an executor with success state is finished. If all executors fail, then an ``AggregateError`` Object is returned with a list of errors.\n``Promise.resolve(<func>)`` and ``Promise.reject(<func>)``: Returns a Promise with its state already set at success or failure despite whatever the passed callback function does.\n\nPromisification\nWe can turn normal functions into Promises, this is called Promisification and is helpful when when want to turn sync code async.\nOther than manually writing helper functions that do so, we have [es6-promisify](https://github.com/digitaldesignlabs/es6-promisify) and ``util.promisify`` in Node.",536870919]],["^15",[89,"^O","^16",536870919]],["^15",[89,"^F",88,536870919]],["^15",[89,"^X",83,536870919]],["^15",[89,"^V",83,536870919]],["^15",[89,"^U",39,536870919]],["^15",[89,"^U",46,536870919]],["^15",[89,"^U",83,536870919]],["^15",[89,"^H",39,536870919]],["^15",[89,"^H",46,536870919]],["^15",[89,"^17",true,536870919]],["^15",[89,"^;","~u649a41ae-b65d-4779-9ca4-07606a24929e",536870919]],["^15",[90,"^Q","",536870919]],["^15",[90,"^O","^16",536870919]],["^15",[90,"^F",89,536870919]],["^15",[90,"^X",83,536870919]],["^15",[90,"^V",83,536870919]],["^15",[90,"^U",83,536870919]],["^15",[90,"^17",true,536870919]],["^15",[90,"^;","~u649a41ae-04da-484c-a713-3ed168a3c7c1",536870919]],["^15",[91,"^Q","Async/Await\nUsing the [[Operator]] ``async`` on a [[Function]] turns its body into an executor of a Promise.\nThe await [[Operator]] is used on a Promise and pauses the execution until the Promise is finished, yes since this pauses the execution, or in other words, suspends the function, it can't be used in the macrotask [[Message Queue]] directly and can only be used inside Promises (or async functions). Then after the Promise is finished, it's returned value is returned by await.\nFor ex.:\n```js\nasync function noo() {\n return 2;\n}\nasync function yo() { \n let x = await noo(); //pauses yo until Promise function noo() is finished, then puts 2 in x.\n return 1; \n} \n//is the same as\n/*\nnew Promise(function(resolve,reject){\n   let x = await noo();\n   resolve(1);\n});\n*/\n\nyo(); // Puts yo() in the microtask queue\nlet x = await noo(); //also works if this script is a Module\n```\nWe can ``await`` in the top-level [[Scope]] of [[Module]]s.\n\n* async can also be used with methods.\n* If the Promise being awaited fails with an error or reject, then await rethrows the [[Error]].\nBut since it can only be used in Promises itself, we can ``catch`` it quite easily.\nFor ex.\n```js\nasync function yo() {\n  throw new Error();\n}\nasync function no() {\n  let x = await yo();\n}\nno().catch((er)=>{...}) ; //since no() returns a Promise itself, we can use the Thenable of Promise to handle the error.\n```\nWe can use a simple ``try{...} catch{...}`` above an await too.",536870919]],["^15",[91,"^O","^16",536870919]],["^15",[91,"^F",90,536870919]],["^15",[91,"^X",83,536870919]],["^15",[91,"^V",83,536870919]],["^15",[91,"^U",32,536870919]],["^15",[91,"^U",44,536870919]],["^15",[91,"^U",76,536870919]],["^15",[91,"^U",77,536870919]],["^15",[91,"^U",80,536870919]],["^15",[91,"^U",82,536870919]],["^15",[91,"^U",83,536870919]],["^15",[91,"^H",32,536870919]],["^15",[91,"^H",44,536870919]],["^15",[91,"^H",76,536870919]],["^15",[91,"^H",77,536870919]],["^15",[91,"^H",80,536870919]],["^15",[91,"^H",82,536870919]],["^15",[91,"^17",true,536870919]],["^15",[91,"^;","~u649a41ae-58f1-4a20-bc25-8be3d43e2d87",536870919]],["^15",[92,"^Q","",536870919]],["^15",[92,"^O","^16",536870919]],["^15",[92,"^F",91,536870919]],["^15",[92,"^X",83,536870919]],["^15",[92,"^V",83,536870919]],["^15",[92,"^U",83,536870919]],["^15",[92,"^17",true,536870919]],["^15",[92,"^;","~u649a41ae-ee2b-4461-aa94-9f31ee17ea82",536870919]],["^15",[93,"^3","- [Babel](https://babeljs.io/)\n-",536870919]],["^15",[93,"^18",1687830958694,536870919]],["^15",[93,"^Z","pages/Babel.md",536870919]],["^15",[94,"^K",1687830960151,536870919]],["^15",[94,"^[",93,536870919]],["^15",[94,"^@",false,536870919]],["^15",[94,"^Y","babel",536870919]],["^15",[94,"^11","Babel",536870919]],["^15",[94,"^B",1687830960151,536870919]],["^15",[94,"^;","~u649a41b0-e17e-4d40-926e-a8eec7d109f2",536870919]],["^15",[95,"^Q","[Babel](https://babeljs.io/)",536870919]],["^15",[95,"^O","^16",536870919]],["^15",[95,"^F",94,536870919]],["^15",[95,"^X",94,536870919]],["^15",[95,"^V",94,536870919]],["^15",[95,"^U",94,536870919]],["^15",[95,"^17",true,536870919]],["^15",[95,"^;","~u649a41ae-4b56-4006-a938-6279fe322462",536870919]],["^15",[96,"^Q","",536870919]],["^15",[96,"^O","^16",536870919]],["^15",[96,"^F",95,536870919]],["^15",[96,"^X",94,536870919]],["^15",[96,"^V",94,536870919]],["^15",[96,"^U",94,536870919]],["^15",[96,"^17",true,536870919]],["^15",[96,"^;","~u649a41ae-626d-4ab6-be97-e8e0adcd5c7d",536870919]],["^15",[97,"^3","- [[Object]] wrapper for primitive type ``bigint``\n  For ex.:\n  ```js\n  let x = 234n; //BigInt\n  let y= BigInt(5); //also ok\n  ```\n- Unary [[Operator]] ``+`` is not supported on bigints.\n- For comparisons, BigInts and [[Number]]s can be compared and work as expected. Same with [[Boolean]]s as a BigInt of ``0`` is false, rest are true.\n- [[Polyfill]]ing BigInts is tricky as BigInts return BigInts on division/addition/etc. \n  So it is recommended to use [JSBI](https://github.com/GoogleChromeLabs/jsbi) if we need to polyfill as JSBI uses explicit methods for BigInt ops.",536870919]],["^15",[97,"^18",1687830958708,536870919]],["^15",[97,"^Z","pages/BigInt.md",536870919]],["^15",[98,"^K",1687830959855,536870919]],["^15",[98,"^[",97,536870919]],["^15",[98,"^@",false,536870919]],["^15",[98,"^Y","bigint",536870919]],["^15",[98,"^11","BigInt",536870919]],["^15",[98,"^B",1687830959855,536870919]],["^15",[98,"^;","~u662fc702-abdb-4e1f-98d3-67c0711318a2",536885544]],["^15",[99,"^K",1687830960251,536870919]],["^15",[99,"^[",106,536870919]],["^15",[99,"^@",false,536870919]],["^15",[99,"^Y","boolean",536870919]],["^15",[99,"^11","Boolean",536870919]],["^15",[99,"^B",1687830960251,536870919]],["^15",[99,"^;","~u662fc702-5b51-4ba7-b7ee-73cab9ba24fc",536885544]],["^15",[100,"^K",1687830960251,536870919]],["^15",[100,"^[",521,536870919]],["^15",[100,"^@",false,536870919]],["^15",[100,"^Y","number",536870919]],["^15",[100,"^11","Number",536870919]],["^15",[100,"^B",1692114716484,536883698]],["^15",[100,"^;","~u662fc702-72b4-4585-809b-9f049ea7711a",536885544]],["^15",[101,"^K",1687830960251,536870919]],["^15",[101,"^[",598,536870919]],["^15",[101,"^@",false,536870919]],["^15",[101,"^Y","polyfill",536870919]],["^15",[101,"^11","Polyfill",536870919]],["^15",[101,"^B",1687830960251,536870919]],["^15",[101,"^;","~u662fc702-318b-4e34-bebb-9d94564898e1",536885544]],["^15",[102,"^Q","[[Object]] wrapper for primitive type ``bigint``\nFor ex.:\n```js\nlet x = 234n; //BigInt\nlet y= BigInt(5); //also ok\n```",536870919]],["^15",[102,"^O","^16",536870919]],["^15",[102,"^F",98,536870919]],["^15",[102,"^X",98,536870919]],["^15",[102,"^V",98,536870919]],["^15",[102,"^U",39,536870919]],["^15",[102,"^U",98,536870919]],["^15",[102,"^H",39,536870919]],["^15",[102,"^17",true,536870919]],["^15",[102,"^;","~u649a41ae-abc6-4de0-83e1-e91dcc9ca5a4",536870919]],["^15",[103,"^Q","Unary [[Operator]] ``+`` is not supported on bigints.",536870919]],["^15",[103,"^O","^16",536870919]],["^15",[103,"^F",102,536870919]],["^15",[103,"^X",98,536870919]],["^15",[103,"^V",98,536870919]],["^15",[103,"^U",76,536870919]],["^15",[103,"^U",98,536870919]],["^15",[103,"^H",76,536870919]],["^15",[103,"^17",true,536870919]],["^15",[103,"^;","~u649a41ae-5ff8-4927-a702-cf556d297afb",536870919]],["^15",[104,"^Q","For comparisons, BigInts and [[Number]]s can be compared and work as expected. Same with [[Boolean]]s as a BigInt of ``0`` is false, rest are true.",536870919]],["^15",[104,"^O","^16",536870919]],["^15",[104,"^F",103,536870919]],["^15",[104,"^X",98,536870919]],["^15",[104,"^V",98,536870919]],["^15",[104,"^U",98,536870919]],["^15",[104,"^U",99,536870919]],["^15",[104,"^U",100,536870919]],["^15",[104,"^H",99,536870919]],["^15",[104,"^H",100,536870919]],["^15",[104,"^17",true,536870919]],["^15",[104,"^;","~u649a41ae-5f06-49c8-810d-a6d975dfce1a",536870919]],["^15",[105,"^Q","[[Polyfill]]ing BigInts is tricky as BigInts return BigInts on division/addition/etc. \nSo it is recommended to use [JSBI](https://github.com/GoogleChromeLabs/jsbi) if we need to polyfill as JSBI uses explicit methods for BigInt ops.",536870919]],["^15",[105,"^O","^16",536870919]],["^15",[105,"^F",104,536870919]],["^15",[105,"^X",98,536870919]],["^15",[105,"^V",98,536870919]],["^15",[105,"^U",98,536870919]],["^15",[105,"^U",101,536870919]],["^15",[105,"^H",101,536870919]],["^15",[105,"^17",true,536870919]],["^15",[105,"^;","~u649a41ae-031c-4ef9-89dd-4390c628a2ca",536870919]],["^15",[106,"^3","- [[Object]] wrapper for primitive type ``boolean``\n- The usual, ``true`` and ``false`` from expressions or raw values.\n  For ex.:\n  ```js\n  let x = true;  \n  x = 4<2; //stores false\n  ```\n-\n-",536870919]],["^15",[106,"^18",1687830958726,536870919]],["^15",[106,"^Z","pages/Boolean.md",536870919]],["^15",[107,"^Q","[[Object]] wrapper for primitive type ``boolean``",536870919]],["^15",[107,"^O","^16",536870919]],["^15",[107,"^F",99,536870919]],["^15",[107,"^X",99,536870919]],["^15",[107,"^V",99,536870919]],["^15",[107,"^U",39,536870919]],["^15",[107,"^U",99,536870919]],["^15",[107,"^H",39,536870919]],["^15",[107,"^17",true,536870919]],["^15",[107,"^;","~u649a41ae-85b0-40d3-a414-9eb21dcdd93e",536870919]],["^15",[108,"^Q","The usual, ``true`` and ``false`` from expressions or raw values.\nFor ex.:\n```js\nlet x = true;  \nx = 4<2; //stores false\n```",536870919]],["^15",[108,"^O","^16",536870919]],["^15",[108,"^F",107,536870919]],["^15",[108,"^X",99,536870919]],["^15",[108,"^V",99,536870919]],["^15",[108,"^U",99,536870919]],["^15",[108,"^17",true,536870919]],["^15",[108,"^;","~u649a41ae-fabe-4c87-87b9-5430980a1edc",536870919]],["^15",[109,"^Q","",536870919]],["^15",[109,"^O","^16",536870919]],["^15",[109,"^F",108,536870919]],["^15",[109,"^X",99,536870919]],["^15",[109,"^V",99,536870919]],["^15",[109,"^U",99,536870919]],["^15",[109,"^17",true,536870919]],["^15",[109,"^;","~u649a41ae-c03c-4829-930a-93caec8bd734",536870919]],["^15",[110,"^Q","",536870919]],["^15",[110,"^O","^16",536870919]],["^15",[110,"^F",109,536870919]],["^15",[110,"^X",99,536870919]],["^15",[110,"^V",99,536870919]],["^15",[110,"^U",99,536870919]],["^15",[110,"^17",true,536870919]],["^15",[110,"^;","~u649a41ae-8f2f-470a-89ae-0e6ae51f9faa",536870919]],["^15",[111,"^3","- Browsers don't just support [[HTML]] but they also support [[XML]]. If a text document is in XML then that can be parsed by browsers too. \n  Yes the [[DOM]] works for XML based pages too.\n  \n  The XML mode is enabled if the Browser recieves an [[HTTP]] ``response`` with [[HTTP Header]] ``Content-Type: application/xml+xhtml``.\n-",536870919]],["^15",[111,"^18",1687830958742,536870919]],["^15",[111,"^Z","pages/Browser.md",536870919]],["^15",[112,"^K",1687830958739,536870919]],["^15",[112,"^@",false,536870919]],["^15",[112,"^Y","http header",536870919]],["^15",[112,"^11","HTTP Header",536870919]],["^15",[112,"^B",1687830958739,536870919]],["^15",[112,"^;","~u649a41ae-739f-4778-9440-28d7cf40035a",536870919]],["^15",[113,"^K",1687830958739,536870919]],["^15",[113,"^@",false,536870919]],["^15",[113,"^Y","http",536870919]],["^15",[113,"^11","HTTP",536870919]],["^15",[113,"^B",1687830958739,536870919]],["^15",[113,"^;","~u649a41ae-abcd-456e-ac78-e6979eb45b61",536870919]],["^15",[114,"^5",228,536870919]],["^15",[114,"^K",1687830960342,536870919]],["^15",[114,"^[",227,536870919]],["^15",[114,"^@",false,536870919]],["^15",[114,"^Y","dom",536870919]],["^15",[114,"^11","DOM",536870919]],["^15",[114,"^?",["^ ","^1:",["^1;",["Document Object Model"]]],536870919]],["^15",[114,"^4",["^ ","^1:","Document Object Model"],536870919]],["^15",[114,"^B",1688095766650,536880766]],["^15",[114,"^;","~u662fc702-a883-435f-a4a4-d57d9c536bf8",536885544]],["^15",[115,"^K",1687830959163,536870919]],["^15",[115,"^@",false,536870919]],["^15",[115,"^Y","xml",536870919]],["^15",[115,"^11","XML",536870919]],["^15",[115,"^B",1687830959163,536870919]],["^15",[115,"^;","~u649a41af-541e-4665-a4b9-39a73117e899",536870919]],["^15",[116,"^Q","Browsers don't just support [[HTML]] but they also support [[XML]]. If a text document is in XML then that can be parsed by browsers too. \nYes the [[DOM]] works for XML based pages too.\n\nThe XML mode is enabled if the Browser recieves an [[HTTP]] ``response`` with [[HTTP Header]] ``Content-Type: application/xml+xhtml``.",536870919]],["^15",[116,"^O","^16",536870919]],["^15",[116,"^F",33,536870919]],["^15",[116,"^X",33,536870919]],["^15",[116,"^V",33,536870919]],["^15",[116,"^U",30,536870919]],["^15",[116,"^U",33,536870919]],["^15",[116,"^U",112,536870919]],["^15",[116,"^U",113,536870919]],["^15",[116,"^U",114,536870919]],["^15",[116,"^U",115,536870919]],["^15",[116,"^H",30,536870919]],["^15",[116,"^H",112,536870919]],["^15",[116,"^H",113,536870919]],["^15",[116,"^H",114,536870919]],["^15",[116,"^H",115,536870919]],["^15",[116,"^17",true,536870919]],["^15",[116,"^;","~u649a41ae-5ae2-4415-908c-495cd2c42d8b",536870919]],["^15",[117,"^Q","",536870919]],["^15",[117,"^O","^16",536870919]],["^15",[117,"^F",116,536870919]],["^15",[117,"^X",33,536870919]],["^15",[117,"^V",33,536870919]],["^15",[117,"^U",33,536870919]],["^15",[117,"^17",true,536870919]],["^15",[117,"^;","~u649a41ae-8865-48ac-8030-f7716eafec65",536870919]],["^15",[118,"^3","- As defined in [CSS Properties List MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference)\n  [[CSS]]\n- Shorthand\n  Some CSS Properties are shorthand for accessing multiple properties.\n  For ex.: \n  ``padding`` is a shorthand for ``padding-top``, ``padding-right``, ``padding-bottom`` and ``padding-left``. \n  So a value like ``padding: 20px 30px 50px 40px`` assigns value to all 4 of these properties.\n- ``padding``\n  Sets the padding.\n  For ex.:\n  ```css\n    padding: 0 20px 20px 20px;\n  ```\n  Defines padding in TRBL. \n  Can specify 1 (all sides), 2 (top and bottom take first, left and right take second), 3(TRB) or 4(TRBL) values.\n  \n  More details: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding#syntax)\n- ``margin``\n  Same as padding but defines the margins.\n  These properties can also take a value of ``auto`` which divides the remaining space on the axis equally.\n  For ex.:\n  ```css\n    margin: 0 auto;\n  ```\n  Gives 0 margin to top and bottom and then equally divides left and right space for the element.\n  This ``centers`` the element horizontally.\n- ``border``\n  Defines the size, line style and color of the [border](https://developer.mozilla.org/en-US/docs/Web/CSS/display).\n  For ex.:\n  ```css\n  border: 5px solid black;\n  ```\n  Sets the border line width as 5px, line style as solid and border line color as black.\n- ``display``\n  A box in CSS around any [[HTML Element]] is treated as either ``inline`` or ``block`` [Flow Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout).\n  Inline basically means it is treated as it is a part of an ongoing text, like the word ``yo`` is inline in this paragraph. So text and other content simply wraps around in the text direction of an inline element.\n  \n  Block elements are those that are treated as Blocks, much like how this paragraph and the previous one are their own ``Blocks``.\n  \n  These are the outer display types, there's also the inner display types. We can set both for a given using this property. [display](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\n  For ex.:\n  ```css\n  display: block; /*Sets the outer display type to block.*/\n  display: flex; /* Sets the inner display type to flex. */\n  display: inline-flex; /* Sets both*/\n  ```\n  The inner display types define how the children are laid out, it can be either flow, grid or flex (creating a flexbox).\n  \n  For ex.:\n  ```css\n  img {\n    display: block;\n    margin: 0 auto;\n  }\n  ```\n  ``centers`` an img block, img is an inline element and this turns it into a block.\n- Positioning\n  CSS can define where and how an element is positioned on the page. This is done using the [position](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property which defines the type of position, a value from \n  ``fixed``: Fixed to the viewport. So no space is created for the element in the Document and then offset by LTRB. Can be thought of as fixed from the current window's top left.\n  ``static``: Positioning according to the flow of the document, so if its ``display is ``inline/block then it applies normally. LTRB doesn't affect it.\n  ``relative``: Like static, then it is offset by LTRB but without moving other elements.\n  ``sticky``: Kind of like fixed but fixed to the nearest scrolling element.\n  ``absolute``: Like fixed but fixed to the nearest element with the ``position`` property set and then affected by LTRB. \n  \n  This property is combined with any or all of the properties ``left``, ``top``, ``right`` and ``bottom`` (LTRB) to finally determine the actual position of the [[HTML Element]].\n  For ex.:\n  ```css\n  position: relative;\n  top: 40px; \n  left: 40px;\n  ```\n- FlexBox\n  [Reference](https://www.theodinproject.com/lessons/foundations-growing-and-shrinking)\n  \n  A relatively new way of arranging [[HTML Element]]s.\n  By having the value ``flex`` for the ``display`` css property, we make an HTML element a *Flex Container*. And it's children are called *Flex Item*s. FlexBox is a way of defining both these.\n  This is a container element, meaning this HTML element can have multiple direct children.\n  \n  This is an incredibly flexible container that can automatically resize itself based on its children, then it automatically resizes its children to fit with each other and it can also adjust the children's children.\n  \n  For ex.:\n  For this HTML\n  ```html\n  <div class=\"flex-container\">\n    <div class=\"one\"></div>\n    <div class=\"two\"></div>\n    <div class=\"three\"></div>\n  </div>\n  ```\n  If we style the elements like so\n  ```css\n  .flex-container {\n     display: flex; \n  }\n  \n  /* this selector selects all divs inside of .flex-container */\n  .flex-container div {\n    background: peachpuff;\n    border: 4px solid brown;\n    height: 100px;\n     flex: 1; \n  }\n  ```\n  Then we get this\n  ![image.png](../assets/image_1692600346035_0.png)\n  \n  And if we remove the ``display:flex`` we would get\n  ![image.png](../assets/image_1692600380882_0.png)\n  where it's using the whole space of the viewport to lay out the elements.\n  \n  \n  * The Flex Container: The element that uses the ``flex`` property is called a Flex Container, and its children are called flex items.\n  ![image.png](../assets/image_1692600501827_0.png)\n  \n  The children theirselves can be flex containers and the parent flex container and adjust their flex items too.\n  ![image.png](../assets/image_1692600535073_0.png)\n  \n  By just using FlexBox, we can create all sorts of layouts.\n  ![image.png](../assets/image_1692600562264_0.png)\n  \n  \n  * ``flex`` Property: \n  This is a shorthand CSS property for ``flex-grow``, ``flex-shrink`` and ``flex-basis`` respectively. These are defined on flex items to adjust them.\n  \n  ``flex-grow``: This defines the growth, or in other words in the size of an item in proportion to other flex items.\n  By default the ``flex-grow`` is 1. So if an item gets a ``flex-grow`` of 2, it will be larger than the other items. \n  For ex.:\n  ![image.png](../assets/image_1692601081462_0.png)\n  \n  ``flex-shrink``: This defines the shrinkness factor, which is also 1 by default. It is applied to the flex items when the size of the flex container is smaller than the sum of sizes of the flex items. Higher values of ``flex-shrink`` shrink a flex item more than the others.\n  \n  ``flex-basis``: Default is 0%. Defines the percentage of the flex items' ``width`` property to be added to the grow or shrink factor. That is, if the basis is ``0%`` then the flex items' width is ignored and the flex item grows or shrinks at the same rate as the other flex items, but if it is say ``5%``, then ``5%`` of the item's ``width`` is added to the shrinkness or growth factor and hence it grows or shrinks faster than other flex elements. There's another value, ``auto`` for it.\n  \n  \n  The ``flex`` shorthand property can be given some values to get predefined values for all 3. \n  ``flex: auto``: is equivalent to ``flex: 1 1 auto``\n  ``flex: 1``: is equivalent to ``flex: 1 1 0``\n  \n  * ``flex-direction``: Can be ``row`` or ``column``, default is ``row``. Defined for the flex container.\n  This defines the direction the flex items in the container are laid out, be it horizontal or vertical. If they are laid out horizontally, which is default, their width is used for the other flex item properties, for vertical their height is used.\n  The direction defined here becomes the *main axis*, whilst the other direction becomes the *cross axis* inside the container. These axes are used by normal [[HTML Element]]s and other CSS properties too.\n  \n  * ``gap``: Numerical unit. Defined on the flex container, it defines the spacing between the flex items. across the *main axis*.\n- ``justify-content`` and ``align-items``\n  The former, aligns the children of an [[HTML Element]] across its *main axis* whilst the latter aligns them across the *cross axis*. Values are some predefined strings, check intellisense.\n  \n  For ex.:\n  ``align-items: center`` would align the items to the center of the cross axis. \n  If the main axis is horizontal, then this is the result\n  ![image.png](../assets/image_1692869633645_0.png)",536884972]],["^15",[118,"^18",1687830958769,536870919]],["^15",[118,"^19","~m1692869893594",536884971]],["^15",[118,"^Z","pages/CSS Property.md",536870919]],["^15",[119,"^K",1687830959166,536870919]],["^15",[119,"^[",118,536870919]],["^15",[119,"^@",false,536870919]],["^15",[119,"^Y","css property",536870919]],["^15",[119,"^11","CSS Property",536870919]],["^15",[119,"^B",1692869893281,536884970]],["^15",[119,"^;","~u64e5c36a-e9e3-494c-90f2-d17842249ffe",536884781]],["^15",[120,"^K",1687830959643,536870919]],["^15",[120,"^[",429,536870919]],["^15",[120,"^@",false,536870919]],["^15",[120,"^Y","html element",536870919]],["^15",[120,"^11","HTML Element",536870919]],["^15",[120,"^B",1687830959643,536870919]],["^15",[120,"^;","~u64e5c36a-e3b2-4582-ae61-7893c3ed828d",536884781]],["^15",[121,"^Q","As defined in [CSS Properties List MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference)\n[[CSS]]",536884159]],["^15",[121,"^O","^16",536870919]],["^15",[121,"^F",119,536870919]],["^15",[121,"^X",119,536870919]],["^15",[121,"^V",119,536870919]],["^15",[121,"^U",119,536884160]],["^15",[121,"^U",128,536884160]],["^15",[121,"^H",128,536884781]],["^15",[121,"^17",true,536870919]],["^15",[121,"^;","~u649a41ae-993e-4400-8b12-f9ff80907b06",536870919]],["^15",[122,"^Q","~``padding``\nSets the padding.\nFor ex.:\n```css\n  padding: 0 20px 20px 20px;\n```\nDefines padding in TRBL. \nCan specify 1 (all sides), 2 (top and bottom take first, left and right take second), 3(TRB) or 4(TRBL) values.\n\nMore details: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding#syntax)",536870919]],["^15",[122,"^O","^16",536870919]],["^15",[122,"^F",869,536884143]],["^15",[122,"^X",119,536870919]],["^15",[122,"^V",119,536870919]],["^15",[122,"^U",119,536870919]],["^15",[122,"^17",true,536870919]],["^15",[122,"^;","~u649a41ae-6962-41e4-9e77-5d46ecd215a2",536870919]],["^15",[123,"^Q","~``margin``\nSame as padding but defines the margins.\nThese properties can also take a value of ``auto`` which divides the remaining space on the axis equally.\nFor ex.:\n```css\n  margin: 0 auto;\n```\nGives 0 margin to top and bottom and then equally divides left and right space for the element.\nThis ``centers`` the element horizontally.",536870919]],["^15",[123,"^O","^16",536870919]],["^15",[123,"^F",122,536870919]],["^15",[123,"^X",119,536870919]],["^15",[123,"^V",119,536870919]],["^15",[123,"^U",119,536870919]],["^15",[123,"^17",true,536870919]],["^15",[123,"^;","~u649a41ae-1e55-48db-b6f9-dd4211c964c3",536870919]],["^15",[124,"^Q","~``border``\nDefines the size, line style and color of the [border](https://developer.mozilla.org/en-US/docs/Web/CSS/display).\nFor ex.:\n```css\nborder: 5px solid black;\n```\nSets the border line width as 5px, line style as solid and border line color as black.",536870919]],["^15",[124,"^O","^16",536870919]],["^15",[124,"^F",123,536870919]],["^15",[124,"^X",119,536870919]],["^15",[124,"^V",119,536870919]],["^15",[124,"^U",119,536870919]],["^15",[124,"^17",true,536870919]],["^15",[124,"^;","~u649a41ae-9600-46b5-865f-185333278525",536870919]],["^15",[125,"^Q","~``display``\nA box in CSS around any [[HTML Element]] is treated as either ``inline`` or ``block`` [Flow Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout).\nInline basically means it is treated as it is a part of an ongoing text, like the word ``yo`` is inline in this paragraph. So text and other content simply wraps around in the text direction of an inline element.\n\nBlock elements are those that are treated as Blocks, much like how this paragraph and the previous one are their own ``Blocks``.\n\nThese are the outer display types, there's also the inner display types. We can set both for a given using this property. [display](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\nFor ex.:\n```css\ndisplay: block; /*Sets the outer display type to block.*/\ndisplay: flex; /* Sets the inner display type to flex. */\ndisplay: inline-flex; /* Sets both*/\n```\nThe inner display types define how the children are laid out, it can be either flow, grid or flex (creating a flexbox).\n\nFor ex.:\n```css\nimg {\n  display: block;\n  margin: 0 auto;\n}\n```\n``centers`` an img block, img is an inline element and this turns it into a block.",536883730]],["^15",[125,"^O","^16",536870919]],["^15",[125,"^F",124,536870919]],["^15",[125,"^X",119,536870919]],["^15",[125,"^V",119,536870919]],["^15",[125,"^U",119,536870919]],["^15",[125,"^U",120,536870919]],["^15",[125,"^H",120,536884781]],["^15",[125,"^17",true,536870919]],["^15",[125,"^;","~u649a41ae-eb31-47de-babe-bf07ebe1dd36",536870919]],["^15",[126,"^Q","Positioning\nCSS can define where and how an element is positioned on the page. This is done using the [position](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property which defines the type of position, a value from \n``fixed``: Fixed to the viewport. So no space is created for the element in the Document and then offset by LTRB. Can be thought of as fixed from the current window's top left.\n``static``: Positioning according to the flow of the document, so if its ``display is ``inline/block then it applies normally. LTRB doesn't affect it.\n``relative``: Like static, then it is offset by LTRB but without moving other elements.\n``sticky``: Kind of like fixed but fixed to the nearest scrolling element.\n``absolute``: Like fixed but fixed to the nearest element with the ``position`` property set and then affected by LTRB. \n\nThis property is combined with any or all of the properties ``left``, ``top``, ``right`` and ``bottom`` (LTRB) to finally determine the actual position of the [[HTML Element]].\nFor ex.:\n```css\nposition: relative;\ntop: 40px; \nleft: 40px;\n```",536870919]],["^15",[126,"^O","^16",536870919]],["^15",[126,"^F",125,536870919]],["^15",[126,"^X",119,536870919]],["^15",[126,"^V",119,536870919]],["^15",[126,"^U",119,536870919]],["^15",[126,"^U",120,536870919]],["^15",[126,"^H",120,536884781]],["^15",[126,"^17",true,536870919]],["^15",[126,"^;","~u649a41ae-2d7a-4b4e-bbfc-1564078535b6",536870919]],["^15",[127,"^3","alias:: Cascading Style Sheets\n\n- It is a language to specifically define styles. We use it in conjunction with [[HTML]] to define styles for \n  it. Here's the spec for [CSS](https://w3c.github.io/csswg-drafts/css2/)\n- CSS can be defined inline, using the ``style=\"<css>\"`` attribute of [[HTML]] elements or in the head [[HTML Element]] (embedded) or in a separate file .\n  \n  * External\n  For ex.:\n  For a file ``1.css``,\n  ```css\n  p {\n    color: red;\n    width: 500px;\n  }\n  ```\n  And it is saved with ``.css`` extension. \n  Then to link an external ``.css`` file and use it in an [[HTML]] Document, we use the ``link`` [[HTML Element]]\n  like so\n  ```html\n  <link href=\"styles/1.css\" rel=\"stylesheet\" />\n  ```\n  \n  * Inline\n  For ex.:\n  ```html\n  <div style=\"color:red; width: 500px;\" > ... </div>\n  ```\n  \n  * Internal/Embedded \n  ```html\n  <head>\n  p {\n    color: red;\n    width: 500px;\n  }\n  </head>\n  \n  <body> ... </body>\n  ```\n  And this CSS is applied to the current document.\n  \n  The priority of the CSS definitions go \n  Inline -> Internal/Embedded -> External CSS\n  So if an HTML element gets the same style property from External, then it will be overridden by the Inline element if it also defines it. \n  For ex.:\n  \n  ```html\n  <head>\n  p {\n  color: red;\n  width: 500px;\n  }\n  </head>\n  <body> \n   <p style=\"color:blue;\"> </p>\n   </body> \n  \n  <!-- will apply color:blue and width:500px to p -->\n  ```\n- Components of a CSS ``ruleset``\n  A CSS ruleset is a combination of a selector and a declaration block which looks like an [[Object]] but is simply a block that accepts ``Key:Value;`` pairs. \n  \n  For ex.:\n  ![CSS p declaration color red](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/css-declaration-small.png)\n  is a ruleset.\n  \n  * The selector is matched against all elements and if an [[HTML Element]] matches the selector then the styles defined in the declaration block are applied to the element.\n  We can have multiple selectors, \n  ```css\n  p,\n  h1,\n  li {\n  ...\n  }\n  ```\n  applies the same declaration block to all multiple type of elements.\n  There are more types of selectors \n  ![image.png](../assets/image_1687471001429_0.png)\n  Defined here: [MDN](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors)\n   \n  \n  * The property name and value is picked from [CSS Properties List MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference). Not all CSS properties are applicable to all HTML elements and this can be quite arduous to list, so it's best to check if a CSS property is applicable to an HTML element manually. Property value doesn't necessary need to be a single value though, it can accept a single value or multiple separated by ``,`` or just using `` `` and one property can even accept multiple types of values.\n-\n- Fonts\n  We can include external fonts with the ``link`` [[HTML Element]]\n  ```html\n  <link\n    href=\"https://fonts.googleapis.com/css?family=Open+Sans\"\n    rel=\"stylesheet\" />\n  ```\n  Then, use it in css like so\n  ```css\n  html {\n    font-size: 10px; \n    font-family: \"Open Sans\", sans-serif; \n  }\n  ```\n  uses the ``CSS Sizing`` for units.\n- CSS Box Model\n  CSS uses the box model for defining positions and sizes of and between elements.\n  It looks like so\n  ![Three boxes sat inside one another. From outside to in they are labelled margin, border and padding](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/box-model.png)\n  \n  So, for any [[HTML Element]] we can define the sizes for these properties and they will be affected as shown in the box model.\n  \n  For ex.:\n  ```css\n  body {\n    width: 600px;\n    margin: 0 auto;\n    background-color: #ff9500;\n    padding: 0 20px 20px 20px;\n    border: 5px solid black;\n  }\n  ```\n  sets the background color for the ``body`` [[HTML Element]] along with margin, width, padding etc.\n- [[CSS Property]]\n- Comment\n  Using ``/* */``\n- Computed And Resolved Properties\n  Raw values that are provided to an element after all the CSS selectors and styles have been applied are called computed properties. Then, once they are finally adjusted to the environment they become resolved properties. The [[DOM]] has method to get these properties on any ``node``.\n  \n  The resolution process takes the environment into account which includes resolution, window size, dpi etc. and even other elements on the page.\n  For ex.:\n  For this html with the sizes defined\n  ```html\n  <div id=\"example\">\n    ...Text...\n  </div>\n  <style>\n    #example {\n      width: 300px;\n      height: 200px;\n      border: 25px solid #E8C48F;\n      padding: 20px;\n      overflow: auto;\n    }\n  </style>\n  ```\n  Will actually have sizes like these\n  ![image.png](../assets/image_1687622635611_0.png)\n  \n  Here, since the scrollbar, which is added automatically by the browser, takes 16px the actual size taken up is 284px by the content.\n- Units\n  Units for length values in CSS are defined in either Absolute or Relative [units](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units).\n  \n  Absolute units\n  ![image.png](../assets/image_1687644544616_0.png)\n  \n  Relative units\n  ![image.png](../assets/image_1687644566356_0.png)\n  \n  We commonly use ``px`` for absolute and ``em``/``%`` for relative units.\n-",536870919]],["^15",[127,"^18",1687830958812,536870919]],["^15",[127,"^Z","pages/CSS.md",536870919]],["^15",[128,"^5",129,536870919]],["^15",[128,"^K",1687830959643,536870919]],["^15",[128,"^[",127,536870919]],["^15",[128,"^@",false,536870919]],["^15",[128,"^Y","css",536870919]],["^15",[128,"^11","CSS",536870919]],["^15",[128,"^?",["^ ","^1:",["^1;",["Cascading Style Sheets"]]],536870919]],["^15",[128,"^4",["^ ","^1:","Cascading Style Sheets"],536870919]],["^15",[128,"^B",1687830959643,536870919]],["^15",[128,"^;","~u64e5c36a-2c2f-49bf-aa77-8261d1814130",536884781]],["^15",[129,"^5",128,536870919]],["^15",[129,"^K",1687830958809,536870919]],["^15",[129,"^@",false,536870919]],["^15",[129,"^Y","cascading style sheets",536870919]],["^15",[129,"^11","Cascading Style Sheets",536870919]],["^15",[129,"^B",1687830958809,536870919]],["^15",[129,"^;","~u649a41ae-6f30-430e-a609-124f01e3d7a2",536870919]],["^15",[130,"^Q","alias:: Cascading Style Sheets\n\n",536870919]],["^15",[130,"^O","^16",536870919]],["^15",[130,"^1>",["^1;",[]],536870919]],["^15",[130,"^F",128,536870919]],["^15",[130,"^X",128,536870919]],["^15",[130,"^V",128,536870919]],["^15",[130,"^U",128,536870919]],["^15",[130,"^U",129,536870919]],["^15",[130,"^:",true,536870919]],["^15",[130,"^?",["^ ","^1:",["^1;",["Cascading Style Sheets"]]],536870919]],["^15",[130,"^J",["^1:"],536870919]],["^15",[130,"^4",["^ ","^1:","Cascading Style Sheets"],536870919]],["^15",[130,"^H",129,536870919]],["^15",[130,"^17",true,536870919]],["^15",[130,"^;","~u649a41ae-408c-4bd9-8a8a-ced655ca7e6a",536870919]],["^15",[131,"^Q","[[CSS Property]]",536870919]],["^15",[131,"^O","^16",536870919]],["^15",[131,"^F",135,536870919]],["^15",[131,"^X",128,536870919]],["^15",[131,"^V",128,536870919]],["^15",[131,"^U",119,536870919]],["^15",[131,"^U",128,536870919]],["^15",[131,"^H",119,536870919]],["^15",[131,"^17",true,536870919]],["^15",[131,"^;","~u649a41ae-ee7a-48c5-b851-d58db0b949fe",536870919]],["^15",[132,"^Q","Computed And Resolved Properties\nRaw values that are provided to an element after all the CSS selectors and styles have been applied are called computed properties. Then, once they are finally adjusted to the environment they become resolved properties. The [[DOM]] has method to get these properties on any ``node``.\n\nThe resolution process takes the environment into account which includes resolution, window size, dpi etc. and even other elements on the page.\nFor ex.:\nFor this html with the sizes defined\n```html\n<div id=\"example\">\n  ...Text...\n</div>\n<style>\n  #example {\n    width: 300px;\n    height: 200px;\n    border: 25px solid #E8C48F;\n    padding: 20px;\n    overflow: auto;\n  }\n</style>\n```\nWill actually have sizes like these\n![image.png](../assets/image_1687622635611_0.png)\n\nHere, since the scrollbar, which is added automatically by the browser, takes 16px the actual size taken up is 284px by the content.",536870919]],["^15",[132,"^O","^16",536870919]],["^15",[132,"^F",139,536870919]],["^15",[132,"^X",128,536870919]],["^15",[132,"^V",128,536870919]],["^15",[132,"^U",114,536870919]],["^15",[132,"^U",128,536870919]],["^15",[132,"^H",114,536870919]],["^15",[132,"^17",true,536870919]],["^15",[132,"^;","~u649a41ae-4a2b-4d90-9a7b-434994623c3f",536870919]],["^15",[133,"^Q","Components of a CSS ``ruleset``\nA CSS ruleset is a combination of a selector and a declaration block which looks like an [[Object]] but is simply a block that accepts ``Key:Value;`` pairs. \n\nFor ex.:\n![CSS p declaration color red](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/css-declaration-small.png)\nis a ruleset.\n\n* The selector is matched against all elements and if an [[HTML Element]] matches the selector then the styles defined in the declaration block are applied to the element.\nWe can have multiple selectors, \n```css\np,\nh1,\nli {\n...\n}\n```\napplies the same declaration block to all multiple type of elements.\nThere are more types of selectors \n![image.png](../assets/image_1687471001429_0.png)\nDefined here: [MDN](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors)\n \n\n* The property name and value is picked from [CSS Properties List MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference). Not all CSS properties are applicable to all HTML elements and this can be quite arduous to list, so it's best to check if a CSS property is applicable to an HTML element manually. Property value doesn't necessary need to be a single value though, it can accept a single value or multiple separated by ``,`` or just using `` `` and one property can even accept multiple types of values.",536870919]],["^15",[133,"^O","^16",536870919]],["^15",[133,"^F",134,536870919]],["^15",[133,"^X",128,536870919]],["^15",[133,"^V",128,536870919]],["^15",[133,"^U",39,536870919]],["^15",[133,"^U",120,536870919]],["^15",[133,"^U",128,536870919]],["^15",[133,"^H",39,536870919]],["^15",[133,"^H",120,536870919]],["^15",[133,"^17",true,536870919]],["^15",[133,"^;","~u649a41ae-c31c-4af8-8168-490e04a19ffa",536870919]],["^15",[134,"^Q","CSS can be defined inline, using the ``style=\"<css>\"`` attribute of [[HTML]] elements or in the head [[HTML Element]] (embedded) or in a separate file .\n\n* External\nFor ex.:\nFor a file ``1.css``,\n```css\np {\n  color: red;\n  width: 500px;\n}\n```\nAnd it is saved with ``.css`` extension. \nThen to link an external ``.css`` file and use it in an [[HTML]] Document, we use the ``link`` [[HTML Element]]\nlike so\n```html\n<link href=\"styles/1.css\" rel=\"stylesheet\" />\n```\n\n* Inline\nFor ex.:\n```html\n<div style=\"color:red; width: 500px;\" > ... </div>\n```\n\n* Internal/Embedded \n```html\n<head>\np {\n  color: red;\n  width: 500px;\n}\n</head>\n\n<body> ... </body>\n```\nAnd this CSS is applied to the current document.\n\nThe priority of the CSS definitions go \nInline -> Internal/Embedded -> External CSS\nSo if an HTML element gets the same style property from External, then it will be overridden by the Inline element if it also defines it. \nFor ex.:\n\n```html\n<head>\np {\ncolor: red;\nwidth: 500px;\n}\n</head>\n<body> \n <p style=\"color:blue;\"> </p>\n </body> \n\n<!-- will apply color:blue and width:500px to p -->\n```",536870919]],["^15",[134,"^O","^16",536870919]],["^15",[134,"^F",137,536870919]],["^15",[134,"^X",128,536870919]],["^15",[134,"^V",128,536870919]],["^15",[134,"^U",30,536870919]],["^15",[134,"^U",120,536870919]],["^15",[134,"^U",128,536870919]],["^15",[134,"^H",30,536870919]],["^15",[134,"^H",120,536870919]],["^15",[134,"^17",true,536870919]],["^15",[134,"^;","~u649a41ae-da1a-49ce-8c6e-f35522b9fba9",536870919]],["^15",[135,"^Q","CSS Box Model\nCSS uses the box model for defining positions and sizes of and between elements.\nIt looks like so\n![Three boxes sat inside one another. From outside to in they are labelled margin, border and padding](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/box-model.png)\n\nSo, for any [[HTML Element]] we can define the sizes for these properties and they will be affected as shown in the box model.\n\nFor ex.:\n```css\nbody {\n  width: 600px;\n  margin: 0 auto;\n  background-color: #ff9500;\n  padding: 0 20px 20px 20px;\n  border: 5px solid black;\n}\n```\nsets the background color for the ``body`` [[HTML Element]] along with margin, width, padding etc.",536870919]],["^15",[135,"^O","^16",536870919]],["^15",[135,"^F",138,536870919]],["^15",[135,"^X",128,536870919]],["^15",[135,"^V",128,536870919]],["^15",[135,"^U",120,536870919]],["^15",[135,"^U",128,536870919]],["^15",[135,"^H",120,536870919]],["^15",[135,"^17",true,536870919]],["^15",[135,"^;","~u649a41ae-f866-46a3-a223-845c47771e02",536870919]],["^15",[136,"^Q","Units\nUnits for length values in CSS are defined in either Absolute or Relative [units](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units).\n\nAbsolute units\n![image.png](../assets/image_1687644544616_0.png)\n\nRelative units\n![image.png](../assets/image_1687644566356_0.png)\n\nWe commonly use ``px`` for absolute and ``em``/``%`` for relative units.",536870919]],["^15",[136,"^O","^16",536870919]],["^15",[136,"^F",132,536870919]],["^15",[136,"^X",128,536870919]],["^15",[136,"^V",128,536870919]],["^15",[136,"^U",128,536870919]],["^15",[136,"^17",true,536870919]],["^15",[136,"^;","~u649a41ae-ec37-4128-97f1-999666ba45d0",536870919]],["^15",[137,"^Q","It is a language to specifically define styles. We use it in conjunction with [[HTML]] to define styles for \nit. Here's the spec for [CSS](https://w3c.github.io/csswg-drafts/css2/)",536870919]],["^15",[137,"^O","^16",536870919]],["^15",[137,"^F",130,536870919]],["^15",[137,"^X",128,536870919]],["^15",[137,"^V",128,536870919]],["^15",[137,"^U",30,536870919]],["^15",[137,"^U",128,536870919]],["^15",[137,"^H",30,536870919]],["^15",[137,"^17",true,536870919]],["^15",[137,"^;","~u649a41ae-3aeb-4b47-a485-068c4fff21c9",536870919]],["^15",[138,"^Q","Fonts\nWe can include external fonts with the ``link`` [[HTML Element]]\n```html\n<link\n  href=\"https://fonts.googleapis.com/css?family=Open+Sans\"\n  rel=\"stylesheet\" />\n```\nThen, use it in css like so\n```css\nhtml {\n  font-size: 10px; \n  font-family: \"Open Sans\", sans-serif; \n}\n```\nuses the ``CSS Sizing`` for units.",536870919]],["^15",[138,"^O","^16",536870919]],["^15",[138,"^F",141,536870919]],["^15",[138,"^X",128,536870919]],["^15",[138,"^V",128,536870919]],["^15",[138,"^U",120,536870919]],["^15",[138,"^U",128,536870919]],["^15",[138,"^H",120,536870919]],["^15",[138,"^17",true,536870919]],["^15",[138,"^;","~u649a41ae-898d-43de-8119-7bc9a28eb964",536870919]],["^15",[139,"^Q","Comment\nUsing ``/* */``",536870919]],["^15",[139,"^O","^16",536870919]],["^15",[139,"^F",131,536870919]],["^15",[139,"^X",128,536870919]],["^15",[139,"^V",128,536870919]],["^15",[139,"^U",128,536870919]],["^15",[139,"^17",true,536870919]],["^15",[139,"^;","~u649a41ae-e83b-4f22-a20f-969e3cea4cc3",536870919]],["^15",[140,"^Q","",536870919]],["^15",[140,"^O","^16",536870919]],["^15",[140,"^F",136,536870919]],["^15",[140,"^X",128,536870919]],["^15",[140,"^V",128,536870919]],["^15",[140,"^U",128,536870919]],["^15",[140,"^17",true,536870919]],["^15",[140,"^;","~u649a41ae-ae4e-48d7-8549-d798b896c1ad",536870919]],["^15",[141,"^Q","",536870919]],["^15",[141,"^O","^16",536870919]],["^15",[141,"^F",133,536870919]],["^15",[141,"^X",128,536870919]],["^15",[141,"^V",128,536870919]],["^15",[141,"^U",128,536870919]],["^15",[141,"^17",true,536870919]],["^15",[141,"^;","~u649a41ae-5ef4-423d-bb19-a835e96cebb5",536870919]],["^15",[142,"^3","- A class in JS is a kind of [[Function]], which is just an [[Object]]. Still, it offers a lot of convenience and familiarity with classes in other language such as [[C++]].\n- Classes are defined with the ``class`` keyword,\n  For ex.:\n  ```js\n  class Yo {\n  constructor() {} //notice the lack of commas unlike in Objects\n  hi(){}\n  } \n  \n  let x = new Yo();\n  x.hi();\n  ```\n  Then we can create ``Class objects`` (COs) with the [[new]] keyword. (A CO or class object or just object is different from an Object, ofc an object is still an Object but in terminology, a CO is different from an Object)\n- Classes are just a convenience over [[Function]]s in JS\n  For ex.:\n  ```js\n  class X{}\n  \n  console.log(typeof X); //prints Function\n  ```\n- When we create a CO with the [[new]] keyword, these 4 things happen\n  * A [[Function]] with the same name as the class is created\n  * The class' ctor function's body, if defined, becomes the body of this function\n  * The default ``[[Prototype]]`` of the function gets augmented with the class' methods/properties as they become methods/properties of the [[Prototype Object]] of this function. \n  * Calls this function as a Ctor Function.\n  For ex.:\n  ```js\n  class X{\n   yo(){}\n  }\n  \n  let x = new X();\n  ```\n  Here, a function named ``X`` is created, it has empty body, ``X``'s ``[[Prototype]]`` gets the method ``yo()`` in it, then this ``X`` function is called.\n  So, the function ``X`` has ``X.prototype = {constructor: X, yo(){}}`` and we can check this too\n  ```js\n  class X{\n   yo(){}\n  }\n  \n  console.log(X === X.prototype.constructor); //true\n  \n  ```\n  \n  Remember, just like [[Function]] has ``.prototype`` so does a class, this ``.prototype``'s Object is assigned to the ``[[Prototype]]`` of the Object that is returned after ``new <Class>()`` is called.\n- However, despite all that there are actual differences between classes and [[Function]]s. This is due to how JS applies many other things to classes, such as\n  * ``[[IsClassConstructor]]``, this special internal property is implicitly set to true for classes and is referred at many places in JS, such as with [[new]].\n  For ex.:\n  ```js\n  class X{}\n  \n  let x = new X(); //ok\n  X(); //error\n  ```\n  * String representation of a class is different too\n  ```js\n  class X{}\n  console.log(X); //prints class X...\n  ```\n  * All class methods are non-enumerable by default.\n  * All code inside classes uses ``Strict`` mode.\n- Class Expression\n  Just like [[Function]] expression, these are allowed\n  ```js\n  let x = class {...}; //notice the semicolon\n  let y = class Yo{...}; //also allowed, just like Named Function Expressions\n  let z = new x(); //ok\n  ```\n  This allows us to even dynamically create classes, like when we return CE's from functions.\n- Classes can use getter/setter methods and the syntax is the same as Accessor Properties in [[Object]].\n- Computed Names are also allowed in classes\n  For ex.:\n  ```js\n  class X{\n   [\"yo\"+\"yee\"]() {\n   console.log(\"yuh\");\n    }\n  }\n  \n  let x = new X();\n  x[\"yo\"+\"yee\"](); //ok\n  ```\n  Calling methods using the ``[...]`` [[Operator]] is allowed too.\n- Introduced in recent years, classes allow fields too now\n  ```js\n  class X{\n   name = \"yo\"; //notice the semicolon\n  }\n  \n  let x =new X();\n  console.log(x.prototype.name); //undefined\n  console.log(x.name); //yo\n  ```\n  These are set on individual Objects and not the [[Prototype Object]]. And can even use expressions so the value is evaluated at runtime.\n  \n  Class field is something even the traditional [[Object]] doesn't have, as we can use Arrow [[Function]] to be assigned to a field hence allowing us to refer the class directly in [[this]]\n  For ex.:\n  ```js\n  let x = {\n   yo: () => {...}, //error as arrow functions are not allowed in Objects\n  };\n  \n  class X {\n   a= 2;\n   yo = () => {\n    console.log(this.a); //works\n    }\n  }\n  let xobj= new X();\n  x.yo(); //ok\n  \n  ```\n- The value of [[this]] in class methods is the class itself.\n- Class Inheritance\n  We can extend a class with the ``extends`` keyword\n  ``class Child extends Parent {...}``.\n  \n  And it works as expected. The way it works is by simply setting ``Child.prototype``'s [[Prototype Object]] to the ``Parent`` class.\n  For ex.:\n  ```js\n  class X {\n  yo() {}\n  };\n  class Y extends X{\n  };\n  let y = new Y();\n  y.yo(); //ok\n  ```\n  It looks something like so\n  ![image.png](../assets/image_1686809042985_0.png) \n  \n  * However, unlike in other languages, JS also allows an expression after ``extends``\n  For ex.:\n  ```js\n  function yo() {\n   return class {};\n  }\n  \n  class X extends yo() {\n  }  //works\n  ```\n  * Overriding methods\n  Just like normal, if a child has a method with the same name as the parent then the child method overrides (or call it [[Shadowed]]) the parent one.\n  \n  * If a class extends another class and doesn't have a ctor, then the following ctor is generated automatically\n  ```js\n  class X {}\n  class Y extends X{\n  /*generates\n  constructor(...args) {\n    super(...args);\n   }\n  this ctor implicitly\n  */\n  }\n  \n  let y= new Y();\n  ```\n  If we specify our own ctor, then we must call ``super(...)`` before using [[this]] in the ctor. Otherwise it is an error.\n  \n  This works like so, in JS there's a difference between the ``constructor()`` function of a child/deriving class and of a ``constructor()`` of a parent/derived class. The derived class' ctor function has a special internal property ``[[ConstructorKind]]:\"derived\"`` set on its [[Object]]. \n  When [[new]] executes the ctor function, it passes an empty Object to [[this]] if there's no derived class, but if there is a derived class then it expects a call to the ``constructor()`` of the derived class and the generated Object is passed to the [[this]].\n  \n  * Yes we can inherit and override class fields too\n  ```js\n  class X{\n   name= \"X\";\n   constructor() {\n    console.log(this.name);\n   }\n  \n   yo() {\n   console.log(this.name);\n   }\n  }\n  class Y extends X{\n   name = \"Y\";\n  \n  }\n  \n  let x = new X(); //prints \"X\"\n  let y = new Y(); //also prints \"X\"\n  y.yo(); //prints \"Y\"\n  x.yo(); //prints \"X\"\n  ```\n  \n  The reason ``new Y()`` prints X is due to how the objects are initialized. Firstly, fields are created on the object itself and not the class. Meaning if a class' object is not created yet, it won't have access to the fields. So above, as we know a default ctor is created for ``Y`` which calls ``X``'s ctor. And at that time, ``Y`` isn't created yet so the object of y calling X doesn't yet have a ``name`` property, hence the ctor of ``X``  uses its own field then finishes up . Then the rest of the Y's ctor is finished and it's object overrides the name set by X in the resultant object.\n  On the other hand, the resultant object has correct value for name after ctor and now when ``.yo()`` is called, it uses the ``name`` set by ``Y``.\n-\n- ``super`` keyword: \n  Classes also provide a way to call their Parent Class' methods, this is done using the super keyword.\n  For ex.:\n  ```js\n  class X{\n  yo(){}\n  } \n  class Y {\n   constructor() { \n    super(); //call the super ctor\n   } \n   \n   ho() {\n   super.yo(); //ok\n   let x = function() {\n     super.yo(); //error as super is unknown here\n    }\n   let y = () => {\n    super.yo(); //ok\n     }\n   }\n   \n  }\n  ```\n  Arrow [[Function]]s don't have ``super`` either, so they refer to their parent block's super which is why it works here.\n  \n  ``super`` works similarly in normal Object methods too.\n- ``[[HomeObject]]``:\n  ``super`` doesn't use [[this]] directly to go up the parent chain, it uses this special property.\n  ``[[HomeObject]]`` is a special internal property set on [[Function]]s when they are methods of either [[Class]]es or [[Object]]s. The value of this property is the class or Object itself. This is used by ``super`` to correctly identify parent class methods and call them.\n  For ex.:\n  ```js\n  let x ={\n   yo() {}\n   no() {} //no.[[HomeObject]] = x\n  };\n  let y = {\n  __proto__: x\n   yo() {\n   this.__proto__.yo.call(this); \n   }\n   no() { //no.[[HomeObject]] = y\n   super.no();\n  }\n  };\n  let z = {\n   __proto__: y\n   yo() {\n   this.__proto__yo.call(this); //we can do this.__proto__.yo() too but then when y.yo() is called it won't have a ``this`` that has a __proto__ to x as ``this`` be no Object.\n   }\n    no() { //no.[[HomeObject]] = z\n   super.no(); \n  }\n  }\n  \n  z.yo(); //call stack error\n  z.no(); //works, calls z.no() then y.no() then x.no()\n  ```\n  leads to an infinite recursion as ``z.yo()`` calls ``y.yo()`` which still has ``this`` that has ``z`` in it so it calls ``y.yo()`` again and the same for infinite times. \n  On the other hand, ``z.no()`` works because ``super`` knows how to circumvent such issues. It does so by calling something like ``z.no.[[HomeObject]].__proto__.no()`` when we do ``super.no()``, which leads yo ``y.no()`` and then ``y.no.[[HomeObject]].__proto__.no()`` is called which leads to ``x.no()`` finally.\n  \n  * This special property is only used by ``super``.\n  * ``[[HomeObject]]`` is immutable. It never changes. This means, unlike normal Functions, methods in Classes/Objects that use ``super`` must never be copied to other Classes/Objects if we wish to keep the same behavior.\n  For ex.:\n  ```js\n  let x ={\n   yo() {\n   console.log(\"x.yo\");\n   }\n  };\n  let y = {\n   __proto__: x\n   yo() {\n  console.log(\"y.yo\");\n   super.yo();\n   }\n  };\n  let z = {\n   yo() {\n    console.log(\"z.yo\");\n   }\n  };\n  let k = {\n   __proto__:z\n   yo: y.yo,\n  };\n  \n  k.yo(); //prints y.yo then x.yo\n  ```\n  This is not expected behavior since we expect ``k.yo`` to copy the method ``y.yo`` and the ``super.yo()`` in it to call ``z.yo()``. Since the ``[[HomeObject]]`` never changes, even when ``k.yo`` copies the function, it is still the same ``y`` so we get this behavior.\n  * ``[[HomeObject]]`` is only set for methods that are defined like ``<method>()`` and not any other way, like ``<method name>: function(){...}``.\n- Static Properties and Methods\n  Classes in JS can have static methods/properties too, i.e., methods that exist on the Class itself rather than in each object of the class. We use the ``static`` keyword for this.\n  For ex.:\n  ```js\n  class X{\n   static name = \"nig\";\n    yo() {\n      console.log(typeof this);\n    }\n    static no() { //use static keyword\n      console.log(typeof this);\n    }\n  }\n  X.halo = function () {}; //or create static methods like so\n  X.otherName = \"ayooo\";  //same with properties\n  \n  let x = new X();\n  x.yo(); //prints object\n  X.halo(); //works\n  X.no(); //prints function\n  console.log(X.name); //prints nig\n  \n  //x.no(); doesn't work, no is a method on the class itself not the objects of it\n  ```\n  These are the 2 ways to create static methods/properties on classes. The value of [[this]] in a static method is the ctor function of the class.\n  \n  * These are inherited too\n  ```js\n  class X{\n   static name = \"Ay\";\n   yo() {}\n  }\n  \n  class Y extends X {\n   nah(){}\n  }\n  \n  console.log(Y.name); //prints Ay. \n  ```\n  The static properties/methods remain in the class itself, so the [[Prototype Object]] of Y which is X has the property name in it.\n  It looks like so\n  ![image.png](../assets/image_1686878500858_0.png)\n  \n  We can check it too\n  ```js\n  class X {}\n  class Y extends X {}\n  \n  // for statics\n  console.log(Y.__proto__ === X); // true\n  \n  // for regular methods\n  console.log(Y.prototype.__proto__ === X.prototype); // true\n  ```\n  \n  However, built-in classes are an exception. Like [[Array]] and [[Date]] both extend [[Object]], however they don't inherit the statics from Object.\n- Access Modifiers:\n  Not in the language as of yet, curently it is recommended to go by convention and have protected properties prefixed with ``_`` in classes/ [[Object]]s. The language currently itself doesn't see these properties differently and inheritance/etc. works like normal.\n  However, a new JS feature is almost implemented in the standard that allows private properties and methods. To do so we prefix property/method names with ``#`` and such properties/methods are considered private. These are not inherited and can only be accessed by the same class internally.\n  For ex.:\n  ```js\n  class X{\n   #speed = 20;\n   yo() {\n   console.log(this.#speed); //ok works\n   }\n  }\n  \n  class Y extends X {\n   nah() {\n   console.log(this[#name]); //2 errors, firstly the [...] Operator can't use this syntax, this is an intended limitation\n  // secondly, as this is a private property, Y can't access it.\n   }\n  }\n  ```\n- Built-in classes are implemented in a way that allows extending them more convenient.\n  For ex.:\n  ```js\n  class PowerArray extends Array {\n    isEmpty() {\n      return this.length === 0;\n    }\n  }\n  \n  let arr = new PowerArray(1, 2, 5, 10, 50);\n  console.log(arr.isEmpty()); // false\n  \n  let filteredArr = arr.filter(item => item >= 10);\n  console.log(filteredArr); // 10, 50\n  console.log(filteredArr.isEmpty()); // false. This still works, isEmpty is present in PowerArray and filter returns PowerArray here.\n  \n  console.log(arr.constructor===PowerArray); //true\n  ```\n  Here, our extension on [[Array]] still works despite being processed by the parent Class' method. That is, methods like ``<array>.filter`` are smart enough to return the same type of object that invoked them. To do this, they use the constructor of the child object, which is why ``arr.constructor`` is equal to ``PowerArray`` above.\n  \n   However, this behavior can be modified so that they return a given type of object. To do so, our Class must override static getter method ``[Symbol.species]`` which is a [[Symbol]] and then we return the constructor those methods will use to generate result object of.\n  For ex.:\n  ```js\n  class PowerArray extends Array{\n   static get [Symbol.species]  {\n   return Array;\n   }\n   yo() {}\n  }\n  let arr = new PowerArray(1,2,3,4);\n  let arrF= arr.filter(i=> i>1);\n  arrF.yo(); //error as arrF is of type Array and not PowerArray\n  ```\n- ``instanceOf`` [[Operator]]\n  This op. returns true if a given object is an instance of a given class, or one of its parents.\n  ``<obj> instanceOf <class>``.\n  For ex.:\n  ```js\n  let x= [1,2,3];\n  console.log(x instanceOf Array); //true\n  console.log(x instanceOf Object); //also true\n  ```\n  \n  This behavior can be customized too, by defining a static method with the signature [Symbol.hasInstance](<obj>) which is a [[Symbol]]. This method has to return true or false. \n  For ex.:\n  ```js\n  class X{\n   static [Symbol.hasInstance](obj) {\n    return true;\n    }\n  }\n  \n  let arr = [1,2,3];\n  console.log(arr instanceOf X); //prints true\n  ```\n  The instanceOf op. roughly works like so, for the given Class, search for this method in the Class, if found pass the object, else compare ``<obj>.__proto__===<Class>.prototype``, if this is false then look up the [[Prototype Object]] chain and check these 2 again. If no Class in the prototypal chain has this method and all the [[Prototype Object]] comparison return false, then return false.\n  \n  There's also ``<objA>.isPrototypeOf(<objB>)``, so we can also use ``<Class>.prototype.isPrototypeOf(obj)``.\n- Mixin\n  This is a ``Class`` that only provides behavior/functionality that other classes can ``mix-in`` their own definitions to conveniently copy functionality. \n  Classes in JS are single inheritance as we know, so mixins provide a way to mix multiple classes in.\n  JS doesn't provide any special functionality for mixins, but we can copy over methods from a class manually. \n  \n  For ex.:\n  ```js\n  let myMixin= {\n   yo() {}\n  };\n  \n  class X{\n   \n  }\n  \n  Object.assign(X.prototype, myMixin);\n  \n  new X().yo(); //works\n  ```\n  We use ``Object.assign(...)`` [[Object]]'s method to copy over methods/properties from one Object into another.",536870919]],["^15",[142,"^18",1687830958905,536870919]],["^15",[142,"^Z","pages/Class.md",536870919]],["^15",[143,"^5",542,536870919]],["^15",[143,"^K",1687830960249,536870919]],["^15",[143,"^@",false,536870919]],["^15",[143,"^Y","prototype object",536870919]],["^15",[143,"^11","Prototype Object",536870919]],["^15",[143,"^B",1687830960249,536870919]],["^15",[143,"^;","~u6616a43c-5311-4a1b-80cc-cb89e2092223",536885136]],["^15",[144,"^K",1687830960297,536870919]],["^15",[144,"^[",710,536870919]],["^15",[144,"^@",false,536870919]],["^15",[144,"^Y","this",536870919]],["^15",[144,"^11","this",536870919]],["^15",[144,"^B",1687830960297,536870919]],["^15",[144,"^;","~u6616a43c-5639-4390-be4b-6782ba0e47ef",536885136]],["^15",[145,"^K",1687830960279,536870919]],["^15",[145,"^[",703,536870919]],["^15",[145,"^@",false,536870919]],["^15",[145,"^Y","new",536870919]],["^15",[145,"^11","new",536870919]],["^15",[145,"^B",1687830960279,536870919]],["^15",[145,"^;","~u6616a43c-6693-4fae-8a46-44ecf3eb3bcb",536885136]],["^15",[146,"^K",1687830959324,536870919]],["^15",[146,"^[",248,536870919]],["^15",[146,"^@",false,536870919]],["^15",[146,"^Y","date",536870919]],["^15",[146,"^11","Date",536870919]],["^15",[146,"^B",1687830959324,536870919]],["^15",[146,"^;","~u662fc702-382a-42a3-b851-26bbf361930b",536885544]],["^15",[147,"^5",626,536870919]],["^15",[147,"^K",1687830960250,536870919]],["^15",[147,"^[",625,536870919]],["^15",[147,"^@",false,536870919]],["^15",[147,"^Y","shadowed",536870919]],["^15",[147,"^11","Shadowed",536870919]],["^15",[147,"^?",["^ ","^1:",["^1;",["Variable Shadowing"]]],536870919]],["^15",[147,"^4",["^ ","^1:","Variable Shadowing"],536870919]],["^15",[147,"^B",1687830960250,536870919]],["^15",[147,"^;","~u6616a43b-04ea-4969-a0a7-7ba7e22a8613",536885130]],["^15",[148,"^Q","Static Properties and Methods\nClasses in JS can have static methods/properties too, i.e., methods that exist on the Class itself rather than in each object of the class. We use the ``static`` keyword for this.\nFor ex.:\n```js\nclass X{\n static name = \"nig\";\n  yo() {\n    console.log(typeof this);\n  }\n  static no() { //use static keyword\n    console.log(typeof this);\n  }\n}\nX.halo = function () {}; //or create static methods like so\nX.otherName = \"ayooo\";  //same with properties\n\nlet x = new X();\nx.yo(); //prints object\nX.halo(); //works\nX.no(); //prints function\nconsole.log(X.name); //prints nig\n\n//x.no(); doesn't work, no is a method on the class itself not the objects of it\n```\nThese are the 2 ways to create static methods/properties on classes. The value of [[this]] in a static method is the ctor function of the class.\n\n* These are inherited too\n```js\nclass X{\n static name = \"Ay\";\n yo() {}\n}\n\nclass Y extends X {\n nah(){}\n}\n\nconsole.log(Y.name); //prints Ay. \n```\nThe static properties/methods remain in the class itself, so the [[Prototype Object]] of Y which is X has the property name in it.\nIt looks like so\n![image.png](../assets/image_1686878500858_0.png)\n\nWe can check it too\n```js\nclass X {}\nclass Y extends X {}\n\n// for statics\nconsole.log(Y.__proto__ === X); // true\n\n// for regular methods\nconsole.log(Y.prototype.__proto__ === X.prototype); // true\n```\n\nHowever, built-in classes are an exception. Like [[Array]] and [[Date]] both extend [[Object]], however they don't inherit the statics from Object.",536870919]],["^15",[148,"^O","^16",536870919]],["^15",[148,"^F",166,536870919]],["^15",[148,"^X",75,536870919]],["^15",[148,"^V",75,536870919]],["^15",[148,"^U",39,536870919]],["^15",[148,"^U",47,536870919]],["^15",[148,"^U",75,536870919]],["^15",[148,"^U",143,536870919]],["^15",[148,"^U",144,536870919]],["^15",[148,"^U",146,536870919]],["^15",[148,"^H",39,536870919]],["^15",[148,"^H",47,536870919]],["^15",[148,"^H",143,536870919]],["^15",[148,"^H",144,536870919]],["^15",[148,"^H",146,536870919]],["^15",[148,"^17",true,536870919]],["^15",[148,"^;","~u649a41ae-76da-422b-9a4e-aa0036ac84c9",536870919]],["^15",[149,"^Q","However, despite all that there are actual differences between classes and [[Function]]s. This is due to how JS applies many other things to classes, such as\n* ``[[IsClassConstructor]]``, this special internal property is implicitly set to true for classes and is referred at many places in JS, such as with [[new]].\nFor ex.:\n```js\nclass X{}\n\nlet x = new X(); //ok\nX(); //error\n```\n* String representation of a class is different too\n```js\nclass X{}\nconsole.log(X); //prints class X...\n```\n* All class methods are non-enumerable by default.\n* All code inside classes uses ``Strict`` mode.",536870919]],["^15",[149,"^O","^16",536870919]],["^15",[149,"^F",150,536870919]],["^15",[149,"^X",75,536870919]],["^15",[149,"^V",75,536870919]],["^15",[149,"^U",44,536870919]],["^15",[149,"^U",75,536870919]],["^15",[149,"^U",145,536870919]],["^15",[149,"^H",44,536870919]],["^15",[149,"^H",145,536870919]],["^15",[149,"^17",true,536870919]],["^15",[149,"^;","~u649a41ae-3257-44d1-a9fc-91edf1b4e3c7",536870919]],["^15",[150,"^Q","When we create a CO with the [[new]] keyword, these 4 things happen\n* A [[Function]] with the same name as the class is created\n* The class' ctor function's body, if defined, becomes the body of this function\n* The default ``[[Prototype]]`` of the function gets augmented with the class' methods/properties as they become methods/properties of the [[Prototype Object]] of this function. \n* Calls this function as a Ctor Function.\nFor ex.:\n```js\nclass X{\n yo(){}\n}\n\nlet x = new X();\n```\nHere, a function named ``X`` is created, it has empty body, ``X``'s ``[[Prototype]]`` gets the method ``yo()`` in it, then this ``X`` function is called.\nSo, the function ``X`` has ``X.prototype = {constructor: X, yo(){}}`` and we can check this too\n```js\nclass X{\n yo(){}\n}\n\nconsole.log(X === X.prototype.constructor); //true\n\n```\n\nRemember, just like [[Function]] has ``.prototype`` so does a class, this ``.prototype``'s Object is assigned to the ``[[Prototype]]`` of the Object that is returned after ``new <Class>()`` is called.",536870919]],["^15",[150,"^O","^16",536870919]],["^15",[150,"^F",153,536870919]],["^15",[150,"^X",75,536870919]],["^15",[150,"^V",75,536870919]],["^15",[150,"^U",44,536870919]],["^15",[150,"^U",75,536870919]],["^15",[150,"^U",143,536870919]],["^15",[150,"^U",145,536870919]],["^15",[150,"^H",44,536870919]],["^15",[150,"^H",143,536870919]],["^15",[150,"^H",145,536870919]],["^15",[150,"^17",true,536870919]],["^15",[150,"^;","~u649a41ae-07f3-481c-accd-fd3a701efd2b",536870919]],["^15",[151,"^Q","Class Expression\nJust like [[Function]] expression, these are allowed\n```js\nlet x = class {...}; //notice the semicolon\nlet y = class Yo{...}; //also allowed, just like Named Function Expressions\nlet z = new x(); //ok\n```\nThis allows us to even dynamically create classes, like when we return CE's from functions.",536870919]],["^15",[151,"^O","^16",536870919]],["^15",[151,"^F",149,536870919]],["^15",[151,"^X",75,536870919]],["^15",[151,"^V",75,536870919]],["^15",[151,"^U",44,536870919]],["^15",[151,"^U",75,536870919]],["^15",[151,"^H",44,536870919]],["^15",[151,"^17",true,536870919]],["^15",[151,"^;","~u649a41ae-f004-4d2f-8647-1bdd4aaabfe5",536870919]],["^15",[152,"^Q","The value of [[this]] in class methods is the class itself.",536870919]],["^15",[152,"^O","^16",536870919]],["^15",[152,"^F",158,536870919]],["^15",[152,"^X",75,536870919]],["^15",[152,"^V",75,536870919]],["^15",[152,"^U",75,536870919]],["^15",[152,"^U",144,536870919]],["^15",[152,"^H",144,536870919]],["^15",[152,"^17",true,536870919]],["^15",[152,"^;","~u649a41ae-d531-4cc4-898a-9017057a3229",536870919]],["^15",[153,"^Q","Classes are just a convenience over [[Function]]s in JS\nFor ex.:\n```js\nclass X{}\n\nconsole.log(typeof X); //prints Function\n```",536870919]],["^15",[153,"^O","^16",536870919]],["^15",[153,"^F",160,536870919]],["^15",[153,"^X",75,536870919]],["^15",[153,"^V",75,536870919]],["^15",[153,"^U",44,536870919]],["^15",[153,"^U",75,536870919]],["^15",[153,"^H",44,536870919]],["^15",[153,"^17",true,536870919]],["^15",[153,"^;","~u649a41ae-7a51-45cc-a62c-abe3564e5f2a",536870919]],["^15",[154,"^Q","Access Modifiers:\nNot in the language as of yet, curently it is recommended to go by convention and have protected properties prefixed with ``_`` in classes/ [[Object]]s. The language currently itself doesn't see these properties differently and inheritance/etc. works like normal.\nHowever, a new JS feature is almost implemented in the standard that allows private properties and methods. To do so we prefix property/method names with ``#`` and such properties/methods are considered private. These are not inherited and can only be accessed by the same class internally.\nFor ex.:\n```js\nclass X{\n #speed = 20;\n yo() {\n console.log(this.#speed); //ok works\n }\n}\n\nclass Y extends X {\n nah() {\n console.log(this[#name]); //2 errors, firstly the [...] Operator can't use this syntax, this is an intended limitation\n// secondly, as this is a private property, Y can't access it.\n }\n}\n```",536870919]],["^15",[154,"^O","^16",536870919]],["^15",[154,"^F",148,536870919]],["^15",[154,"^X",75,536870919]],["^15",[154,"^V",75,536870919]],["^15",[154,"^U",39,536870919]],["^15",[154,"^U",75,536870919]],["^15",[154,"^H",39,536870919]],["^15",[154,"^17",true,536870919]],["^15",[154,"^;","~u649a41ae-13c0-4d83-b817-fefdd2f640e6",536870919]],["^15",[155,"^Q","Built-in classes are implemented in a way that allows extending them more convenient.\nFor ex.:\n```js\nclass PowerArray extends Array {\n  isEmpty() {\n    return this.length === 0;\n  }\n}\n\nlet arr = new PowerArray(1, 2, 5, 10, 50);\nconsole.log(arr.isEmpty()); // false\n\nlet filteredArr = arr.filter(item => item >= 10);\nconsole.log(filteredArr); // 10, 50\nconsole.log(filteredArr.isEmpty()); // false. This still works, isEmpty is present in PowerArray and filter returns PowerArray here.\n\nconsole.log(arr.constructor===PowerArray); //true\n```\nHere, our extension on [[Array]] still works despite being processed by the parent Class' method. That is, methods like ``<array>.filter`` are smart enough to return the same type of object that invoked them. To do this, they use the constructor of the child object, which is why ``arr.constructor`` is equal to ``PowerArray`` above.\n\n However, this behavior can be modified so that they return a given type of object. To do so, our Class must override static getter method ``[Symbol.species]`` which is a [[Symbol]] and then we return the constructor those methods will use to generate result object of.\nFor ex.:\n```js\nclass PowerArray extends Array{\n static get [Symbol.species]  {\n return Array;\n }\n yo() {}\n}\nlet arr = new PowerArray(1,2,3,4);\nlet arrF= arr.filter(i=> i>1);\narrF.yo(); //error as arrF is of type Array and not PowerArray\n```",536870919]],["^15",[155,"^O","^16",536870919]],["^15",[155,"^F",154,536870919]],["^15",[155,"^X",75,536870919]],["^15",[155,"^V",75,536870919]],["^15",[155,"^U",43,536870919]],["^15",[155,"^U",47,536870919]],["^15",[155,"^U",75,536870919]],["^15",[155,"^H",43,536870919]],["^15",[155,"^H",47,536870919]],["^15",[155,"^17",true,536870919]],["^15",[155,"^;","~u649a41ae-eaff-4d18-a79b-83c83ca79b28",536870919]],["^15",[156,"^Q","",536870919]],["^15",[156,"^O","^16",536870919]],["^15",[156,"^F",165,536870919]],["^15",[156,"^X",75,536870919]],["^15",[156,"^V",75,536870919]],["^15",[156,"^U",75,536870919]],["^15",[156,"^17",true,536870919]],["^15",[156,"^;","~u649a41ae-a008-4124-9407-e3e413142a97",536870919]],["^15",[157,"^Q","A class in JS is a kind of [[Function]], which is just an [[Object]]. Still, it offers a lot of convenience and familiarity with classes in other language such as [[C++]].",536870919]],["^15",[157,"^O","^16",536870919]],["^15",[157,"^F",75,536870919]],["^15",[157,"^X",75,536870919]],["^15",[157,"^V",75,536870919]],["^15",[157,"^U",39,536870919]],["^15",[157,"^U",42,536870919]],["^15",[157,"^U",44,536870919]],["^15",[157,"^U",75,536870919]],["^15",[157,"^H",39,536870919]],["^15",[157,"^H",42,536870919]],["^15",[157,"^H",44,536870919]],["^15",[157,"^17",true,536870919]],["^15",[157,"^;","~u649a41ae-2ef4-4b5b-a83f-c2248ffd4f22",536870919]],["^15",[158,"^Q","Introduced in recent years, classes allow fields too now\n```js\nclass X{\n name = \"yo\"; //notice the semicolon\n}\n\nlet x =new X();\nconsole.log(x.prototype.name); //undefined\nconsole.log(x.name); //yo\n```\nThese are set on individual Objects and not the [[Prototype Object]]. And can even use expressions so the value is evaluated at runtime.\n\nClass field is something even the traditional [[Object]] doesn't have, as we can use Arrow [[Function]] to be assigned to a field hence allowing us to refer the class directly in [[this]]\nFor ex.:\n```js\nlet x = {\n yo: () => {...}, //error as arrow functions are not allowed in Objects\n};\n\nclass X {\n a= 2;\n yo = () => {\n  console.log(this.a); //works\n  }\n}\nlet xobj= new X();\nx.yo(); //ok\n\n```",536870919]],["^15",[158,"^O","^16",536870919]],["^15",[158,"^F",161,536870919]],["^15",[158,"^X",75,536870919]],["^15",[158,"^V",75,536870919]],["^15",[158,"^U",39,536870919]],["^15",[158,"^U",44,536870919]],["^15",[158,"^U",75,536870919]],["^15",[158,"^U",143,536870919]],["^15",[158,"^U",144,536870919]],["^15",[158,"^H",39,536870919]],["^15",[158,"^H",44,536870919]],["^15",[158,"^H",143,536870919]],["^15",[158,"^H",144,536870919]],["^15",[158,"^17",true,536870919]],["^15",[158,"^;","~u649a41ae-46e4-4f62-b364-3f6215edaa31",536870919]],["^15",[159,"^Q","~``instanceOf`` [[Operator]]\nThis op. returns true if a given object is an instance of a given class, or one of its parents.\n``<obj> instanceOf <class>``.\nFor ex.:\n```js\nlet x= [1,2,3];\nconsole.log(x instanceOf Array); //true\nconsole.log(x instanceOf Object); //also true\n```\n\nThis behavior can be customized too, by defining a static method with the signature [Symbol.hasInstance](<obj>) which is a [[Symbol]]. This method has to return true or false. \nFor ex.:\n```js\nclass X{\n static [Symbol.hasInstance](obj) {\n  return true;\n  }\n}\n\nlet arr = [1,2,3];\nconsole.log(arr instanceOf X); //prints true\n```\nThe instanceOf op. roughly works like so, for the given Class, search for this method in the Class, if found pass the object, else compare ``<obj>.__proto__===<Class>.prototype``, if this is false then look up the [[Prototype Object]] chain and check these 2 again. If no Class in the prototypal chain has this method and all the [[Prototype Object]] comparison return false, then return false.\n\nThere's also ``<objA>.isPrototypeOf(<objB>)``, so we can also use ``<Class>.prototype.isPrototypeOf(obj)``.",536870919]],["^15",[159,"^O","^16",536870919]],["^15",[159,"^F",155,536870919]],["^15",[159,"^X",75,536870919]],["^15",[159,"^V",75,536870919]],["^15",[159,"^U",43,536870919]],["^15",[159,"^U",75,536870919]],["^15",[159,"^U",76,536870919]],["^15",[159,"^U",143,536870919]],["^15",[159,"^H",43,536870919]],["^15",[159,"^H",76,536870919]],["^15",[159,"^H",143,536870919]],["^15",[159,"^17",true,536870919]],["^15",[159,"^;","~u649a41ae-9ae1-452e-8a37-ec61c57b534b",536870919]],["^15",[160,"^Q","Classes are defined with the ``class`` keyword,\nFor ex.:\n```js\nclass Yo {\nconstructor() {} //notice the lack of commas unlike in Objects\nhi(){}\n} \n\nlet x = new Yo();\nx.hi();\n```\nThen we can create ``Class objects`` (COs) with the [[new]] keyword. (A CO or class object or just object is different from an Object, ofc an object is still an Object but in terminology, a CO is different from an Object)",536870919]],["^15",[160,"^O","^16",536870919]],["^15",[160,"^F",157,536870919]],["^15",[160,"^X",75,536870919]],["^15",[160,"^V",75,536870919]],["^15",[160,"^U",75,536870919]],["^15",[160,"^U",145,536870919]],["^15",[160,"^H",145,536870919]],["^15",[160,"^17",true,536870919]],["^15",[160,"^;","~u649a41ae-c0cc-48c3-82ab-4642c6dacf83",536870919]],["^15",[161,"^Q","Computed Names are also allowed in classes\nFor ex.:\n```js\nclass X{\n [\"yo\"+\"yee\"]() {\n console.log(\"yuh\");\n  }\n}\n\nlet x = new X();\nx[\"yo\"+\"yee\"](); //ok\n```\nCalling methods using the ``[...]`` [[Operator]] is allowed too.",536870919]],["^15",[161,"^O","^16",536870919]],["^15",[161,"^F",163,536870919]],["^15",[161,"^X",75,536870919]],["^15",[161,"^V",75,536870919]],["^15",[161,"^U",75,536870919]],["^15",[161,"^U",76,536870919]],["^15",[161,"^H",76,536870919]],["^15",[161,"^17",true,536870919]],["^15",[161,"^;","~u649a41ae-4363-45ae-a2d5-aeb8ca29e477",536870919]],["^15",[162,"^Q","~``super`` keyword: \nClasses also provide a way to call their Parent Class' methods, this is done using the super keyword.\nFor ex.:\n```js\nclass X{\nyo(){}\n} \nclass Y {\n constructor() { \n  super(); //call the super ctor\n } \n \n ho() {\n super.yo(); //ok\n let x = function() {\n   super.yo(); //error as super is unknown here\n  }\n let y = () => {\n  super.yo(); //ok\n   }\n }\n \n}\n```\nArrow [[Function]]s don't have ``super`` either, so they refer to their parent block's super which is why it works here.\n\n``super`` works similarly in normal Object methods too.",536870919]],["^15",[162,"^O","^16",536870919]],["^15",[162,"^F",156,536870919]],["^15",[162,"^X",75,536870919]],["^15",[162,"^V",75,536870919]],["^15",[162,"^U",44,536870919]],["^15",[162,"^U",75,536870919]],["^15",[162,"^H",44,536870919]],["^15",[162,"^17",true,536870919]],["^15",[162,"^;","~u649a41ae-fa30-4647-8643-606d4b575ffc",536870919]],["^15",[163,"^Q","Classes can use getter/setter methods and the syntax is the same as Accessor Properties in [[Object]].",536870919]],["^15",[163,"^O","^16",536870919]],["^15",[163,"^F",151,536870919]],["^15",[163,"^X",75,536870919]],["^15",[163,"^V",75,536870919]],["^15",[163,"^U",39,536870919]],["^15",[163,"^U",75,536870919]],["^15",[163,"^H",39,536870919]],["^15",[163,"^17",true,536870919]],["^15",[163,"^;","~u649a41ae-bb79-4c36-8dc8-1efd0f19e2b4",536870919]],["^15",[164,"^Q","Mixin\nThis is a ``Class`` that only provides behavior/functionality that other classes can ``mix-in`` their own definitions to conveniently copy functionality. \nClasses in JS are single inheritance as we know, so mixins provide a way to mix multiple classes in.\nJS doesn't provide any special functionality for mixins, but we can copy over methods from a class manually. \n\nFor ex.:\n```js\nlet myMixin= {\n yo() {}\n};\n\nclass X{\n \n}\n\nObject.assign(X.prototype, myMixin);\n\nnew X().yo(); //works\n```\nWe use ``Object.assign(...)`` [[Object]]'s method to copy over methods/properties from one Object into another.",536870919]],["^15",[164,"^O","^16",536870919]],["^15",[164,"^F",159,536870919]],["^15",[164,"^X",75,536870919]],["^15",[164,"^V",75,536870919]],["^15",[164,"^U",39,536870919]],["^15",[164,"^U",75,536870919]],["^15",[164,"^H",39,536870919]],["^15",[164,"^17",true,536870919]],["^15",[164,"^;","~u649a41ae-d64b-4c4d-8c2a-6aa3357b61ab",536870919]],["^15",[165,"^Q","Class Inheritance\nWe can extend a class with the ``extends`` keyword\n``class Child extends Parent {...}``.\n\nAnd it works as expected. The way it works is by simply setting ``Child.prototype``'s [[Prototype Object]] to the ``Parent`` class.\nFor ex.:\n```js\nclass X {\nyo() {}\n};\nclass Y extends X{\n};\nlet y = new Y();\ny.yo(); //ok\n```\nIt looks something like so\n![image.png](../assets/image_1686809042985_0.png) \n\n* However, unlike in other languages, JS also allows an expression after ``extends``\nFor ex.:\n```js\nfunction yo() {\n return class {};\n}\n\nclass X extends yo() {\n}  //works\n```\n* Overriding methods\nJust like normal, if a child has a method with the same name as the parent then the child method overrides (or call it [[Shadowed]]) the parent one.\n\n* If a class extends another class and doesn't have a ctor, then the following ctor is generated automatically\n```js\nclass X {}\nclass Y extends X{\n/*generates\nconstructor(...args) {\n  super(...args);\n }\nthis ctor implicitly\n*/\n}\n\nlet y= new Y();\n```\nIf we specify our own ctor, then we must call ``super(...)`` before using [[this]] in the ctor. Otherwise it is an error.\n\nThis works like so, in JS there's a difference between the ``constructor()`` function of a child/deriving class and of a ``constructor()`` of a parent/derived class. The derived class' ctor function has a special internal property ``[[ConstructorKind]]:\"derived\"`` set on its [[Object]]. \nWhen [[new]] executes the ctor function, it passes an empty Object to [[this]] if there's no derived class, but if there is a derived class then it expects a call to the ``constructor()`` of the derived class and the generated Object is passed to the [[this]].\n\n* Yes we can inherit and override class fields too\n```js\nclass X{\n name= \"X\";\n constructor() {\n  console.log(this.name);\n }\n\n yo() {\n console.log(this.name);\n }\n}\nclass Y extends X{\n name = \"Y\";\n\n}\n\nlet x = new X(); //prints \"X\"\nlet y = new Y(); //also prints \"X\"\ny.yo(); //prints \"Y\"\nx.yo(); //prints \"X\"\n```\n\nThe reason ``new Y()`` prints X is due to how the objects are initialized. Firstly, fields are created on the object itself and not the class. Meaning if a class' object is not created yet, it won't have access to the fields. So above, as we know a default ctor is created for ``Y`` which calls ``X``'s ctor. And at that time, ``Y`` isn't created yet so the object of y calling X doesn't yet have a ``name`` property, hence the ctor of ``X``  uses its own field then finishes up . Then the rest of the Y's ctor is finished and it's object overrides the name set by X in the resultant object.\nOn the other hand, the resultant object has correct value for name after ctor and now when ``.yo()`` is called, it uses the ``name`` set by ``Y``.",536870919]],["^15",[165,"^O","^16",536870919]],["^15",[165,"^F",152,536870919]],["^15",[165,"^X",75,536870919]],["^15",[165,"^V",75,536870919]],["^15",[165,"^U",39,536870919]],["^15",[165,"^U",75,536870919]],["^15",[165,"^U",143,536870919]],["^15",[165,"^U",144,536870919]],["^15",[165,"^U",145,536870919]],["^15",[165,"^U",147,536870919]],["^15",[165,"^H",39,536870919]],["^15",[165,"^H",143,536870919]],["^15",[165,"^H",144,536870919]],["^15",[165,"^H",145,536870919]],["^15",[165,"^H",147,536870919]],["^15",[165,"^17",true,536870919]],["^15",[165,"^;","~u649a41ae-c97a-4cde-818a-94f2f94cb29f",536870919]],["^15",[166,"^Q","~``[[HomeObject]]``:\n``super`` doesn't use [[this]] directly to go up the parent chain, it uses this special property.\n``[[HomeObject]]`` is a special internal property set on [[Function]]s when they are methods of either [[Class]]es or [[Object]]s. The value of this property is the class or Object itself. This is used by ``super`` to correctly identify parent class methods and call them.\nFor ex.:\n```js\nlet x ={\n yo() {}\n no() {} //no.[[HomeObject]] = x\n};\nlet y = {\n__proto__: x\n yo() {\n this.__proto__.yo.call(this); \n }\n no() { //no.[[HomeObject]] = y\n super.no();\n}\n};\nlet z = {\n __proto__: y\n yo() {\n this.__proto__yo.call(this); //we can do this.__proto__.yo() too but then when y.yo() is called it won't have a ``this`` that has a __proto__ to x as ``this`` be no Object.\n }\n  no() { //no.[[HomeObject]] = z\n super.no(); \n}\n}\n\nz.yo(); //call stack error\nz.no(); //works, calls z.no() then y.no() then x.no()\n```\nleads to an infinite recursion as ``z.yo()`` calls ``y.yo()`` which still has ``this`` that has ``z`` in it so it calls ``y.yo()`` again and the same for infinite times. \nOn the other hand, ``z.no()`` works because ``super`` knows how to circumvent such issues. It does so by calling something like ``z.no.[[HomeObject]].__proto__.no()`` when we do ``super.no()``, which leads yo ``y.no()`` and then ``y.no.[[HomeObject]].__proto__.no()`` is called which leads to ``x.no()`` finally.\n\n* This special property is only used by ``super``.\n* ``[[HomeObject]]`` is immutable. It never changes. This means, unlike normal Functions, methods in Classes/Objects that use ``super`` must never be copied to other Classes/Objects if we wish to keep the same behavior.\nFor ex.:\n```js\nlet x ={\n yo() {\n console.log(\"x.yo\");\n }\n};\nlet y = {\n __proto__: x\n yo() {\nconsole.log(\"y.yo\");\n super.yo();\n }\n};\nlet z = {\n yo() {\n  console.log(\"z.yo\");\n }\n};\nlet k = {\n __proto__:z\n yo: y.yo,\n};\n\nk.yo(); //prints y.yo then x.yo\n```\nThis is not expected behavior since we expect ``k.yo`` to copy the method ``y.yo`` and the ``super.yo()`` in it to call ``z.yo()``. Since the ``[[HomeObject]]`` never changes, even when ``k.yo`` copies the function, it is still the same ``y`` so we get this behavior.\n* ``[[HomeObject]]`` is only set for methods that are defined like ``<method>()`` and not any other way, like ``<method name>: function(){...}``.",536870919]],["^15",[166,"^O","^16",536870919]],["^15",[166,"^F",162,536870919]],["^15",[166,"^X",75,536870919]],["^15",[166,"^V",75,536870919]],["^15",[166,"^U",39,536870919]],["^15",[166,"^U",44,536870919]],["^15",[166,"^U",75,536870919]],["^15",[166,"^U",144,536870919]],["^15",[166,"^H",39,536870919]],["^15",[166,"^H",44,536870919]],["^15",[166,"^H",75,536870919]],["^15",[166,"^H",144,536870919]],["^15",[166,"^17",true,536870919]],["^15",[166,"^;","~u649a41ae-be5a-4973-82e7-34fa5d0b99b1",536870919]],["^15",[167,"^3","- The standard ``//`` for single line and ``/* */`` for multi-line.",536870919]],["^15",[167,"^18",1687830958916,536870919]],["^15",[167,"^Z","pages/Comments.md",536870919]],["^15",[168,"^K",1687830959327,536870919]],["^15",[168,"^[",167,536870919]],["^15",[168,"^@",false,536870919]],["^15",[168,"^Y","comments",536870919]],["^15",[168,"^11","Comments",536870919]],["^15",[168,"^B",1687830959327,536870919]],["^15",[168,"^;","~u662fc702-6071-4ccc-a33e-41bde94e6f72",536885544]],["^15",[169,"^Q","The standard ``//`` for single line and ``/* */`` for multi-line.",536870919]],["^15",[169,"^O","^16",536870919]],["^15",[169,"^F",168,536870919]],["^15",[169,"^X",168,536870919]],["^15",[169,"^V",168,536870919]],["^15",[169,"^U",168,536870919]],["^15",[169,"^17",true,536870919]],["^15",[169,"^;","~u649a41ae-fbce-40ec-82f8-4d849c7d3765",536870919]],["^15",[170,"^3","- Compares values using the comparison [[Operator]]\n- There's Normal Equality, using == and !=. And [[Strict Equality]] using ``===`` and ``!==``.\n- There's another oddity with normal equality comparison, the null and undefined comparison.\n  null and undefined always equal each other and theirselves in normal equality comparison.\n  For ex.:\n  ```js\n  let x= null==undefined; //true and they only equal each other and theirselves.\n  ```\n- For other operations, [[null]] and [[undefined]] are converted to [[Number]] where [[null]] becomes 0 and [[undefined]] becomes [[NaN]]. \n  Note, normal equality comparison doesn't convert [[null]] or [[undefined]] and only returns true when compared against theirselves or each other, but other comparison operators do.\n  This leads to following behavior:\n  ```js\n  let x= null > 0; //false, converts null to 0\n  x = null==0; //false, compares null to 0\n  x= null >= 0; //true, converts null to 0\n  ```\n  On the contrary, undefined always returns false when not normal equality compared against itself or null, because it gets converted to [[NaN]].\n-",536870919]],["^15",[170,"^18",1687830958932,536870919]],["^15",[170,"^Z","pages/Comparison.md",536870919]],["^15",[171,"^K",1687830959984,536870919]],["^15",[171,"^[",170,536870919]],["^15",[171,"^@",false,536870919]],["^15",[171,"^Y","comparison",536870919]],["^15",[171,"^11","Comparison",536870919]],["^15",[171,"^B",1687830959984,536870919]],["^15",[171,"^;","~u662fc702-4c9f-4fe9-9235-085e16eec626",536885544]],["^15",[172,"^K",1687830960087,536870919]],["^15",[172,"^[",630,536870919]],["^15",[172,"^@",false,536870919]],["^15",[172,"^Y","strict equality",536870919]],["^15",[172,"^11","Strict Equality",536870919]],["^15",[172,"^B",1687830960087,536870919]],["^15",[172,"^;","~u65a4cc08-aa3e-481a-96ba-394261146aac",536885071]],["^15",[173,"^K",1687830960317,536870919]],["^15",[173,"^[",707,536870919]],["^15",[173,"^@",false,536870919]],["^15",[173,"^Y","null",536870919]],["^15",[173,"^11","null",536870919]],["^15",[173,"^B",1687830960317,536870919]],["^15",[173,"^;","~u662fc702-15c5-4005-b358-f88d2467f86d",536885544]],["^15",[174,"^K",1687830959936,536870919]],["^15",[174,"^[",514,536870919]],["^15",[174,"^@",false,536870919]],["^15",[174,"^Y","nan",536870919]],["^15",[174,"^11","NaN",536870919]],["^15",[174,"^B",1687830959936,536870919]],["^15",[174,"^;","~u66201223-e98b-4eab-a199-333ebc2ea087",536885504]],["^15",[175,"^Q","Compares values using the comparison [[Operator]]",536870919]],["^15",[175,"^O","^16",536870919]],["^15",[175,"^F",171,536870919]],["^15",[175,"^X",171,536870919]],["^15",[175,"^V",171,536870919]],["^15",[175,"^U",76,536870919]],["^15",[175,"^U",171,536870919]],["^15",[175,"^H",76,536870919]],["^15",[175,"^17",true,536870919]],["^15",[175,"^;","~u649a41ae-8a07-4838-8f90-788560c4c51d",536870919]],["^15",[176,"^Q","There's Normal Equality, using == and !=. And [[Strict Equality]] using ``===`` and ``!==``.",536870919]],["^15",[176,"^O","^16",536870919]],["^15",[176,"^F",175,536870919]],["^15",[176,"^X",171,536870919]],["^15",[176,"^V",171,536870919]],["^15",[176,"^U",171,536870919]],["^15",[176,"^U",172,536870919]],["^15",[176,"^H",172,536870919]],["^15",[176,"^17",true,536870919]],["^15",[176,"^;","~u649a41ae-23ab-4ca4-bd4a-b4f994cf9e0a",536870919]],["^15",[177,"^Q","There's another oddity with normal equality comparison, the null and undefined comparison.\nnull and undefined always equal each other and theirselves in normal equality comparison.\nFor ex.:\n```js\nlet x= null==undefined; //true and they only equal each other and theirselves.\n```",536870919]],["^15",[177,"^O","^16",536870919]],["^15",[177,"^F",176,536870919]],["^15",[177,"^X",171,536870919]],["^15",[177,"^V",171,536870919]],["^15",[177,"^U",171,536870919]],["^15",[177,"^17",true,536870919]],["^15",[177,"^;","~u649a41ae-5a1d-4c6c-be6c-4f5b6556530d",536870919]],["^15",[178,"^Q","For other operations, [[null]] and [[undefined]] are converted to [[Number]] where [[null]] becomes 0 and [[undefined]] becomes [[NaN]]. \nNote, normal equality comparison doesn't convert [[null]] or [[undefined]] and only returns true when compared against theirselves or each other, but other comparison operators do.\nThis leads to following behavior:\n```js\nlet x= null > 0; //false, converts null to 0\nx = null==0; //false, compares null to 0\nx= null >= 0; //true, converts null to 0\n```\nOn the contrary, undefined always returns false when not normal equality compared against itself or null, because it gets converted to [[NaN]].",536870919]],["^15",[178,"^O","^16",536870919]],["^15",[178,"^F",177,536870919]],["^15",[178,"^X",171,536870919]],["^15",[178,"^V",171,536870919]],["^15",[178,"^U",45,536870919]],["^15",[178,"^U",100,536870919]],["^15",[178,"^U",171,536870919]],["^15",[178,"^U",173,536870919]],["^15",[178,"^U",174,536870919]],["^15",[178,"^H",45,536870919]],["^15",[178,"^H",100,536870919]],["^15",[178,"^H",173,536870919]],["^15",[178,"^H",174,536870919]],["^15",[178,"^17",true,536870919]],["^15",[178,"^;","~u649a41ae-2259-46f0-be30-dbb9c0a9270f",536870919]],["^15",[179,"^Q","",536870919]],["^15",[179,"^O","^16",536870919]],["^15",[179,"^F",178,536870919]],["^15",[179,"^X",171,536870919]],["^15",[179,"^V",171,536870919]],["^15",[179,"^U",171,536870919]],["^15",[179,"^17",true,536870919]],["^15",[179,"^;","~u649a41ae-668e-47d0-9c37-a3d65a92f92b",536870919]],["^15",[180,"^3","- JS is interpreted line-by-line in browser [[<script>]]s , however it is also compiled as most modern browsers use JIT to compile only necessary code.",536870919]],["^15",[180,"^18",1687830958940,536870919]],["^15",[180,"^Z","pages/Compilation.md",536870919]],["^15",[181,"^K",1687830959713,536870919]],["^15",[181,"^[",180,536870919]],["^15",[181,"^@",false,536870919]],["^15",[181,"^Y","compilation",536870919]],["^15",[181,"^11","Compilation",536870919]],["^15",[181,"^B",1687830959713,536870919]],["^15",[181,"^;","~u662fc702-d8ba-475e-9a78-0ff0da7db1c3",536885544]],["^15",[182,"^Q","JS is interpreted line-by-line in browser [[<script>]]s , however it is also compiled as most modern browsers use JIT to compile only necessary code.",536870919]],["^15",[182,"^O","^16",536870919]],["^15",[182,"^F",181,536870919]],["^15",[182,"^X",181,536870919]],["^15",[182,"^V",181,536870919]],["^15",[182,"^U",29,536870919]],["^15",[182,"^U",181,536870919]],["^15",[182,"^H",29,536870919]],["^15",[182,"^17",true,536870919]],["^15",[182,"^;","~u649a41ae-9c49-475a-8c55-a97813197214",536870919]],["^15",[183,"^3","- The standard, \n  ``if(<bool>) {...} else if (<bool>) {...} else {...}``\n  The {...} is optional if a single statement is used like in [[C++]].\n- [[Conditional]] Operator is also supported like Ternary Operator in C++.\n- Switch Statement is also supported.\n  They use strict equality.\n  \n  For ex.:\n  ```js\n  let a=\"1\";\n  let b=0;\n  \n  switch (+a) {\n  case \"1\": ... \n               break;\n  case b+1: ... //runs this as +a converts a to number 1 and it is strictly equal to 0+1\n                break;\n  default: \n              break;\n  }\n  ```\n  Just like [[C++]], the cases allow fall-through, so if any case gets matched and it doesn't have a [[break]] then the next case is executed without its condition being checked.\n-",536870919]],["^15",[183,"^18",1687830958953,536870919]],["^15",[183,"^Z","pages/Conditional.md",536870919]],["^15",[184,"^K",1687830959984,536870919]],["^15",[184,"^[",183,536870919]],["^15",[184,"^@",false,536870919]],["^15",[184,"^Y","conditional",536870919]],["^15",[184,"^11","Conditional",536870919]],["^15",[184,"^B",1687830959984,536870919]],["^15",[184,"^;","~u662fc702-bf8c-48d0-8f8c-ea754321b6a6",536885544]],["^15",[185,"^K",1687830960268,536870919]],["^15",[185,"^[",699,536870919]],["^15",[185,"^@",false,536870919]],["^15",[185,"^Y","break",536870919]],["^15",[185,"^11","break",536870919]],["^15",[185,"^B",1687830960268,536870919]],["^15",[185,"^;","~u649a41b0-a06a-43b3-a1cf-4055d7725aa8",536870919]],["^15",[186,"^Q","The standard, \n``if(<bool>) {...} else if (<bool>) {...} else {...}``\nThe {...} is optional if a single statement is used like in [[C++]].",536870919]],["^15",[186,"^O","^16",536870919]],["^15",[186,"^F",184,536870919]],["^15",[186,"^X",184,536870919]],["^15",[186,"^V",184,536870919]],["^15",[186,"^U",42,536870919]],["^15",[186,"^U",184,536870919]],["^15",[186,"^H",42,536870919]],["^15",[186,"^17",true,536870919]],["^15",[186,"^;","~u649a41ae-cc6a-4f63-b9cb-4a9caeeb60a4",536870919]],["^15",[187,"^Q","[[Conditional]] Operator is also supported like Ternary Operator in C++.",536870919]],["^15",[187,"^O","^16",536870919]],["^15",[187,"^F",186,536870919]],["^15",[187,"^X",184,536870919]],["^15",[187,"^V",184,536870919]],["^15",[187,"^U",184,536870919]],["^15",[187,"^H",184,536870919]],["^15",[187,"^17",true,536870919]],["^15",[187,"^;","~u649a41ae-9ca8-4206-a1ed-bb38c37eeec4",536870919]],["^15",[188,"^Q","Switch Statement is also supported.\nThey use strict equality.\n\nFor ex.:\n```js\nlet a=\"1\";\nlet b=0;\n\nswitch (+a) {\ncase \"1\": ... \n             break;\ncase b+1: ... //runs this as +a converts a to number 1 and it is strictly equal to 0+1\n              break;\ndefault: \n            break;\n}\n```\nJust like [[C++]], the cases allow fall-through, so if any case gets matched and it doesn't have a [[break]] then the next case is executed without its condition being checked.",536870919]],["^15",[188,"^O","^16",536870919]],["^15",[188,"^F",187,536870919]],["^15",[188,"^X",184,536870919]],["^15",[188,"^V",184,536870919]],["^15",[188,"^U",42,536870919]],["^15",[188,"^U",184,536870919]],["^15",[188,"^U",185,536870919]],["^15",[188,"^H",42,536870919]],["^15",[188,"^H",185,536870919]],["^15",[188,"^17",true,536870919]],["^15",[188,"^;","~u649a41ae-be7b-4311-96dd-d5470beeed65",536870919]],["^15",[189,"^Q","",536870919]],["^15",[189,"^O","^16",536870919]],["^15",[189,"^F",188,536870919]],["^15",[189,"^X",184,536870919]],["^15",[189,"^V",184,536870919]],["^15",[189,"^U",184,536870919]],["^15",[189,"^17",true,536870919]],["^15",[189,"^;","~u649a41ae-6222-4f76-904d-f8565dbfa9ac",536870919]],["^15",[190,"^3","- ``console.log(<any number and type of values>)`` logs stuff to the console. It implicitly converts the arguments to string.\n- ``console.dir(<obj>)`` supported in Chrome Devtools and NodeJS takes an [[Object]] and shows all its properties, even the ones in the [[Prototype Object]] . \n  Like so\n  ![image.png](../assets/image_1686712854181_0.png)****",536870919]],["^15",[190,"^18",1687830958967,536870919]],["^15",[190,"^Z","pages/Console.md",536870919]],["^15",[191,"^K",1687830959327,536870919]],["^15",[191,"^[",190,536870919]],["^15",[191,"^@",false,536870919]],["^15",[191,"^Y","console",536870919]],["^15",[191,"^11","Console",536870919]],["^15",[191,"^B",1687830959327,536870919]],["^15",[191,"^;","~u662fc702-25ee-4578-9489-886e00339982",536885544]],["^15",[192,"^Q","~``console.log(<any number and type of values>)`` logs stuff to the console. It implicitly converts the arguments to string.",536870919]],["^15",[192,"^O","^16",536870919]],["^15",[192,"^F",191,536870919]],["^15",[192,"^X",191,536870919]],["^15",[192,"^V",191,536870919]],["^15",[192,"^U",191,536870919]],["^15",[192,"^17",true,536870919]],["^15",[192,"^;","~u649a41ae-55c3-4602-8e49-7ac1626e02db",536870919]],["^15",[193,"^Q","~``console.dir(<obj>)`` supported in Chrome Devtools and NodeJS takes an [[Object]] and shows all its properties, even the ones in the [[Prototype Object]] . \nLike so\n![image.png](../assets/image_1686712854181_0.png)****",536870919]],["^15",[193,"^O","^16",536870919]],["^15",[193,"^F",192,536870919]],["^15",[193,"^X",191,536870919]],["^15",[193,"^V",191,536870919]],["^15",[193,"^U",39,536870919]],["^15",[193,"^U",143,536870919]],["^15",[193,"^U",191,536870919]],["^15",[193,"^H",39,536870919]],["^15",[193,"^H",143,536870919]],["^15",[193,"^17",true,536870919]],["^15",[193,"^;","~u649a41ae-44cb-49d4-8af0-ed8eca37bd0f",536870919]],["^15",[194,"^3","- Most operators and functions implicitly convert values of types into the types they can accept.\n  For ex.:\n  ``alert(...)`` converts values into strings.\n  Similarly, some mathematical operations implicitly convert values into [[Number]]s.\n  \n  There's 2 types of conversions, implicit which is applied automatically and explicit which we apply through methods like String(...), Number(...), etc.\n- Hints:\n  In JS when a different type is required than the variable's type, a \"hint\" is passed for conversion of the type. [[ECMAScript]] specification defines 3 types of \"hints\":\n  \"string\"\n  \"number\"\n  \"default\"\n  \n  Boolean isn't required because all values of all types are true in Boolean (except a few special values).\n  Default is the type when a String or Number both can be valid.\n  \n  For ex.:\n  ``alert(...)`` works with Strings, so JS passes the hint \"string\".\n- [[String]] conversion:\n  ``String(<value/variable>)`` converts stuff into string. It is pretty straight-forward as values like false become \"false\", null becomes \"null\" etc.\n- [[Number]] conversion:\n  aka ``Numeric Conversion``\n  For ex.:\n  ```js\n  let v= \"6\"/\"2\"; //converts 6 and 3 into numbers, applies division and stores the result 3 in v.\n  ```\n  implicit conversion. (Note: This doesn't always happen, for ex. in [[String]] concatenation)\n  \n  ``Number(<val/var>)`` explicit, returns [[NaN]] if conversion fails.\n  Some more rules:\n  ![image.png](../assets/image_1685372316472_0.png)\n- [[Boolean]] conversion:\n  Explicitly done with ``Boolean(<val/var>)``\n  \n  Rules:\n  0, empty [[String]], [[null]], [[undefined]], [[NaN]] become false.\n  All other values become true.\n  For ex.:\n  ```js\n  Boolean(\"\"); //false\n  Boolean(\" \"); //true\n  ```\n  \n  This is slightly different from a ``Numeric Conversion``, because in numeric conversion an empty string is the same as a string with whitespaces at the ends, as they are trimmed out.\n- [[Object]] Conversion:\n  To convert an Object to another type implicitly, JS looks for 3 type of methods\n  First it looks for\n  ``<object>[Symbol.toPrimitive](hint)``\n  Then, if hint is \"string\" it looks for\n  ``<object>.toString()`` or ``<object>.valueOf()``\n  If the hint is \"number\" or \"default\",\n  ``<object>.valueOf()`` or ``<object>.toString()`` \n  \n  Yes it looks for methods differently based on the hint.\n  \n  The simplest way to define this behavior is like so\n  ```js\n  let x = {};\n  x[Symbol.toPrimitive]= function(hint) {\n   if (hint === \"string\") return \"yo\";\n   else return 2;\n  }\n  alert(x); //works, returns \"yo\"\n  x+x; //returns 4\n  ```\n  Symbol.toPrimitive uses a predefined [[Symbol]].\n-\n-",536885504]],["^15",[194,"^18",1687830958996,536870919]],["^15",[194,"^19","~m1713249778703",536885505]],["^15",[194,"^Z","pages/Conversion.md",536870919]],["^15",[195,"^K",1687830959326,536870919]],["^15",[195,"^[",194,536870919]],["^15",[195,"^@",false,536870919]],["^15",[195,"^Y","conversion",536870919]],["^15",[195,"^11","Conversion",536870919]],["^15",[195,"^B",1687830959326,536870919]],["^15",[195,"^;","~u662fc702-c443-47ce-8790-1d35e625bfd2",536885544]],["^15",[196,"^Q","Most operators and functions implicitly convert values of types into the types they can accept.\nFor ex.:\n``alert(...)`` converts values into strings.\nSimilarly, some mathematical operations implicitly convert values into [[Number]]s.\n\nThere's 2 types of conversions, implicit which is applied automatically and explicit which we apply through methods like String(...), Number(...), etc.",536870919]],["^15",[196,"^O","^16",536870919]],["^15",[196,"^F",195,536870919]],["^15",[196,"^X",195,536870919]],["^15",[196,"^V",195,536870919]],["^15",[196,"^U",100,536870919]],["^15",[196,"^U",195,536870919]],["^15",[196,"^H",100,536885504]],["^15",[196,"^17",true,536870919]],["^15",[196,"^;","~u649a41ae-db01-4c05-99f4-0776e8d37cd2",536870919]],["^15",[197,"^Q","Hints:\nIn JS when a different type is required than the variable's type, a \"hint\" is passed for conversion of the type. [[ECMAScript]] specification defines 3 types of \"hints\":\n\"string\"\n\"number\"\n\"default\"\n\nBoolean isn't required because all values of all types are true in Boolean (except a few special values).\nDefault is the type when a String or Number both can be valid.\n\nFor ex.:\n``alert(...)`` works with Strings, so JS passes the hint \"string\".",536870919]],["^15",[197,"^O","^16",536870919]],["^15",[197,"^F",196,536870919]],["^15",[197,"^X",195,536870919]],["^15",[197,"^V",195,536870919]],["^15",[197,"^U",24,536870919]],["^15",[197,"^U",195,536870919]],["^15",[197,"^H",24,536885504]],["^15",[197,"^17",true,536870919]],["^15",[197,"^;","~u649a41ae-da00-4ff3-9fb2-79bf06be6137",536870919]],["^15",[198,"^Q","[[String]] conversion:\n``String(<value/variable>)`` converts stuff into string. It is pretty straight-forward as values like false become \"false\", null becomes \"null\" etc.",536870919]],["^15",[198,"^O","^16",536870919]],["^15",[198,"^F",197,536870919]],["^15",[198,"^X",195,536870919]],["^15",[198,"^V",195,536870919]],["^15",[198,"^U",41,536870919]],["^15",[198,"^U",195,536870919]],["^15",[198,"^H",41,536885504]],["^15",[198,"^17",true,536870919]],["^15",[198,"^;","~u649a41ae-47c2-4855-8afc-bba9a971ab2f",536870919]],["^15",[199,"^Q","[[Number]] conversion:\naka ``Numeric Conversion``\nFor ex.:\n```js\nlet v= \"6\"/\"2\"; //converts 6 and 3 into numbers, applies division and stores the result 3 in v.\n```\nimplicit conversion. (Note: This doesn't always happen, for ex. in [[String]] concatenation)\n\n``Number(<val/var>)`` explicit, returns [[NaN]] if conversion fails.\nSome more rules:\n![image.png](../assets/image_1685372316472_0.png)",536870919]],["^15",[199,"^O","^16",536870919]],["^15",[199,"^F",198,536870919]],["^15",[199,"^X",195,536870919]],["^15",[199,"^V",195,536870919]],["^15",[199,"^U",41,536870919]],["^15",[199,"^U",100,536870919]],["^15",[199,"^U",174,536870919]],["^15",[199,"^U",195,536870919]],["^15",[199,"^H",41,536885504]],["^15",[199,"^H",100,536885504]],["^15",[199,"^H",174,536885504]],["^15",[199,"^17",true,536870919]],["^15",[199,"^;","~u649a41ae-6d5a-4942-bc94-3aaae91f4313",536870919]],["^15",[200,"^Q","[[Boolean]] conversion:\nExplicitly done with ``Boolean(<val/var>)``\n\nRules:\n0, empty [[String]], [[null]], [[undefined]], [[NaN]] become false.\nAll other values become true.\nFor ex.:\n```js\nBoolean(\"\"); //false\nBoolean(\" \"); //true\n```\n\nThis is slightly different from a ``Numeric Conversion``, because in numeric conversion an empty string is the same as a string with whitespaces at the ends, as they are trimmed out.",536885504]],["^15",[200,"^O","^16",536870919]],["^15",[200,"^F",199,536870919]],["^15",[200,"^X",195,536870919]],["^15",[200,"^V",195,536870919]],["^15",[200,"^U",41,536870919]],["^15",[200,"^U",45,536870919]],["^15",[200,"^U",99,536870919]],["^15",[200,"^U",173,536870919]],["^15",[200,"^U",174,536870919]],["^15",[200,"^U",195,536870919]],["^15",[200,"^H",41,536885504]],["^15",[200,"^H",45,536885504]],["^15",[200,"^H",99,536885504]],["^15",[200,"^H",173,536885504]],["^15",[200,"^H",174,536885504]],["^15",[200,"^17",true,536870919]],["^15",[200,"^;","~u649a41ae-faef-470a-9a4e-a476495786b9",536870919]],["^15",[201,"^Q","[[Object]] Conversion:\nTo convert an Object to another type implicitly, JS looks for 3 type of methods\nFirst it looks for\n``<object>[Symbol.toPrimitive](hint)``\nThen, if hint is \"string\" it looks for\n``<object>.toString()`` or ``<object>.valueOf()``\nIf the hint is \"number\" or \"default\",\n``<object>.valueOf()`` or ``<object>.toString()`` \n\nYes it looks for methods differently based on the hint.\n\nThe simplest way to define this behavior is like so\n```js\nlet x = {};\nx[Symbol.toPrimitive]= function(hint) {\n if (hint === \"string\") return \"yo\";\n else return 2;\n}\nalert(x); //works, returns \"yo\"\nx+x; //returns 4\n```\nSymbol.toPrimitive uses a predefined [[Symbol]].",536870919]],["^15",[201,"^O","^16",536870919]],["^15",[201,"^F",200,536870919]],["^15",[201,"^X",195,536870919]],["^15",[201,"^V",195,536870919]],["^15",[201,"^U",39,536870919]],["^15",[201,"^U",43,536870919]],["^15",[201,"^U",195,536870919]],["^15",[201,"^H",39,536885504]],["^15",[201,"^H",43,536885504]],["^15",[201,"^17",true,536870919]],["^15",[201,"^;","~u649a41ae-8fb7-4d29-ab9d-aea7f7dad944",536870919]],["^15",[202,"^Q","",536870919]],["^15",[202,"^O","^16",536870919]],["^15",[202,"^F",201,536870919]],["^15",[202,"^X",195,536870919]],["^15",[202,"^V",195,536870919]],["^15",[202,"^U",195,536870919]],["^15",[202,"^17",true,536870919]],["^15",[202,"^;","~u649a41ae-95d3-4d5f-b552-d1686ec26cc8",536870919]],["^15",[203,"^Q","",536870919]],["^15",[203,"^O","^16",536870919]],["^15",[203,"^F",202,536870919]],["^15",[203,"^X",195,536870919]],["^15",[203,"^V",195,536870919]],["^15",[203,"^U",195,536870919]],["^15",[203,"^17",true,536870919]],["^15",[203,"^;","~u649a41ae-7acf-47bc-af5d-916cb0953a8e",536870919]],["^15",[204,"^3","- Currying is a general programming concept where we turn a [[Function]] ``f(a,b,c)`` call into ``f(a)(b)(c)``.\n  For ex.:\n  ```js\n  function curry(func) {\n  \n    return function curried(...args) {\n      if (args.length >= func.length) {\n        return func.apply(this, args);\n      } else {\n        return function(...args2) {\n          return curried.apply(this, args.concat(args2));\n        }\n      }\n    };\n  \n  }\n  \n  \n  function sum(a, b) {\n    return a + b;\n  }\n  \n  let curriedSum = curry(sum);\n  \n  console.log( curriedSum(1)(2) ); //prints 3\n  ```\n-",536870919]],["^15",[204,"^18",1687830959008,536870919]],["^15",[204,"^Z","pages/Currying.md",536870919]],["^15",[205,"^K",1687830959335,536870919]],["^15",[205,"^[",204,536870919]],["^15",[205,"^@",false,536870919]],["^15",[205,"^Y","currying",536870919]],["^15",[205,"^11","Currying",536870919]],["^15",[205,"^B",1687830959335,536870919]],["^15",[205,"^;","~u662fc702-6b98-43fe-a579-2f357f9bc0cf",536885544]],["^15",[206,"^Q","Currying is a general programming concept where we turn a [[Function]] ``f(a,b,c)`` call into ``f(a)(b)(c)``.\nFor ex.:\n```js\nfunction curry(func) {\n\n  return function curried(...args) {\n    if (args.length >= func.length) {\n      return func.apply(this, args);\n    } else {\n      return function(...args2) {\n        return curried.apply(this, args.concat(args2));\n      }\n    }\n  };\n\n}\n\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nlet curriedSum = curry(sum);\n\nconsole.log( curriedSum(1)(2) ); //prints 3\n```",536870919]],["^15",[206,"^O","^16",536870919]],["^15",[206,"^F",205,536870919]],["^15",[206,"^X",205,536870919]],["^15",[206,"^V",205,536870919]],["^15",[206,"^U",44,536870919]],["^15",[206,"^U",205,536870919]],["^15",[206,"^H",44,536870919]],["^15",[206,"^17",true,536870919]],["^15",[206,"^;","~u649a41af-f83a-4f61-81f1-c277f554e6bd",536870919]],["^15",[207,"^Q","",536870919]],["^15",[207,"^O","^16",536870919]],["^15",[207,"^F",206,536870919]],["^15",[207,"^X",205,536870919]],["^15",[207,"^V",205,536870919]],["^15",[207,"^U",205,536870919]],["^15",[207,"^17",true,536870919]],["^15",[207,"^;","~u649a41af-235b-4eda-9e0a-024550b3783f",536870919]],["^15",[208,"^3","- More props can be checked in the specs of the node type.\n- ``.nodeType``: All nodes. Property, this is a [[Number]] that tells which type of node it is. As seen in the spec, [node](https://dom.spec.whatwg.org/#node\n  For ex.:\n  ![image.png](../assets/image_1687328592197_0.png)\n  shows the nodeType of any  Element type node is 1.\n- ``.nodeName``: All nodes. Property which has the string name of the node type. Element Nodes also have a ``.tagName`` property which has the same value as ``nodeName``. NodeName and TagName are both basically the [[HTML]] element's name. Like a ``div`` element will have ``div`` tagname and nodename.\n- ``.innerHTML``: All nodes. Property which has the HTML inside the node as string. We can modify it and the changes are reflected on the page.\n  For ex.:\n  ```html\n  <body>\n  <p>A paragraph</p>\n  <div>A div</div>\n  - <script>\n    alert( document.body.innerHTML ); // read the current contents\n    document.body.innerHTML = 'The new BODY!'; // replace it\n  </script>\n  - </body>\n  ```\n  However, [[<script>]]s inserted inside the ``.innerHTML`` aren't executed automatically.\n  Furthermore, any change to the ``.innerHTML`` of a node causes the whole node to be re-rendered. Meaning even if we concatenate a single character to the innerHTML of a node then the whole node will be rendered again, this causes hovered items to lose focus, inputted text to be wiped as well and etc. as the state is reset. If the node had a lot of resources then they will all be re-rendered so it is an expensive operation.\n- ``.outerHTML``: All nodes. Property which has the innerHTMl + the node's element itself.\n  However, there's a slight difference between innerHTML and outerHTML.\n  If we modify an innerHTML with new content, it replaces the innerHTML and the reference to the node remains the same so we can work with it. However, when we modify the outerHTML then the node's element is removed and the new modified element inserted whilst the reference keeps pointing to the old and now removed from DOM node.\n  For ex.:\n  ```js\n  let x= document.querySelector(...);\n  alert(x.outerHTML); //prints <div>...</div>\n  x.outerHTML = \"<p> yo</p>\";\n  alert(x.outerHTML); //still prints <div>...</div>\n  ```\n  Here, the new element is inserted and replaces the current node in the DOM but the variable still references the old one. We need to explicitly get the new reference after modifying the outerHTML.\n- ``.data`` and ``.nodeValue``: Text Nodes. Properties which hold their data.\n  For ex.:\n  ```html\n  <body>\n    Hello\n    <!-- Comment -->\n    <script>\n      let text = document.body.firstChild;\n      alert(text.data); // prints Hello\n  \n      let comment = text.nextSibling;\n      alert(comment.data); // prints Comment\n    </script>\n  </body>\n  ```\n- ``.textContent``: All nodes . Property that just has the text contents in it concatenated into a single string without any tags.\n  For ex.:\n  ```html\n  <div id=\"news\">\n  <h1>Headline!</h1>\n  <p>Martians attack people!</p>\n  </div>\n  - <script>\n  \n  alert(news.textContent); // prints Headline! Martians attack people!\n  </script>\n  ```\n  We can read/write directly using this and this doesn't cause the whole node to be re-rendered, however if there is any tag in the textContent written to the node, then it is treated literally and is not parsed.\n- ``.hidden``: All nodes. Hides the node if it is set to true.\n- ``.id``, ``.className`` and ``.classList``: All nodes. Provides the node's id and class name (named so because `class` used to be a reserved keyword by JS). The ``.classList`` returns an [[Iterable]] which returns an iterable on the class names of an element and provides methods to add/remove classes as well.\n  4 important methods are \n  ``<node>.classList.toggle(\"<classname>\")`` : adds the class if not present, otherwise removes it\n  ``<node>.classList.contains(\"<classname>\")``\n  ``<node>.classList.add(\"<classname>\")``\n  ``<node>.classList.remove(\"<classname>\")``\n  For ex.:\n  ```html\n  <body id=\"aydi\" class=\"ha yo\"> </body>\n  <script>\n  alert(document.body.className); //prints ha yo\n  - document.body.className = \"yo ha\";\n  for (let elem of document.body.classList); //passes ha then yo\n  {}\n  - document.body.classList.contains(\"yo\"); //returns true\n  document.body.classList.toggle(\"yo\"); // removes it\n  - <script>\n  ```\n  Writing to ``.className`` overwrites the whole ``class`` attribute.\n- ``.style``: All nodes. Provides an [[Object]] with the style properties of the node. This Object has all valid [[CSS]] attributes for the node set in it, so we can provide values to them directly.\n  For ex.:\n  ```js\n  document.body.style.width= 20px;\n  alert(document.body.style.width); //prints 20px//\n  CSS Attributes that have '-' in their property name have the -'s removed and next letter capitalized.\n  document.body.style.MozBorderRadius = 2px; //as the attribute is -moz-border-radius\n  //The Style Object requires the whole direction with propertes like margin\n  document.body.style.marginTop = 2px; //ok\n  ```\n  \n  \n  * Instead of calling ``delete <style Object property>`` we should assign the property an empty [[String]] or a default value.\n  Or alternatively, to remove a specific CSS property we can also use ``<node>.style.removeProperty(\"<prop name>\")``.\n  \n  * We can also get/set the whole style at once using ``.style.cssText`` property. This overwrites existing style. \n  These only return the inline CSS syles and not the final style after all the CSS selectors have applied their styles. To get those we use ``getComputedStyle(\"<node>\", \"<optional pseudo class>\")`` which returns the Style Object as well, with the computed and then resolved properties (computed means raw value and resolved means finally adjusted to the environment, like relative sizes adjusted to raw, it returns the resolved values). Pseudo class can be any except \":visited\" as it is forbidden due to security of [[Brower]] to see its state.\n  \n  * Units need to provided explictly.\n- Custom DOM Class Properties\n  This is possible too, \n  For ex.:\n  ```js\n  Element.prototype.yo= function () {\n  };\n  document.body.nah= function() {\n  };\n  \n  console.log(document.body.nah()); //works\n  console.log(document.body.yo()); //also works as document is a child to Element ([[Prototype Object]]).\n  ```\n  * For any attribute on an [[HTML]] element, if it is standard for the type of element then the DOM automatically keeps track of it. But custom properties must be manually fetched and updated.\n  To do so we use\n  ``<node>.hasAttribute(name)`` – checks for existence.\n  ``<node>.getAttribute(name)`` – gets the value.\n   ``<node>.setAttribute(name, value)`` – sets the value.\n  ``<node>.removeAttribute(name)`` – removes the attribute.\n  ``<node>.attributes``- Returns a collection with all the attributes, [[Iterable]] \n  For ex.:\n  ```html\n  <div id=\"a\" yoo=\"bro\">\n  </div>\n  <script>\n  \n  let node= document.getElementById(\"a\");\n  console.log(node.id); //ok prints a\n  console.log(node.yoo); //undefined\n  \n  alert(node.getAttribute(\"a\")); //prints bro\n  </script>\n  ```\n  \n  * Attribute names are case-insensitive.\n  \n  * The ``.outerHTML`` has all the attributes, even custom ones.\n  \n  * Attribute values are almost always strings. But some attributes such as ``.checked`` on the ``input`` element are boolean or some other tpe.\n  \n  * Almost all attribute changes made to the HTML sync with the DOM, the exception are attributes like ``.value`` on text input nodes.\n  For ex.:\n  ```html\n  <script>\n    let input = document.querySelector('input');\n  \n    // attribute => property\n    input.setAttribute('value', 'text');\n    alert(input.value); // text\n  \n    // NOT property => attribute\n    input.value = 'newValue';\n    alert(input.getAttribute('value')); // text (not updated!)\n  </script>\n  ```\n  \n  * The dataset property\n  By the HTML standard, the prefix ``data-`` is left for custom attribute names. And these are all also available in the ``dataset`` property of the DOM.\n  For ex.:\n  ```html\n  <div id=\"a\" data-yoo=\"bro\">\n  </div>\n  <script>\n  \n  let node= document.getElementById(\"a\");\n  console.log(node.dataset.yoo); //ok prints \"bro\"\n  </script>\n  ```\n  These [[HTML]] attributes can be used in CSS as well and are automatically synced too.\n- Geometry Properties\n  There are various properties available to [[DOM]]``<nodes>`` that define their ``outer geometry``.\n  \n  ![image.png](../assets/image_1687623412218_0.png)\n  \n  The ``<node>.offsetParent`` returns the ``node`` closest to the element which has either [[CSS Property]] ``position`` set (with a value except static), or a ``table`` [[HTML Element]] or the ``body`` HTML element. \n  \n  Then the properties in the image define their respective sizes.\n  For ex.:\n  ```html\n  <main style=\"position: relative\" id=\"main\">\n    <article>\n      <div id=\"example\" style=\"position: absolute; left: 180px; top: 180px\">...</div>\n    </article>\n  </main>\n  <script>\n    alert(example.offsetParent.id); // main\n    alert(example.offsetLeft); // 180 (note: a number, not a string \"180px\")\n    alert(example.offsetTop); // 180\n  </script>\n  ```\n  The ``.offsetParent`` is null when the element has ``display: none`` or isn't in the DOM, or is ``html`` or ``body`` element or has ``position: fixed`` [[CSS]].\n  \n  It is recommended to use these properties over ``getComputedStyle(...)`` method as it's behavior is dependent on the browser where it may automatically include sizes like scrollbar width or not, but these are explicit and always computed.\n  \n  \n  * The ``document.documentElement.clientWidth`` and ``document.documentElement.clientHeight`` which is on the ``html`` element of the [[HTML]] Document effectively return the actual window size (minus the scrollbar width/height). The ``window.innerHeight`` and ``window.innerWidth`` on [[window]] do the same, however they don't take the scrollbar into account.\n  \n  * Given all inconsistences across browsers and versions, it is recommended to use this logic for getting the right window height/width.\n  ```js\n  let windowHeight = Math.max(\n    document.body.scrollHeight, document.documentElement.scrollHeight,\n    document.body.offsetHeight, document.documentElement.offsetHeight,\n    document.body.clientHeight, document.documentElement.clientHeight\n  );\n  ```\n- We can get the current scroll position in the page by using the [[window]] Object's \n   ``window.pageYOffset``/``window.scrollY`` and ``window.pageXOffset``/``window.scrollX``. These are read-only properties. The alternate properties are their aliases.\n-",536870919]],["^15",[208,"^18",1687830959077,536870919]],["^15",[208,"^Z","pages/DOM Class Property.md",536870919]],["^15",[209,"^K",1687830960342,536870919]],["^15",[209,"^[",727,536870919]],["^15",[209,"^@",false,536870919]],["^15",[209,"^Y","window",536870919]],["^15",[209,"^11","window",536870919]],["^15",[209,"^B",1687830960342,536870919]],["^15",[209,"^;","~u662fc702-782b-4d2c-a4c6-8d39624a5f7f",536885544]],["^15",[210,"^K",1687830959643,536870919]],["^15",[210,"^[",804,536880581]],["^15",[210,"^O","^16",536880577]],["^15",[210,"^@",false,536870919]],["^15",[210,"^Y","brower",536870919]],["^15",[210,"^11","Brower",536870919]],["^15",[210,"^B",1688102775526,536882376]],["^15",[210,"^;","~u649a41af-5c15-481e-a636-271ddaecb10d",536870919]],["^15",[211,"^K",1687830959642,536870919]],["^15",[211,"^[",208,536870919]],["^15",[211,"^@",false,536870919]],["^15",[211,"^Y","dom class property",536870919]],["^15",[211,"^11","DOM Class Property",536870919]],["^15",[211,"^B",1687830959642,536870919]],["^15",[211,"^;","~u649a41af-8f9f-4832-ad55-6eba29da32a4",536870919]],["^15",[212,"^K",1687830959073,536870919]],["^15",[212,"^@",false,536870919]],["^15",[212,"^Y","node",536870919]],["^15",[212,"^11","node",536870919]],["^15",[212,"^B",1687830959073,536870919]],["^15",[212,"^;","~u649a41af-64f6-41b9-8f16-edca148873f4",536870919]],["^15",[213,"^Q","~``.data`` and ``.nodeValue``: Text Nodes. Properties which hold their data.\nFor ex.:\n```html\n<body>\n  Hello\n  <!-- Comment -->\n  <script>\n    let text = document.body.firstChild;\n    alert(text.data); // prints Hello\n\n    let comment = text.nextSibling;\n    alert(comment.data); // prints Comment\n  </script>\n</body>\n```",536870919]],["^15",[213,"^O","^16",536870919]],["^15",[213,"^F",214,536870919]],["^15",[213,"^X",211,536870919]],["^15",[213,"^V",211,536870919]],["^15",[213,"^U",211,536870919]],["^15",[213,"^17",true,536870919]],["^15",[213,"^;","~u649a41af-fdea-44f5-ac7c-dfa721da1e18",536870919]],["^15",[214,"^Q","~``.outerHTML``: All nodes. Property which has the innerHTMl + the node's element itself.\nHowever, there's a slight difference between innerHTML and outerHTML.\nIf we modify an innerHTML with new content, it replaces the innerHTML and the reference to the node remains the same so we can work with it. However, when we modify the outerHTML then the node's element is removed and the new modified element inserted whilst the reference keeps pointing to the old and now removed from DOM node.\nFor ex.:\n```js\nlet x= document.querySelector(...);\nalert(x.outerHTML); //prints <div>...</div>\nx.outerHTML = \"<p> yo</p>\";\nalert(x.outerHTML); //still prints <div>...</div>\n```\nHere, the new element is inserted and replaces the current node in the DOM but the variable still references the old one. We need to explicitly get the new reference after modifying the outerHTML.",536870919]],["^15",[214,"^O","^16",536870919]],["^15",[214,"^F",222,536870919]],["^15",[214,"^X",211,536870919]],["^15",[214,"^V",211,536870919]],["^15",[214,"^U",211,536870919]],["^15",[214,"^17",true,536870919]],["^15",[214,"^;","~u649a41af-2c7c-4b21-a4b1-3551ee6d453c",536870919]],["^15",[215,"^Q","Geometry Properties\nThere are various properties available to [[DOM]]``<nodes>`` that define their ``outer geometry``.\n\n![image.png](../assets/image_1687623412218_0.png)\n\nThe ``<node>.offsetParent`` returns the ``node`` closest to the element which has either [[CSS Property]] ``position`` set (with a value except static), or a ``table`` [[HTML Element]] or the ``body`` HTML element. \n\nThen the properties in the image define their respective sizes.\nFor ex.:\n```html\n<main style=\"position: relative\" id=\"main\">\n  <article>\n    <div id=\"example\" style=\"position: absolute; left: 180px; top: 180px\">...</div>\n  </article>\n</main>\n<script>\n  alert(example.offsetParent.id); // main\n  alert(example.offsetLeft); // 180 (note: a number, not a string \"180px\")\n  alert(example.offsetTop); // 180\n</script>\n```\nThe ``.offsetParent`` is null when the element has ``display: none`` or isn't in the DOM, or is ``html`` or ``body`` element or has ``position: fixed`` [[CSS]].\n\nIt is recommended to use these properties over ``getComputedStyle(...)`` method as it's behavior is dependent on the browser where it may automatically include sizes like scrollbar width or not, but these are explicit and always computed.\n\n\n* The ``document.documentElement.clientWidth`` and ``document.documentElement.clientHeight`` which is on the ``html`` element of the [[HTML]] Document effectively return the actual window size (minus the scrollbar width/height). The ``window.innerHeight`` and ``window.innerWidth`` on [[window]] do the same, however they don't take the scrollbar into account.\n\n* Given all inconsistences across browsers and versions, it is recommended to use this logic for getting the right window height/width.\n```js\nlet windowHeight = Math.max(\n  document.body.scrollHeight, document.documentElement.scrollHeight,\n  document.body.offsetHeight, document.documentElement.offsetHeight,\n  document.body.clientHeight, document.documentElement.clientHeight\n);\n```",536870919]],["^15",[215,"^O","^16",536870919]],["^15",[215,"^F",226,536870919]],["^15",[215,"^X",211,536870919]],["^15",[215,"^V",211,536870919]],["^15",[215,"^U",30,536870919]],["^15",[215,"^U",114,536870919]],["^15",[215,"^U",119,536870919]],["^15",[215,"^U",120,536870919]],["^15",[215,"^U",128,536870919]],["^15",[215,"^U",209,536870919]],["^15",[215,"^U",211,536870919]],["^15",[215,"^H",30,536870919]],["^15",[215,"^H",114,536870919]],["^15",[215,"^H",119,536870919]],["^15",[215,"^H",120,536870919]],["^15",[215,"^H",128,536870919]],["^15",[215,"^H",209,536870919]],["^15",[215,"^17",true,536870919]],["^15",[215,"^;","~u649a41af-5884-4c78-b723-367cb668707e",536870919]],["^15",[216,"^Q","~``.textContent``: All nodes . Property that just has the text contents in it concatenated into a single string without any tags.\nFor ex.:\n```html\n<div id=\"news\">\n<h1>Headline!</h1>\n<p>Martians attack people!</p>\n</div>\n- <script>\n\nalert(news.textContent); // prints Headline! Martians attack people!\n</script>\n```\nWe can read/write directly using this and this doesn't cause the whole node to be re-rendered, however if there is any tag in the textContent written to the node, then it is treated literally and is not parsed.",536870919]],["^15",[216,"^O","^16",536870919]],["^15",[216,"^F",213,536870919]],["^15",[216,"^X",211,536870919]],["^15",[216,"^V",211,536870919]],["^15",[216,"^U",211,536870919]],["^15",[216,"^17",true,536870919]],["^15",[216,"^;","~u649a41af-1b05-4438-bf51-33320e41fa11",536870919]],["^15",[217,"^Q","~``.nodeType``: All nodes. Property, this is a [[Number]] that tells which type of node it is. As seen in the spec, [node](https://dom.spec.whatwg.org/#node\nFor ex.:\n![image.png](../assets/image_1687328592197_0.png)\nshows the nodeType of any  Element type node is 1.",536870919]],["^15",[217,"^O","^16",536870919]],["^15",[217,"^F",218,536870919]],["^15",[217,"^X",211,536870919]],["^15",[217,"^V",211,536870919]],["^15",[217,"^U",100,536870919]],["^15",[217,"^U",211,536870919]],["^15",[217,"^U",212,536870919]],["^15",[217,"^H",100,536870919]],["^15",[217,"^H",212,536870919]],["^15",[217,"^17",true,536870919]],["^15",[217,"^;","~u649a41af-ca9d-4aad-88ba-9de247b15353",536870919]],["^15",[218,"^Q","More props can be checked in the specs of the node type.",536870919]],["^15",[218,"^O","^16",536870919]],["^15",[218,"^F",211,536870919]],["^15",[218,"^X",211,536870919]],["^15",[218,"^V",211,536870919]],["^15",[218,"^U",211,536870919]],["^15",[218,"^17",true,536870919]],["^15",[218,"^;","~u649a41af-f7c4-4418-b1bd-a65a05daba55",536870919]],["^15",[219,"^Q","~``.style``: All nodes. Provides an [[Object]] with the style properties of the node. This Object has all valid [[CSS]] attributes for the node set in it, so we can provide values to them directly.\nFor ex.:\n```js\ndocument.body.style.width= 20px;\nalert(document.body.style.width); //prints 20px//\nCSS Attributes that have '-' in their property name have the -'s removed and next letter capitalized.\ndocument.body.style.MozBorderRadius = 2px; //as the attribute is -moz-border-radius\n//The Style Object requires the whole direction with propertes like margin\ndocument.body.style.marginTop = 2px; //ok\n```\n\n\n* Instead of calling ``delete <style Object property>`` we should assign the property an empty [[String]] or a default value.\nOr alternatively, to remove a specific CSS property we can also use ``<node>.style.removeProperty(\"<prop name>\")``.\n\n* We can also get/set the whole style at once using ``.style.cssText`` property. This overwrites existing style. \nThese only return the inline CSS syles and not the final style after all the CSS selectors have applied their styles. To get those we use ``getComputedStyle(\"<node>\", \"<optional pseudo class>\")`` which returns the Style Object as well, with the computed and then resolved properties (computed means raw value and resolved means finally adjusted to the environment, like relative sizes adjusted to raw, it returns the resolved values). Pseudo class can be any except \":visited\" as it is forbidden due to security of [[Brower]] to see its state.\n\n* Units need to provided explictly.",536870919]],["^15",[219,"^O","^16",536870919]],["^15",[219,"^F",224,536870919]],["^15",[219,"^X",211,536870919]],["^15",[219,"^V",211,536870919]],["^15",[219,"^U",39,536870919]],["^15",[219,"^U",41,536870919]],["^15",[219,"^U",128,536870919]],["^15",[219,"^U",210,536870919]],["^15",[219,"^U",211,536870919]],["^15",[219,"^H",39,536870919]],["^15",[219,"^H",41,536870919]],["^15",[219,"^H",128,536870919]],["^15",[219,"^H",210,536870919]],["^15",[219,"^17",true,536870919]],["^15",[219,"^;","~u649a41af-1dc7-4be9-8699-95ea930bd349",536870919]],["^15",[220,"^Q","~``.hidden``: All nodes. Hides the node if it is set to true.",536870919]],["^15",[220,"^O","^16",536870919]],["^15",[220,"^F",216,536870919]],["^15",[220,"^X",211,536870919]],["^15",[220,"^V",211,536870919]],["^15",[220,"^U",211,536870919]],["^15",[220,"^17",true,536870919]],["^15",[220,"^;","~u649a41af-f20a-43df-a55e-27f8966670a6",536870919]],["^15",[221,"^Q","We can get the current scroll position in the page by using the [[window]] Object's \n ``window.pageYOffset``/``window.scrollY`` and ``window.pageXOffset``/``window.scrollX``. These are read-only properties. The alternate properties are their aliases.",536870919]],["^15",[221,"^O","^16",536870919]],["^15",[221,"^F",215,536870919]],["^15",[221,"^X",211,536870919]],["^15",[221,"^V",211,536870919]],["^15",[221,"^U",209,536870919]],["^15",[221,"^U",211,536870919]],["^15",[221,"^H",209,536870919]],["^15",[221,"^17",true,536870919]],["^15",[221,"^;","~u649a41af-974d-4428-8200-99546c039aee",536870919]],["^15",[222,"^Q","~``.innerHTML``: All nodes. Property which has the HTML inside the node as string. We can modify it and the changes are reflected on the page.\nFor ex.:\n```html\n<body>\n<p>A paragraph</p>\n<div>A div</div>\n- <script>\n  alert( document.body.innerHTML ); // read the current contents\n  document.body.innerHTML = 'The new BODY!'; // replace it\n</script>\n- </body>\n```\nHowever, [[<script>]]s inserted inside the ``.innerHTML`` aren't executed automatically.\nFurthermore, any change to the ``.innerHTML`` of a node causes the whole node to be re-rendered. Meaning even if we concatenate a single character to the innerHTML of a node then the whole node will be rendered again, this causes hovered items to lose focus, inputted text to be wiped as well and etc. as the state is reset. If the node had a lot of resources then they will all be re-rendered so it is an expensive operation.",536870919]],["^15",[222,"^O","^16",536870919]],["^15",[222,"^F",223,536870919]],["^15",[222,"^X",211,536870919]],["^15",[222,"^V",211,536870919]],["^15",[222,"^U",29,536870919]],["^15",[222,"^U",211,536870919]],["^15",[222,"^H",29,536870919]],["^15",[222,"^17",true,536870919]],["^15",[222,"^;","~u649a41af-cf4d-4642-93c4-a230e232cb42",536870919]],["^15",[223,"^Q","~``.nodeName``: All nodes. Property which has the string name of the node type. Element Nodes also have a ``.tagName`` property which has the same value as ``nodeName``. NodeName and TagName are both basically the [[HTML]] element's name. Like a ``div`` element will have ``div`` tagname and nodename.",536870919]],["^15",[223,"^O","^16",536870919]],["^15",[223,"^F",217,536870919]],["^15",[223,"^X",211,536870919]],["^15",[223,"^V",211,536870919]],["^15",[223,"^U",30,536870919]],["^15",[223,"^U",211,536870919]],["^15",[223,"^H",30,536870919]],["^15",[223,"^17",true,536870919]],["^15",[223,"^;","~u649a41af-ddb3-427f-87e1-c054011eb4b7",536870919]],["^15",[224,"^Q","~``.id``, ``.className`` and ``.classList``: All nodes. Provides the node's id and class name (named so because `class` used to be a reserved keyword by JS). The ``.classList`` returns an [[Iterable]] which returns an iterable on the class names of an element and provides methods to add/remove classes as well.\n4 important methods are \n``<node>.classList.toggle(\"<classname>\")`` : adds the class if not present, otherwise removes it\n``<node>.classList.contains(\"<classname>\")``\n``<node>.classList.add(\"<classname>\")``\n``<node>.classList.remove(\"<classname>\")``\nFor ex.:\n```html\n<body id=\"aydi\" class=\"ha yo\"> </body>\n<script>\nalert(document.body.className); //prints ha yo\n- document.body.className = \"yo ha\";\nfor (let elem of document.body.classList); //passes ha then yo\n{}\n- document.body.classList.contains(\"yo\"); //returns true\ndocument.body.classList.toggle(\"yo\"); // removes it\n- <script>\n```\nWriting to ``.className`` overwrites the whole ``class`` attribute.",536870919]],["^15",[224,"^O","^16",536870919]],["^15",[224,"^F",220,536870919]],["^15",[224,"^X",211,536870919]],["^15",[224,"^V",211,536870919]],["^15",[224,"^U",46,536870919]],["^15",[224,"^U",211,536870919]],["^15",[224,"^H",46,536870919]],["^15",[224,"^17",true,536870919]],["^15",[224,"^;","~u649a41af-1a2f-4ee8-82c7-923c9a766680",536870919]],["^15",[225,"^Q","",536870919]],["^15",[225,"^O","^16",536870919]],["^15",[225,"^F",221,536870919]],["^15",[225,"^X",211,536870919]],["^15",[225,"^V",211,536870919]],["^15",[225,"^U",211,536870919]],["^15",[225,"^17",true,536870919]],["^15",[225,"^;","~u649a41af-a049-48db-b100-1d90e4eef32f",536870919]],["^15",[226,"^Q","Custom DOM Class Properties\nThis is possible too, \nFor ex.:\n```js\nElement.prototype.yo= function () {\n};\ndocument.body.nah= function() {\n};\n\nconsole.log(document.body.nah()); //works\nconsole.log(document.body.yo()); //also works as document is a child to Element ([[Prototype Object]]).\n```\n* For any attribute on an [[HTML]] element, if it is standard for the type of element then the DOM automatically keeps track of it. But custom properties must be manually fetched and updated.\nTo do so we use\n``<node>.hasAttribute(name)`` – checks for existence.\n``<node>.getAttribute(name)`` – gets the value.\n ``<node>.setAttribute(name, value)`` – sets the value.\n``<node>.removeAttribute(name)`` – removes the attribute.\n``<node>.attributes``- Returns a collection with all the attributes, [[Iterable]] \nFor ex.:\n```html\n<div id=\"a\" yoo=\"bro\">\n</div>\n<script>\n\nlet node= document.getElementById(\"a\");\nconsole.log(node.id); //ok prints a\nconsole.log(node.yoo); //undefined\n\nalert(node.getAttribute(\"a\")); //prints bro\n</script>\n```\n\n* Attribute names are case-insensitive.\n\n* The ``.outerHTML`` has all the attributes, even custom ones.\n\n* Attribute values are almost always strings. But some attributes such as ``.checked`` on the ``input`` element are boolean or some other tpe.\n\n* Almost all attribute changes made to the HTML sync with the DOM, the exception are attributes like ``.value`` on text input nodes.\nFor ex.:\n```html\n<script>\n  let input = document.querySelector('input');\n\n  // attribute => property\n  input.setAttribute('value', 'text');\n  alert(input.value); // text\n\n  // NOT property => attribute\n  input.value = 'newValue';\n  alert(input.getAttribute('value')); // text (not updated!)\n</script>\n```\n\n* The dataset property\nBy the HTML standard, the prefix ``data-`` is left for custom attribute names. And these are all also available in the ``dataset`` property of the DOM.\nFor ex.:\n```html\n<div id=\"a\" data-yoo=\"bro\">\n</div>\n<script>\n\nlet node= document.getElementById(\"a\");\nconsole.log(node.dataset.yoo); //ok prints \"bro\"\n</script>\n```\nThese [[HTML]] attributes can be used in CSS as well and are automatically synced too.",536870919]],["^15",[226,"^O","^16",536870919]],["^15",[226,"^F",219,536870919]],["^15",[226,"^X",211,536870919]],["^15",[226,"^V",211,536870919]],["^15",[226,"^U",30,536870919]],["^15",[226,"^U",46,536870919]],["^15",[226,"^U",211,536870919]],["^15",[226,"^H",30,536870919]],["^15",[226,"^H",46,536870919]],["^15",[226,"^17",true,536870919]],["^15",[226,"^;","~u649a41af-2cce-4b06-9efa-cddada4b90b0",536870919]],["^15",[227,"^3","alias:: Document Object Model\n\n- It is what it is named, it represents the [[HTML]] (and [[CSS]]) or [[XML]] Document as an [[Object]] and allows JS to interact with it as if it was an Object. This allows JS to freely modify the Document.\n  The DOM Object has its own spec: [DOM](https://dom.spec.whatwg.org/)\n  Similarly, we can modify the CSS classes as well using the CSSOM (creating/removing CSS classes can be done without it) which has the spec: [CSSOM](https://www.w3.org/TR/cssom-1/)\n- The ``document`` [[Object]] is the main entry point to a page, it has the entire Document in it as an Object.\n  For ex.:\n  In [[Browser]]\n  ```js\n  document.body.style.background = \"red\"; //turns the background of the Document red.\n  ```\n  \n  For ex.:\n  ```html\n  <!DOCTYPE HTML>\n  <html>\n  <head>\n    <title>About elk</title>\n  </head>\n  <body>\n    The truth about elk.\n  </body>\n  </html>\n  ```\n  \n  is represented as\n  ![image.png](../assets/image_1687267144086_0.png)\n  by the DOM\n  Newline character and spaces between [[HTML]] tags is completely valid Objects for DOM, that is why we see them here.\n  \n  * The ``document`` Object is a property of the [[window]] Object. So accessing ``document.<someprop>`` is the same as accessing ``window.document.<someprop>``.\n- The general rule is, everything in an HTML page is a part of the DOM tree. Even the ``<!DOCTYPE...`` directive.\n- Every attribute of an [[HTML Element]] is mapped to a [[DOM Class Property]] on its node. \n  However, whilst HTML attributes are case insensitive, DOM attributes are case sensitive as JS is case sensitive.\n- There are different types of ``nodes``, each node is an [[Object]] with a specific structure, each element in [[HTML]] is represented as a ``node`` in the DOM. There's [12](https://dom.spec.whatwg.org/#node) of these.\n  The 4 most common are:\n  * ``document`` – the “entry point” into DOM.\n  * ``element nodes`` – HTML-tags, the tree building blocks.\n  * ``text nodes`` – contain text.\n  * ``comments`` – sometimes we can put information there, it won’t be shown, but JS can read it from the DOM.\n- We can view the DOM on sites like [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/) or using the [[Developer tools]].\n- Navigation\n  ![image.png](../assets/image_1687276220476_0.png)\n  We can walk the DOM tree using methods with the same name as shown above, \n  ```js\n  let body = document.body; \n  ``` \n  and so on. These 3 are directly accessible.\n  Note: The [[Browser]] parses the HTML document from top-to-bottom, so if we have a [[<script>]] tag before an element, then it can't see it in the DOM yet. We can have the script tag in the head tag which means the ``document.body`` itself can be [[null]]. In DOM null simply means the element doesn't exist.\n  This is why it is recommended to have the script tag at the bottom.\n  \n  To traverse\n  ```js\n  let x = document.body.firstChild;\n  if (x.hasChildNodes()){\n   for(let child of x.childNodes) {\n     console.log(child.innerText);\n    }\n  }\n  ```\n  ``<node>.hasChildNodes()`` returns true if the node has child nodes. \n  ``.childNodes`` returns an Array-like Object, called a ``Collection``, which is an [[Iterable]] so it can be looped over. However, it is advised to use ``for..of`` [[Loop]] and not ``for..in`` as the latter even enumerates over properties that aren't related to the DOM.\n  \n  * DOM collections are live and read-only, we can't replace a node with another node. However we can add/remove children and they represent the live state of the node in the Document. If we modify a node then its changes are rendered right away (after being called in the [[Message Queue]])\n  \n  * Sometimes we don't want to traverse all nodes, just specific type of nodes, for element nodes we have\n  ![image.png](../assets/image_1687277449222_0.png)\n  The top document node is its own node, so \n  ```js\n  alert( document.documentElement.parentNode ); // document\n  alert( document.documentElement.parentElement ); // null\n  ```\n  This is useful if we wish to traverse all the way up,\n  ```js\n  //let elem = ... some node...;\n  while(elem = elem.parentElement) {...} \n  ```\n-\n- Searching for elements\n  We can also search for individual nodes directly.\n  \n  If they have an ``id`` attribute set then we can get them directly\n  ```html\n  <div id= \"yo\">\n   ...\n  \n  <script>\n   yo.style.background=\"red\"; //ok\n  </script>\n  ``` \n  Or we can use the ``document.getElementById(\"<id>\")`` method to get the node.\n  It is recommended to use this method as the direct access method relies on the mixing of namespaces of JS and DOM, which means it may not be clear to the reader to understand if the variable came from the JS or the DOM and it can be easily [[Shadowed]] by any JS element as well.\n  \n  * ``document.getElementById(\"<id>\")`` \n  * ``document.querySelectorAll(\"<css>\")``: Any valid [[CSS]] selector can be used here, and then a collection of such nodes is returned. It can even use [[CSS]] pseudo-classes like ``document.querySelectorAll(\":hover\")`` returns the current nodes being hovered over (from the html node to the given node in depth order)\n  *  ``document.querySelector(\"<css>\")``: Same as above except only searches for as long as a single node matching the selector is found, then stops. Meaning it is faster.\n  * ``<node>.matches(\"<css>\")``: Returns a bool, true if the given node matches the CSS selector.\n  * ``<node>.closest(\"<css>\")``: Starts checking the current node, then its parent, and so on until a node matching the css is found then returns that node. \n  * ``<node>.getElementsByTagName(\"<tagname>\")``: Returns a collection of child nodes that have the given tag. The tag can be \"*\" meaning any tag. \n  * ``<node>.getElementsByClassName(\"<classname>\")``\n  * ``document.getElementsByTagName(\"<tag name>\")``: Searches the whole document and returns a collection with these nodes.\n  ![image.png](../assets/image_1687323010732_0.png)\n  \n  By ``Live``, it means that these methods return the live node, so it represents the current state on the DOM and would get updated if the DOM does, similarly, updating them would update the DOM. In contract, the ``...querySelector...`` return ``static`` elements, which don't represent the Live state of the DOM.\n  \n  * The ``document....(...)`` methods can be called by any Element Node as well. \n  For ex.:\n  ```html\n  <div>\n   <span>\n   </span>\n  </div>\n  <script>\n  let div = document.querySelector('div'); \n  let span = div.querySelect('span'); //works\n  </script>\n  ```\n  The nodes then are searched inside the given node, so only the children of a node are evaluated.\n- DOM Node Classes\n  ![image.png](../assets/image_1687328193414_0.png)\n  This is the hierarchy with the EventTarget abstract [[Class]] at the top, JS doesn't have the concept of abstract classes, it just means that by convention it is a class that shouldn't be made an object of, just inherited using [[Prototype Object]].\n  EventTarget also provides [[Browser Event]]s. This is why all nodes can have an event hooked to them.\n  We can use [[Console]].dir to see any node's prototypal chain.\n  \n  [[Browser]]s provide all these classes to the JS environment, hence we can directly check them too.\n  For ex.:\n  ```js\n  alert( document.body instanceof HTMLBodyElement ); // true\n  alert( document.body instanceof HTMLElement ); // true\n  alert( document.body instanceof Element ); // true\n  alert( document.body instanceof Node ); // true\n  alert( document.body instanceof EventTarget ); // true\n  ```\n  uses ``instanceOf`` [[Operator]]\n- [[DOM Class Property]]\n-\n- Creating and Inserting Nodes:\n  To create:\n  * ``document.createElement(\"<tag name>\")``: Creates an Element type node of the given tagname. Recall that tagNames are basically the name of the element. \n  \n  * ``document.createTextNode(\"<text node content>\")``:\n  ...and so on for other types of nodes as well.\n  \n  Now to insert the created node:\n  * ``<node>.append(...nodes or strings)`` – append nodes or strings *at the end* of `node`,\n  * ``<node>.prepend(...nodes or strings)`` – insert nodes or strings *at the beginning* of `node`,\n  * ``<node>.before(...nodes or strings)`` –- insert nodes or strings *before* `node`,\n  * ``<node>.after(...nodes or strings)`` –- insert nodes or strings *after* `node`,\n  * ``<node>.replaceWith(...nodes or strings)`` –- replaces `node` with the given nodes or strings.\n  They use the spread [[Operator]] so multiple nodes or strings can be inserted at once.\n  Stings inserted are not parsed, so even if they contain HTML syntax, they are added `as-is`.\n  \n  Like so\n  ![image.png](../assets/image_1687454198531_0.png)\n  For ex.:\n  ```html\n  <ol id=\"ol\">\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n  </ol>\n  \n  <script>\n    ol.before('before'); // insert string \"before\" before <ol>\n    ol.after('after'); // insert string \"after\" after <ol>\n  \n    let liFirst = document.createElement('li');\n    liFirst.innerHTML = 'prepend';\n    ol.prepend(liFirst); // insert liFirst at the beginning of <ol>\n  \n    let liLast = document.createElement('li');\n    liLast.innerHTML = 'append';\n    ol.append(liLast); // insert liLast at the end of <ol>\n  </script>\n  ```\n  Creates\n  ```html\n  before\n  <ol id=\"ol\">\n    <li>prepend</li>\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n    <li>append</li>\n  </ol>\n  after\n  ```\n  \n  * There is another way to insert nodes, using the ``<node>.insertAdjacementElement(\"<where string>\", \"<html string>\")``, ``<node>.insertAdjacementText(\"<where string>\", \"<html string>\")`` and so on.\n  These methods takes a ``where`` string, which can be a value from \"beforebegin\", \"afterbegin\", \"beforeend\" and \"afterend\" and defines the position, and an [[HTML]] [[String]] which is parsed as HTML and the created node/text/etc. inserted at the given position.\n  Like so\n  ![image.png](../assets/image_1687454718947_0.png)\n  \n  * Old ways of adding nodes to DOM\n   ``<parent node>.appendChild(<child Node>)``: An old method, returns the inserted node as well. \n   ``<parent node>.insertBefore(<node>, <next sibling node>)``: Same\n  \n  * ``document.write(\"<html string>\")``: The html passed is parsed and then inserted right where the method was called in the HTML document. Deprecated as it can only be used while the Document is loading. If it is used after the page has loaded, it overwrites the entire Document with the given html.\n- (Re)moving a Node\n  ``<node>.remove()``: Removes the node and updates the DOM and [[HTML]] Document. \n  \n  To move a node, we simply get the node and insert it any new place. It is automatically removed from its old place and inserted at the new place.\n  \n  * ``<parent node>replaceChild(<node>, <old child node>)``: An old method, returns the inserted node. Replaces the old child node with the given node from the children of the parent node.\n  *  ``<parent node>removeChild(<node>)``: Same.\n- ``<node>.cloneNode(<bool shouldDeepCopy>)``\n  Returns a copy of the node. That is, it clones a node. If the provided bool is true, the children elements are cloned as well otherwise only the given node is cloned with all its attributes as well.\n- ``DocumentFragment``\n  This [[Class]] can be used to create a 'transparent' list of nodes that can be inserted anywhere, and this `wrapper` doesn't do anything.\n  For ex.:\n  ```js\n  let x = new DocumentFragment();\n  let div = document.createElement('div');\n  let div2= document.createElement('div');\n  x.push(div);\n  x.push(div2);\n  \n  document.query....(...).append(...x); //works, only div and div2 are inserted\n  ```\n  It's not necessary to use this wrapper class, as a normal [[Array]] would work the same as well.\n- Scrolling\n  We can scroll a page using JS  by setting\n  ``document.documentElement.scrollTop`` or ``..scrollLeft`` [[DOM Class Property]] to raw values, in safari we instead use ``document.body.scrollTop``/``..scrollLeft``.``\n  \n  window.scrollBy(x,y)`` or ``window.scrollTo(x,y)`` which work the same way in all browsers. ``.scrollTo`` makes sure the x,y is at the top-left of the current [[window]].\n  \n  ``<node>.scrollIntoView(<bool top>)`` Brings node into viewport. If top is default/false, then the bottom edge of the element is aligned with the bottom of the window, otherwise the top one.\n  \n  ``document.body.style.overlow`` If this [[CSS Property]] is set to \"hidden\", the scrollbar disappears and scrolling is forbidden for the element, which is body here so it forbids it for the whole page.\n- [[HTML Element]] coordinates\n  Each ``node`` is generally positioned using either 1 of these 2 coordinate systems \n  \n  * Relative to the window: Basically relative to the window's top-left. Let's call them [clientX/clientY](https://javascript.info/coordinates).\n  * Relative to the Document:  Relative to the document's top-left. Let's call them pageX/pageY.\n  \n  For ex.:\n  ![image.png](../assets/image_1687829516610_0.png)\n  As we can see for the given element, if it is relative to the window (clientX/Y) then it's position has changed as the clientY is shorter after scrolling the window up. But if it is relative to the document, which it is in this case, it's pageY value still remains the same. \n  \n  The ``<node>.getBoundingClientRect()`` [[DOM Class Property]] method returns a ``DOMRect`` [[Class]]' object which represents a minimal rectangle that encapsulates the entire element. Then the methods on this object return properties of this rectange.\n  ``<DOMRect object>.x``/``.y``: PageX/PageY\n  ``.width``/``.height``: Can be -ve.\n  ``.left/top/right/bottom``: Returns either the x-coordinate (for left and right) or the y-coordinate (for top and bottom)\n  Like so\n  ![image.png](../assets/image_1687830169589_0.png)\n  \n  If the rectangle is flipped so the right bottom was x and y then the left/top won't match the x and y, this is why they are 2 separate properties.\n  \n  * The ``document.elementFromPoint(x,y)`` returns the most-nested element from the given coordinates (clientX/Y). It returns null if the given coordinates are outside the range of the window.\n- Forms and control elements\n  [Form](https://html.spec.whatwg.org/multipage/forms.html)s in [[HTML]] are an [[HTML Element]] which are treated specially. Similarly, control elements like ``input`` are also treated specially by [[Browser]]s.\n  \n  They are available in a named and ordered collection ``<node>.forms`` so all forms directly under a node are available in its ``.forms``. Like the forms in the main document are in ``document.forms``. \n  Since they are named and ordered, we can access a form node like ``<node>.forms.myForm`` where ``myForm`` is its ``id`` or with ``<node>.forms[0]`` if its the first form under the node (from top to bottom in the [[HTML]] Document).\n  For ex.:\n  ```html\n  <form name=\"my\">\n    <input name=\"one\" value=\"1\">\n    <input name=\"two\" value=\"2\">\n  </form>\n  \n  <script>\n  \n    let form = document.forms.my; // <form name=\"my\"> element\n  \n    let elem = form.elements.one; // <input name=\"one\"> element\n  \n    alert(elem.value); // 1\n  </script>\n  ```\n  ``Form`` nodes have a prop ``.elements`` which is also a named Collection of nodes under the form but the ``name`` is used instead of the ``id``. If there are multiple elements with the same ``name``, then it returns a collection instead of a node. All control elements under a form, despite any level are available to ``<form>.elements``.\n  \n  * All elements under a ``<form>.elements`` are also properties on the form Object itself, however, if the name of the form changes then the old properties and new ones are still valid.\n  That is\n  ```html\n  <form name=\"yo\">\n    <input name = \"x\" >\n  </form>\n  \n  <script>\n   let form = document.forms.yo;\n   let x= form.x; //works\n   x.name=\"y\";\n  let y = form.x; //still works\n  let y1= form.elements.x; //doesnt exist\n  \n  </script>\n  ```\n  \n  * All elements under a form have a backreference to the form itself which is kept in ``<node>.form`` property of the nodes under the form.\n  ![image.png](../assets/image_1688003269350_0.png)\n  \n  * Forms have a [[Browser Event]] ``submit`` which is triggered when the form submits. We can also use ``<form node>.submit()`` to do so manually.\n  For ex.:\n  ```js\n  let form = document.createElement('form');\n  form.action = 'https://google.com/search';\n  form.method = 'GET';\n  \n  form.innerHTML = '<input name=\"q\" value=\"test\">';\n  \n  // the form must be in the document to submit it\n  document.body.append(form);\n  \n  form.submit();\n  ```\n- Page Events\n  There are a few important [[Browser Event]]s that trigger on an [[HTML]] page's lifecycle.\n  \n  The events are triggered in this order:\n  ``DOMContentLoaded``: The DOM is loaded and ready. The [[<script>]]s of the page are loaded as well, but [[Async]] scripts and dynamically generated scripts are loaded after this event. \n  The event handler has to be on the ``document`` [[DOM]] node. \n  ``load``: External resources are loaded, like [[CSS]] stylesheets, images etc.\n  ``beforeunload`` and ``unload``: The user is has gone to another page and now the page is unloading. \n  \n  For load/unload the [[window]] has to take the event handler.\n  \n  * ``document.readyState``: This [[DOM Class Property]] has one of 3 values \"loading\" (doc is loading), \"interactive\" (doc is fully read) and \"complete\" (doc is read and ext. resources loaded) and indicates the readiness of the document's loading. \n  The ``readystatechange`` event is triggered when this property changes.\n- [[MutationObserver]]\n- Range\n  This [[Class]] allows us to select a range of data from the nodes. \n  \n  We can create an instance with ``let range= new Range();`` then each Range object/instance requires 2 endpoints, start and end. \n  We set the start with ``<range Object>.setStart(<node>, <offset>)`` and end with ``<range Object>.setEnd(<node>, <offset>)``. \n  The start and end node can be different. The offset must be a [[Number]].\n  \n  If the start node is a text node, then it returns the given position of characters in its text content from start to end encompassing all text nodes from start to end.\n  For ex.:\n  ```html\n  <p id=\"p\">Hello</p>\n  <p id=\"p2\">Example: <i>italic</i> and <b>bold</b></p>\n  <script>\n    let range = new Range();\n    range.setStart(p.firstChild, 2); //the first child is the text node\n    range.setEnd(p.firstChild, 4);\n  \n    // toString of a range returns its content as text\n    console.log(range); // ll\n  \n    range.setStart(p2.firstChild, 2);\n    range.setEnd(p2.querySelector('b').firstChild, 3);\n  \n    console.log(range); // ample: italic and bol\n  </script>\n  ```\n  ![image.png](../assets/image_1688010650331_0.png)\n  and\n  ![image.png](../assets/image_1688010758960_0.png)\n  \n  If the start node is an element node, then it returns the nodes in the range.\n  For ex.:\n  ```js\n  <p id=\"p\">Example: <i>italic</i> and <b>bold</b></p>\n  \n  <script>\n    let range = new Range();\n  \n    range.setStart(p, 0);\n    range.setEnd(p, 2);\n  \n    // toString of a range returns its content as text, without tags\n    console.log(range); // Example: italic\n  </script>\n  ```\n  \n  Every range object has these properties\n  ![image.png](../assets/image_1688010962681_0.png)\n  \n  There are more selection methods and also range editing methods [here](https://javascript.info/selection-range#range-selection-methods)\n- Selection\n  Whilst Range selects a given range, it doesn't show anything visually. However ``Selection`` Objects can show selections visually on the page in the [[Browser]], they can be obtained with either ``document.getSelection()`` or ``window.getSelection()``.\n  In firefox, multiple separate regions can be selected with ``Ctrl+click`` like so\n  ![image.png](../assets/image_1688011215800_0.png)\n  \n  but in other browsers there can only be a single selection at any time.\n  This Object has these properties\n  ![image.png](../assets/image_1688011308957_0.png)\n  \n  Similarly, there are many methods too [here](https://javascript.info/selection-range#selection-methods).\n  * [[Browser Event]] \n  ``selectstart`` and ``selectionchange`` are triggered if an element is selected or if the selection changes.\n  \n  * Both select and range have much more comprehensive utility and interactions with other elements such as with Form [[HTML Element]], given [here](https://javascript.info/selection-range).",536880768]],["^15",[227,"^18",1687830959167,536870919]],["^15",[227,"^19","~m1688095767547",536880767]],["^15",[227,"^Z","pages/DOM.md",536870919]],["^15",[228,"^5",114,536870919]],["^15",[228,"^K",1687830959162,536870919]],["^15",[228,"^@",false,536870919]],["^15",[228,"^Y","document object model",536870919]],["^15",[228,"^11","Document Object Model",536870919]],["^15",[228,"^B",1687830959162,536870919]],["^15",[228,"^;","~u649a41af-32c1-4658-9947-248cc6d89a95",536870919]],["^15",[229,"^K",1687830959312,536870919]],["^15",[229,"^[",273,536870919]],["^15",[229,"^@",false,536870919]],["^15",[229,"^Y","developer tools",536870919]],["^15",[229,"^11","Developer tools",536870919]],["^15",[229,"^B",1687830959312,536870919]],["^15",[229,"^;","~u662fc702-7cf5-40e2-bb33-c483fb67b21e",536885544]],["^15",[230,"^Q","Scrolling\nWe can scroll a page using JS  by setting\n``document.documentElement.scrollTop`` or ``..scrollLeft`` [[DOM Class Property]] to raw values, in safari we instead use ``document.body.scrollTop``/``..scrollLeft``.``\n\nwindow.scrollBy(x,y)`` or ``window.scrollTo(x,y)`` which work the same way in all browsers. ``.scrollTo`` makes sure the x,y is at the top-left of the current [[window]].\n\n``<node>.scrollIntoView(<bool top>)`` Brings node into viewport. If top is default/false, then the bottom edge of the element is aligned with the bottom of the window, otherwise the top one.\n\n``document.body.style.overlow`` If this [[CSS Property]] is set to \"hidden\", the scrollbar disappears and scrolling is forbidden for the element, which is body here so it forbids it for the whole page.",536870919]],["^15",[230,"^O","^16",536870919]],["^15",[230,"^F",247,536870919]],["^15",[230,"^X",114,536870919]],["^15",[230,"^V",114,536870919]],["^15",[230,"^U",114,536870919]],["^15",[230,"^U",119,536870919]],["^15",[230,"^U",209,536870919]],["^15",[230,"^U",211,536870919]],["^15",[230,"^H",119,536870919]],["^15",[230,"^H",209,536870919]],["^15",[230,"^H",211,536870919]],["^15",[230,"^17",true,536870919]],["^15",[230,"^;","~u649a41af-1b94-4347-a668-f25cc6750e76",536870919]],["^15",[231,"^Q","(Re)moving a Node\n``<node>.remove()``: Removes the node and updates the DOM and [[HTML]] Document. \n\nTo move a node, we simply get the node and insert it any new place. It is automatically removed from its old place and inserted at the new place.\n\n* ``<parent node>replaceChild(<node>, <old child node>)``: An old method, returns the inserted node. Replaces the old child node with the given node from the children of the parent node.\n*  ``<parent node>removeChild(<node>)``: Same.",536870919]],["^15",[231,"^O","^16",536870919]],["^15",[231,"^F",237,536870919]],["^15",[231,"^X",114,536870919]],["^15",[231,"^V",114,536870919]],["^15",[231,"^U",30,536870919]],["^15",[231,"^U",114,536870919]],["^15",[231,"^H",30,536870919]],["^15",[231,"^17",true,536870919]],["^15",[231,"^;","~u649a41af-d983-41b2-8a8e-0598524ba3e3",536870919]],["^15",[232,"^Q","alias:: Document Object Model\n\n",536870919]],["^15",[232,"^O","^16",536870919]],["^15",[232,"^1>",["^1;",[]],536870919]],["^15",[232,"^F",114,536870919]],["^15",[232,"^X",114,536870919]],["^15",[232,"^V",114,536870919]],["^15",[232,"^U",114,536870919]],["^15",[232,"^U",228,536870919]],["^15",[232,"^:",true,536870919]],["^15",[232,"^?",["^ ","^1:",["^1;",["Document Object Model"]]],536870919]],["^15",[232,"^J",["^1:"],536870919]],["^15",[232,"^4",["^ ","^1:","Document Object Model"],536870919]],["^15",[232,"^H",228,536870919]],["^15",[232,"^17",true,536870919]],["^15",[232,"^;","~u649a41af-7a8d-4148-a0c8-29511123a21b",536870919]],["^15",[233,"^Q","",536870919]],["^15",[233,"^O","^16",536870919]],["^15",[233,"^F",238,536870919]],["^15",[233,"^X",114,536870919]],["^15",[233,"^V",114,536870919]],["^15",[233,"^U",114,536870919]],["^15",[233,"^17",true,536870919]],["^15",[233,"^;","~u649a41af-92e6-4007-b982-cba2bf8f3b01",536870919]],["^15",[234,"^Q","There are different types of ``nodes``, each node is an [[Object]] with a specific structure, each element in [[HTML]] is represented as a ``node`` in the DOM. There's [12](https://dom.spec.whatwg.org/#node) of these.\nThe 4 most common are:\n* ``document`` – the “entry point” into DOM.\n* ``element nodes`` – HTML-tags, the tree building blocks.\n* ``text nodes`` – contain text.\n* ``comments`` – sometimes we can put information there, it won’t be shown, but JS can read it from the DOM.",536871564]],["^15",[234,"^O","^16",536870919]],["^15",[234,"^F",739,536871564]],["^15",[234,"^X",114,536870919]],["^15",[234,"^V",114,536870919]],["^15",[234,"^U",30,536870919]],["^15",[234,"^U",39,536870919]],["^15",[234,"^U",114,536870919]],["^15",[234,"^?",["^ "],536871564]],["^15",[234,"^H",30,536871564]],["^15",[234,"^H",39,536871564]],["^15",[234,"^17",true,536870919]],["^15",[234,"^;","~u649a41af-daef-4385-9ae7-651a09ceef47",536870919]],["^15",[235,"^Q","The general rule is, everything in an HTML page is a part of the DOM tree. Even the ``<!DOCTYPE...`` directive.",536870919]],["^15",[235,"^O","^16",536870919]],["^15",[235,"^F",242,536870919]],["^15",[235,"^X",114,536870919]],["^15",[235,"^V",114,536870919]],["^15",[235,"^U",114,536870919]],["^15",[235,"^17",true,536870919]],["^15",[235,"^;","~u649a41af-d1a7-4679-8625-f1bba3f704db",536870919]],["^15",[236,"^Q","It is what it is named, it represents the [[HTML]] (and [[CSS]]) or [[XML]] Document as an [[Object]] and allows JS to interact with it as if it was an Object. This allows JS to freely modify the Document.\nThe DOM Object has its own spec: [DOM](https://dom.spec.whatwg.org/)\nSimilarly, we can modify the CSS classes as well using the CSSOM (creating/removing CSS classes can be done without it) which has the spec: [CSSOM](https://www.w3.org/TR/cssom-1/)",536870919]],["^15",[236,"^O","^16",536870919]],["^15",[236,"^F",232,536870919]],["^15",[236,"^X",114,536870919]],["^15",[236,"^V",114,536870919]],["^15",[236,"^U",30,536870919]],["^15",[236,"^U",39,536870919]],["^15",[236,"^U",114,536870919]],["^15",[236,"^U",115,536870919]],["^15",[236,"^U",128,536870919]],["^15",[236,"^H",30,536870919]],["^15",[236,"^H",39,536870919]],["^15",[236,"^H",115,536870919]],["^15",[236,"^H",128,536870919]],["^15",[236,"^17",true,536870919]],["^15",[236,"^;","~u649a41af-4671-401f-8a13-a98234956323",536870919]],["^15",[237,"^Q","Creating and Inserting Nodes:\nTo create:\n* ``document.createElement(\"<tag name>\")``: Creates an Element type node of the given tagname. Recall that tagNames are basically the name of the element. \n\n* ``document.createTextNode(\"<text node content>\")``:\n...and so on for other types of nodes as well.\n\nNow to insert the created node:\n* ``<node>.append(...nodes or strings)`` – append nodes or strings *at the end* of `node`,\n* ``<node>.prepend(...nodes or strings)`` – insert nodes or strings *at the beginning* of `node`,\n* ``<node>.before(...nodes or strings)`` –- insert nodes or strings *before* `node`,\n* ``<node>.after(...nodes or strings)`` –- insert nodes or strings *after* `node`,\n* ``<node>.replaceWith(...nodes or strings)`` –- replaces `node` with the given nodes or strings.\nThey use the spread [[Operator]] so multiple nodes or strings can be inserted at once.\nStings inserted are not parsed, so even if they contain HTML syntax, they are added `as-is`.\n\nLike so\n![image.png](../assets/image_1687454198531_0.png)\nFor ex.:\n```html\n<ol id=\"ol\">\n  <li>0</li>\n  <li>1</li>\n  <li>2</li>\n</ol>\n\n<script>\n  ol.before('before'); // insert string \"before\" before <ol>\n  ol.after('after'); // insert string \"after\" after <ol>\n\n  let liFirst = document.createElement('li');\n  liFirst.innerHTML = 'prepend';\n  ol.prepend(liFirst); // insert liFirst at the beginning of <ol>\n\n  let liLast = document.createElement('li');\n  liLast.innerHTML = 'append';\n  ol.append(liLast); // insert liLast at the end of <ol>\n</script>\n```\nCreates\n```html\nbefore\n<ol id=\"ol\">\n  <li>prepend</li>\n  <li>0</li>\n  <li>1</li>\n  <li>2</li>\n  <li>append</li>\n</ol>\nafter\n```\n\n* There is another way to insert nodes, using the ``<node>.insertAdjacementElement(\"<where string>\", \"<html string>\")``, ``<node>.insertAdjacementText(\"<where string>\", \"<html string>\")`` and so on.\nThese methods takes a ``where`` string, which can be a value from \"beforebegin\", \"afterbegin\", \"beforeend\" and \"afterend\" and defines the position, and an [[HTML]] [[String]] which is parsed as HTML and the created node/text/etc. inserted at the given position.\nLike so\n![image.png](../assets/image_1687454718947_0.png)\n\n* Old ways of adding nodes to DOM\n ``<parent node>.appendChild(<child Node>)``: An old method, returns the inserted node as well. \n ``<parent node>.insertBefore(<node>, <next sibling node>)``: Same\n\n* ``document.write(\"<html string>\")``: The html passed is parsed and then inserted right where the method was called in the HTML document. Deprecated as it can only be used while the Document is loading. If it is used after the page has loaded, it overwrites the entire Document with the given html.",536870919]],["^15",[237,"^O","^16",536870919]],["^15",[237,"^F",233,536870919]],["^15",[237,"^X",114,536870919]],["^15",[237,"^V",114,536870919]],["^15",[237,"^U",30,536870919]],["^15",[237,"^U",41,536870919]],["^15",[237,"^U",76,536870919]],["^15",[237,"^U",114,536870919]],["^15",[237,"^H",30,536870919]],["^15",[237,"^H",41,536870919]],["^15",[237,"^H",76,536870919]],["^15",[237,"^17",true,536870919]],["^15",[237,"^;","~u649a41af-93a2-4c90-b407-8313b0ce8378",536870919]],["^15",[238,"^Q","[[DOM Class Property]]",536870919]],["^15",[238,"^O","^16",536870919]],["^15",[238,"^F",243,536870919]],["^15",[238,"^X",114,536870919]],["^15",[238,"^V",114,536870919]],["^15",[238,"^U",114,536870919]],["^15",[238,"^U",211,536870919]],["^15",[238,"^H",211,536870919]],["^15",[238,"^17",true,536870919]],["^15",[238,"^;","~u649a41af-ceb4-4c6f-a82b-9bc1bdd2d6f5",536870919]],["^15",[239,"^Q","~``<node>.cloneNode(<bool shouldDeepCopy>)``\nReturns a copy of the node. That is, it clones a node. If the provided bool is true, the children elements are cloned as well otherwise only the given node is cloned with all its attributes as well.",536870919]],["^15",[239,"^O","^16",536870919]],["^15",[239,"^F",231,536870919]],["^15",[239,"^X",114,536870919]],["^15",[239,"^V",114,536870919]],["^15",[239,"^U",114,536870919]],["^15",[239,"^17",true,536870919]],["^15",[239,"^;","~u649a41af-e568-4ba7-a9de-8e8e23f30366",536870919]],["^15",[240,"^Q","Searching for elements\nWe can also search for individual nodes directly.\n\nIf they have an ``id`` attribute set then we can get them directly\n```html\n<div id= \"yo\">\n ...\n\n<script>\n yo.style.background=\"red\"; //ok\n</script>\n``` \nOr we can use the ``document.getElementById(\"<id>\")`` method to get the node.\nIt is recommended to use this method as the direct access method relies on the mixing of namespaces of JS and DOM, which means it may not be clear to the reader to understand if the variable came from the JS or the DOM and it can be easily [[Shadowed]] by any JS element as well.\n\n* ``document.getElementById(\"<id>\")`` \n* ``document.querySelectorAll(\"<css>\")``: Any valid [[CSS]] selector can be used here, and then a collection of such nodes is returned. It can even use [[CSS]] pseudo-classes like ``document.querySelectorAll(\":hover\")`` returns the current nodes being hovered over (from the html node to the given node in depth order)\n*  ``document.querySelector(\"<css>\")``: Same as above except only searches for as long as a single node matching the selector is found, then stops. Meaning it is faster.\n* ``<node>.matches(\"<css>\")``: Returns a bool, true if the given node matches the CSS selector.\n* ``<node>.closest(\"<css>\")``: Starts checking the current node, then its parent, and so on until a node matching the css is found then returns that node. \n* ``<node>.getElementsByTagName(\"<tagname>\")``: Returns a collection of child nodes that have the given tag. The tag can be \"*\" meaning any tag. \n* ``<node>.getElementsByClassName(\"<classname>\")``\n* ``document.getElementsByTagName(\"<tag name>\")``: Searches the whole document and returns a collection with these nodes.\n![image.png](../assets/image_1687323010732_0.png)\n\nBy ``Live``, it means that these methods return the live node, so it represents the current state on the DOM and would get updated if the DOM does, similarly, updating them would update the DOM. In contract, the ``...querySelector...`` return ``static`` elements, which don't represent the Live state of the DOM.\n\n* The ``document....(...)`` methods can be called by any Element Node as well. \nFor ex.:\n```html\n<div>\n <span>\n </span>\n</div>\n<script>\nlet div = document.querySelector('div'); \nlet span = div.querySelect('span'); //works\n</script>\n```\nThe nodes then are searched inside the given node, so only the children of a node are evaluated.",536870919]],["^15",[240,"^O","^16",536870919]],["^15",[240,"^F",245,536870919]],["^15",[240,"^X",114,536870919]],["^15",[240,"^V",114,536870919]],["^15",[240,"^U",114,536870919]],["^15",[240,"^U",128,536870919]],["^15",[240,"^U",147,536870919]],["^15",[240,"^H",128,536870919]],["^15",[240,"^H",147,536870919]],["^15",[240,"^17",true,536870919]],["^15",[240,"^;","~u649a41af-7c3b-4e8b-9441-1daed4126cb2",536870919]],["^15",[241,"^Q","[[HTML Element]] coordinates\nEach ``node`` is generally positioned using either 1 of these 2 coordinate systems \n\n* Relative to the window: Basically relative to the window's top-left. Let's call them [clientX/clientY](https://javascript.info/coordinates).\n* Relative to the Document:  Relative to the document's top-left. Let's call them pageX/pageY.\n\nFor ex.:\n![image.png](../assets/image_1687829516610_0.png)\nAs we can see for the given element, if it is relative to the window (clientX/Y) then it's position has changed as the clientY is shorter after scrolling the window up. But if it is relative to the document, which it is in this case, it's pageY value still remains the same. \n\nThe ``<node>.getBoundingClientRect()`` [[DOM Class Property]] method returns a ``DOMRect`` [[Class]]' object which represents a minimal rectangle that encapsulates the entire element. Then the methods on this object return properties of this rectange.\n``<DOMRect object>.x``/``.y``: PageX/PageY\n``.width``/``.height``: Can be -ve.\n``.left/top/right/bottom``: Returns either the x-coordinate (for left and right) or the y-coordinate (for top and bottom)\nLike so\n![image.png](../assets/image_1687830169589_0.png)\n\nIf the rectangle is flipped so the right bottom was x and y then the left/top won't match the x and y, this is why they are 2 separate properties.\n\n* The ``document.elementFromPoint(x,y)`` returns the most-nested element from the given coordinates (clientX/Y). It returns null if the given coordinates are outside the range of the window.",536870919]],["^15",[241,"^O","^16",536870919]],["^15",[241,"^F",230,536870919]],["^15",[241,"^X",114,536870919]],["^15",[241,"^V",114,536870919]],["^15",[241,"^U",75,536870919]],["^15",[241,"^U",114,536870919]],["^15",[241,"^U",120,536870919]],["^15",[241,"^U",211,536870919]],["^15",[241,"^H",75,536870919]],["^15",[241,"^H",120,536870919]],["^15",[241,"^H",211,536870919]],["^15",[241,"^17",true,536870919]],["^15",[241,"^;","~u649a41af-98b9-4e8f-a6fa-356adde595bb",536870919]],["^15",[242,"^Q","The ``document`` [[Object]] is the main entry point to a page, it has the entire Document in it as an Object.\nFor ex.:\nIn [[Browser]]\n```js\ndocument.body.style.background = \"red\"; //turns the background of the Document red.\n```\n\nFor ex.:\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <title>About elk</title>\n</head>\n<body>\n  The truth about elk.\n</body>\n</html>\n```\n\nis represented as\n![image.png](../assets/image_1687267144086_0.png)\nby the DOM\nNewline character and spaces between [[HTML]] tags is completely valid Objects for DOM, that is why we see them here.\n\n* The ``document`` Object is a property of the [[window]] Object. So accessing ``document.<someprop>`` is the same as accessing ``window.document.<someprop>``.",536880766]],["^15",[242,"^O","^16",536870919]],["^15",[242,"^F",236,536870919]],["^15",[242,"^X",114,536870919]],["^15",[242,"^V",114,536870919]],["^15",[242,"^U",30,536880745]],["^15",[242,"^U",33,536880745]],["^15",[242,"^U",39,536880745]],["^15",[242,"^U",114,536880745]],["^15",[242,"^U",209,536880745]],["^15",[242,"^?",["^ "],536880766]],["^15",[242,"^H",30,536880766]],["^15",[242,"^H",33,536880766]],["^15",[242,"^H",39,536880766]],["^15",[242,"^H",209,536880766]],["^15",[242,"^17",true,536870919]],["^15",[242,"^;","~u649a41af-b872-4953-9821-d93fe9c7c00a",536870919]],["^15",[243,"^Q","DOM Node Classes\n![image.png](../assets/image_1687328193414_0.png)\nThis is the hierarchy with the EventTarget abstract [[Class]] at the top, JS doesn't have the concept of abstract classes, it just means that by convention it is a class that shouldn't be made an object of, just inherited using [[Prototype Object]].\nEventTarget also provides [[Browser Event]]s. This is why all nodes can have an event hooked to them.\nWe can use [[Console]].dir to see any node's prototypal chain.\n\n[[Browser]]s provide all these classes to the JS environment, hence we can directly check them too.\nFor ex.:\n```js\nalert( document.body instanceof HTMLBodyElement ); // true\nalert( document.body instanceof HTMLElement ); // true\nalert( document.body instanceof Element ); // true\nalert( document.body instanceof Node ); // true\nalert( document.body instanceof EventTarget ); // true\n```\nuses ``instanceOf`` [[Operator]]",536870919]],["^15",[243,"^O","^16",536870919]],["^15",[243,"^F",240,536870919]],["^15",[243,"^X",114,536870919]],["^15",[243,"^V",114,536870919]],["^15",[243,"^U",33,536870919]],["^15",[243,"^U",73,536870919]],["^15",[243,"^U",75,536870919]],["^15",[243,"^U",76,536870919]],["^15",[243,"^U",114,536870919]],["^15",[243,"^U",143,536870919]],["^15",[243,"^U",191,536870919]],["^15",[243,"^H",33,536870919]],["^15",[243,"^H",73,536870919]],["^15",[243,"^H",75,536870919]],["^15",[243,"^H",76,536870919]],["^15",[243,"^H",143,536870919]],["^15",[243,"^H",191,536870919]],["^15",[243,"^17",true,536870919]],["^15",[243,"^;","~u649a41af-9716-4435-ac3b-9e2a2b5e3d9d",536870919]],["^15",[244,"^Q","We can view the DOM on sites like [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/) or using the [[Developer tools]].",536870919]],["^15",[244,"^O","^16",536870919]],["^15",[244,"^F",234,536870919]],["^15",[244,"^X",114,536870919]],["^15",[244,"^V",114,536870919]],["^15",[244,"^U",114,536870919]],["^15",[244,"^U",229,536870919]],["^15",[244,"^H",229,536870919]],["^15",[244,"^17",true,536870919]],["^15",[244,"^;","~u649a41af-720a-4d51-a3b8-3f314fb7ad5b",536870919]],["^15",[245,"^Q","",536870919]],["^15",[245,"^O","^16",536870919]],["^15",[245,"^F",246,536870919]],["^15",[245,"^X",114,536870919]],["^15",[245,"^V",114,536870919]],["^15",[245,"^U",114,536870919]],["^15",[245,"^17",true,536870919]],["^15",[245,"^;","~u649a41af-6aa7-4d39-aae2-e3648c824a7f",536870919]],["^15",[246,"^Q","Navigation\n![image.png](../assets/image_1687276220476_0.png)\nWe can walk the DOM tree using methods with the same name as shown above, \n```js\nlet body = document.body; \n``` \nand so on. These 3 are directly accessible.\nNote: The [[Browser]] parses the HTML document from top-to-bottom, so if we have a [[<script>]] tag before an element, then it can't see it in the DOM yet. We can have the script tag in the head tag which means the ``document.body`` itself can be [[null]]. In DOM null simply means the element doesn't exist.\nThis is why it is recommended to have the script tag at the bottom.\n\nTo traverse\n```js\nlet x = document.body.firstChild;\nif (x.hasChildNodes()){\n for(let child of x.childNodes) {\n   console.log(child.innerText);\n  }\n}\n```\n``<node>.hasChildNodes()`` returns true if the node has child nodes. \n``.childNodes`` returns an Array-like Object, called a ``Collection``, which is an [[Iterable]] so it can be looped over. However, it is advised to use ``for..of`` [[Loop]] and not ``for..in`` as the latter even enumerates over properties that aren't related to the DOM.\n\n* DOM collections are live and read-only, we can't replace a node with another node. However we can add/remove children and they represent the live state of the node in the Document. If we modify a node then its changes are rendered right away (after being called in the [[Message Queue]])\n\n* Sometimes we don't want to traverse all nodes, just specific type of nodes, for element nodes we have\n![image.png](../assets/image_1687277449222_0.png)\nThe top document node is its own node, so \n```js\nalert( document.documentElement.parentNode ); // document\nalert( document.documentElement.parentElement ); // null\n```\nThis is useful if we wish to traverse all the way up,\n```js\n//let elem = ... some node...;\nwhile(elem = elem.parentElement) {...} \n```",536870919]],["^15",[246,"^O","^16",536870919]],["^15",[246,"^F",244,536870919]],["^15",[246,"^X",114,536870919]],["^15",[246,"^V",114,536870919]],["^15",[246,"^U",29,536870919]],["^15",[246,"^U",33,536870919]],["^15",[246,"^U",40,536870919]],["^15",[246,"^U",46,536870919]],["^15",[246,"^U",80,536870919]],["^15",[246,"^U",114,536870919]],["^15",[246,"^U",173,536870919]],["^15",[246,"^H",29,536870919]],["^15",[246,"^H",33,536870919]],["^15",[246,"^H",40,536870919]],["^15",[246,"^H",46,536870919]],["^15",[246,"^H",80,536870919]],["^15",[246,"^H",173,536870919]],["^15",[246,"^17",true,536870919]],["^15",[246,"^;","~u649a41af-e024-425c-aaf9-4862616ec440",536870919]],["^15",[247,"^Q","~``DocumentFragment``\nThis [[Class]] can be used to create a 'transparent' list of nodes that can be inserted anywhere, and this `wrapper` doesn't do anything.\nFor ex.:\n```js\nlet x = new DocumentFragment();\nlet div = document.createElement('div');\nlet div2= document.createElement('div');\nx.push(div);\nx.push(div2);\n\ndocument.query....(...).append(...x); //works, only div and div2 are inserted\n```\nIt's not necessary to use this wrapper class, as a normal [[Array]] would work the same as well.",536870919]],["^15",[247,"^O","^16",536870919]],["^15",[247,"^F",239,536870919]],["^15",[247,"^X",114,536870919]],["^15",[247,"^V",114,536870919]],["^15",[247,"^U",47,536870919]],["^15",[247,"^U",75,536870919]],["^15",[247,"^U",114,536870919]],["^15",[247,"^H",47,536870919]],["^15",[247,"^H",75,536870919]],["^15",[247,"^17",true,536870919]],["^15",[247,"^;","~u649a41af-88c5-483f-a66b-21eb9849fa14",536870919]],["^15",[248,"^3","- Quite powerful Date and Time utility, obviously implemented on [[Object]].\n- Methods\n  ``new Date()``// creates a Date Object with now's date and time. Overrides exist with int milliseconds for time since epoch (Jan 1 1970), time since epoch is aka timestamp. Negative values go behind epoch. Or with a string which can be of format \"YYYY-MM-DD\" etc. and is parsed automatically.\n  Or \n  ``new Date(year, month, date, hours, minutes, seconds, ms)``\n  ``.getYear()`` Deprecated, avoid. Use ``.getFullYear()`` instead.\n  ``.getMonth()`` and the like methods exist as well.\n  ``Date.now()`` gets int value which time since epoch in ms till now.\n  ``Date.parse(<str>)``\n  \n  Similarly, for setting\n  * [`setFullYear(year, [month], [date])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)\n  * [`setMonth(month, [date])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth)\n  * [`setDate(date)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate)\n  * [`setHours(hour, [min], [sec], [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\n  * [`setMinutes(min, [sec], [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes)\n  * [`setSeconds(sec, [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds)\n  * [`setMilliseconds(ms)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds)\n  * [`setTime(milliseconds)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime) (sets the whole date by milliseconds since 01.01.1970 UTC)\n  \n  All methods have their get/setUTC... counterparts for getting/setting UTC time.\n- Date Objects autocorrect theirselves.\n  For ex.:\n  ```js\n  let date = new Date(2013, 0, 32); // 32 Jan 2013 ?!?\n  console.log(date); // ...is 1st Feb 2013!\n  ```\n- Addition [[Operator]] on Date and Int sends a date ahead.\n  ```js\n  let date = new Date(2016, 1, 28);\n  date.setDate(date.getDate() + 2);\n  \n  console.log( date ); // 1 Mar 2016\n  ```\n-",536870919]],["^15",[248,"^18",1687830959190,536870919]],["^15",[248,"^Z","pages/Date.md",536870919]],["^15",[249,"^Q","Quite powerful Date and Time utility, obviously implemented on [[Object]].",536870919]],["^15",[249,"^O","^16",536870919]],["^15",[249,"^F",146,536870919]],["^15",[249,"^X",146,536870919]],["^15",[249,"^V",146,536870919]],["^15",[249,"^U",39,536870919]],["^15",[249,"^U",146,536870919]],["^15",[249,"^H",39,536870919]],["^15",[249,"^17",true,536870919]],["^15",[249,"^;","~u649a41af-1865-4a09-8c28-3e37f6a6003f",536870919]],["^15",[250,"^Q","Methods\n``new Date()``// creates a Date Object with now's date and time. Overrides exist with int milliseconds for time since epoch (Jan 1 1970), time since epoch is aka timestamp. Negative values go behind epoch. Or with a string which can be of format \"YYYY-MM-DD\" etc. and is parsed automatically.\nOr \n``new Date(year, month, date, hours, minutes, seconds, ms)``\n``.getYear()`` Deprecated, avoid. Use ``.getFullYear()`` instead.\n``.getMonth()`` and the like methods exist as well.\n``Date.now()`` gets int value which time since epoch in ms till now.\n``Date.parse(<str>)``\n\nSimilarly, for setting\n* [`setFullYear(year, [month], [date])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)\n* [`setMonth(month, [date])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth)\n* [`setDate(date)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate)\n* [`setHours(hour, [min], [sec], [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\n* [`setMinutes(min, [sec], [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes)\n* [`setSeconds(sec, [ms])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds)\n* [`setMilliseconds(ms)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds)\n* [`setTime(milliseconds)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime) (sets the whole date by milliseconds since 01.01.1970 UTC)\n\nAll methods have their get/setUTC... counterparts for getting/setting UTC time.",536870919]],["^15",[250,"^O","^16",536870919]],["^15",[250,"^F",249,536870919]],["^15",[250,"^X",146,536870919]],["^15",[250,"^V",146,536870919]],["^15",[250,"^U",146,536870919]],["^15",[250,"^17",true,536870919]],["^15",[250,"^;","~u649a41af-e2f0-47dc-a623-840d91252903",536870919]],["^15",[251,"^Q","Date Objects autocorrect theirselves.\nFor ex.:\n```js\nlet date = new Date(2013, 0, 32); // 32 Jan 2013 ?!?\nconsole.log(date); // ...is 1st Feb 2013!\n```",536870919]],["^15",[251,"^O","^16",536870919]],["^15",[251,"^F",250,536870919]],["^15",[251,"^X",146,536870919]],["^15",[251,"^V",146,536870919]],["^15",[251,"^U",146,536870919]],["^15",[251,"^17",true,536870919]],["^15",[251,"^;","~u649a41af-c58e-4d11-aef2-b4c1b3979d6a",536870919]],["^15",[252,"^Q","Addition [[Operator]] on Date and Int sends a date ahead.\n```js\nlet date = new Date(2016, 1, 28);\ndate.setDate(date.getDate() + 2);\n\nconsole.log( date ); // 1 Mar 2016\n```",536870919]],["^15",[252,"^O","^16",536870919]],["^15",[252,"^F",251,536870919]],["^15",[252,"^X",146,536870919]],["^15",[252,"^V",146,536870919]],["^15",[252,"^U",76,536870919]],["^15",[252,"^U",146,536870919]],["^15",[252,"^H",76,536870919]],["^15",[252,"^17",true,536870919]],["^15",[252,"^;","~u649a41af-8e0d-4518-bcd2-e2da55405b56",536870919]],["^15",[253,"^Q","",536870919]],["^15",[253,"^O","^16",536870919]],["^15",[253,"^F",252,536870919]],["^15",[253,"^X",146,536870919]],["^15",[253,"^V",146,536870919]],["^15",[253,"^U",146,536870919]],["^15",[253,"^17",true,536870919]],["^15",[253,"^;","~u649a41af-e6ea-44fe-8952-eb760de1a41c",536870919]],["^15",[254,"^3","- There's also a keyword ``debugger``, if the [[Developer tools]] are open, and this keyword is present in a script in a webpage then the Debugger automatically stops at this keyword.",536870919]],["^15",[254,"^18",1687830959197,536870919]],["^15",[254,"^Z","pages/Debugging.md",536870919]],["^15",[255,"^K",1687830959245,536870919]],["^15",[255,"^[",254,536870919]],["^15",[255,"^@",false,536870919]],["^15",[255,"^Y","debugging",536870919]],["^15",[255,"^11","Debugging",536870919]],["^15",[255,"^B",1687830959245,536870919]],["^15",[255,"^;","~u649a41af-19db-4f46-9422-488898460320",536870919]],["^15",[256,"^Q","There's also a keyword ``debugger``, if the [[Developer tools]] are open, and this keyword is present in a script in a webpage then the Debugger automatically stops at this keyword.",536870919]],["^15",[256,"^O","^16",536870919]],["^15",[256,"^F",255,536870919]],["^15",[256,"^X",255,536870919]],["^15",[256,"^V",255,536870919]],["^15",[256,"^U",229,536870919]],["^15",[256,"^U",255,536870919]],["^15",[256,"^H",229,536870919]],["^15",[256,"^17",true,536870919]],["^15",[256,"^;","~u649a41af-cec0-4a6a-b7d3-c5bb46378f6d",536870919]],["^15",[257,"^3","alias:: Destructuring Assignment\n\n- This syntax allows us to destructure [[Array]]s and get them into variables.\n  For ex.:\n  ```js\n  let arr= [\"abc\",1];\n  let [a,b]= arr;\n  //works\n  ```\n- If we want to omit a value, we leave an empty ``,``\n  For ex.:\n  ```js\n  let arr= [\"abc\",1,2];\n  let [a,,b]= arr;// ok\n  \n  ```\n- Specifically, any [[Iterable]] can be destructured. It's like for..of [[Loop]].\n  For ex.:\n  ```js\n  let [a,b,c]=\"abc\";  //ok\n  ```\n- Can be used to swap variables\n  ```js\n  let a= 2;\n  let b =\"A\";\n  [a,b]= [b,a];\n  ```\n- If the [[Iterable]] is longer than the number of variables in the destructuring assignment, then the extra elements are simply ignored.\n  \n  Similarly, if the Iterable is shorter than the number of variables, then unassigned variables are simply [[undefined]].\n  \n  We can give a default value to variables too\n  ```js\n  let arr= [\"abc\",1];\n  let [a,b,c = \"yo\"]= arr; //ok, c will be yo since it is unassigned after destructure assignment\n  ```\n  And just like normal default values in [[Function]]s, the default value can be a function too and it is called when the variable is unassigned.\n- The ``...`` [[Operator]] can pick up the rest of the elements and becomes an [[Array]] holding those elements.\n  That is,\n  ```js\n  let arr= [\"abc\",1,\"b\"];\n  let [a,...b]= arr;  //b[0] is 1 and b[1] is \"b\" now.\n  ```\n- Works with raw [[Object]]s too.\n  However, the destructuring requires the property names to be given. \n  That is,\n  ```js\n  let x= {\n   \"a\":2,\n   b:3,\n  };\n  let {a,b} = x; //ok \n  // we can also\n  let {x: a, y: b}= x; //Here the syntax is variable name: source name\n  //and also add default values\n  let {a1: a= 5, a2: b = prompt(\"What's b ?\") }= x;\n  //also with ...\n  let {...z}= x; //ok, z is not an Array but an Object.\n  z[a]; //returns 2\n  ```\n  However, there's 1 thing we can't do exactly like Array Destructuring, that is declaration and destructuring separately,\n  ```js\n  let x= {...};\n  let a;\n  let b;\n  {a,b} = x; //error\n  ({a,b} = x); //ok\n  ```\n  This is because the syntax closely resembles a code block and for a code block it is invalid syntax, by using (...) we override that behavior.\n- [[Object]] Destructuring can also use Nested Destructuring.\n  For ex.:\n  ```js\n  let options = {\n    size: {\n      width: 100,\n      height: 200\n    },\n    items: [\"Cake\", \"Donut\"],\n    extra: true\n  };\n  \n  let {\n    size: { // put size here\n      width,\n      height\n    },\n    items: [item1, item2], // assign items here\n    title = \"Menu\" // not present in the object (default value is used)\n  } = options;\n  ```\n- We can also use [[Object]] Destructuring with [[Function]] parameters\n  ```js\n  let x = {title: 2, name : 3};\n  \n  function yo({title= \"IDK\", name= 2, age = 0}) {...}\n  \n  yo(x); //works\n  \n  //However, now yo(); would be an error, to have empty arg list we need to pass an empty object.\n   \n  yo({ }); //ok\n  \n  //Alternatively, we can set the default value of the Object itself and then we can call \n  //a function like yo without any args\n  \n  function hoo({title = \"IDK\", age= 2} = { }) {...}\n  \n  hoo(); //ok\n  \n  \n  ```\n-\n-\n-",536870919]],["^15",[257,"^18",1687830959232,536870919]],["^15",[257,"^Z","pages/Destructuring.md",536870919]],["^15",[258,"^5",259,536870919]],["^15",[258,"^K",1687830960032,536870919]],["^15",[258,"^@",false,536870919]],["^15",[258,"^Y","destructuring assignment",536870919]],["^15",[258,"^11","Destructuring Assignment",536870919]],["^15",[258,"^B",1687830960032,536870919]],["^15",[258,"^;","~u649a41b0-b246-441f-9da0-51b777467b13",536870919]],["^15",[259,"^5",258,536870919]],["^15",[259,"^K",1687830959329,536870919]],["^15",[259,"^[",257,536870919]],["^15",[259,"^@",false,536870919]],["^15",[259,"^Y","destructuring",536870919]],["^15",[259,"^11","Destructuring",536870919]],["^15",[259,"^?",["^ ","^1:",["^1;",["Destructuring Assignment"]]],536870919]],["^15",[259,"^4",["^ ","^1:","Destructuring Assignment"],536870919]],["^15",[259,"^B",1687830959329,536870919]],["^15",[259,"^;","~u662fc702-0a78-4edf-be46-53118784510d",536885544]],["^15",[260,"^Q","Specifically, any [[Iterable]] can be destructured. It's like for..of [[Loop]].\nFor ex.:\n```js\nlet [a,b,c]=\"abc\";  //ok\n```",536870919]],["^15",[260,"^O","^16",536870919]],["^15",[260,"^F",268,536870919]],["^15",[260,"^X",259,536870919]],["^15",[260,"^V",259,536870919]],["^15",[260,"^U",40,536870919]],["^15",[260,"^U",46,536870919]],["^15",[260,"^U",259,536870919]],["^15",[260,"^H",40,536870919]],["^15",[260,"^H",46,536870919]],["^15",[260,"^17",true,536870919]],["^15",[260,"^;","~u649a41af-3592-4966-a85b-edec2620ecab",536870919]],["^15",[261,"^Q","",536870919]],["^15",[261,"^O","^16",536870919]],["^15",[261,"^F",272,536870919]],["^15",[261,"^X",259,536870919]],["^15",[261,"^V",259,536870919]],["^15",[261,"^U",259,536870919]],["^15",[261,"^17",true,536870919]],["^15",[261,"^;","~u649a41af-c13f-4d47-8a88-804c5f7c5f7d",536870919]],["^15",[262,"^Q","If the [[Iterable]] is longer than the number of variables in the destructuring assignment, then the extra elements are simply ignored.\n\nSimilarly, if the Iterable is shorter than the number of variables, then unassigned variables are simply [[undefined]].\n\nWe can give a default value to variables too\n```js\nlet arr= [\"abc\",1];\nlet [a,b,c = \"yo\"]= arr; //ok, c will be yo since it is unassigned after destructure assignment\n```\nAnd just like normal default values in [[Function]]s, the default value can be a function too and it is called when the variable is unassigned.",536870919]],["^15",[262,"^O","^16",536870919]],["^15",[262,"^F",271,536870919]],["^15",[262,"^X",259,536870919]],["^15",[262,"^V",259,536870919]],["^15",[262,"^U",44,536870919]],["^15",[262,"^U",45,536870919]],["^15",[262,"^U",46,536870919]],["^15",[262,"^U",259,536870919]],["^15",[262,"^H",44,536870919]],["^15",[262,"^H",45,536870919]],["^15",[262,"^H",46,536870919]],["^15",[262,"^17",true,536870919]],["^15",[262,"^;","~u649a41af-62df-4613-b877-c1bbc1521515",536870919]],["^15",[263,"^Q","Works with raw [[Object]]s too.\nHowever, the destructuring requires the property names to be given. \nThat is,\n```js\nlet x= {\n \"a\":2,\n b:3,\n};\nlet {a,b} = x; //ok \n// we can also\nlet {x: a, y: b}= x; //Here the syntax is variable name: source name\n//and also add default values\nlet {a1: a= 5, a2: b = prompt(\"What's b ?\") }= x;\n//also with ...\nlet {...z}= x; //ok, z is not an Array but an Object.\nz[a]; //returns 2\n```\nHowever, there's 1 thing we can't do exactly like Array Destructuring, that is declaration and destructuring separately,\n```js\nlet x= {...};\nlet a;\nlet b;\n{a,b} = x; //error\n({a,b} = x); //ok\n```\nThis is because the syntax closely resembles a code block and for a code block it is invalid syntax, by using (...) we override that behavior.",536870919]],["^15",[263,"^O","^16",536870919]],["^15",[263,"^F",264,536870919]],["^15",[263,"^X",259,536870919]],["^15",[263,"^V",259,536870919]],["^15",[263,"^U",39,536870919]],["^15",[263,"^U",259,536870919]],["^15",[263,"^H",39,536870919]],["^15",[263,"^17",true,536870919]],["^15",[263,"^;","~u649a41af-619a-423b-8903-83618b0865d0",536870919]],["^15",[264,"^Q","The ``...`` [[Operator]] can pick up the rest of the elements and becomes an [[Array]] holding those elements.\nThat is,\n```js\nlet arr= [\"abc\",1,\"b\"];\nlet [a,...b]= arr;  //b[0] is 1 and b[1] is \"b\" now.\n```",536870919]],["^15",[264,"^O","^16",536870919]],["^15",[264,"^F",262,536870919]],["^15",[264,"^X",259,536870919]],["^15",[264,"^V",259,536870919]],["^15",[264,"^U",47,536870919]],["^15",[264,"^U",76,536870919]],["^15",[264,"^U",259,536870919]],["^15",[264,"^H",47,536870919]],["^15",[264,"^H",76,536870919]],["^15",[264,"^17",true,536870919]],["^15",[264,"^;","~u649a41af-7ddd-4599-963f-7a74cd99bca3",536870919]],["^15",[265,"^Q","",536870919]],["^15",[265,"^O","^16",536870919]],["^15",[265,"^F",270,536870919]],["^15",[265,"^X",259,536870919]],["^15",[265,"^V",259,536870919]],["^15",[265,"^U",259,536870919]],["^15",[265,"^17",true,536870919]],["^15",[265,"^;","~u649a41af-9776-4295-831a-4c63e779ae7e",536870919]],["^15",[266,"^Q","alias:: Destructuring Assignment\n\n",536870919]],["^15",[266,"^O","^16",536870919]],["^15",[266,"^1>",["^1;",[]],536870919]],["^15",[266,"^F",259,536870919]],["^15",[266,"^X",259,536870919]],["^15",[266,"^V",259,536870919]],["^15",[266,"^U",258,536870919]],["^15",[266,"^U",259,536870919]],["^15",[266,"^:",true,536870919]],["^15",[266,"^?",["^ ","^1:",["^1;",["Destructuring Assignment"]]],536870919]],["^15",[266,"^J",["^1:"],536870919]],["^15",[266,"^4",["^ ","^1:","Destructuring Assignment"],536870919]],["^15",[266,"^H",258,536870919]],["^15",[266,"^17",true,536870919]],["^15",[266,"^;","~u649a41af-af84-4262-90b7-58b887f2ad32",536870919]],["^15",[267,"^Q","[[Object]] Destructuring can also use Nested Destructuring.\nFor ex.:\n```js\nlet options = {\n  size: {\n    width: 100,\n    height: 200\n  },\n  items: [\"Cake\", \"Donut\"],\n  extra: true\n};\n\nlet {\n  size: { // put size here\n    width,\n    height\n  },\n  items: [item1, item2], // assign items here\n  title = \"Menu\" // not present in the object (default value is used)\n} = options;\n```",536870919]],["^15",[267,"^O","^16",536870919]],["^15",[267,"^F",263,536870919]],["^15",[267,"^X",259,536870919]],["^15",[267,"^V",259,536870919]],["^15",[267,"^U",39,536870919]],["^15",[267,"^U",259,536870919]],["^15",[267,"^H",39,536870919]],["^15",[267,"^17",true,536870919]],["^15",[267,"^;","~u649a41af-51e7-4eec-911c-e445a2552c98",536870919]],["^15",[268,"^Q","If we want to omit a value, we leave an empty ``,``\nFor ex.:\n```js\nlet arr= [\"abc\",1,2];\nlet [a,,b]= arr;// ok\n\n```",536870919]],["^15",[268,"^O","^16",536870919]],["^15",[268,"^F",269,536870919]],["^15",[268,"^X",259,536870919]],["^15",[268,"^V",259,536870919]],["^15",[268,"^U",259,536870919]],["^15",[268,"^17",true,536870919]],["^15",[268,"^;","~u649a41af-940f-466c-af57-5d515d83442e",536870919]],["^15",[269,"^Q","This syntax allows us to destructure [[Array]]s and get them into variables.\nFor ex.:\n```js\nlet arr= [\"abc\",1];\nlet [a,b]= arr;\n//works\n```",536870919]],["^15",[269,"^O","^16",536870919]],["^15",[269,"^F",266,536870919]],["^15",[269,"^X",259,536870919]],["^15",[269,"^V",259,536870919]],["^15",[269,"^U",47,536870919]],["^15",[269,"^U",259,536870919]],["^15",[269,"^H",47,536870919]],["^15",[269,"^17",true,536870919]],["^15",[269,"^;","~u649a41af-7db7-49d3-bb94-913dc6d28d4b",536870919]],["^15",[270,"^Q","",536870919]],["^15",[270,"^O","^16",536870919]],["^15",[270,"^F",261,536870919]],["^15",[270,"^X",259,536870919]],["^15",[270,"^V",259,536870919]],["^15",[270,"^U",259,536870919]],["^15",[270,"^17",true,536870919]],["^15",[270,"^;","~u649a41af-3e2e-403e-9526-aadfc84a1988",536870919]],["^15",[271,"^Q","Can be used to swap variables\n```js\nlet a= 2;\nlet b =\"A\";\n[a,b]= [b,a];\n```",536870919]],["^15",[271,"^O","^16",536870919]],["^15",[271,"^F",260,536870919]],["^15",[271,"^X",259,536870919]],["^15",[271,"^V",259,536870919]],["^15",[271,"^U",259,536870919]],["^15",[271,"^17",true,536870919]],["^15",[271,"^;","~u649a41af-314a-4790-b5c4-cbc60f780309",536870919]],["^15",[272,"^Q","We can also use [[Object]] Destructuring with [[Function]] parameters\n```js\nlet x = {title: 2, name : 3};\n\nfunction yo({title= \"IDK\", name= 2, age = 0}) {...}\n\nyo(x); //works\n\n//However, now yo(); would be an error, to have empty arg list we need to pass an empty object.\n \nyo({ }); //ok\n\n//Alternatively, we can set the default value of the Object itself and then we can call \n//a function like yo without any args\n\nfunction hoo({title = \"IDK\", age= 2} = { }) {...}\n\nhoo(); //ok\n\n\n```",536870919]],["^15",[272,"^O","^16",536870919]],["^15",[272,"^F",267,536870919]],["^15",[272,"^X",259,536870919]],["^15",[272,"^V",259,536870919]],["^15",[272,"^U",39,536870919]],["^15",[272,"^U",44,536870919]],["^15",[272,"^U",259,536870919]],["^15",[272,"^H",39,536870919]],["^15",[272,"^H",44,536870919]],["^15",[272,"^17",true,536870919]],["^15",[272,"^;","~u649a41af-3c17-4bdf-aa2a-21a684e57c1e",536870919]],["^15",[273,"^3","- On chrome and firefox, F12 toggles visiblity for the menu.\n- In the developer tools, we have the Sources menu which allows [[Debugging]] [[ECMAScript]] scripts used in a webpage. \n  ![image.png](../assets/image_1685462450744_0.png)\n- We can also use ``chrome://tracing`` to record website performance and see things like where GC occured etc.\n- For normal [[HTML]] Document, the DT shows the various properties in it.\n  For ex.:\n  ![image.png](../assets/image_1687275980756_0.png)\n  \n  Note: We can click an element, the currently selected element is put in a variable $0, with the previous one being $1 and so on. The reverse is also possible, using the function ``inspect(<node>)`` in the console shows which variables refer the given DOM node.\n-\n-",536870919]],["^15",[273,"^18",1687830959245,536870919]],["^15",[273,"^Z","pages/Developer tools.md",536870919]],["^15",[274,"^Q","On chrome and firefox, F12 toggles visiblity for the menu.",536870919]],["^15",[274,"^O","^16",536870919]],["^15",[274,"^F",229,536870919]],["^15",[274,"^X",229,536870919]],["^15",[274,"^V",229,536870919]],["^15",[274,"^U",229,536870919]],["^15",[274,"^17",true,536870919]],["^15",[274,"^;","~u649a41af-2ee4-493b-99a7-7e7883bfe0eb",536870919]],["^15",[275,"^Q","In the developer tools, we have the Sources menu which allows [[Debugging]] [[ECMAScript]] scripts used in a webpage. \n![image.png](../assets/image_1685462450744_0.png)",536870919]],["^15",[275,"^O","^16",536870919]],["^15",[275,"^F",274,536870919]],["^15",[275,"^X",229,536870919]],["^15",[275,"^V",229,536870919]],["^15",[275,"^U",24,536870919]],["^15",[275,"^U",229,536870919]],["^15",[275,"^U",255,536870919]],["^15",[275,"^H",24,536870919]],["^15",[275,"^H",255,536870919]],["^15",[275,"^17",true,536870919]],["^15",[275,"^;","~u649a41af-dea9-40a5-914b-314637583355",536870919]],["^15",[276,"^Q","We can also use ``chrome://tracing`` to record website performance and see things like where GC occured etc.",536870919]],["^15",[276,"^O","^16",536870919]],["^15",[276,"^F",275,536870919]],["^15",[276,"^X",229,536870919]],["^15",[276,"^V",229,536870919]],["^15",[276,"^U",229,536870919]],["^15",[276,"^17",true,536870919]],["^15",[276,"^;","~u649a41af-72fd-4d0e-b17d-e582dbc87b2c",536870919]],["^15",[277,"^Q","For normal [[HTML]] Document, the DT shows the various properties in it.\nFor ex.:\n![image.png](../assets/image_1687275980756_0.png)\n\nNote: We can click an element, the currently selected element is put in a variable $0, with the previous one being $1 and so on. The reverse is also possible, using the function ``inspect(<node>)`` in the console shows which variables refer the given DOM node.",536870919]],["^15",[277,"^O","^16",536870919]],["^15",[277,"^F",276,536870919]],["^15",[277,"^X",229,536870919]],["^15",[277,"^V",229,536870919]],["^15",[277,"^U",30,536870919]],["^15",[277,"^U",229,536870919]],["^15",[277,"^H",30,536870919]],["^15",[277,"^17",true,536870919]],["^15",[277,"^;","~u649a41af-71af-4e51-bc00-e3d9b18a78de",536870919]],["^15",[278,"^Q","",536870919]],["^15",[278,"^O","^16",536870919]],["^15",[278,"^F",277,536870919]],["^15",[278,"^X",229,536870919]],["^15",[278,"^V",229,536870919]],["^15",[278,"^U",229,536870919]],["^15",[278,"^17",true,536870919]],["^15",[278,"^;","~u649a41af-194a-4fce-ad52-c2289dd1f425",536870919]],["^15",[279,"^Q","",536870919]],["^15",[279,"^O","^16",536870919]],["^15",[279,"^F",278,536870919]],["^15",[279,"^X",229,536870919]],["^15",[279,"^V",229,536870919]],["^15",[279,"^U",229,536870919]],["^15",[279,"^17",true,536870919]],["^15",[279,"^;","~u649a41af-fc86-49e8-8c86-8ba9d7922a6b",536870919]],["^15",[280,"^3","alias:: JavaScript\n\n- Programs in [[JavaScript]] are called \"[[<script>]]s\", they can be written directly in webpages and almost all modern web browsers can execute them. All that is required to run [[JavaScript]] code is a JavaScript Engine, which is [V8](https://v8.dev/) in Chrome/Opera/Edge and Spidermonkey in Firefox.\n  \n  In browsers, the “script” is parsed then compiled into machine code and executed. It is\n  heavily optimized.\n  \n  It is a pretty *safe* language, as it doesn’t have low-level access. Still, its capabilities vary depending on the environment executing it, for browsers JS can manipulate the webpage, interact with web servers, get set cookies, remember *user data* etc. On servers (like in Node.js), it can do other things like File I/O etc.\n  That said, JS on the browser has many limitations imposed to enforce security, such as not being\n  able to see contents of another tab in the browser, no access to OS, strict browser managed access to peripherals, not being able to connect to other domains unless explicitly allowed by both domains, etc. These are not present in JS outside the scripts in webpages.\n  \n  Generally both Web browsers and Node.JS use V8, node simply provides a large runtime library that allows the V8 to do a lot of stuff on the server side.\n- JS files are saved with the extension ``.js``\n- Execution\n  For browsers, any .html file that uses a [[<script>]] tag with inline js or external js file as\n  source can execute a js file.\n  For server-side, or locally, we can use ``node <filename.js>`` to execute it using Node.js.\n  \n  Browsers have [[Developer tools]] which present various developer friendly tools to inspect a page's script and behaviors.\n- [[Compilation]]\n- Semicolons are optional but a good practice, otherwise line break is considered the end of a statement (called implicit semicolon and the feature called [[automatic semicolon insertion]]).\n  But a single line can have multiple statements with a semicolon.\n  \n  [[ASI]] is a bit more powerful and can understand if sometimes line breaks shouldn't be interpreted as semicolon/statement end\n  For ex.:\n  ```js\n  alert(3 +\n  1\n  + 2);\n  ```\n  So it is recommended use semicolons everywhere except with expressions like these.\n- Comments\n  Same as everywhere else,\n  ``//`` for single line\n  ``/* */`` for multi\n- ``use strict;``\n  Older JS standards (before ES5 in 2009) use now what's called the [[Old Mode]], but after it a non-breaking change was introduced called ``strict mode`` that complies with any new changes in the ECMA standard. This string at the top of a [[<script>]] or [[Function]] enables strict mode. When applied globally, it is applied to the whole script, and for function it only enables it for the function. There's no way to disable it if enabled for a script.\n  \n  \n  For ex.:\n  ```js\n  use strict;\n  \n  ```\n  Recommended to enable it always.\n  For console, when we need to use it we can just use \n  ```js\n  use strict; (Shift + Enter)\n  //...Rest of code\n  \n  //or if that doesn't work,\n  'use strict'; (Shift + Enter)\n  \n  //or if that doesn't work either, this ugly hack works\n  (function() {\n    'use strict';\n  \n    // ...your code here...\n  })()\n  ```\n- Variable\n  Use ``let`` to declare a mutable variable\n  ```js\n  let x;\n  //  or\n  let y=2; //with assignment\n  //or\n  let x1=\"ay\", yo=2; //multi declaration in single line\n  //or\n  let x2=2,\n       y1= \"yo\";\n  \n  ```\n  ``let`` prohibits redeclaration.\n  \n  Or [[var]] for the same, however [[var]] is an old way and declares variables quite differently. \n  \n  Variables can be named however as long as they aren't [[Reserved Words]], can use letters(unicode)/digits/'$'/'_' and mustn't begin with digits.\n  \n  [[Old Mode]] allows variable declaration without a let. This is why in console we can declare variables without using let.\n  \n  * Const\n     Non-mutable variables can be declared with const.\n    For ex.:\n  ```js\n  const X=2; //Immutable variable x\n  const Y; //can be assigned later, but only once\n  \n  ```\n  It is recommended to use all capitals for constants that are known prior to runtime, and normal camelCase for other variables. \n  \n  const on [[Object]] denies reassignment but the Object itself can mutate however, as const is applied to the variable (which stores the address of the Object) and the Object itself is free to mutate.\n  For ex.:\n  ```js\n  const x= {\n    name:2,\n  };\n  x[\"a\"]=2; //works\n  ```\n- Data Types\n  Dynamically typed, meaning variables do have types but they can change them at runtime.\n  For ex.:\n  \n  ```js\n  let x=\"Yo\"; //string\n  x=2;  //works, type is now int\n  \n  ```\n  There are 7 [[Primitives]] and then there is [[Object]]\n  \n  * [[Number]]\n  * [[String]]\n  * [[Boolean]]\n  * [[null]]\n  * [[BigInt]]\n  * [[undefined]]\n  * [[Symbol]]\n  \n  * [[Object]]\n- Other complex types also exist in JS:\n  Collection of values: [[Array]]\n  Object like Dictionary: [[Map]]\n  Collection of unique values: [[Set]]\n  [[Date]]\n  [[JSON]]\n  \n  \n  Weaker variants:\n  [[WeakMap]]\n  [[WeakSet]]\n-\n- [[typeOf]]\n- Interaction\n  \n  ``Alert``: Sends a message to the browser window and waits for the user to press \"OK\". Doesn't return anything.\n  For ex.:\n  ```js\n  alert(\"yae\");\n  ```\n  ``prompt``: Sends a message and presents an input field, along with an \"OK\" and \"Cancel\" button.\n  If user presses Ok then returns a string with the inputted value (empty string if nothing entered). If uses presses cancel or Esc then null is returned.\n  Syntax:\n  ``result = prompt(title, [default]);``\n  For ex.:\n  ```js\n  let x= prompt(\"yo ?\"); //Then we cancel\n  console.log(typeof x); //Prints \"null\"\n  ```\n  Also accepts an optional parameter, a default value to return if cancelled.\n  ```js\n  let x=prompt(\"Yo ?\", 2); //cancel  \n  console.log(x); //prints 2\n  ```\n  \n  ``confirm``: Sends a message and waits for \"Ok\" or \"Cancel\", returns true on the former and false for the latter.\n- [[Conversion]]\n- [[Operator]]\n- [[Comparison]]\n- [[Conditional]]\n- [[Loop]]\n- [[Function]]\n- [[Comments]]\n- [[Console]]\n- [[Testing]]\n- [[Transpiler]]\n- [[Polyfill]]\n- [[Garbage Collection]]\n- [[Destructuring]]\n- [[Global]] [[Object]]\n- [[Scheduling]]\n- [[Class]]\n- [[Asynchronous]]\n- [[Message Queue]]\n- [[Proxy]]\n- [[Eval]]\n- [[Currying]]\n- JS can run on any platform that can run the V8 engine or any JS engine, these platforms are called ``Host Environment``s , like Node.JS which provides functionality for creating and running servers using JS and [[Browser]]s which provide the [[window]] Object and some others to help JS interact and manipulate the [[DOM]], [[BOM]] and core JS functionality.\n- [[ArrayBuffer]]\n-",536885544]],["^15",[280,"^18",1687830959336,536870919]],["^15",[280,"^19","~m1714240064405",536885545]],["^15",[280,"^Z","pages/ECMAScript.md",536870919]],["^15",[281,"^5",458,536870919]],["^15",[281,"^K",1687830959676,536870919]],["^15",[281,"^[",457,536870919]],["^15",[281,"^@",false,536870919]],["^15",[281,"^Y","json",536870919]],["^15",[281,"^11","JSON",536870919]],["^15",[281,"^?",["^ ","^1:",["^1;",["JavaScript Object Notation"]]],536870919]],["^15",[281,"^4",["^ ","^1:","JavaScript Object Notation"],536870919]],["^15",[281,"^B",1687830959676,536870919]],["^15",[281,"^;","~u662fc702-3d02-4cec-bc6f-fa023189e7a1",536885544]],["^15",[282,"^K",1687830960179,536870919]],["^15",[282,"^[",483,536870919]],["^15",[282,"^@",false,536870919]],["^15",[282,"^Y","map",536870919]],["^15",[282,"^11","Map",536870919]],["^15",[282,"^B",1687830960179,536870919]],["^15",[282,"^;","~u662fc702-5b9e-4266-88cf-288d022e3cb5",536885544]],["^15",[283,"^K",1687830960145,536870919]],["^15",[283,"^[",659,536870919]],["^15",[283,"^@",false,536870919]],["^15",[283,"^Y","testing",536870919]],["^15",[283,"^11","Testing",536870919]],["^15",[283,"^B",1687830960145,536870919]],["^15",[283,"^;","~u662fc702-7eda-4fea-a4eb-e48d45b87d68",536885544]],["^15",[284,"^K",1687830960297,536870919]],["^15",[284,"^@",false,536870919]],["^15",[284,"^Y","old mode",536870919]],["^15",[284,"^11","Old Mode",536870919]],["^15",[284,"^B",1687830960297,536870919]],["^15",[284,"^;","~u662fc702-aa4e-431a-9b99-f5eb87766346",536885544]],["^15",[285,"^K",1687830959934,536870919]],["^15",[285,"^O","^16",536885044]],["^15",[285,"^@",false,536870919]],["^15",[285,"^Y","primitives",536870919]],["^15",[285,"^11","Primitives",536870919]],["^15",[285,"^B",1687830959934,536870919]],["^15",[285,"^;","~u662fc702-fde8-476c-a845-06eb56467105",536885544]],["^15",[286,"^K",1687830960342,536870919]],["^15",[286,"^@",false,536870919]],["^15",[286,"^Y","bom",536870919]],["^15",[286,"^11","BOM",536870919]],["^15",[286,"^B",1687830960342,536870919]],["^15",[286,"^;","~u662fc702-57e5-4831-bc9b-afc1a22283e9",536885544]],["^15",[287,"^K",1687830960331,536870919]],["^15",[287,"^[",722,536870919]],["^15",[287,"^@",false,536870919]],["^15",[287,"^Y","var",536870919]],["^15",[287,"^11","var",536870919]],["^15",[287,"^B",1687830960331,536870919]],["^15",[287,"^;","~u662fc702-c025-448d-a412-905f740455e2",536885544]],["^15",[288,"^K",1687830960047,536870919]],["^15",[288,"^[",612,536870919]],["^15",[288,"^@",false,536870919]],["^15",[288,"^Y","scheduling",536870919]],["^15",[288,"^11","Scheduling",536870919]],["^15",[288,"^B",1687887853829,536874758]],["^15",[288,"^;","~u662fc702-9540-4333-aea0-dfd4f0c22ba7",536885544]],["^15",[289,"^5",299,536870919]],["^15",[289,"^K",1687830960258,536870919]],["^15",[289,"^[",697,536870919]],["^15",[289,"^@",false,536870919]],["^15",[289,"^Y","automatic semicolon insertion",536870919]],["^15",[289,"^11","automatic semicolon insertion",536870919]],["^15",[289,"^?",["^ ","^1:",["^1;",["ASI"]]],536870919]],["^15",[289,"^4",["^ ","^1:","ASI"],536870919]],["^15",[289,"^B",1687830960258,536870919]],["^15",[289,"^;","~u662fc702-f1d4-4e4f-8cde-eee6c792ab66",536885544]],["^15",[290,"^K",1687830959316,536870919]],["^15",[290,"^@",false,536870919]],["^15",[290,"^Y","reserved words",536870919]],["^15",[290,"^11","Reserved Words",536870919]],["^15",[290,"^B",1687830959316,536870919]],["^15",[290,"^;","~u662fc702-7baa-4506-9c70-289bad43bb21",536885544]],["^15",[291,"^K",1687830959392,536870919]],["^15",[291,"^[",353,536870919]],["^15",[291,"^@",false,536870919]],["^15",[291,"^Y","eval",536870919]],["^15",[291,"^11","Eval",536870919]],["^15",[291,"^B",1687830959392,536870919]],["^15",[291,"^;","~u662fc702-6c83-4083-a61c-56ff7b0b8af9",536885544]],["^15",[292,"^K",1687830960179,536870919]],["^15",[292,"^[",621,536870919]],["^15",[292,"^@",false,536870919]],["^15",[292,"^Y","set",536870919]],["^15",[292,"^11","Set",536870919]],["^15",[292,"^B",1687830960179,536870919]],["^15",[292,"^;","~u662fc702-3f53-4e74-b049-2db6c7aae738",536885544]],["^15",[293,"^5",406,536870919]],["^15",[293,"^K",1687830960170,536870919]],["^15",[293,"^[",405,536870919]],["^15",[293,"^@",false,536870919]],["^15",[293,"^Y","garbage collection",536870919]],["^15",[293,"^11","Garbage Collection",536870919]],["^15",[293,"^?",["^ ","^1:",["^1;",["GC"]]],536870919]],["^15",[293,"^4",["^ ","^1:","GC"],536870919]],["^15",[293,"^B",1687830960170,536870919]],["^15",[293,"^;","~u662fc702-d3d2-4d7d-beaf-c39846ea8eb6",536885544]],["^15",[294,"^5",24,536870919]],["^15",[294,"^K",1687830959601,536870919]],["^15",[294,"^@",false,536870919]],["^15",[294,"^Y","javascript",536870919]],["^15",[294,"^11","Javascript",536885544]],["^15",[294,"^B",1687830959601,536870919]],["^15",[294,"^;","~u662fc702-4c71-4eb8-8ecf-0ab571d41442",536885544]],["^15",[295,"^K",1687830960179,536870919]],["^15",[295,"^[",670,536870919]],["^15",[295,"^@",false,536870919]],["^15",[295,"^Y","weakset",536870919]],["^15",[295,"^11","WeakSet",536870919]],["^15",[295,"^B",1687830960179,536870919]],["^15",[295,"^;","~u662fc702-de78-44c7-9dd8-080287a1eea6",536885544]],["^15",[296,"^K",1687830960342,536870919]],["^15",[296,"^[",423,536870919]],["^15",[296,"^@",false,536870919]],["^15",[296,"^Y","global",536870919]],["^15",[296,"^11","Global",536870919]],["^15",[296,"^B",1687830960342,536870919]],["^15",[296,"^;","~u662fc702-252f-4923-9725-3459ec956e45",536885544]],["^15",[297,"^K",1687830960180,536870919]],["^15",[297,"^[",665,536870919]],["^15",[297,"^@",false,536870919]],["^15",[297,"^Y","weakmap",536870919]],["^15",[297,"^11","WeakMap",536870919]],["^15",[297,"^B",1687830960180,536870919]],["^15",[297,"^;","~u662fc702-e377-413d-aede-7789a98c2ad1",536885544]],["^15",[298,"^5",602,536870919]],["^15",[298,"^K",1687830960031,536870919]],["^15",[298,"^[",601,536870919]],["^15",[298,"^@",false,536870919]],["^15",[298,"^Y","proxy",536870919]],["^15",[298,"^11","Proxy",536870919]],["^15",[298,"^?",["^ ","^1:",["^1;",["Proxy Object"]]],536870919]],["^15",[298,"^4",["^ ","^1:","Proxy Object"],536870919]],["^15",[298,"^B",1687830960031,536870919]],["^15",[298,"^;","~u662fc702-60e2-4956-87a8-434160610a3c",536885544]],["^15",[299,"^5",289,536870919]],["^15",[299,"^K",1687830960258,536870919]],["^15",[299,"^@",false,536870919]],["^15",[299,"^Y","asi",536870919]],["^15",[299,"^11","ASI",536870919]],["^15",[299,"^B",1687830960258,536870919]],["^15",[299,"^;","~u662fc702-e8a2-4671-b435-72a15686d8d2",536885544]],["^15",[300,"^K",1687830960151,536870919]],["^15",[300,"^[",662,536870919]],["^15",[300,"^@",false,536870919]],["^15",[300,"^Y","transpiler",536870919]],["^15",[300,"^11","Transpiler",536870919]],["^15",[300,"^B",1687830960151,536870919]],["^15",[300,"^;","~u662fc702-08af-4413-9cf4-b89a301f957d",536885544]],["^15",[301,"^Q","JS can run on any platform that can run the V8 engine or any JS engine, these platforms are called ``Host Environment``s , like Node.JS which provides functionality for creating and running servers using JS and [[Browser]]s which provide the [[window]] Object and some others to help JS interact and manipulate the [[DOM]], [[BOM]] and core JS functionality.",536870919]],["^15",[301,"^O","^16",536870919]],["^15",[301,"^F",337,536870919]],["^15",[301,"^X",24,536870919]],["^15",[301,"^V",24,536870919]],["^15",[301,"^U",24,536870919]],["^15",[301,"^U",33,536870919]],["^15",[301,"^U",114,536870919]],["^15",[301,"^U",209,536870919]],["^15",[301,"^U",286,536870919]],["^15",[301,"^H",33,536885544]],["^15",[301,"^H",114,536885544]],["^15",[301,"^H",209,536885544]],["^15",[301,"^H",286,536885544]],["^15",[301,"^17",true,536870919]],["^15",[301,"^;","~u649a41af-a7c8-4d28-854d-73a6f265a244",536870919]],["^15",[302,"^Q","[[Transpiler]]",536870919]],["^15",[302,"^O","^16",536870919]],["^15",[302,"^F",335,536870919]],["^15",[302,"^X",24,536870919]],["^15",[302,"^V",24,536870919]],["^15",[302,"^U",24,536870919]],["^15",[302,"^U",300,536870919]],["^15",[302,"^H",300,536885544]],["^15",[302,"^17",true,536870919]],["^15",[302,"^;","~u649a41af-a28d-4c0f-ba01-e0a1a69fa0cf",536870919]],["^15",[303,"^Q","[[Asynchronous]]",536870919]],["^15",[303,"^O","^16",536870919]],["^15",[303,"^F",312,536870919]],["^15",[303,"^X",24,536870919]],["^15",[303,"^V",24,536870919]],["^15",[303,"^U",24,536870919]],["^15",[303,"^U",83,536870919]],["^15",[303,"^H",83,536885544]],["^15",[303,"^17",true,536870919]],["^15",[303,"^;","~u649a41af-856d-434e-b9aa-f639329b6a40",536870919]],["^15",[304,"^Q","[[Comments]]",536870919]],["^15",[304,"^O","^16",536870919]],["^15",[304,"^F",326,536870919]],["^15",[304,"^X",24,536870919]],["^15",[304,"^V",24,536870919]],["^15",[304,"^U",24,536870919]],["^15",[304,"^U",168,536870919]],["^15",[304,"^H",168,536885544]],["^15",[304,"^17",true,536870919]],["^15",[304,"^;","~u649a41af-3dbd-4701-a7cf-b0c03f9de724",536870919]],["^15",[305,"^Q","[[Polyfill]]",536870919]],["^15",[305,"^O","^16",536870919]],["^15",[305,"^F",302,536870919]],["^15",[305,"^X",24,536870919]],["^15",[305,"^V",24,536870919]],["^15",[305,"^U",24,536870919]],["^15",[305,"^U",101,536870919]],["^15",[305,"^H",101,536885544]],["^15",[305,"^17",true,536870919]],["^15",[305,"^;","~u649a41af-cb4c-46c2-b9b0-313d1823eeb9",536870919]],["^15",[306,"^Q","Data Types\nDynamically typed, meaning variables do have types but they can change them at runtime.\nFor ex.:\n\n```js\nlet x=\"Yo\"; //string\nx=2;  //works, type is now int\n\n```\nThere are 7 [[Primitives]] and then there is [[Object]]\n\n* [[Number]]\n* [[String]]\n* [[Boolean]]\n* [[null]]\n* [[BigInt]]\n* [[undefined]]\n* [[Symbol]]\n\n* [[Object]]",536870919]],["^15",[306,"^O","^16",536870919]],["^15",[306,"^F",329,536870919]],["^15",[306,"^X",24,536870919]],["^15",[306,"^V",24,536870919]],["^15",[306,"^U",24,536870919]],["^15",[306,"^U",39,536870919]],["^15",[306,"^U",41,536870919]],["^15",[306,"^U",43,536870919]],["^15",[306,"^U",45,536870919]],["^15",[306,"^U",98,536870919]],["^15",[306,"^U",99,536870919]],["^15",[306,"^U",100,536870919]],["^15",[306,"^U",173,536870919]],["^15",[306,"^U",285,536870919]],["^15",[306,"^H",39,536885544]],["^15",[306,"^H",41,536885544]],["^15",[306,"^H",43,536885544]],["^15",[306,"^H",45,536885544]],["^15",[306,"^H",98,536885544]],["^15",[306,"^H",99,536885544]],["^15",[306,"^H",100,536885544]],["^15",[306,"^H",173,536885544]],["^15",[306,"^H",285,536885544]],["^15",[306,"^17",true,536870919]],["^15",[306,"^;","~u649a41af-7b05-4388-b591-31f3da601f4e",536870919]],["^15",[308,"^Q","[[Destructuring]]",536870919]],["^15",[308,"^O","^16",536870919]],["^15",[308,"^F",328,536870919]],["^15",[308,"^X",24,536870919]],["^15",[308,"^V",24,536870919]],["^15",[308,"^U",24,536870919]],["^15",[308,"^U",259,536870919]],["^15",[308,"^H",259,536885544]],["^15",[308,"^17",true,536870919]],["^15",[308,"^;","~u649a41af-e803-4fc6-914c-26ff81d08283",536870919]],["^15",[309,"^Q","Execution\nFor browsers, any .html file that uses a [[<script>]] tag with inline js or external js file as\nsource can execute a js file.\nFor server-side, or locally, we can use ``node <filename.js>`` to execute it using Node.js.\n\nBrowsers have [[Developer tools]] which present various developer friendly tools to inspect a page's script and behaviors.",536885127]],["^15",[309,"^O","^16",536870919]],["^15",[309,"^F",984,536885477]],["^15",[309,"^X",24,536870919]],["^15",[309,"^V",24,536870919]],["^15",[309,"^U",24,536870919]],["^15",[309,"^U",29,536885116]],["^15",[309,"^U",229,536870919]],["^15",[309,"^H",29,536885544]],["^15",[309,"^H",229,536885544]],["^15",[309,"^17",true,536870919]],["^15",[309,"^;","~u649a41af-f180-4f28-9195-3da9fd69ee09",536870919]],["^15",[310,"^Q","Comments\nSame as everywhere else,\n``//`` for single line\n``/* */`` for multi",536870919]],["^15",[310,"^O","^16",536870919]],["^15",[310,"^F",317,536870919]],["^15",[310,"^X",24,536870919]],["^15",[310,"^V",24,536870919]],["^15",[310,"^U",24,536870919]],["^15",[310,"^17",true,536870919]],["^15",[310,"^;","~u649a41af-ed35-4894-a90a-1fd38fed1e7f",536870919]],["^15",[311,"^Q","[[Global]] [[Object]]",536870919]],["^15",[311,"^O","^16",536870919]],["^15",[311,"^F",308,536870919]],["^15",[311,"^X",24,536870919]],["^15",[311,"^V",24,536870919]],["^15",[311,"^U",24,536870919]],["^15",[311,"^U",39,536870919]],["^15",[311,"^U",296,536870919]],["^15",[311,"^H",39,536885544]],["^15",[311,"^H",296,536885544]],["^15",[311,"^17",true,536870919]],["^15",[311,"^;","~u649a41af-50b3-4092-9107-d696225809e2",536870919]],["^15",[312,"^Q","[[Class]]",536870919]],["^15",[312,"^O","^16",536870919]],["^15",[312,"^F",330,536870919]],["^15",[312,"^X",24,536870919]],["^15",[312,"^V",24,536870919]],["^15",[312,"^U",24,536870919]],["^15",[312,"^U",75,536870919]],["^15",[312,"^H",75,536885544]],["^15",[312,"^17",true,536870919]],["^15",[312,"^;","~u649a41af-494b-4466-bc45-491b30ffe19e",536870919]],["^15",[313,"^Q","[[Eval]]",536870919]],["^15",[313,"^O","^16",536870919]],["^15",[313,"^F",327,536870919]],["^15",[313,"^X",24,536870919]],["^15",[313,"^V",24,536870919]],["^15",[313,"^U",24,536870919]],["^15",[313,"^U",291,536870919]],["^15",[313,"^H",291,536885544]],["^15",[313,"^17",true,536870919]],["^15",[313,"^;","~u649a41af-3b5a-473e-a143-e7fc0c5a895c",536870919]],["^15",[314,"^Q","[[Console]]",536870919]],["^15",[314,"^O","^16",536870919]],["^15",[314,"^F",304,536870919]],["^15",[314,"^X",24,536870919]],["^15",[314,"^V",24,536870919]],["^15",[314,"^U",24,536870919]],["^15",[314,"^U",191,536870919]],["^15",[314,"^H",191,536885544]],["^15",[314,"^17",true,536870919]],["^15",[314,"^;","~u649a41af-d3ee-41ff-bfed-31fac73fed38",536870919]],["^15",[316,"^Q","Interaction\n\n``Alert``: Sends a message to the browser window and waits for the user to press \"OK\". Doesn't return anything.\nFor ex.:\n```js\nalert(\"yae\");\n```\n``prompt``: Sends a message and presents an input field, along with an \"OK\" and \"Cancel\" button.\nIf user presses Ok then returns a string with the inputted value (empty string if nothing entered). If uses presses cancel or Esc then null is returned.\nSyntax:\n``result = prompt(title, [default]);``\nFor ex.:\n```js\nlet x= prompt(\"yo ?\"); //Then we cancel\nconsole.log(typeof x); //Prints \"null\"\n```\nAlso accepts an optional parameter, a default value to return if cancelled.\n```js\nlet x=prompt(\"Yo ?\", 2); //cancel  \nconsole.log(x); //prints 2\n```\n\n``confirm``: Sends a message and waits for \"Ok\" or \"Cancel\", returns true on the former and false for the latter.",536870919]],["^15",[316,"^O","^16",536870919]],["^15",[316,"^F",319,536870919]],["^15",[316,"^X",24,536870919]],["^15",[316,"^V",24,536870919]],["^15",[316,"^U",24,536870919]],["^15",[316,"^17",true,536870919]],["^15",[316,"^;","~u649a41af-de97-4805-8a5c-acc0e860dbb5",536870919]],["^15",[317,"^Q","Semicolons are optional but a good practice, otherwise line break is considered the end of a statement (called implicit semicolon and the feature called [[automatic semicolon insertion]]).\nBut a single line can have multiple statements with a semicolon.\n\n[[ASI]] is a bit more powerful and can understand if sometimes line breaks shouldn't be interpreted as semicolon/statement end\nFor ex.:\n```js\nalert(3 +\n1\n+ 2);\n```\nSo it is recommended use semicolons everywhere except with expressions like these.",536870919]],["^15",[317,"^O","^16",536870919]],["^15",[317,"^F",333,536870919]],["^15",[317,"^X",24,536870919]],["^15",[317,"^V",24,536870919]],["^15",[317,"^U",24,536870919]],["^15",[317,"^U",289,536870919]],["^15",[317,"^U",299,536870919]],["^15",[317,"^H",289,536885544]],["^15",[317,"^H",299,536885544]],["^15",[317,"^17",true,536870919]],["^15",[317,"^;","~u649a41af-58e9-4927-b269-25261004aeb8",536870919]],["^15",[318,"^Q","~``use strict;``\nOlder JS standards (before ES5 in 2009) use now what's called the [[Old Mode]], but after it a non-breaking change was introduced called ``strict mode`` that complies with any new changes in the ECMA standard. This string at the top of a [[<script>]] or [[Function]] enables strict mode. When applied globally, it is applied to the whole script, and for function it only enables it for the function. There's no way to disable it if enabled for a script.\n\n\nFor ex.:\n```js\nuse strict;\n\n```\nRecommended to enable it always.\nFor console, when we need to use it we can just use \n```js\nuse strict; (Shift + Enter)\n//...Rest of code\n\n//or if that doesn't work,\n'use strict'; (Shift + Enter)\n\n//or if that doesn't work either, this ugly hack works\n(function() {\n  'use strict';\n\n  // ...your code here...\n})()\n```",536885127]],["^15",[318,"^O","^16",536870919]],["^15",[318,"^F",310,536885041]],["^15",[318,"^X",24,536870919]],["^15",[318,"^V",24,536870919]],["^15",[318,"^U",24,536883669]],["^15",[318,"^U",29,536883669]],["^15",[318,"^U",44,536883669]],["^15",[318,"^U",284,536883669]],["^15",[318,"^H",29,536885544]],["^15",[318,"^H",44,536885544]],["^15",[318,"^H",284,536885544]],["^15",[318,"^17",true,536870919]],["^15",[318,"^;","~u649a41af-c0c1-42c0-b912-4aa25a39e392",536870919]],["^15",[319,"^Q","[[typeOf]]",536870919]],["^15",[319,"^O","^16",536870919]],["^15",[319,"^F",334,536870919]],["^15",[319,"^X",24,536870919]],["^15",[319,"^V",24,536870919]],["^15",[319,"^U",24,536870919]],["^15",[319,"^U",38,536870919]],["^15",[319,"^H",38,536885544]],["^15",[319,"^17",true,536870919]],["^15",[319,"^;","~u649a41af-0567-4ff9-a592-f8f37d2cd9e7",536870919]],["^15",[320,"^Q","alias:: JavaScript\n\n",536870919]],["^15",[320,"^O","^16",536870919]],["^15",[320,"^1>",["^1;",[]],536885544]],["^15",[320,"^F",24,536870919]],["^15",[320,"^X",24,536870919]],["^15",[320,"^V",24,536870919]],["^15",[320,"^U",24,536870919]],["^15",[320,"^U",294,536870919]],["^15",[320,"^:",true,536885544]],["^15",[320,"^?",["^ ","^1:",["^1;",["JavaScript"]]],536885544]],["^15",[320,"^J",["^1:"],536885544]],["^15",[320,"^4",["^ ","^1:","JavaScript"],536885544]],["^15",[320,"^H",294,536885544]],["^15",[320,"^17",true,536870919]],["^15",[320,"^;","~u649a41af-3b4b-4010-b039-c53410721ff7",536870919]],["^15",[321,"^Q","[[Conditional]]",536870919]],["^15",[321,"^O","^16",536870919]],["^15",[321,"^F",322,536870919]],["^15",[321,"^X",24,536870919]],["^15",[321,"^V",24,536870919]],["^15",[321,"^U",24,536870919]],["^15",[321,"^U",184,536870919]],["^15",[321,"^H",184,536885544]],["^15",[321,"^17",true,536870919]],["^15",[321,"^;","~u649a41af-fabb-4b43-9ed3-df85c11b1908",536870919]],["^15",[322,"^Q","[[Comparison]]",536870919]],["^15",[322,"^O","^16",536870919]],["^15",[322,"^F",336,536870919]],["^15",[322,"^X",24,536870919]],["^15",[322,"^V",24,536870919]],["^15",[322,"^U",24,536870919]],["^15",[322,"^U",171,536870919]],["^15",[322,"^H",171,536885544]],["^15",[322,"^17",true,536870919]],["^15",[322,"^;","~u649a41af-b50d-4f76-bba6-b35857b3c10c",536870919]],["^15",[324,"^Q","[[Conversion]]",536870919]],["^15",[324,"^O","^16",536870919]],["^15",[324,"^F",316,536870919]],["^15",[324,"^X",24,536870919]],["^15",[324,"^V",24,536870919]],["^15",[324,"^U",24,536870919]],["^15",[324,"^U",195,536870919]],["^15",[324,"^H",195,536885544]],["^15",[324,"^17",true,536870919]],["^15",[324,"^;","~u649a41af-e824-4651-bb46-70e5613084b5",536870919]],["^15",[325,"^Q","Other complex types also exist in JS:\nCollection of values: [[Array]]\nObject like Dictionary: [[Map]]\nCollection of unique values: [[Set]]\n[[Date]]\n[[JSON]]\n\n\nWeaker variants:\n[[WeakMap]]\n[[WeakSet]]",536870919]],["^15",[325,"^O","^16",536870919]],["^15",[325,"^F",306,536870919]],["^15",[325,"^X",24,536870919]],["^15",[325,"^V",24,536870919]],["^15",[325,"^U",24,536870919]],["^15",[325,"^U",47,536870919]],["^15",[325,"^U",146,536870919]],["^15",[325,"^U",281,536870919]],["^15",[325,"^U",282,536870919]],["^15",[325,"^U",292,536870919]],["^15",[325,"^U",295,536870919]],["^15",[325,"^U",297,536870919]],["^15",[325,"^H",47,536885544]],["^15",[325,"^H",146,536885544]],["^15",[325,"^H",281,536885544]],["^15",[325,"^H",282,536885544]],["^15",[325,"^H",292,536885544]],["^15",[325,"^H",295,536885544]],["^15",[325,"^H",297,536885544]],["^15",[325,"^17",true,536870919]],["^15",[325,"^;","~u649a41af-704a-4896-9828-58d5f9b466f1",536870919]],["^15",[326,"^Q","[[Function]]",536870919]],["^15",[326,"^O","^16",536870919]],["^15",[326,"^F",332,536870919]],["^15",[326,"^X",24,536870919]],["^15",[326,"^V",24,536870919]],["^15",[326,"^U",24,536870919]],["^15",[326,"^U",44,536870919]],["^15",[326,"^H",44,536885544]],["^15",[326,"^17",true,536870919]],["^15",[326,"^;","~u649a41af-ff3a-4431-a3d3-e2d9a2a92524",536870919]],["^15",[327,"^Q","[[Proxy]]",536870919]],["^15",[327,"^O","^16",536870919]],["^15",[327,"^F",331,536870919]],["^15",[327,"^X",24,536870919]],["^15",[327,"^V",24,536870919]],["^15",[327,"^U",24,536870919]],["^15",[327,"^U",298,536870919]],["^15",[327,"^H",298,536885544]],["^15",[327,"^17",true,536870919]],["^15",[327,"^;","~u649a41af-076c-4a54-bfd8-4d055245b4ba",536870919]],["^15",[328,"^Q","[[Garbage Collection]]",536870919]],["^15",[328,"^O","^16",536870919]],["^15",[328,"^F",305,536870919]],["^15",[328,"^X",24,536870919]],["^15",[328,"^V",24,536870919]],["^15",[328,"^U",24,536870919]],["^15",[328,"^U",293,536870919]],["^15",[328,"^H",293,536885544]],["^15",[328,"^17",true,536870919]],["^15",[328,"^;","~u649a41af-cf0f-4cd1-b09d-5c3d594b0799",536870919]],["^15",[329,"^Q","Variable\nUse ``let`` to declare a mutable variable\n```js\nlet x;\n//  or\nlet y=2; //with assignment\n//or\nlet x1=\"ay\", yo=2; //multi declaration in single line\n//or\nlet x2=2,\n     y1= \"yo\";\n\n```\n``let`` prohibits redeclaration.\n\nOr [[var]] for the same, however [[var]] is an old way and declares variables quite differently. \n\nVariables can be named however as long as they aren't [[Reserved Words]], can use letters(unicode)/digits/'$'/'_' and mustn't begin with digits.\n\n[[Old Mode]] allows variable declaration without a let. This is why in console we can declare variables without using let.\n\n* Const\n   Non-mutable variables can be declared with const.\n  For ex.:\n```js\nconst X=2; //Immutable variable x\nconst Y; //can be assigned later, but only once\n\n```\nIt is recommended to use all capitals for constants that are known prior to runtime, and normal camelCase for other variables. \n\nconst on [[Object]] denies reassignment but the Object itself can mutate however, as const is applied to the variable (which stores the address of the Object) and the Object itself is free to mutate.\nFor ex.:\n```js\nconst x= {\n  name:2,\n};\nx[\"a\"]=2; //works\n```",536870919]],["^15",[329,"^O","^16",536870919]],["^15",[329,"^F",318,536870919]],["^15",[329,"^X",24,536870919]],["^15",[329,"^V",24,536870919]],["^15",[329,"^U",24,536870919]],["^15",[329,"^U",39,536870919]],["^15",[329,"^U",284,536870919]],["^15",[329,"^U",287,536870919]],["^15",[329,"^U",290,536870919]],["^15",[329,"^H",39,536885544]],["^15",[329,"^H",284,536885544]],["^15",[329,"^H",287,536885544]],["^15",[329,"^H",290,536885544]],["^15",[329,"^17",true,536870919]],["^15",[329,"^;","~u649a41af-53b8-4842-a3f0-e9e43eda8108",536870919]],["^15",[330,"^Q","[[Scheduling]]",536870919]],["^15",[330,"^O","^16",536870919]],["^15",[330,"^F",311,536870919]],["^15",[330,"^X",24,536870919]],["^15",[330,"^V",24,536870919]],["^15",[330,"^U",24,536870919]],["^15",[330,"^U",288,536870919]],["^15",[330,"^H",288,536885544]],["^15",[330,"^17",true,536870919]],["^15",[330,"^;","~u649a41af-b515-4015-b946-ec3707c6a0f8",536870919]],["^15",[331,"^Q","[[Message Queue]]",536870919]],["^15",[331,"^O","^16",536870919]],["^15",[331,"^F",303,536870919]],["^15",[331,"^X",24,536870919]],["^15",[331,"^V",24,536870919]],["^15",[331,"^U",24,536870919]],["^15",[331,"^U",80,536870919]],["^15",[331,"^H",80,536885544]],["^15",[331,"^17",true,536870919]],["^15",[331,"^;","~u649a41af-cbe1-4944-9c20-84a2234ad837",536870919]],["^15",[332,"^Q","[[Loop]]",536870919]],["^15",[332,"^O","^16",536870919]],["^15",[332,"^F",321,536870919]],["^15",[332,"^X",24,536870919]],["^15",[332,"^V",24,536870919]],["^15",[332,"^U",24,536870919]],["^15",[332,"^U",40,536870919]],["^15",[332,"^H",40,536885544]],["^15",[332,"^17",true,536870919]],["^15",[332,"^;","~u649a41af-879c-4f5c-ad50-e7b8e3e85ce9",536870919]],["^15",[333,"^Q","[[Compilation]]",536870919]],["^15",[333,"^O","^16",536870919]],["^15",[333,"^F",309,536870919]],["^15",[333,"^X",24,536870919]],["^15",[333,"^V",24,536870919]],["^15",[333,"^U",24,536870919]],["^15",[333,"^U",181,536870919]],["^15",[333,"^H",181,536885544]],["^15",[333,"^17",true,536870919]],["^15",[333,"^;","~u649a41af-9531-4819-a59a-3498d71891e9",536870919]],["^15",[334,"^Q","",536870919]],["^15",[334,"^O","^16",536870919]],["^15",[334,"^F",325,536870919]],["^15",[334,"^X",24,536870919]],["^15",[334,"^V",24,536870919]],["^15",[334,"^U",24,536870919]],["^15",[334,"^17",true,536870919]],["^15",[334,"^;","~u649a41af-117a-4b8b-b209-98bd86876602",536870919]],["^15",[335,"^Q","[[Testing]]",536870919]],["^15",[335,"^O","^16",536870919]],["^15",[335,"^F",314,536870919]],["^15",[335,"^X",24,536870919]],["^15",[335,"^V",24,536870919]],["^15",[335,"^U",24,536870919]],["^15",[335,"^U",283,536870919]],["^15",[335,"^H",283,536885544]],["^15",[335,"^17",true,536870919]],["^15",[335,"^;","~u649a41af-92d7-4b43-a19e-ec0ea5270f24",536870919]],["^15",[336,"^Q","[[Operator]]",536870919]],["^15",[336,"^O","^16",536870919]],["^15",[336,"^F",324,536870919]],["^15",[336,"^X",24,536870919]],["^15",[336,"^V",24,536870919]],["^15",[336,"^U",24,536870919]],["^15",[336,"^U",76,536870919]],["^15",[336,"^H",76,536885544]],["^15",[336,"^17",true,536870919]],["^15",[336,"^;","~u649a41af-f780-4cda-9b36-3ce05d5d41cc",536870919]],["^15",[337,"^Q","[[Currying]]",536870919]],["^15",[337,"^O","^16",536870919]],["^15",[337,"^F",313,536870919]],["^15",[337,"^X",24,536870919]],["^15",[337,"^V",24,536870919]],["^15",[337,"^U",24,536870919]],["^15",[337,"^U",205,536870919]],["^15",[337,"^H",205,536885544]],["^15",[337,"^17",true,536870919]],["^15",[337,"^;","~u649a41af-23f5-4fee-bf6a-a411838adde6",536870919]],["^15",[338,"^3","- It is an [[Object]] that holds the [[Environment Record]], it's name is ``[[Environment]]``.\n-",536870919]],["^15",[338,"^18",1687830959347,536870919]],["^15",[338,"^Z","pages/Environment Object.md",536870919]],["^15",[339,"^K",1687830960032,536870919]],["^15",[339,"^[",338,536870919]],["^15",[339,"^@",false,536870919]],["^15",[339,"^Y","environment object",536870919]],["^15",[339,"^11","Environment Object",536870919]],["^15",[339,"^B",1687830960032,536870919]],["^15",[339,"^;","~u6616a43c-dd56-4304-82d2-f14669101521",536885133]],["^15",[340,"^K",1687830959714,536870919]],["^15",[340,"^@",false,536870919]],["^15",[340,"^Y","environment record",536870919]],["^15",[340,"^11","Environment Record",536870919]],["^15",[340,"^B",1687830959714,536870919]],["^15",[340,"^;","~u6616a43c-6975-4139-8ef9-9ef376a31257",536885133]],["^15",[341,"^Q","It is an [[Object]] that holds the [[Environment Record]], it's name is ``[[Environment]]``.",536870919]],["^15",[341,"^O","^16",536870919]],["^15",[341,"^F",339,536870919]],["^15",[341,"^X",339,536870919]],["^15",[341,"^V",339,536870919]],["^15",[341,"^U",39,536870919]],["^15",[341,"^U",339,536870919]],["^15",[341,"^U",340,536870919]],["^15",[341,"^H",39,536870919]],["^15",[341,"^H",340,536870919]],["^15",[341,"^17",true,536870919]],["^15",[341,"^;","~u649a41af-0fee-403f-bea6-8911ec9e28c3",536870919]],["^15",[342,"^Q","",536870919]],["^15",[342,"^O","^16",536870919]],["^15",[342,"^F",341,536870919]],["^15",[342,"^X",339,536870919]],["^15",[342,"^V",339,536870919]],["^15",[342,"^U",339,536870919]],["^15",[342,"^17",true,536870919]],["^15",[342,"^;","~u649a41af-f688-4f44-a445-0db23c27e80d",536870919]],["^15",[343,"^3","alias:: Exception\n\n- The same as in other languages like [[C++]].\n- ``try {...} catch (err) {...} finally {...}`` to try and catch errors.\n  However, in JS, syntax errors are a bit more nuanced. For ex.:\n  ```js\n  try{\n   a=2;\n  }\n  catch(err) {...}  //catches this error\n  ```\n  Works, but other syntactical errors fail the compilation itself. Generally, only the errors at runtime are meant to be handled by try catch.\n  \n  * It is synchronous, so\n  ```js\n  try {\n  setTimeout(function(){\n   ...\n  },100);\n  }\n  catch(err) {} //won't catch errors from inside setTimeout\n  ```\n  If the error doesn't occur whilst a try block is being executed then it is not caught in JS. So for places like these, try catch must be in the same execution context.\n  * ``catch(...)`` can omit ``(...)``.\n  * ``finally`` is **always** ran. \n  For ex.:\n  ```js\n  try{\n   return;\n  }\n  catch {...}\n  finally{ console.log(\"yo\")}; //will print yo\n  ```\n  * ``try {...} finally {...}`` is allowed in JS too.\n-\n- The error [[Object]] has 3 properties, ``name``, ``message`` and ``stack``.\n  It is thrown using the ``throw`` keyword. JS also provides built-in Error Objects.\n  For ex.:\n  ```js\n  let x= {\n   name: \"ayo\",\n  };\n  try{\n   throw x; \n   //or throw new Error(\"ayo\"), or throw new SyntaxError(\"ayo\") etc.\n  } catch (err) {\n   console.log(err.name); //prints ayo\n  }\n  ```\n  For built-in error Objects, the name is the Object's Ctor name, and message is the provided string.\n  \n  We can check if a given error is a certain type with \n  ``if (err instanceOf ReferenceError){...}`` and the like.\n  \n  * Rethrowing is allowed in JS.\n  * ``throw`` throws any given data type, be it [[Object]], [[Number]] etc.\n- Global Error Handling\n  In browsers, the [[window]] Object provides a global error event handler ``.onerror``and in Node, ``process.on(\"<exception type>\")`` provides global error event handler per error type.\n  For ex.:\n  ```js\n  window.onerror= function(message, url, line, col, err) {...}\n  ```\n  \n  External error-handling utilities make use of these handlers and set them to custom values. So when we insert a JS [[<script>]] URL from one of these services, they assign a custom value to these methods and then provide the details by sending errors to their [[API]]s.\n  For ex.: [muscula](https://www.muscula.com/)  and [errorception](https://errorception.com/)\n- ``unhandledrejection`` [[Browser]] [[Browser Event]]\n  Can be caught with\n  ```js\n  window.addEventListener('unhandledrejection', function(event) {\n    // the event object has two special properties:\n    alert(event.promise); // [object Promise] - the promise that generated the error\n    alert(event.reason); // Error: Whoops! - the unhandled error object\n  });\n  \n  ```",536870919]],["^15",[343,"^18",1687830959381,536870919]],["^15",[343,"^Z","pages/Error.md",536870919]],["^15",[344,"^5",77,536870919]],["^15",[344,"^K",1687830959379,536870919]],["^15",[344,"^@",false,536870919]],["^15",[344,"^Y","exception",536870919]],["^15",[344,"^11","Exception",536870919]],["^15",[344,"^B",1687830959379,536870919]],["^15",[344,"^;","~u649a41af-5149-469d-8331-0de50a91238e",536870919]],["^15",[345,"^K",1687830959381,536870919]],["^15",[345,"^@",false,536870919]],["^15",[345,"^Y","api",536870919]],["^15",[345,"^11","API",536870919]],["^15",[345,"^B",1687830959381,536870919]],["^15",[345,"^;","~u649a41af-eae1-419c-926e-669c59d73af1",536870919]],["^15",[346,"^Q","alias:: Exception\n\n",536870919]],["^15",[346,"^O","^16",536870919]],["^15",[346,"^1>",["^1;",[]],536870919]],["^15",[346,"^F",77,536870919]],["^15",[346,"^X",77,536870919]],["^15",[346,"^V",77,536870919]],["^15",[346,"^U",77,536870919]],["^15",[346,"^U",344,536870919]],["^15",[346,"^:",true,536870919]],["^15",[346,"^?",["^ ","^1:",["^1;",["Exception"]]],536870919]],["^15",[346,"^J",["^1:"],536870919]],["^15",[346,"^4",["^ ","^1:","Exception"],536870919]],["^15",[346,"^H",344,536870919]],["^15",[346,"^17",true,536870919]],["^15",[346,"^;","~u649a41af-21e4-474f-b311-cbbe17dc53af",536870919]],["^15",[347,"^Q","The same as in other languages like [[C++]].",536870919]],["^15",[347,"^O","^16",536870919]],["^15",[347,"^F",346,536870919]],["^15",[347,"^X",77,536870919]],["^15",[347,"^V",77,536870919]],["^15",[347,"^U",42,536870919]],["^15",[347,"^U",77,536870919]],["^15",[347,"^H",42,536870919]],["^15",[347,"^17",true,536870919]],["^15",[347,"^;","~u649a41af-25e7-4232-8aa5-7cecd8a8e5a6",536870919]],["^15",[348,"^Q","~``try {...} catch (err) {...} finally {...}`` to try and catch errors.\nHowever, in JS, syntax errors are a bit more nuanced. For ex.:\n```js\ntry{\n a=2;\n}\ncatch(err) {...}  //catches this error\n```\nWorks, but other syntactical errors fail the compilation itself. Generally, only the errors at runtime are meant to be handled by try catch.\n\n* It is synchronous, so\n```js\ntry {\nsetTimeout(function(){\n ...\n},100);\n}\ncatch(err) {} //won't catch errors from inside setTimeout\n```\nIf the error doesn't occur whilst a try block is being executed then it is not caught in JS. So for places like these, try catch must be in the same execution context.\n* ``catch(...)`` can omit ``(...)``.\n* ``finally`` is **always** ran. \nFor ex.:\n```js\ntry{\n return;\n}\ncatch {...}\nfinally{ console.log(\"yo\")}; //will print yo\n```\n* ``try {...} finally {...}`` is allowed in JS too.",536870919]],["^15",[348,"^O","^16",536870919]],["^15",[348,"^F",347,536870919]],["^15",[348,"^X",77,536870919]],["^15",[348,"^V",77,536870919]],["^15",[348,"^U",77,536870919]],["^15",[348,"^17",true,536870919]],["^15",[348,"^;","~u649a41af-56fd-4808-84a8-2d7ad7ad39f3",536870919]],["^15",[349,"^Q","",536870919]],["^15",[349,"^O","^16",536870919]],["^15",[349,"^F",348,536870919]],["^15",[349,"^X",77,536870919]],["^15",[349,"^V",77,536870919]],["^15",[349,"^U",77,536870919]],["^15",[349,"^17",true,536870919]],["^15",[349,"^;","~u649a41af-7392-45d6-9440-b5faaed31392",536870919]],["^15",[350,"^Q","The error [[Object]] has 3 properties, ``name``, ``message`` and ``stack``.\nIt is thrown using the ``throw`` keyword. JS also provides built-in Error Objects.\nFor ex.:\n```js\nlet x= {\n name: \"ayo\",\n};\ntry{\n throw x; \n //or throw new Error(\"ayo\"), or throw new SyntaxError(\"ayo\") etc.\n} catch (err) {\n console.log(err.name); //prints ayo\n}\n```\nFor built-in error Objects, the name is the Object's Ctor name, and message is the provided string.\n\nWe can check if a given error is a certain type with \n``if (err instanceOf ReferenceError){...}`` and the like.\n\n* Rethrowing is allowed in JS.\n* ``throw`` throws any given data type, be it [[Object]], [[Number]] etc.",536870919]],["^15",[350,"^O","^16",536870919]],["^15",[350,"^F",349,536870919]],["^15",[350,"^X",77,536870919]],["^15",[350,"^V",77,536870919]],["^15",[350,"^U",39,536870919]],["^15",[350,"^U",77,536870919]],["^15",[350,"^U",100,536870919]],["^15",[350,"^H",39,536870919]],["^15",[350,"^H",100,536870919]],["^15",[350,"^17",true,536870919]],["^15",[350,"^;","~u649a41af-6249-4fde-9d27-91b62c593369",536870919]],["^15",[351,"^Q","Global Error Handling\nIn browsers, the [[window]] Object provides a global error event handler ``.onerror``and in Node, ``process.on(\"<exception type>\")`` provides global error event handler per error type.\nFor ex.:\n```js\nwindow.onerror= function(message, url, line, col, err) {...}\n```\n\nExternal error-handling utilities make use of these handlers and set them to custom values. So when we insert a JS [[<script>]] URL from one of these services, they assign a custom value to these methods and then provide the details by sending errors to their [[API]]s.\nFor ex.: [muscula](https://www.muscula.com/)  and [errorception](https://errorception.com/)",536870919]],["^15",[351,"^O","^16",536870919]],["^15",[351,"^F",350,536870919]],["^15",[351,"^X",77,536870919]],["^15",[351,"^V",77,536870919]],["^15",[351,"^U",29,536870919]],["^15",[351,"^U",77,536870919]],["^15",[351,"^U",209,536870919]],["^15",[351,"^U",345,536870919]],["^15",[351,"^H",29,536870919]],["^15",[351,"^H",209,536870919]],["^15",[351,"^H",345,536870919]],["^15",[351,"^17",true,536870919]],["^15",[351,"^;","~u649a41af-17dc-4106-84da-06c4dfcbf42c",536870919]],["^15",[352,"^Q","~``unhandledrejection`` [[Browser]] [[Browser Event]]\nCan be caught with\n```js\nwindow.addEventListener('unhandledrejection', function(event) {\n  // the event object has two special properties:\n  alert(event.promise); // [object Promise] - the promise that generated the error\n  alert(event.reason); // Error: Whoops! - the unhandled error object\n});\n\n```",536870919]],["^15",[352,"^O","^16",536870919]],["^15",[352,"^F",351,536870919]],["^15",[352,"^X",77,536870919]],["^15",[352,"^V",77,536870919]],["^15",[352,"^U",33,536870919]],["^15",[352,"^U",73,536870919]],["^15",[352,"^U",77,536870919]],["^15",[352,"^H",33,536870919]],["^15",[352,"^H",73,536870919]],["^15",[352,"^17",true,536870919]],["^15",[352,"^;","~u649a41af-ccd6-4498-91b7-7d164f51f5d7",536870919]],["^15",[353,"^3","- This special [[Function]] takes a [[String]], parses it as [[ECMAScript]] and executes the code in the string as JS for the current [[Scope]]/[[Lexical Environment]]. It can also return value, which is value of the parsed code.\n  For ex.:\n  ```js\n  let x =1;\n  let y= eval(\"x+1\");\n  console.log(y); //prints 2\n  \n  eval(\"console.log(`${x} says hello`)\"); //prints 1 says hello\n  eval(\"let z= 1; console.log(z+x);\");//prints 2\n  ```\n  To have a multi-line eval we can use ``;``.\n  \n  In [[Old Mode]] it can create, read and update the variables for the Scope. However in ``strict mode`` it can only read and update variables, it can create and use variables inside but they are not created for the surrounding [[Lexical Environment]]. This is because in ``strict mode`` it has its own [[Lexical Environment]], that is, it has its own Scope so its like a block.\n- Unrecommended to use it, it even harms [[Minifier]] as if it references variables they can't be minified. \n  Still if it has to be used, when variables don't need to be accessed, better to use ``window.eval(...)`` in [[Browser]]s. And if variables have to be used, use ``new Function(...)`` [[new]] [[Function]]  instead as it also works similarly.",536870919]],["^15",[353,"^18",1687830959394,536870919]],["^15",[353,"^Z","pages/Eval.md",536870919]],["^15",[354,"^K",1687830959780,536870919]],["^15",[354,"^[",497,536870919]],["^15",[354,"^@",false,536870919]],["^15",[354,"^Y","minifier",536870919]],["^15",[354,"^11","Minifier",536870919]],["^15",[354,"^B",1687830959780,536870919]],["^15",[354,"^;","~u6616a43b-2c0e-455b-9b16-30c1baba38c4",536885130]],["^15",[355,"^K",1687830960056,536870919]],["^15",[355,"^[",466,536870919]],["^15",[355,"^@",false,536870919]],["^15",[355,"^Y","lexical environment",536870919]],["^15",[355,"^11","Lexical Environment",536870919]],["^15",[355,"^B",1687830960056,536870919]],["^15",[355,"^;","~u6616a43c-020d-41b8-9c01-9ddc182301c2",536885133]],["^15",[356,"^Q","This special [[Function]] takes a [[String]], parses it as [[ECMAScript]] and executes the code in the string as JS for the current [[Scope]]/[[Lexical Environment]]. It can also return value, which is value of the parsed code.\nFor ex.:\n```js\nlet x =1;\nlet y= eval(\"x+1\");\nconsole.log(y); //prints 2\n\neval(\"console.log(`${x} says hello`)\"); //prints 1 says hello\neval(\"let z= 1; console.log(z+x);\");//prints 2\n```\nTo have a multi-line eval we can use ``;``.\n\nIn [[Old Mode]] it can create, read and update the variables for the Scope. However in ``strict mode`` it can only read and update variables, it can create and use variables inside but they are not created for the surrounding [[Lexical Environment]]. This is because in ``strict mode`` it has its own [[Lexical Environment]], that is, it has its own Scope so its like a block.",536870919]],["^15",[356,"^O","^16",536870919]],["^15",[356,"^F",291,536870919]],["^15",[356,"^X",291,536870919]],["^15",[356,"^V",291,536870919]],["^15",[356,"^U",24,536870919]],["^15",[356,"^U",41,536870919]],["^15",[356,"^U",44,536870919]],["^15",[356,"^U",82,536870919]],["^15",[356,"^U",284,536870919]],["^15",[356,"^U",291,536870919]],["^15",[356,"^U",355,536870919]],["^15",[356,"^H",24,536870919]],["^15",[356,"^H",41,536870919]],["^15",[356,"^H",44,536870919]],["^15",[356,"^H",82,536870919]],["^15",[356,"^H",284,536870919]],["^15",[356,"^H",355,536870919]],["^15",[356,"^17",true,536870919]],["^15",[356,"^;","~u649a41af-699d-4cbf-8d64-2789161dd27d",536870919]],["^15",[357,"^Q","Unrecommended to use it, it even harms [[Minifier]] as if it references variables they can't be minified. \nStill if it has to be used, when variables don't need to be accessed, better to use ``window.eval(...)`` in [[Browser]]s. And if variables have to be used, use ``new Function(...)`` [[new]] [[Function]]  instead as it also works similarly.",536870919]],["^15",[357,"^O","^16",536870919]],["^15",[357,"^F",356,536870919]],["^15",[357,"^X",291,536870919]],["^15",[357,"^V",291,536870919]],["^15",[357,"^U",33,536870919]],["^15",[357,"^U",44,536870919]],["^15",[357,"^U",145,536870919]],["^15",[357,"^U",291,536870919]],["^15",[357,"^U",354,536870919]],["^15",[357,"^H",33,536870919]],["^15",[357,"^H",44,536870919]],["^15",[357,"^H",145,536870919]],["^15",[357,"^H",354,536870919]],["^15",[357,"^17",true,536870919]],["^15",[357,"^;","~u649a41af-8282-4455-8001-6ad70ec23758",536870919]],["^15",[358,"^3","- It is an environment or rather a broad concept that refers to the collection of items JS engine creates when a [[Function]] is called. It includes other components such as the [[Variable Environment]], [[Lexical Environment]] and the [[this]] binding.\n-",536870919]],["^15",[358,"^18",1687830959404,536870919]],["^15",[358,"^Z","pages/Execution Context.md",536870919]],["^15",[359,"^K",1687830959494,536870919]],["^15",[359,"^[",358,536870919]],["^15",[359,"^@",false,536870919]],["^15",[359,"^Y","execution context",536870919]],["^15",[359,"^11","Execution Context",536870919]],["^15",[359,"^B",1687830959494,536870919]],["^15",[359,"^;","~u6616a43b-7783-48b2-a525-8e00beba2681",536885130]],["^15",[360,"^K",1687830959403,536870919]],["^15",[360,"^@",false,536870919]],["^15",[360,"^Y","variable environment",536870919]],["^15",[360,"^11","Variable Environment",536870919]],["^15",[360,"^B",1687830959403,536870919]],["^15",[360,"^;","~u649a41af-1e49-47ad-b7b1-9276df2e68d7",536870919]],["^15",[361,"^Q","It is an environment or rather a broad concept that refers to the collection of items JS engine creates when a [[Function]] is called. It includes other components such as the [[Variable Environment]], [[Lexical Environment]] and the [[this]] binding.",536870919]],["^15",[361,"^O","^16",536870919]],["^15",[361,"^F",359,536870919]],["^15",[361,"^X",359,536870919]],["^15",[361,"^V",359,536870919]],["^15",[361,"^U",44,536870919]],["^15",[361,"^U",144,536870919]],["^15",[361,"^U",355,536870919]],["^15",[361,"^U",359,536870919]],["^15",[361,"^U",360,536870919]],["^15",[361,"^H",44,536870919]],["^15",[361,"^H",144,536870919]],["^15",[361,"^H",355,536870919]],["^15",[361,"^H",360,536870919]],["^15",[361,"^17",true,536870919]],["^15",[361,"^;","~u649a41af-51d9-45b0-a8b5-f86d8d709073",536870919]],["^15",[362,"^Q","",536870919]],["^15",[362,"^O","^16",536870919]],["^15",[362,"^F",361,536870919]],["^15",[362,"^X",359,536870919]],["^15",[362,"^V",359,536870919]],["^15",[362,"^U",359,536870919]],["^15",[362,"^17",true,536870919]],["^15",[362,"^;","~u649a41af-1d0e-425d-9620-dc570900973e",536870919]],["^15",[363,"^3","filters:: {\"generator function\" true}\n\n- To create one, \n  ``function <name>(<param 1>, <param 2>...) {...}``\n  If we have a function ``xyz`` we can call it with ``xyz();``\n- Just like other languages, [[ECMAScript]] also has [[Scope]]s, so variables declared inside Functions are only visible inside the function's scope. They can use/modify variables from outer scope unless they are [[Shadowed]].\n- Parameters don't need to have any type and can also be omitted at call-site.\n  For ex.:\n  ```js\n  function xyz(x,y= yo(), z=\"na\", p) {\n  ...\n  \n  }\n  //can be called with\n  xyz();\n  xyz(\"yo\");\n  xyz(\"yooo\",\"yo\",\"a\",\"b\",\"c\"); \n  xyz(\"x\", undefined);\n  //etc.\n  ```\n  Here y and z are ``default`` parameters as when they are provided no value or undefined (strict equality) then the given default value is evaluated and assigned.\n  \n  This is also to say, in JS functions can receive any number of args despite their parameters, if there are more args than parameters then extra args are ignored, if there are less args than parameters then the unassigned parameters are [[undefined]]. \n  \n  And this is also to say, functions in JS are uniquely identified by just their names. Which is to say there is no function overloading in JS, as there can be only 1 function with a given name, if there's more, one of them has the other [[Shadowed]]\n  For ex.:\n  ```js\n  function yo(a) {\n    console.log(\"1\");\n  }\n  \n  function yo() {\n    console.log(\"2\");\n  }\n  \n  let x=  {\n      yo(){\n          console.log(\"1\");\n      },\n      yo(){\n          console.log(\"2\");\n      }\n  };\n  \n  class X{\n      yo(){\n          console.log(\"1\");\n      }\n      yo(){\n          console.log(\"2\");\n      }\n  }\n  yo(); //prints 2\n  x.yo(); //also prints 2\n  \n  let obj= new X();\n  obj.yo(); //also prints 2\n  ```\n  The same is true in [[Class]]es and [[Object]]s.\n-\n- We can check if a parameter is provided a value with the [[Nullish-Coalescing Operator]] or the || or explicit check for undefined.\n  ```js\n  function xyz(x) {\n  if(x===undefined) x=2;\n  }\n  \n  ```\n- [[Return]] keyword returns a value, just like other languages. However since there the types are dynamic, there is no change in the function syntax.\n  For ex.:\n  ```js\n  function x(){\n    return 2;\n  }\n  ```\n  \n  If a function doesn't return anything, it returns undefined.\n  The expression to be evaluated at return or the value to be returned must start on the same line as the return as [[ASI]] assumes semicolon after an empty return.\n-\n- Function Expression\n  In [[ECMAScript]] a function is just a value to be evaluated, this is why it can also be assigned to variables.\n  For ex.:\n  ```js\n  let x= function() {\n    ...\n  }; //Notice the semicolon\n  //called with \n  x();\n  ```\n  Here ``function(){...}`` is a Function Expression. Just like a normal function, if it returns a value, that will be returned from ``x()`` otherwise undefined will be returned.\n  \n  The semicolon is because the Function Expression is still a value being assigned, and just like other values being assigned, it indicates the end of value.\n- Rest arguments\n  Using the ``...`` spread [[Operator]] on a parameter we can convert incoming args to elements in an [[Array]] .\n  For ex.:\n  ```js\n  function yo(a,...b) {\n   //use b as an array\n  }\n  yo(1,2,3,3,4); //ok, so b[0] will be 2, b[1] will be 3 and so on.\n  ```\n  \n  The rest parameter must be at the end of parameter definition in a function.\n- Array-like special Object ``arguments`` \n  Every function (except arrow function) has this [[Object]] which has **all** the args of a function.\n  For ex.:\n  ```js\n  function yo (a) {\n   console.log(arguments[0]); \n   console.log(arguments[1]); \n   console.log(arguments[2]); \n  }\n  yo(1,2); //prints 1 2 undefined\n  ```\n  Unlike the rest parameter, this Object captures all the args. It is [[Iterable]] and uses array-like syntax for accessing values but it is not an [[Array]] and hence doesn't support the array methods.\n  The arrow function doesn't have this Object and if we use it inside it, it access the ``arguments`` of the parent function.\n- The ``...`` spread [[Operator]] can also be used to expand an [[Iterable]] into individual args.\n  For ex.:\n  ```js\n  let x = [1,2,5,1,2];\n  console.log(Math.max(...x)); // unpacks x and passes all elements of x to .max(...)\n  ```\n  \n  Similarly, it can also be used to copy an Object.\n  ```js\n  let x = { a: 2, b:\"yo\" };\n  let y= { ...x }; //Spread the list of properties and copy them into this empty object with their values.\n  x[\"a\"]; //prints 2;\n  x==y; //false\n  ```\n-\n-\n- Function Declarations can be called before they are declared in their own scope, Function Expression's can't.\n  For ex.:\n  ```js\n  function xyz(){\n    pp();\n    function pp() {\n      console.log(\"yoo\");\n    }\n  }\n  \n  xyz();\n  ```\n  works and prints \"yoo\". But if ``pp`` was assigned to a variable, it would have needed to be called after declaration of the variable. \n  This is because [[JavaScript]] Engine creates the function declarations before executing the code in an [[Initialization Stage]].\n- Functions in [[JavaScript]] allow nesting. However they are only visible in their respective [[Scope]]s and the ones below in strict mode.\n- If we call a function without evaluating it, it returns the function body.\n  For ex.:\n  ```js \n  function sayHi() {\n    alert( \"Hello\" );\n  }\n  \n  alert( sayHi ); //prints function sayHi() {\n                          // alert( \"Hello\" );\n                          // }\n  ```\n  ``alert(...)`` gets the function body converted to [[String]] and prints that. \n  This also allows us to assign the function to other variables.\n- Callback Function\n  A function passed as a parameter to another function.\n  For ex.:\n  ```js \n  function x(p) {p();} //Here p is a callback function\n  \n  ```\n- Arrow Function\n  These functions are an even simpler way to create Function Expressions.\n  ```js\n  let x= () => {\n    return 2;\n  };\n  let y = () => 2;\n  \n  console.log(x());\n  console.log(y());\n  ```\n- Constructor Function\n  This function can create [[Object]]s at runtime.\n  We use [[new]] [[Operator]] and [[this]] to do so.\n  For ex.:\n  ```js\n  function Yo(name) {\n   this.name = name\n   this.age = 2;\n   this.hi = function() {...};\n  }\n  \n  let x= new Yo(\"Haa\");\n   x.hi(); //works\n  ```\n  Returns ``this`` [[Object]] instead of [[undefined]] implicitly.\n- Ctor functions should be PascalCase by convention. \n  new keyword here creates a new empty Object and passes it to Yo(), which then uses ``this`` to modify it. Then the value of ``this`` is returned implicitly.\n  \n  Arrow Functions can't be used with Ctor Fns.\n- The main purpose of Ctor Fns is reusability.\n  However, there's a one-off version as well.\n  For ex.:\n  ```js\n  let x = new Function() {\n    this.name = \"yo\";\n  };\n  ```\n  Here [[new]] does the same as earlier, however, this function is immediately called and evaluated for the variable. The result is that x contains an Object returned from [[this]].  And this Function can't be called again. \n  The purpose of this Ctor Fn is simply to offer encapsulation.\n- Return from Ctor Fn\n  If a Ctor fn returns an Object, that is returned instead of this.\n  For any other value, the value is ignored and this is returned.\n  For ex.:\n  ```js\n  function BigUser() {\n    this.name = \"John\";\n    return { name: \"Godzilla\" };  // <-- returns this object\n  }\n  alert( new BigUser().name );  // Godzilla, got that object\n  ```\n- Recursion works just like any other language. Max safe recursion depth is 10000, and maybe more depending on the engine and if it supports ``Tail-Call Optimization``.\n  \n  In JS, each function call is associated with an [[Execution Context]] which is stored in an [[Execution Context Stack]] and this is the stack that tracks the program's flow.\n- JS supports Nested Functions.\n- ``IIFE``: Immediately Invoked Function Expressions\n  That is, this syntax allows us to declare a function expression and immediately execute it. \n  For ex.:\n  ```js\n  (function() {\n   ...\n  }\n  )();\n  \n  // Ways to create IIFE\n  \n  (function() {\n    alert(\"Parentheses around the function\");\n  })();\n  \n  (function() {\n    alert(\"Parentheses around the whole thing\");\n  }());\n  \n  !function() {\n    alert(\"Bitwise NOT operator starts the expression\");\n  }();\n  \n  +function() {\n    alert(\"Unary plus starts the expression\");\n  }();\n  ```\n  We can only do it with function expressions.\n- ``NFE``: Named Function Expressions\n  Function expressions can use an ``internal name``. This allows them to reference theirselves.\n  For ex.:\n  ```js\n  let x = function yo() {\n   yo();\n  }; //ok\n  \n  let y = function()  {\n   y(); //works as well, however\n  };\n  \n  let z = y;\n  y = null;\n  \n  //now z() will yield an error since it calls y() which is null.\n  ```\n- Functions are still [[Object]]s in JS, there is no Function type. That means they have properties too.\n  Like the ``name`` property, in JS, all functions have this property set automatically, and through a feature called ``contextual name``, in the [[Compilation]] the property is set to the correct name through context of the code.\n  For ex.:\n  ```js\n  function yo() {}\n  \n  console.log(yo.name); //prints yo\n  \n  let x = function() {};\n  \n  console.log(x.name); //prints x\n  \n  let y= {\n   yo() {}\n   hey: function(){}\n  };\n  \n  console.log(y.yo.name); //prints yo\n  console.log(y.hey.name); //prints hey\n  ```\n  For ``NFEs``, name is set to the ``internal name`` and not the variable name.\n- Similarly, there's a ``length`` property, it returns the no. of parameters except the rest parameter a function accepts.\n- We can use Functions as [[Object]]s by setting custom properties as well. \n  For ex.:\n  ```js\n  function yo() {\n   if(yo.count=== undefined) yo.count=0;\n   \n  yo.count++;\n  }\n  yo();\n  yo();\n  yo.count; //returns 2\n  ```\n  This is just like using closures, except the function property is visible on the same [[Scope]] as the function's declaration/expression as well as inside it meaning we don't need to rely on closures to remember and set variables (properties) on the [[Environment Object]]. Still, it takes space in the function Object and unlike the [[Environment Object]], a function's lifetime ends at the end of the scope, so for [[Global]] Functions, this means their properties are not [[Garbage Collection]]ed until the end of the program or explicit deletion.\n- We can also create Functions from [[String]]s, this is done using [[new]] keyword.\n  The format is\n  ``let x = new Function (<optional param 1 in string>, <optional param 2 in string>, ...<optional param n in string>, <string function body>);``\n  \n  For ex.:\n  ```js\n  let x = new Function('a', 'b', 'return a+b'); //works. \n  ```\n  These functions are evaluated and dynamically created at runtime. So they can be passed around different programs.\n  There are many differences to how this function works, like the [[Lexical Environment]] and hence  [[Environment Object]] only refer to the [[Global]] [[Scope]]. This is because there's no guarantee the variables and other [[Object]]s it refers to will not have their names minified by the [[Minifier]], and since this function is evaluated at runtime, it can't be optimized to see the new names.\n- Caching\n  It's a simple concept where we simply store the result of a function if it is called often with the same values,\n  For ex.:\n  ```js\n  function slow(x) {\n  console.log(`Called with ${x}`);\n  return x;\n  }\n  - function cachingDecorator(func) {\n  let cache = new Map();\n  - return function(x) {\n    if (cache.has(x)) {    \n      return cache.get(x); \n    }\n  - let result = func(x);\n  - cache.set(x, result);  \n    return result;\n  };\n  }\n  slow = cachingDecorator(slow);\n  console.log( slow(1) ); // slow(1) is cached and the result returned\n  console.log( \"Again: \" + slow(1) ); // slow(1) result returned from cache\n  console.log( slow(2) ); // slow(2) is cached and the result returned\n  console.log( \"Again: \" + slow(2) ); // slow(2) result returned from cache\n  ```\n  For the call of ``func(x)``, the rest of the function is a ``wrapper`` and it stores its value in it.\n  However, such wrapper functions don't work with [[Object]]s because the method might access ``this`` which when called from a function's context might not be able to access\n  That is,\n  ```js\n  let x = {\n   a:2,\n   b() {\n  return this.a; \n  }\n  };\n  - function wrapper(fn) {\n   let cache = new Map();\n  return  function(x) {\n    if (cache.has(x)) return cache.get(x);\n    let result = fn(x);\n    cache.set(x, result);\n     return result;\n  }\n  }\n  - x.b= wrapper(b);\n  x.b(2); //error as the this in b() was using the [[Environment Object]]'s a, but when called through \n            // the wrapper's returned function the ``[[Environment]]`` was set to the function(x) which has \n           // its ``[[Environment]]`` set to wrapper(fn)\n  ```\n- We can use ``<function>.call(<context obj>, <optional arg1>, <optional arg2>,...)`` to explicitly set ``this`` to some other Object. This is a method present in all Function's and it does nothing special, simply set's the ``this`` to the given Object.\n  So, we can change our code to\n  ```js\n  ...\n  let result = fn.call(this,x);\n  ...\n  ```\n  and now the wrapper works even for methods. Here we are simply ``lifting`` the context, so that the context of ``fn`` is the same as it's parent function ``function(x)`` which has ``this`` set to the Object.\n  We can add variable args to our wrapper function with rest parameters and for key, hashing all args together and storing them as a single key.\n- Similar to ``<function>.call(<context>,<...args>)`` we have ``<function>.apply(<context>,<iterable>)``. They work the same, however ``.apply(...)`` accepts an [[Iterable]] and not individual args, and is a bit faster as it is optimized better by the engine.\n- Using ``.call(...)`` and ``.apply(...)`` we get a concept known as ``Method borrowing``. It is simply that we change context of an object's method to another, essentially ``borrowing`` a method from one object and using it in another.\n  For ex.:\n  ```js\n  let x ={\n   a:2,\n   yo() {\n    return this.a;\n   }\n   };\n   let y = {\n   a:4,\n   yo() {\n    return this.a;\n   }\n   };\n  x.yo.call(y); //returns 4\n  ```\n- Function binding\n  As we've seen the ``this`` [[Object]] for a function keeps changing with the change in [[Environment Object]]. ``<function>.bind(<object>, <optional arg value 1>, <... 2>, ...)`` returns a [[Function]] with a ``this`` that is bound to an Object and never changes.\n  For ex.:\n  ```js\n  function yo(fn) {\n    console.log(fn());\n  }\n  let x= {\n    a: 2,\n    ho() {\n      if(this === undefined || this.a === undefined)\n       return 5;\n      else\n        return this.a;\n    }\n  }\n  yo(x.ho); //prints 5\n  x.ho = x.ho.bind(x);\n  yo(x.ho); //prints 2\n  \n  //Similarly, we can even bind arguments\n  \n  function mul(x,y) {\n   console.log(x*y);\n  }\n  let double = mul.bind(null, 2); //Set context to null and first arg to 2\n  double(3); //prints 2*3 = 6\n  double(4); //prints 2*4 = 8  \n  ```\n  \n  This is called a ``partial function application`` as it turns a function's arguments partial allowing us to skip them.\n- Arrow Functions have no ``this`` and no ``arguments`` variable either. So they can be used in wrapper functions, etc. without imposing ``this`` to their bodies. \n  They can't be used with ``.bind(...)``, ``.apply(...)`` or ``.call(...)``, called with ``new``.\n-",536885531]],["^15",[363,"^18",1687830959497,536870919]],["^15",[363,"^19","~m1713385612332",536885530]],["^15",[363,"^Z","pages/Function.md",536870919]],["^15",[364,"^K",1687830959494,536870919]],["^15",[364,"^@",false,536870919]],["^15",[364,"^Y","execution context stack",536870919]],["^15",[364,"^11","Execution Context Stack",536870919]],["^15",[364,"^B",1687830959494,536870919]],["^15",[364,"^;","~u6616a43b-ccd0-4e91-a047-4118849b97b9",536885130]],["^15",[365,"^K",1687830959493,536870919]],["^15",[365,"^@",false,536870919]],["^15",[365,"^Y","initialization stage",536870919]],["^15",[365,"^11","Initialization Stage",536870919]],["^15",[365,"^B",1687830959493,536870919]],["^15",[365,"^;","~u6616a43b-8535-4c1b-b36d-8b9b22f6413b",536885130]],["^15",[366,"^K",1687830959491,536870919]],["^15",[366,"^@",false,536870919]],["^15",[366,"^Y","return",536870919]],["^15",[366,"^11","Return",536870919]],["^15",[366,"^B",1687830959491,536870919]],["^15",[366,"^;","~u6616a43b-060e-4466-aeee-0ec96e31d39d",536885130]],["^15",[367,"^K",1687830960151,536870919]],["^15",[367,"^[",516,536870919]],["^15",[367,"^@",false,536870919]],["^15",[367,"^Y","nullish-coalescing operator",536870919]],["^15",[367,"^11","Nullish-Coalescing Operator",536870919]],["^15",[367,"^B",1687830960151,536870919]],["^15",[367,"^;","~u6616a43b-8e7d-4331-9f6c-77108c43ae8e",536885130]],["^15",[368,"^Q","We can use Functions as [[Object]]s by setting custom properties as well. \nFor ex.:\n```js\nfunction yo() {\n if(yo.count=== undefined) yo.count=0;\n \nyo.count++;\n}\nyo();\nyo();\nyo.count; //returns 2\n```\nThis is just like using closures, except the function property is visible on the same [[Scope]] as the function's declaration/expression as well as inside it meaning we don't need to rely on closures to remember and set variables (properties) on the [[Environment Object]]. Still, it takes space in the function Object and unlike the [[Environment Object]], a function's lifetime ends at the end of the scope, so for [[Global]] Functions, this means their properties are not [[Garbage Collection]]ed until the end of the program or explicit deletion.",536870919]],["^15",[368,"^O","^16",536870919]],["^15",[368,"^F",403,536870919]],["^15",[368,"^X",44,536870919]],["^15",[368,"^V",44,536870919]],["^15",[368,"^U",39,536870919]],["^15",[368,"^U",44,536870919]],["^15",[368,"^U",82,536870919]],["^15",[368,"^U",293,536870919]],["^15",[368,"^U",296,536870919]],["^15",[368,"^U",339,536870919]],["^15",[368,"^H",39,536885130]],["^15",[368,"^H",82,536885130]],["^15",[368,"^H",293,536885130]],["^15",[368,"^H",296,536885130]],["^15",[368,"^H",339,536885130]],["^15",[368,"^17",true,536870919]],["^15",[368,"^;","~u649a41af-ceb8-433f-b176-95b37045e145",536870919]],["^15",[369,"^Q","Function binding\nAs we've seen the ``this`` [[Object]] for a function keeps changing with the change in [[Environment Object]]. ``<function>.bind(<object>, <optional arg value 1>, <... 2>, ...)`` returns a [[Function]] with a ``this`` that is bound to an Object and never changes.\nFor ex.:\n```js\nfunction yo(fn) {\n  console.log(fn());\n}\nlet x= {\n  a: 2,\n  ho() {\n    if(this === undefined || this.a === undefined)\n     return 5;\n    else\n      return this.a;\n  }\n}\nyo(x.ho); //prints 5\nx.ho = x.ho.bind(x);\nyo(x.ho); //prints 2\n\n//Similarly, we can even bind arguments\n\nfunction mul(x,y) {\n console.log(x*y);\n}\nlet double = mul.bind(null, 2); //Set context to null and first arg to 2\ndouble(3); //prints 2*3 = 6\ndouble(4); //prints 2*4 = 8  \n```\n\nThis is called a ``partial function application`` as it turns a function's arguments partial allowing us to skip them.",536870919]],["^15",[369,"^O","^16",536870919]],["^15",[369,"^F",388,536870919]],["^15",[369,"^X",44,536870919]],["^15",[369,"^V",44,536870919]],["^15",[369,"^U",39,536870919]],["^15",[369,"^U",44,536870919]],["^15",[369,"^U",339,536870919]],["^15",[369,"^H",39,536885130]],["^15",[369,"^H",44,536885130]],["^15",[369,"^H",339,536885130]],["^15",[369,"^17",true,536870919]],["^15",[369,"^;","~u649a41af-a5bb-49a9-aef4-58416cf9c94d",536870919]],["^15",[370,"^Q","Just like other languages, [[ECMAScript]] also has [[Scope]]s, so variables declared inside Functions are only visible inside the function's scope. They can use/modify variables from outer scope unless they are [[Shadowed]].",536870919]],["^15",[370,"^O","^16",536870919]],["^15",[370,"^F",380,536870919]],["^15",[370,"^X",44,536870919]],["^15",[370,"^V",44,536870919]],["^15",[370,"^U",24,536870919]],["^15",[370,"^U",44,536870919]],["^15",[370,"^U",82,536870919]],["^15",[370,"^U",147,536870919]],["^15",[370,"^H",24,536885130]],["^15",[370,"^H",82,536885130]],["^15",[370,"^H",147,536885130]],["^15",[370,"^17",true,536870919]],["^15",[370,"^;","~u649a41af-233e-40ca-9d3a-5069883f0d14",536870919]],["^15",[371,"^Q","",536870919]],["^15",[371,"^O","^16",536870919]],["^15",[371,"^F",404,536870919]],["^15",[371,"^X",44,536870919]],["^15",[371,"^V",44,536870919]],["^15",[371,"^U",44,536870919]],["^15",[371,"^17",true,536870919]],["^15",[371,"^;","~u649a41af-5f6b-43a4-b18d-2c3041a3e45b",536870919]],["^15",[372,"^Q","~``NFE``: Named Function Expressions\nFunction expressions can use an ``internal name``. This allows them to reference theirselves.\nFor ex.:\n```js\nlet x = function yo() {\n yo();\n}; //ok\n\nlet y = function()  {\n y(); //works as well, however\n};\n\nlet z = y;\ny = null;\n\n//now z() will yield an error since it calls y() which is null.\n```",536870919]],["^15",[372,"^O","^16",536870919]],["^15",[372,"^F",378,536870919]],["^15",[372,"^X",44,536870919]],["^15",[372,"^V",44,536870919]],["^15",[372,"^U",44,536870919]],["^15",[372,"^17",true,536870919]],["^15",[372,"^;","~u649a41af-b29b-47e7-9849-0b22115890fb",536870919]],["^15",[373,"^Q","We can check if a parameter is provided a value with the [[Nullish-Coalescing Operator]] or the || or explicit check for undefined.\n```js\nfunction xyz(x) {\nif(x===undefined) x=2;\n}\n\n```",536870919]],["^15",[373,"^O","^16",536870919]],["^15",[373,"^F",384,536870919]],["^15",[373,"^X",44,536870919]],["^15",[373,"^V",44,536870919]],["^15",[373,"^U",44,536870919]],["^15",[373,"^U",367,536870919]],["^15",[373,"^H",367,536885130]],["^15",[373,"^17",true,536870919]],["^15",[373,"^;","~u649a41af-1415-43fd-b243-24459539607a",536870919]],["^15",[374,"^Q","Rest arguments\nUsing the ``...`` spread [[Operator]] on a parameter we can convert incoming args to elements in an [[Array]] .\nFor ex.:\n```js\nfunction yo(a,...b) {\n //use b as an array\n}\nyo(1,2,3,3,4); //ok, so b[0] will be 2, b[1] will be 3 and so on.\n```\n\nThe rest parameter must be at the end of parameter definition in a function.",536870919]],["^15",[374,"^O","^16",536870919]],["^15",[374,"^F",401,536870919]],["^15",[374,"^X",44,536870919]],["^15",[374,"^V",44,536870919]],["^15",[374,"^U",44,536870919]],["^15",[374,"^U",47,536870919]],["^15",[374,"^U",76,536870919]],["^15",[374,"^H",47,536885130]],["^15",[374,"^H",76,536885130]],["^15",[374,"^17",true,536870919]],["^15",[374,"^;","~u649a41af-c96a-4363-89aa-3b1521da9027",536870919]],["^15",[375,"^Q","The main purpose of Ctor Fns is reusability.\nHowever, there's a one-off version as well.\nFor ex.:\n```js\nlet x = new Function() {\n  this.name = \"yo\";\n};\n```\nHere [[new]] does the same as earlier, however, this function is immediately called and evaluated for the variable. The result is that x contains an Object returned from [[this]].  And this Function can't be called again. \nThe purpose of this Ctor Fn is simply to offer encapsulation.",536870919]],["^15",[375,"^O","^16",536870919]],["^15",[375,"^F",954,536885130]],["^15",[375,"^X",44,536870919]],["^15",[375,"^V",44,536870919]],["^15",[375,"^U",44,536870919]],["^15",[375,"^U",144,536870919]],["^15",[375,"^U",145,536870919]],["^15",[375,"^H",144,536885130]],["^15",[375,"^H",145,536885130]],["^15",[375,"^17",true,536870919]],["^15",[375,"^;","~u649a41af-f32a-482f-b3f4-5fa76229b249",536870919]],["^15",[376,"^Q","Callback Function\nA function passed as a parameter to another function.\nFor ex.:\n```js \nfunction x(p) {p();} //Here p is a callback function\n\n```",536870919]],["^15",[376,"^O","^16",536870919]],["^15",[376,"^F",381,536870919]],["^15",[376,"^X",44,536870919]],["^15",[376,"^V",44,536870919]],["^15",[376,"^U",44,536870919]],["^15",[376,"^17",true,536870919]],["^15",[376,"^;","~u649a41af-cf88-4158-b9f5-471becc6a09e",536870919]],["^15",[377,"^Q","Recursion works just like any other language. Max safe recursion depth is 10000, and maybe more depending on the engine and if it supports ``Tail-Call Optimization``.\n\nIn JS, each function call is associated with an [[Execution Context]] which is stored in an [[Execution Context Stack]] and this is the stack that tracks the program's flow.",536870919]],["^15",[377,"^O","^16",536870919]],["^15",[377,"^F",400,536870919]],["^15",[377,"^X",44,536870919]],["^15",[377,"^V",44,536870919]],["^15",[377,"^U",44,536870919]],["^15",[377,"^U",359,536870919]],["^15",[377,"^U",364,536870919]],["^15",[377,"^H",359,536885130]],["^15",[377,"^H",364,536885130]],["^15",[377,"^17",true,536870919]],["^15",[377,"^;","~u649a41af-b719-4033-90c1-fed4ed23a3b8",536870919]],["^15",[378,"^Q","~``IIFE``: Immediately Invoked Function Expressions\nThat is, this syntax allows us to declare a function expression and immediately execute it. \nFor ex.:\n```js\n(function() {\n ...\n}\n)();\n\n// Ways to create IIFE\n\n(function() {\n  alert(\"Parentheses around the function\");\n})();\n\n(function() {\n  alert(\"Parentheses around the whole thing\");\n}());\n\n!function() {\n  alert(\"Bitwise NOT operator starts the expression\");\n}();\n\n+function() {\n  alert(\"Unary plus starts the expression\");\n}();\n```\nWe can only do it with function expressions.",536870919]],["^15",[378,"^O","^16",536870919]],["^15",[378,"^F",390,536870919]],["^15",[378,"^X",44,536870919]],["^15",[378,"^V",44,536870919]],["^15",[378,"^U",44,536870919]],["^15",[378,"^17",true,536870919]],["^15",[378,"^;","~u649a41af-67a5-40d4-be32-8e2c7ca1478f",536870919]],["^15",[379,"^Q","We can use ``<function>.call(<context obj>, <optional arg1>, <optional arg2>,...)`` to explicitly set ``this`` to some other Object. This is a method present in all Function's and it does nothing special, simply set's the ``this`` to the given Object.\nSo, we can change our code to\n```js\n...\nlet result = fn.call(this,x);\n...\n```\nand now the wrapper works even for methods. Here we are simply ``lifting`` the context, so that the context of ``fn`` is the same as it's parent function ``function(x)`` which has ``this`` set to the Object.\nWe can add variable args to our wrapper function with rest parameters and for key, hashing all args together and storing them as a single key.",536870919]],["^15",[379,"^O","^16",536870919]],["^15",[379,"^F",398,536870919]],["^15",[379,"^X",44,536870919]],["^15",[379,"^V",44,536870919]],["^15",[379,"^U",44,536870919]],["^15",[379,"^17",true,536870919]],["^15",[379,"^;","~u649a41af-a632-46ff-8099-2923716111c3",536870919]],["^15",[380,"^Q","To create one, \n``function <name>(<param 1>, <param 2>...) {...}``\nIf we have a function ``xyz`` we can call it with ``xyz();``",536885529]],["^15",[380,"^O","^16",536870919]],["^15",[380,"^F",402,536870919]],["^15",[380,"^X",44,536870919]],["^15",[380,"^V",44,536870919]],["^15",[380,"^U",44,536870919]],["^15",[380,"^?",["^ "],536885529]],["^15",[380,"^17",true,536870919]],["^15",[380,"^;","~u649a41af-b79b-41b5-95ee-69ce9ca67409",536870919]],["^15",[381,"^Q","If we call a function without evaluating it, it returns the function body.\nFor ex.:\n```js \nfunction sayHi() {\n  alert( \"Hello\" );\n}\n\nalert( sayHi ); //prints function sayHi() {\n                        // alert( \"Hello\" );\n                        // }\n```\n``alert(...)`` gets the function body converted to [[String]] and prints that. \nThis also allows us to assign the function to other variables.",536870919]],["^15",[381,"^O","^16",536870919]],["^15",[381,"^F",394,536870919]],["^15",[381,"^X",44,536870919]],["^15",[381,"^V",44,536870919]],["^15",[381,"^U",41,536870919]],["^15",[381,"^U",44,536870919]],["^15",[381,"^H",41,536885130]],["^15",[381,"^17",true,536870919]],["^15",[381,"^;","~u649a41af-0751-4fb7-9fa3-25dbfe24a16b",536870919]],["^15",[382,"^Q","",536870919]],["^15",[382,"^O","^16",536870919]],["^15",[382,"^F",385,536870919]],["^15",[382,"^X",44,536870919]],["^15",[382,"^V",44,536870919]],["^15",[382,"^U",44,536870919]],["^15",[382,"^17",true,536870919]],["^15",[382,"^;","~u649a41af-be04-4e75-9a6d-b9d0f729b2c5",536870919]],["^15",[383,"^Q","Parameters don't need to have any type and can also be omitted at call-site.\nFor ex.:\n```js\nfunction xyz(x,y= yo(), z=\"na\", p) {\n...\n\n}\n//can be called with\nxyz();\nxyz(\"yo\");\nxyz(\"yooo\",\"yo\",\"a\",\"b\",\"c\"); \nxyz(\"x\", undefined);\n//etc.\n```\nHere y and z are ``default`` parameters as when they are provided no value or undefined (strict equality) then the given default value is evaluated and assigned.\n\nThis is also to say, in JS functions can receive any number of args despite their parameters, if there are more args than parameters then extra args are ignored, if there are less args than parameters then the unassigned parameters are [[undefined]]. \n\nAnd this is also to say, functions in JS are uniquely identified by just their names. Which is to say there is no function overloading in JS, as there can be only 1 function with a given name, if there's more, one of them has the other [[Shadowed]]\nFor ex.:\n```js\nfunction yo(a) {\n  console.log(\"1\");\n}\n\nfunction yo() {\n  console.log(\"2\");\n}\n\nlet x=  {\n    yo(){\n        console.log(\"1\");\n    },\n    yo(){\n        console.log(\"2\");\n    }\n};\n\nclass X{\n    yo(){\n        console.log(\"1\");\n    }\n    yo(){\n        console.log(\"2\");\n    }\n}\nyo(); //prints 2\nx.yo(); //also prints 2\n\nlet obj= new X();\nobj.yo(); //also prints 2\n```\nThe same is true in [[Class]]es and [[Object]]s.",536870919]],["^15",[383,"^O","^16",536870919]],["^15",[383,"^F",370,536870919]],["^15",[383,"^X",44,536870919]],["^15",[383,"^V",44,536870919]],["^15",[383,"^U",39,536870919]],["^15",[383,"^U",44,536870919]],["^15",[383,"^U",45,536870919]],["^15",[383,"^U",75,536870919]],["^15",[383,"^U",147,536870919]],["^15",[383,"^H",39,536885130]],["^15",[383,"^H",45,536885130]],["^15",[383,"^H",75,536885130]],["^15",[383,"^H",147,536885130]],["^15",[383,"^17",true,536870919]],["^15",[383,"^;","~u649a41af-5516-43ef-8575-d455ac041034",536870919]],["^15",[384,"^Q","",536870919]],["^15",[384,"^O","^16",536870919]],["^15",[384,"^F",383,536870919]],["^15",[384,"^X",44,536870919]],["^15",[384,"^V",44,536870919]],["^15",[384,"^U",44,536870919]],["^15",[384,"^17",true,536870919]],["^15",[384,"^;","~u649a41af-444f-465d-b307-91f7f686c296",536870919]],["^15",[385,"^Q","Arrow Functions have no ``this`` and no ``arguments`` variable either. So they can be used in wrapper functions, etc. without imposing ``this`` to their bodies. \nThey can't be used with ``.bind(...)``, ``.apply(...)`` or ``.call(...)``, called with ``new``.",536870919]],["^15",[385,"^O","^16",536870919]],["^15",[385,"^F",369,536870919]],["^15",[385,"^X",44,536870919]],["^15",[385,"^V",44,536870919]],["^15",[385,"^U",44,536870919]],["^15",[385,"^17",true,536870919]],["^15",[385,"^;","~u649a41af-2df1-4893-9942-626b4f2acd38",536870919]],["^15",[386,"^Q","Constructor Function\nThis function can create [[Object]]s at runtime.\nWe use [[new]] [[Operator]] and [[this]] to do so.\nFor ex.:\n```js\nfunction Yo(name) {\n this.name = name\n this.age = 2;\n this.hi = function() {...};\n}\n\nlet x= new Yo(\"Haa\");\n x.hi(); //works\n```\nReturns ``this`` [[Object]] instead of [[undefined]] implicitly.",536885130]],["^15",[386,"^O","^16",536870919]],["^15",[386,"^F",389,536870919]],["^15",[386,"^X",44,536870919]],["^15",[386,"^V",44,536870919]],["^15",[386,"^U",39,536870919]],["^15",[386,"^U",44,536870919]],["^15",[386,"^U",45,536885130]],["^15",[386,"^U",76,536870919]],["^15",[386,"^U",144,536870919]],["^15",[386,"^U",145,536870919]],["^15",[386,"^H",39,536885130]],["^15",[386,"^H",45,536885130]],["^15",[386,"^H",76,536885130]],["^15",[386,"^H",144,536885130]],["^15",[386,"^H",145,536885130]],["^15",[386,"^17",true,536870919]],["^15",[386,"^;","~u649a41af-9d49-4172-b9e4-b9ce3803de3e",536870919]],["^15",[387,"^Q","Function Declarations can be called before they are declared in their own scope, Function Expression's can't.\nFor ex.:\n```js\nfunction xyz(){\n  pp();\n  function pp() {\n    console.log(\"yoo\");\n  }\n}\n\nxyz();\n```\nworks and prints \"yoo\". But if ``pp`` was assigned to a variable, it would have needed to be called after declaration of the variable. \nThis is because [[JavaScript]] Engine creates the function declarations before executing the code in an [[Initialization Stage]].",536870919]],["^15",[387,"^O","^16",536870919]],["^15",[387,"^F",955,536885130]],["^15",[387,"^X",44,536870919]],["^15",[387,"^V",44,536870919]],["^15",[387,"^U",44,536870919]],["^15",[387,"^U",294,536870919]],["^15",[387,"^U",365,536870919]],["^15",[387,"^H",294,536885130]],["^15",[387,"^H",365,536885130]],["^15",[387,"^17",true,536870919]],["^15",[387,"^;","~u649a41af-bcb0-4c9e-b1e9-e926bbc8cd4a",536870919]],["^15",[388,"^Q","Using ``.call(...)`` and ``.apply(...)`` we get a concept known as ``Method borrowing``. It is simply that we change context of an object's method to another, essentially ``borrowing`` a method from one object and using it in another.\nFor ex.:\n```js\nlet x ={\n a:2,\n yo() {\n  return this.a;\n }\n };\n let y = {\n a:4,\n yo() {\n  return this.a;\n }\n };\nx.yo.call(y); //returns 4\n```",536870919]],["^15",[388,"^O","^16",536870919]],["^15",[388,"^F",396,536870919]],["^15",[388,"^X",44,536870919]],["^15",[388,"^V",44,536870919]],["^15",[388,"^U",44,536870919]],["^15",[388,"^17",true,536870919]],["^15",[388,"^;","~u649a41af-2f51-43fb-ab96-9bfae1bc87ba",536870919]],["^15",[389,"^Q","Arrow Function\nThese functions are an even simpler way to create Function Expressions.\n```js\nlet x= () => {\n  return 2;\n};\nlet y = () => 2;\n\nconsole.log(x());\nconsole.log(y());\n```",536870919]],["^15",[389,"^O","^16",536870919]],["^15",[389,"^F",376,536870919]],["^15",[389,"^X",44,536870919]],["^15",[389,"^V",44,536870919]],["^15",[389,"^U",44,536870919]],["^15",[389,"^17",true,536870919]],["^15",[389,"^;","~u649a41af-2b10-4f24-a531-96e8586cebb2",536870919]],["^15",[390,"^Q","JS supports Nested Functions.",536870919]],["^15",[390,"^O","^16",536870919]],["^15",[390,"^F",377,536870919]],["^15",[390,"^X",44,536870919]],["^15",[390,"^V",44,536870919]],["^15",[390,"^U",44,536870919]],["^15",[390,"^17",true,536870919]],["^15",[390,"^;","~u649a41af-653f-4259-bc28-33f3ac4711ca",536870919]],["^15",[391,"^Q","Array-like special Object ``arguments`` \nEvery function (except arrow function) has this [[Object]] which has **all** the args of a function.\nFor ex.:\n```js\nfunction yo (a) {\n console.log(arguments[0]); \n console.log(arguments[1]); \n console.log(arguments[2]); \n}\nyo(1,2); //prints 1 2 undefined\n```\nUnlike the rest parameter, this Object captures all the args. It is [[Iterable]] and uses array-like syntax for accessing values but it is not an [[Array]] and hence doesn't support the array methods.\nThe arrow function doesn't have this Object and if we use it inside it, it access the ``arguments`` of the parent function.",536870919]],["^15",[391,"^O","^16",536870919]],["^15",[391,"^F",374,536870919]],["^15",[391,"^X",44,536870919]],["^15",[391,"^V",44,536870919]],["^15",[391,"^U",39,536870919]],["^15",[391,"^U",44,536870919]],["^15",[391,"^U",46,536870919]],["^15",[391,"^U",47,536870919]],["^15",[391,"^H",39,536885130]],["^15",[391,"^H",46,536885130]],["^15",[391,"^H",47,536885130]],["^15",[391,"^17",true,536870919]],["^15",[391,"^;","~u649a41af-6c9e-42e5-bc58-026e8ff36e3f",536870919]],["^15",[392,"^Q","We can also create Functions from [[String]]s, this is done using [[new]] keyword.\nThe format is\n``let x = new Function (<optional param 1 in string>, <optional param 2 in string>, ...<optional param n in string>, <string function body>);``\n\nFor ex.:\n```js\nlet x = new Function('a', 'b', 'return a+b'); //works. \n```\nThese functions are evaluated and dynamically created at runtime. So they can be passed around different programs.\nThere are many differences to how this function works, like the [[Lexical Environment]] and hence  [[Environment Object]] only refer to the [[Global]] [[Scope]]. This is because there's no guarantee the variables and other [[Object]]s it refers to will not have their names minified by the [[Minifier]], and since this function is evaluated at runtime, it can't be optimized to see the new names.",536870919]],["^15",[392,"^O","^16",536870919]],["^15",[392,"^F",368,536870919]],["^15",[392,"^X",44,536870919]],["^15",[392,"^V",44,536870919]],["^15",[392,"^U",39,536870919]],["^15",[392,"^U",41,536870919]],["^15",[392,"^U",44,536870919]],["^15",[392,"^U",82,536870919]],["^15",[392,"^U",145,536870919]],["^15",[392,"^U",296,536870919]],["^15",[392,"^U",339,536870919]],["^15",[392,"^U",354,536870919]],["^15",[392,"^U",355,536870919]],["^15",[392,"^H",39,536885130]],["^15",[392,"^H",41,536885130]],["^15",[392,"^H",82,536885130]],["^15",[392,"^H",145,536885130]],["^15",[392,"^H",296,536885130]],["^15",[392,"^H",339,536885130]],["^15",[392,"^H",354,536885130]],["^15",[392,"^H",355,536885130]],["^15",[392,"^17",true,536870919]],["^15",[392,"^;","~u649a41af-3038-467a-b10b-fe836da867c6",536870919]],["^15",[393,"^Q","The ``...`` spread [[Operator]] can also be used to expand an [[Iterable]] into individual args.\nFor ex.:\n```js\nlet x = [1,2,5,1,2];\nconsole.log(Math.max(...x)); // unpacks x and passes all elements of x to .max(...)\n```\n\nSimilarly, it can also be used to copy an Object.\n```js\nlet x = { a: 2, b:\"yo\" };\nlet y= { ...x }; //Spread the list of properties and copy them into this empty object with their values.\nx[\"a\"]; //prints 2;\nx==y; //false\n```",536870919]],["^15",[393,"^O","^16",536870919]],["^15",[393,"^F",391,536870919]],["^15",[393,"^X",44,536870919]],["^15",[393,"^V",44,536870919]],["^15",[393,"^U",44,536870919]],["^15",[393,"^U",46,536870919]],["^15",[393,"^U",76,536870919]],["^15",[393,"^H",46,536885130]],["^15",[393,"^H",76,536885130]],["^15",[393,"^17",true,536870919]],["^15",[393,"^;","~u649a41af-a5af-4264-a0ae-df4db4eef59d",536870919]],["^15",[394,"^Q","Functions in [[JavaScript]] allow nesting. However they are only visible in their respective [[Scope]]s and the ones below in strict mode.",536870919]],["^15",[394,"^O","^16",536870919]],["^15",[394,"^F",387,536870919]],["^15",[394,"^X",44,536870919]],["^15",[394,"^V",44,536870919]],["^15",[394,"^U",44,536870919]],["^15",[394,"^U",82,536870919]],["^15",[394,"^U",294,536870919]],["^15",[394,"^H",82,536885130]],["^15",[394,"^H",294,536885130]],["^15",[394,"^17",true,536870919]],["^15",[394,"^;","~u649a41af-4030-4c3b-8005-bd9fcc11a871",536870919]],["^15",[396,"^Q","Similar to ``<function>.call(<context>,<...args>)`` we have ``<function>.apply(<context>,<iterable>)``. They work the same, however ``.apply(...)`` accepts an [[Iterable]] and not individual args, and is a bit faster as it is optimized better by the engine.",536870919]],["^15",[396,"^O","^16",536870919]],["^15",[396,"^F",379,536870919]],["^15",[396,"^X",44,536870919]],["^15",[396,"^V",44,536870919]],["^15",[396,"^U",44,536870919]],["^15",[396,"^U",46,536870919]],["^15",[396,"^H",46,536885130]],["^15",[396,"^17",true,536870919]],["^15",[396,"^;","~u649a41af-e4ee-4a33-940a-7fdd37d62d5d",536870919]],["^15",[397,"^Q","Functions are still [[Object]]s in JS, there is no Function type. That means they have properties too.\nLike the ``name`` property, in JS, all functions have this property set automatically, and through a feature called ``contextual name``, in the [[Compilation]] the property is set to the correct name through context of the code.\nFor ex.:\n```js\nfunction yo() {}\n\nconsole.log(yo.name); //prints yo\n\nlet x = function() {};\n\nconsole.log(x.name); //prints x\n\nlet y= {\n yo() {}\n hey: function(){}\n};\n\nconsole.log(y.yo.name); //prints yo\nconsole.log(y.hey.name); //prints hey\n```\nFor ``NFEs``, name is set to the ``internal name`` and not the variable name.",536870919]],["^15",[397,"^O","^16",536870919]],["^15",[397,"^F",372,536870919]],["^15",[397,"^X",44,536870919]],["^15",[397,"^V",44,536870919]],["^15",[397,"^U",39,536870919]],["^15",[397,"^U",44,536870919]],["^15",[397,"^U",181,536870919]],["^15",[397,"^H",39,536885130]],["^15",[397,"^H",181,536885130]],["^15",[397,"^17",true,536870919]],["^15",[397,"^;","~u649a41af-417e-4dd5-b779-059682650736",536870919]],["^15",[398,"^Q","Caching\nIt's a simple concept where we simply store the result of a function if it is called often with the same values,\nFor ex.:\n```js\nfunction slow(x) {\nconsole.log(`Called with ${x}`);\nreturn x;\n}\n- function cachingDecorator(func) {\nlet cache = new Map();\n- return function(x) {\n  if (cache.has(x)) {    \n    return cache.get(x); \n  }\n- let result = func(x);\n- cache.set(x, result);  \n  return result;\n};\n}\nslow = cachingDecorator(slow);\nconsole.log( slow(1) ); // slow(1) is cached and the result returned\nconsole.log( \"Again: \" + slow(1) ); // slow(1) result returned from cache\nconsole.log( slow(2) ); // slow(2) is cached and the result returned\nconsole.log( \"Again: \" + slow(2) ); // slow(2) result returned from cache\n```\nFor the call of ``func(x)``, the rest of the function is a ``wrapper`` and it stores its value in it.\nHowever, such wrapper functions don't work with [[Object]]s because the method might access ``this`` which when called from a function's context might not be able to access\nThat is,\n```js\nlet x = {\n a:2,\n b() {\nreturn this.a; \n}\n};\n- function wrapper(fn) {\n let cache = new Map();\nreturn  function(x) {\n  if (cache.has(x)) return cache.get(x);\n  let result = fn(x);\n  cache.set(x, result);\n   return result;\n}\n}\n- x.b= wrapper(b);\nx.b(2); //error as the this in b() was using the [[Environment Object]]'s a, but when called through \n          // the wrapper's returned function the ``[[Environment]]`` was set to the function(x) which has \n         // its ``[[Environment]]`` set to wrapper(fn)\n```",536870919]],["^15",[398,"^O","^16",536870919]],["^15",[398,"^F",392,536870919]],["^15",[398,"^X",44,536870919]],["^15",[398,"^V",44,536870919]],["^15",[398,"^U",39,536870919]],["^15",[398,"^U",44,536870919]],["^15",[398,"^H",39,536885130]],["^15",[398,"^17",true,536870919]],["^15",[398,"^;","~u649a41af-97a9-4ad6-8de8-87666eb45e35",536870919]],["^15",[399,"^Q","",536870919]],["^15",[399,"^O","^16",536870919]],["^15",[399,"^F",393,536870919]],["^15",[399,"^X",44,536870919]],["^15",[399,"^V",44,536870919]],["^15",[399,"^U",44,536870919]],["^15",[399,"^17",true,536870919]],["^15",[399,"^;","~u649a41af-cc3c-4f1e-9b76-10d28a467b10",536870919]],["^15",[400,"^Q","Return from Ctor Fn\nIf a Ctor fn returns an Object, that is returned instead of this.\nFor any other value, the value is ignored and this is returned.\nFor ex.:\n```js\nfunction BigUser() {\n  this.name = \"John\";\n  return { name: \"Godzilla\" };  // <-- returns this object\n}\nalert( new BigUser().name );  // Godzilla, got that object\n```",536870919]],["^15",[400,"^O","^16",536870919]],["^15",[400,"^F",375,536870919]],["^15",[400,"^X",44,536870919]],["^15",[400,"^V",44,536870919]],["^15",[400,"^U",44,536870919]],["^15",[400,"^17",true,536870919]],["^15",[400,"^;","~u649a41af-ee44-4814-8be9-fb4be17dc9bd",536870919]],["^15",[401,"^Q","Function Expression\nIn [[ECMAScript]] a function is just a value to be evaluated, this is why it can also be assigned to variables.\nFor ex.:\n```js\nlet x= function() {\n  ...\n}; //Notice the semicolon\n//called with \nx();\n```\nHere ``function(){...}`` is a Function Expression. Just like a normal function, if it returns a value, that will be returned from ``x()`` otherwise undefined will be returned.\n\nThe semicolon is because the Function Expression is still a value being assigned, and just like other values being assigned, it indicates the end of value.",536870919]],["^15",[401,"^O","^16",536870919]],["^15",[401,"^F",371,536870919]],["^15",[401,"^X",44,536870919]],["^15",[401,"^V",44,536870919]],["^15",[401,"^U",24,536870919]],["^15",[401,"^U",44,536870919]],["^15",[401,"^H",24,536885130]],["^15",[401,"^17",true,536870919]],["^15",[401,"^;","~u649a41af-640e-47fa-b1c3-de48e2f45ef2",536870919]],["^15",[402,"^Q","filters:: {\"generator function\" true}\n\n",536870919]],["^15",[402,"^O","^16",536870919]],["^15",[402,"^1>",["^1;",[]],536885130]],["^15",[402,"^F",44,536870919]],["^15",[402,"^X",44,536870919]],["^15",[402,"^V",44,536870919]],["^15",[402,"^U",44,536870919]],["^15",[402,"^:",true,536885130]],["^15",[402,"^?",["^ ","^1=","{\"generator function\" true}"],536885130]],["^15",[402,"^J",["^1="],536885130]],["^15",[402,"^4",["^ ","^1=","{\"generator function\" true}"],536885130]],["^15",[402,"^17",true,536870919]],["^15",[402,"^;","~u649a41af-acc4-465f-85db-b6e05c00af8c",536870919]],["^15",[403,"^Q","Similarly, there's a ``length`` property, it returns the no. of parameters except the rest parameter a function accepts.",536870919]],["^15",[403,"^O","^16",536870919]],["^15",[403,"^F",397,536870919]],["^15",[403,"^X",44,536870919]],["^15",[403,"^V",44,536870919]],["^15",[403,"^U",44,536870919]],["^15",[403,"^17",true,536870919]],["^15",[403,"^;","~u649a41af-a6d8-4d80-9b01-d4db530f18ba",536870919]],["^15",[404,"^Q","[[Return]] keyword returns a value, just like other languages. However since there the types are dynamic, there is no change in the function syntax.\nFor ex.:\n```js\nfunction x(){\n  return 2;\n}\n```\n\nIf a function doesn't return anything, it returns undefined.\nThe expression to be evaluated at return or the value to be returned must start on the same line as the return as [[ASI]] assumes semicolon after an empty return.",536870919]],["^15",[404,"^O","^16",536870919]],["^15",[404,"^F",373,536870919]],["^15",[404,"^X",44,536870919]],["^15",[404,"^V",44,536870919]],["^15",[404,"^U",44,536870919]],["^15",[404,"^U",299,536870919]],["^15",[404,"^U",366,536870919]],["^15",[404,"^H",299,536885130]],["^15",[404,"^H",366,536885130]],["^15",[404,"^17",true,536870919]],["^15",[404,"^;","~u649a41af-51cb-478f-87c0-3029eaf4bd3e",536870919]],["^15",[405,"^3","alias:: GC\n\n- JS engines use GC.\n- It works like normal GCs, like unreachable code is cleaned up, it is performed automatically etc.\n  For ex.: If we have an [[Object]]'s reference stored in a variable and we don't delete it but assign something else to it, then the actual Object becomes unreachable. This is sweeped off by the GC.\n  JS engines generally use ``mark and sweep`` for GC where it marks the reachable parts of the code as being in-use and doesn't clean them, and clean the rest.\n- Further reading: https://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection\n- V8's GC is called Orinoco",536870919]],["^15",[405,"^18",1687830959526,536870919]],["^15",[405,"^Z","pages/Garbage Collection.md",536870919]],["^15",[406,"^5",293,536870919]],["^15",[406,"^K",1687830959525,536870919]],["^15",[406,"^@",false,536870919]],["^15",[406,"^Y","gc",536870919]],["^15",[406,"^11","GC",536870919]],["^15",[406,"^B",1687830959525,536870919]],["^15",[406,"^;","~u649a41af-d25d-4ecc-bcde-25740e4845e2",536870919]],["^15",[407,"^Q","alias:: GC\n\n",536870919]],["^15",[407,"^O","^16",536870919]],["^15",[407,"^1>",["^1;",[]],536870919]],["^15",[407,"^F",293,536870919]],["^15",[407,"^X",293,536870919]],["^15",[407,"^V",293,536870919]],["^15",[407,"^U",293,536870919]],["^15",[407,"^U",406,536870919]],["^15",[407,"^:",true,536870919]],["^15",[407,"^?",["^ ","^1:",["^1;",["GC"]]],536870919]],["^15",[407,"^J",["^1:"],536870919]],["^15",[407,"^4",["^ ","^1:","GC"],536870919]],["^15",[407,"^H",406,536870919]],["^15",[407,"^17",true,536870919]],["^15",[407,"^;","~u649a41af-5ad4-48a4-934a-97396c3f59c3",536870919]],["^15",[408,"^Q","JS engines use GC.",536870919]],["^15",[408,"^O","^16",536870919]],["^15",[408,"^F",407,536870919]],["^15",[408,"^X",293,536870919]],["^15",[408,"^V",293,536870919]],["^15",[408,"^U",293,536870919]],["^15",[408,"^17",true,536870919]],["^15",[408,"^;","~u649a41af-d703-4e7c-ad48-a7b4efb836d6",536870919]],["^15",[409,"^Q","It works like normal GCs, like unreachable code is cleaned up, it is performed automatically etc.\nFor ex.: If we have an [[Object]]'s reference stored in a variable and we don't delete it but assign something else to it, then the actual Object becomes unreachable. This is sweeped off by the GC.\nJS engines generally use ``mark and sweep`` for GC where it marks the reachable parts of the code as being in-use and doesn't clean them, and clean the rest.",536870919]],["^15",[409,"^O","^16",536870919]],["^15",[409,"^F",408,536870919]],["^15",[409,"^X",293,536870919]],["^15",[409,"^V",293,536870919]],["^15",[409,"^U",39,536870919]],["^15",[409,"^U",293,536870919]],["^15",[409,"^H",39,536870919]],["^15",[409,"^17",true,536870919]],["^15",[409,"^;","~u649a41af-66ae-45f8-87bc-6efeca1b44fb",536870919]],["^15",[410,"^Q","Further reading: https://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection",536870919]],["^15",[410,"^O","^16",536870919]],["^15",[410,"^F",409,536870919]],["^15",[410,"^X",293,536870919]],["^15",[410,"^V",293,536870919]],["^15",[410,"^U",293,536870919]],["^15",[410,"^17",true,536870919]],["^15",[410,"^;","~u649a41af-7b88-4129-a4ee-9d01c7ed8fe4",536870919]],["^15",[411,"^Q","V8's GC is called Orinoco",536870919]],["^15",[411,"^O","^16",536870919]],["^15",[411,"^F",410,536870919]],["^15",[411,"^X",293,536870919]],["^15",[411,"^V",293,536870919]],["^15",[411,"^U",293,536870919]],["^15",[411,"^17",true,536870919]],["^15",[411,"^;","~u649a41af-8fab-41b6-8f82-dbdea324edb9",536870919]],["^15",[412,"^3","- A special type of [[Function]].\n- Like Dart or python, JS also supports generator functions which can return values multiple times creating the concept of ``streams``.\n  It works like so\n  ```js\n  function* yo(){\n   yield 1;\n   yield 2;\n   return 3;\n  }\n  let genny = yo();\n  console.log(genny.next()); //prints {value: 1, done: false}\n  console.log(genny.next()); //prints {value: 2, done: false}\n  console.log(genny.next()); //prints {value: 3, done: true}\n  \n  let x = {\n   *yo(){ //generator methods\n     ...\n    }\n   aye: function*() {} \n  };\n  ```\n  These functions are defined with ``function*`` keyword.  Then we can ``yield`` values in the function. Yielding returns a value or nothing, in which case [[undefined]] is returned, yielding doesn't finish the function, it will send the control back but the position in the function will be remembered so when it is called again it will continue from the yield to the next yield or return. ``return`` however returns the control back and function won't resume again.\n  \n  A generator function returns an [[Object]] called a ``Generator Object`` which has a method ``.next(<optional arg>)``. When we call next it runs until either it finds a yield , or the function finishes, or the return is found. In all cases ``.next()`` returns an Object with 2 properties, value and done, the done is set to true if the function is finished, that is return or the function's over. value has the returned value, or undefined. \n  Calling ``next`` on a finished Generator Object gives value as undefined and done as true.\n  Calling the function again can create another generator Object so we can reuse it.\n  For ex.:\n  ```js\n  function* yo() {\n   return 2; \n  }\n  \n  let x = yo();\n  console.log(x.next()); //prints {value: 2, done: true}\n  console.log(x.next()); //prints {value: undefined, done: true}\n  \n  x = yo();\n  console.log(x.next()); //prints {value: 2, done: true}\n  ```\n  \n  \n  \n   for..of [[Loop]]\n  Generator Object's return an [[Iterable]] Object, so they can be iterated over. We can use for..of to do so \n  ```js\n  function* yo() {\n   yield 1;\n   return 2;\n  }\n  (for let value of yo){....} //value gets just the value of next()\n  \n  //similarly\n  let x = [...yo]; //as its an iterator, it can use spread Operator\n  console.log(x); //prints 1 (not 2)\n  \n  ```\n  \n  However, iterators don't get the value returned using ``return``, so they may not completely finish the generator function. This is why it is recommended to only ``yield`` values inside a generator function and let it implicitly return.\n-\n- Generator Composition\n  Using ``yield*`` we can delegate yield to another Generator, this is called Generator Composition.\n  For ex.:\n  ```js\n  function* gen1(){\n   yield 2;\n   yield 3;\n  }\n  function* gen2() {\n   yield* gen1();\n   yield 4;\n  }\n  let x= gen2();\n  for(let value of x){\n   console.log(value); //prints 2 3 4\n  }\n  ```\n  The flow is exactly like expected, until the delegated generator yields all its values, it keeps yielding.\n- ``.next(<arg>)`` can pass value to ``yield`` [[Operator]\n  For ex.:\n  ```js\n  function* gen(){\n  let x = yield 1;\n  console.log(x);\n  }\n  \n  let x = gen();\n  console.log(x.next().value); //prints 1 \n  x.next(5); //prints 5\n  console.log(x.next().value); //prints undefined\n  ```\n  The first call to ``.next()`` runs the generator till the yield's result. Then it is suspended where yield would return some value or [[undefined]], then the 2nd call to ``.next()`` passes an arg which becomes the ``yield``'s return value and runs the generator until end and last ``.next()`` has no value so it returns undefined.\n  \n  Similarly, we can also send an [[Error]] into a generator. To do so we use ``<generator obj>.throw(<err Obj>)``\n  For ex.:\n  ```js\n  function* gen() {\n  try {\n    let x = yield 1;\n    console.log(x);\n  } catch (err) {\n    console.log(err.message);\n  }\n  }\n  - let x = gen();\n  console.log(x.next()); //prints 1\n  x.throw(new Error(\"nah\")); //prints nah\n  ```\n  It continues the generator after passing an Error to the yield, if the error is unhandled it leaks back into the calling code.\n- ``<generator obj>.return(<arg>)`` Returns an Object like ``.next()`` returns with the given value and finishes the generator so done is set to true.\n-\n-\n-",536870919]],["^15",[412,"^18",1687830959555,536870919]],["^15",[412,"^Z","pages/Generator Function.md",536870919]],["^15",[413,"^K",1687830959733,536870919]],["^15",[413,"^[",412,536870919]],["^15",[413,"^@",false,536870919]],["^15",[413,"^Y","generator function",536870919]],["^15",[413,"^11","Generator Function",536870919]],["^15",[413,"^B",1687830959733,536870919]],["^15",[413,"^;","~u649a41af-101e-4ef1-9cbe-bc3c637cba23",536870919]],["^15",[414,"^Q","",536870919]],["^15",[414,"^O","^16",536870919]],["^15",[414,"^F",416,536870919]],["^15",[414,"^X",413,536870919]],["^15",[414,"^V",413,536870919]],["^15",[414,"^U",413,536870919]],["^15",[414,"^17",true,536870919]],["^15",[414,"^;","~u649a41af-a6cf-4f98-88d2-ccd0ac1c607c",536870919]],["^15",[415,"^Q","",536870919]],["^15",[415,"^O","^16",536870919]],["^15",[415,"^F",419,536870919]],["^15",[415,"^X",413,536870919]],["^15",[415,"^V",413,536870919]],["^15",[415,"^U",413,536870919]],["^15",[415,"^17",true,536870919]],["^15",[415,"^;","~u649a41af-2a5f-4c30-8c0d-25d7d192d53d",536870919]],["^15",[416,"^Q","",536870919]],["^15",[416,"^O","^16",536870919]],["^15",[416,"^F",415,536870919]],["^15",[416,"^X",413,536870919]],["^15",[416,"^V",413,536870919]],["^15",[416,"^U",413,536870919]],["^15",[416,"^17",true,536870919]],["^15",[416,"^;","~u649a41af-d21c-48ec-990b-796b8709f7dc",536870919]],["^15",[417,"^Q","",536870919]],["^15",[417,"^O","^16",536870919]],["^15",[417,"^F",418,536870919]],["^15",[417,"^X",413,536870919]],["^15",[417,"^V",413,536870919]],["^15",[417,"^U",413,536870919]],["^15",[417,"^17",true,536870919]],["^15",[417,"^;","~u649a41af-ea65-4778-951e-bb33b2c9e6f3",536870919]],["^15",[418,"^Q","Like Dart or python, JS also supports generator functions which can return values multiple times creating the concept of ``streams``.\nIt works like so\n```js\nfunction* yo(){\n yield 1;\n yield 2;\n return 3;\n}\nlet genny = yo();\nconsole.log(genny.next()); //prints {value: 1, done: false}\nconsole.log(genny.next()); //prints {value: 2, done: false}\nconsole.log(genny.next()); //prints {value: 3, done: true}\n\nlet x = {\n *yo(){ //generator methods\n   ...\n  }\n aye: function*() {} \n};\n```\nThese functions are defined with ``function*`` keyword.  Then we can ``yield`` values in the function. Yielding returns a value or nothing, in which case [[undefined]] is returned, yielding doesn't finish the function, it will send the control back but the position in the function will be remembered so when it is called again it will continue from the yield to the next yield or return. ``return`` however returns the control back and function won't resume again.\n\nA generator function returns an [[Object]] called a ``Generator Object`` which has a method ``.next(<optional arg>)``. When we call next it runs until either it finds a yield , or the function finishes, or the return is found. In all cases ``.next()`` returns an Object with 2 properties, value and done, the done is set to true if the function is finished, that is return or the function's over. value has the returned value, or undefined. \nCalling ``next`` on a finished Generator Object gives value as undefined and done as true.\nCalling the function again can create another generator Object so we can reuse it.\nFor ex.:\n```js\nfunction* yo() {\n return 2; \n}\n\nlet x = yo();\nconsole.log(x.next()); //prints {value: 2, done: true}\nconsole.log(x.next()); //prints {value: undefined, done: true}\n\nx = yo();\nconsole.log(x.next()); //prints {value: 2, done: true}\n```\n\n\n\n for..of [[Loop]]\nGenerator Object's return an [[Iterable]] Object, so they can be iterated over. We can use for..of to do so \n```js\nfunction* yo() {\n yield 1;\n return 2;\n}\n(for let value of yo){....} //value gets just the value of next()\n\n//similarly\nlet x = [...yo]; //as its an iterator, it can use spread Operator\nconsole.log(x); //prints 1 (not 2)\n\n```\n\nHowever, iterators don't get the value returned using ``return``, so they may not completely finish the generator function. This is why it is recommended to only ``yield`` values inside a generator function and let it implicitly return.",536870919]],["^15",[418,"^O","^16",536870919]],["^15",[418,"^F",421,536870919]],["^15",[418,"^X",413,536870919]],["^15",[418,"^V",413,536870919]],["^15",[418,"^U",39,536870919]],["^15",[418,"^U",40,536870919]],["^15",[418,"^U",45,536870919]],["^15",[418,"^U",46,536870919]],["^15",[418,"^U",413,536870919]],["^15",[418,"^H",39,536870919]],["^15",[418,"^H",40,536870919]],["^15",[418,"^H",45,536870919]],["^15",[418,"^H",46,536870919]],["^15",[418,"^17",true,536870919]],["^15",[418,"^;","~u649a41af-d9aa-4345-9e8f-5b0d826b3e59",536870919]],["^15",[419,"^Q","~``<generator obj>.return(<arg>)`` Returns an Object like ``.next()`` returns with the given value and finishes the generator so done is set to true.",536870919]],["^15",[419,"^O","^16",536870919]],["^15",[419,"^F",422,536870919]],["^15",[419,"^X",413,536870919]],["^15",[419,"^V",413,536870919]],["^15",[419,"^U",413,536870919]],["^15",[419,"^17",true,536870919]],["^15",[419,"^;","~u649a41af-e721-4f4a-bff9-64a50dc85220",536870919]],["^15",[420,"^Q","Generator Composition\nUsing ``yield*`` we can delegate yield to another Generator, this is called Generator Composition.\nFor ex.:\n```js\nfunction* gen1(){\n yield 2;\n yield 3;\n}\nfunction* gen2() {\n yield* gen1();\n yield 4;\n}\nlet x= gen2();\nfor(let value of x){\n console.log(value); //prints 2 3 4\n}\n```\nThe flow is exactly like expected, until the delegated generator yields all its values, it keeps yielding.",536870919]],["^15",[420,"^O","^16",536870919]],["^15",[420,"^F",417,536870919]],["^15",[420,"^X",413,536870919]],["^15",[420,"^V",413,536870919]],["^15",[420,"^U",413,536870919]],["^15",[420,"^17",true,536870919]],["^15",[420,"^;","~u649a41af-8d9e-4b23-9678-a6258b9795fa",536870919]],["^15",[421,"^Q","A special type of [[Function]].",536870919]],["^15",[421,"^O","^16",536870919]],["^15",[421,"^F",413,536870919]],["^15",[421,"^X",413,536870919]],["^15",[421,"^V",413,536870919]],["^15",[421,"^U",44,536870919]],["^15",[421,"^U",413,536870919]],["^15",[421,"^H",44,536870919]],["^15",[421,"^17",true,536870919]],["^15",[421,"^;","~u649a41af-56a6-461e-918e-901ab6712156",536870919]],["^15",[422,"^Q","~``.next(<arg>)`` can pass value to ``yield`` [[Operator]\nFor ex.:\n```js\nfunction* gen(){\nlet x = yield 1;\nconsole.log(x);\n}\n\nlet x = gen();\nconsole.log(x.next().value); //prints 1 \nx.next(5); //prints 5\nconsole.log(x.next().value); //prints undefined\n```\nThe first call to ``.next()`` runs the generator till the yield's result. Then it is suspended where yield would return some value or [[undefined]], then the 2nd call to ``.next()`` passes an arg which becomes the ``yield``'s return value and runs the generator until end and last ``.next()`` has no value so it returns undefined.\n\nSimilarly, we can also send an [[Error]] into a generator. To do so we use ``<generator obj>.throw(<err Obj>)``\nFor ex.:\n```js\nfunction* gen() {\ntry {\n  let x = yield 1;\n  console.log(x);\n} catch (err) {\n  console.log(err.message);\n}\n}\n- let x = gen();\nconsole.log(x.next()); //prints 1\nx.throw(new Error(\"nah\")); //prints nah\n```\nIt continues the generator after passing an Error to the yield, if the error is unhandled it leaks back into the calling code.",536870919]],["^15",[422,"^O","^16",536870919]],["^15",[422,"^F",420,536870919]],["^15",[422,"^X",413,536870919]],["^15",[422,"^V",413,536870919]],["^15",[422,"^U",45,536870919]],["^15",[422,"^U",77,536870919]],["^15",[422,"^U",413,536870919]],["^15",[422,"^H",45,536870919]],["^15",[422,"^H",77,536870919]],["^15",[422,"^17",true,536870919]],["^15",[422,"^;","~u649a41af-85d5-4a9b-9451-23029bc1d5d8",536870919]],["^15",[423,"^3","- This [[Object]] contains the Global variables/functions and other environment-specific values in it. It is not the same as the [[Environment Object]] or the [[Lexical Environment]].\n  This object is accessible and even mutable by code, \n  In browsers, ``window`` is the name of this Object, ``global`` in node.js and most modern browsers and other environments also now support ``globalThis`` as a more standard name that doesn't need to depend on the environment.\n- Variables declared with [[var]] and function declarations are directly accessible through the Global Object as they exist as a property in it.\n  That is,\n  ```js\n  var x=2;\n  console.log(global.x); //prints 2\n  ```\n  However, it is unrecommended to rely on this behavior and if we wish to truly have variables persist globally, we should instead set the property directly on the Global Object to set Global Variables.\n- Essentially, JS built-in [[Object]]s we use are all Global Object's properties and JS simply allows syntax sugar to access them.\n  For ex.:\n  ```js\n  alert(2);\n  //is the same as\n  window.alert();\n  //Similarly,\n  let x = new Array();\n  //is the same as\n  let x = new window.Array();\n  ```\n  \n  This is why we can also test for a feature using the Global Object,\n  such as\n  ```js\n  if (!window.Promise) {\n    window.Promise = ... // custom implementation of the modern language feature\n  }\n  ```\n-\n-",536870919]],["^15",[423,"^18",1687830959574,536870919]],["^15",[423,"^Z","pages/Global.md",536870919]],["^15",[424,"^Q","This [[Object]] contains the Global variables/functions and other environment-specific values in it. It is not the same as the [[Environment Object]] or the [[Lexical Environment]].\nThis object is accessible and even mutable by code, \nIn browsers, ``window`` is the name of this Object, ``global`` in node.js and most modern browsers and other environments also now support ``globalThis`` as a more standard name that doesn't need to depend on the environment.",536870919]],["^15",[424,"^O","^16",536870919]],["^15",[424,"^F",296,536870919]],["^15",[424,"^X",296,536870919]],["^15",[424,"^V",296,536870919]],["^15",[424,"^U",39,536870919]],["^15",[424,"^U",296,536870919]],["^15",[424,"^U",339,536870919]],["^15",[424,"^U",355,536870919]],["^15",[424,"^H",39,536870919]],["^15",[424,"^H",339,536870919]],["^15",[424,"^H",355,536870919]],["^15",[424,"^17",true,536870919]],["^15",[424,"^;","~u649a41af-f1ba-4c55-8042-6d7a375cbca8",536870919]],["^15",[425,"^Q","Variables declared with [[var]] and function declarations are directly accessible through the Global Object as they exist as a property in it.\nThat is,\n```js\nvar x=2;\nconsole.log(global.x); //prints 2\n```\nHowever, it is unrecommended to rely on this behavior and if we wish to truly have variables persist globally, we should instead set the property directly on the Global Object to set Global Variables.",536870919]],["^15",[425,"^O","^16",536870919]],["^15",[425,"^F",424,536870919]],["^15",[425,"^X",296,536870919]],["^15",[425,"^V",296,536870919]],["^15",[425,"^U",287,536870919]],["^15",[425,"^U",296,536870919]],["^15",[425,"^H",287,536870919]],["^15",[425,"^17",true,536870919]],["^15",[425,"^;","~u649a41af-e2c3-4b80-a013-cdb50481e40e",536870919]],["^15",[426,"^Q","Essentially, JS built-in [[Object]]s we use are all Global Object's properties and JS simply allows syntax sugar to access them.\nFor ex.:\n```js\nalert(2);\n//is the same as\nwindow.alert();\n//Similarly,\nlet x = new Array();\n//is the same as\nlet x = new window.Array();\n```\n\nThis is why we can also test for a feature using the Global Object,\nsuch as\n```js\nif (!window.Promise) {\n  window.Promise = ... // custom implementation of the modern language feature\n}\n```",536870919]],["^15",[426,"^O","^16",536870919]],["^15",[426,"^F",425,536870919]],["^15",[426,"^X",296,536870919]],["^15",[426,"^V",296,536870919]],["^15",[426,"^U",39,536870919]],["^15",[426,"^U",296,536870919]],["^15",[426,"^H",39,536870919]],["^15",[426,"^17",true,536870919]],["^15",[426,"^;","~u649a41af-290f-4324-9878-bfcf252ba790",536870919]],["^15",[427,"^Q","",536870919]],["^15",[427,"^O","^16",536870919]],["^15",[427,"^F",426,536870919]],["^15",[427,"^X",296,536870919]],["^15",[427,"^V",296,536870919]],["^15",[427,"^U",296,536870919]],["^15",[427,"^17",true,536870919]],["^15",[427,"^;","~u649a41af-7055-4c02-a329-1bf8946972cd",536870919]],["^15",[428,"^Q","",536870919]],["^15",[428,"^O","^16",536870919]],["^15",[428,"^F",427,536870919]],["^15",[428,"^X",296,536870919]],["^15",[428,"^V",296,536870919]],["^15",[428,"^U",296,536870919]],["^15",[428,"^17",true,536870919]],["^15",[428,"^;","~u649a41af-a464-40a6-9ffd-035cc1b6e149",536870919]],["^15",[429,"^3","- Whilst the [[HTML]] spec has these defined, we can also refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) as it is more developer oriented than specification oriented.\n- Headings\n  There's 6 of these elements, ``<h1> </h1>`` to ``<h6> </h6>`` and each level has a smaller font size than the previous from 1 to 6.\n  It is recommended to use sequential pairs (like h1 then h2 )than arbitrary (like h1 then h4) for [[SEO]]\n- Paragraph\n  ``<p> </p>``\n- Lists\n  2 types\n  Ordered List: ``<ol> </ol>`` which assigns number to its items\n  Unordered List: ``<ul> </ul>``\n  \n  Each item in a list is defined inside list item element``<li> </li>``.\n- Links\n  ``<a> </a>``\n  Everything inside is hyperlinked, and the link/url is defined using the ``href=\"<url>\"`` attribute.\n- Link\n  ``<link />``\n  A void element, called the [external resource link element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link). This element establishes a relation between the current document and the given resource. \n  \n  For ex.:\n  Used to link external [[CSS]] resource\n  ```html\n  <link href=\"main.css\" rel=\"stylesheet\" />\n  ``` \n  \n  Can also link fonts, images, etc. any external resource.\n- [[<script>]]\n  This tag allows embedding executable code in an [[HTML]] Document.\n  Can be inserted anywhere in the webpage.\n  For ex.:\n  ```html\n  <!DOCTYPE HTML>\n  <html>\n  \n  <body>\n  \n    <p>Before the script...</p>\n  \n    <script>\n      alert( 'Hello, world!' );\n    </script>\n  \n    <p>...After the script.</p>\n  \n  </body>\n  \n  </html>\n  \n  ```\n  \n  * Attributes:\n  type: for ex. <script type=\"text/javascript\">. \n  Old html4 attr to denote type of a script, with modern HTML it defines [[Javascript]] modules.\n  \n  Language: <script language=…>\n  Old attr. Denotes the language of the script, now defaults and sticks to javascript.\n  \n  src: <script src=\"www.abc.com/something.js\"></script>\n  Instead of providing a body to this tag, we can reference a js file somewhere either through absolute/relative path or URL.\n  The benefit of using src is that browsers can cache the individual scripts and use them instead of fetching them again, thereby reducing the amount of data used in each webpage loading.\n  If both the body and src is provided, the body is ignored.",536870919]],["^15",[429,"^18",1687830959601,536870919]],["^15",[429,"^Z","pages/HTML Element.md",536870919]],["^15",[430,"^K",1687830959600,536870919]],["^15",[430,"^@",false,536870919]],["^15",[430,"^Y","seo",536870919]],["^15",[430,"^11","SEO",536870919]],["^15",[430,"^B",1687830959600,536870919]],["^15",[430,"^;","~u649a41af-a27b-4acc-8243-eb626f3dedea",536870919]],["^15",[431,"^Q","Whilst the [[HTML]] spec has these defined, we can also refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) as it is more developer oriented than specification oriented.",536870919]],["^15",[431,"^O","^16",536870919]],["^15",[431,"^F",120,536870919]],["^15",[431,"^X",120,536870919]],["^15",[431,"^V",120,536870919]],["^15",[431,"^U",30,536870919]],["^15",[431,"^U",120,536870919]],["^15",[431,"^H",30,536870919]],["^15",[431,"^17",true,536870919]],["^15",[431,"^;","~u649a41af-e350-4be4-8d0a-61516eb4b66e",536870919]],["^15",[432,"^Q","Headings\nThere's 6 of these elements, ``<h1> </h1>`` to ``<h6> </h6>`` and each level has a smaller font size than the previous from 1 to 6.\nIt is recommended to use sequential pairs (like h1 then h2 )than arbitrary (like h1 then h4) for [[SEO]]",536870919]],["^15",[432,"^O","^16",536870919]],["^15",[432,"^F",431,536870919]],["^15",[432,"^X",120,536870919]],["^15",[432,"^V",120,536870919]],["^15",[432,"^U",120,536870919]],["^15",[432,"^U",430,536870919]],["^15",[432,"^H",430,536870919]],["^15",[432,"^17",true,536870919]],["^15",[432,"^;","~u649a41af-8837-4aad-a966-52ce3dc914ba",536870919]],["^15",[433,"^Q","Paragraph\n``<p> </p>``",536870919]],["^15",[433,"^O","^16",536870919]],["^15",[433,"^F",432,536870919]],["^15",[433,"^X",120,536870919]],["^15",[433,"^V",120,536870919]],["^15",[433,"^U",120,536870919]],["^15",[433,"^17",true,536870919]],["^15",[433,"^;","~u649a41af-60bf-40a3-a0ed-799dde9e3309",536870919]],["^15",[434,"^Q","Lists\n2 types\nOrdered List: ``<ol> </ol>`` which assigns number to its items\nUnordered List: ``<ul> </ul>``\n\nEach item in a list is defined inside list item element``<li> </li>``.",536870919]],["^15",[434,"^O","^16",536870919]],["^15",[434,"^F",433,536870919]],["^15",[434,"^X",120,536870919]],["^15",[434,"^V",120,536870919]],["^15",[434,"^U",120,536870919]],["^15",[434,"^17",true,536870919]],["^15",[434,"^;","~u649a41af-0c4e-4a5b-b50c-314a607b05d7",536870919]],["^15",[435,"^Q","Links\n``<a> </a>``\nEverything inside is hyperlinked, and the link/url is defined using the ``href=\"<url>\"`` attribute.",536870919]],["^15",[435,"^O","^16",536870919]],["^15",[435,"^F",434,536870919]],["^15",[435,"^X",120,536870919]],["^15",[435,"^V",120,536870919]],["^15",[435,"^U",120,536870919]],["^15",[435,"^17",true,536870919]],["^15",[435,"^;","~u649a41af-9895-4f4d-9279-914f2f1885ac",536870919]],["^15",[436,"^Q","Link\n``<link />``\nA void element, called the [external resource link element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link). This element establishes a relation between the current document and the given resource. \n\nFor ex.:\nUsed to link external [[CSS]] resource\n```html\n<link href=\"main.css\" rel=\"stylesheet\" />\n``` \n\nCan also link fonts, images, etc. any external resource.",536870919]],["^15",[436,"^O","^16",536870919]],["^15",[436,"^F",435,536870919]],["^15",[436,"^X",120,536870919]],["^15",[436,"^V",120,536870919]],["^15",[436,"^U",120,536870919]],["^15",[436,"^U",128,536870919]],["^15",[436,"^H",128,536870919]],["^15",[436,"^17",true,536870919]],["^15",[436,"^;","~u649a41af-9eab-48ed-bf9f-96869b56aabb",536870919]],["^15",[437,"^Q","[[<script>]]\nThis tag allows embedding executable code in an [[HTML]] Document.\nCan be inserted anywhere in the webpage.\nFor ex.:\n```html\n<!DOCTYPE HTML>\n<html>\n\n<body>\n\n  <p>Before the script...</p>\n\n  <script>\n    alert( 'Hello, world!' );\n  </script>\n\n  <p>...After the script.</p>\n\n</body>\n\n</html>\n\n```\n\n* Attributes:\ntype: for ex. <script type=\"text/javascript\">. \nOld html4 attr to denote type of a script, with modern HTML it defines [[Javascript]] modules.\n\nLanguage: <script language=…>\nOld attr. Denotes the language of the script, now defaults and sticks to javascript.\n\nsrc: <script src=\"www.abc.com/something.js\"></script>\nInstead of providing a body to this tag, we can reference a js file somewhere either through absolute/relative path or URL.\nThe benefit of using src is that browsers can cache the individual scripts and use them instead of fetching them again, thereby reducing the amount of data used in each webpage loading.\nIf both the body and src is provided, the body is ignored.",536870919]],["^15",[437,"^O","^16",536870919]],["^15",[437,"^F",436,536870919]],["^15",[437,"^X",120,536870919]],["^15",[437,"^V",120,536870919]],["^15",[437,"^U",29,536870919]],["^15",[437,"^U",30,536870919]],["^15",[437,"^U",120,536870919]],["^15",[437,"^U",294,536870919]],["^15",[437,"^H",29,536870919]],["^15",[437,"^H",30,536870919]],["^15",[437,"^H",294,536870919]],["^15",[437,"^17",true,536870919]],["^15",[437,"^;","~u649a41af-a942-4c44-bc39-10ef7c39afe4",536870919]],["^15",[438,"^3","alias:: Hyper Text Markup Language\n\n- It is a text format understood by browsers natively, defined here [HTML](https://html.spec.whatwg.org/). \n  The file format is denoted with``.html``\n  For ex.:\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"en-US\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width\" />\n      <title>My test page</title>\n    </head>\n    <body>\n      <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n    </body>\n  </html>\n  \n  ```\n  \n  HTML is a text markup language, meaning it gives a different look to content, and defines Elements and Attributes that do so.\n- The ``<!DOCTYPE HTML>`` directive denotes a text file is an HTML Document and is necessary. It is not an HTML element but it is still a part of the [[DOM]].\n  It also affects the top-level Geometry properties of the [[DOM Class Property]] by giving odd behavior if not present.\n- ``Elements`` and ``Tags``\n  HTML Elements are text tokens that are parsed by HTML as meaningful entities, like ``keywords`` of [[ECMAScript]].  Then each tag is a part of an element, generally each element has 2 tags, an opening tag denoting where the element starts and an end tag where it finishes. The content within is the body of the element.\n  \n  For ex.:\n  ```html\n  <html>\n  </html>\n  ```\n  Here the element is ``html``, and it's start tag is ``<html>`` and end tag is ``</html>``.\n  Some elements have a single tag as they don't need an explicit ending tag but they can still optionally use an ending tag. These are also called void elements.\n  For ex.:\n  ```html\n  <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n  ```\n  \n   Consequently, the ``tagName`` of any element, is the name of the element. So here the element is ``html`` so the tag ``<html>`` will have ``tagName`` of ``html``.\n  ![paragraph element including opening tag, content reading 'my cat is very grumpy', and a closing tag](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-small.png)\n  \n  * We can nest elements in HTML. Meaning a single element can have multiple children and so on for a variable depth (atleast >100).\n- Most useful [[HTML Element]]s \n  ``html`` element, which wraps the HTML content and is the rootmost element. It also has a ``lang`` attribute which denotes the language of the page.\n  ``head`` element which is a container for all the content that won't be visible as the content of the page, such as its title, encoding etc.\n  ``body`` element which finally holds the body of the Document, the content inside it is the content that is displayed on the page by the [[Brower]]s \n  [[<script>]] element which holds the executable script (JS) in it. \n  ``meta`` This void element defines important metadata of the document.\n  \n  There can be only single of all of these elements except script and meta element in a document.\n  For ex.:\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"en-US\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width\" />\n      <title>My test page</title>\n    </head>\n    <body>\n      <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n    </body>\n  </html>\n  \n  ```\n- Attributes\n  Every HTML element has some ``attributes`` which are basically additional properties accepted by the said element. These modify the Element's functionality or are there just to hold some information. \n  \n  These are generally ``key=value`` pairs but some are enabled just with a single keyword.\n  For ex.:\n  ```html\n  ...\n  <div id=\"yo\"> </div>\n  <!-- Here yo is the value to the id attribute of div element -->\n  ```\n  ![Paragraph opening tag with a class attribute highlighted: class=editor-note](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-attribute-small.png)\n  \n  Attribute names are case insensitive so we can use ``id`` or ``ID`` etc. it works.\n  \n  Whilst these depend on the element itself, there are some attributes which are common across all/most elements called [Global Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes).\n  * ``id=\"<value>\"``: Unique Id for any given element. This Id can be used by both [[CSS]] and [[<script>]] to modify the element. If it is not unique then any element with the same Id can be picked at random by the script or CSS.\n  \n  * ``class=\"<value>\"``: Space separated list of identifiers that can be used to group elements together for the CSS and JS. Just like the ID provides a unique identifier for each element, the class attribute provides a/multiple common identifier(s) for each element.\n-\n- Most HTML documents can be created dynamically.\n  For ex.:\n  ```js\n  function loadScript(src) {\n    // creates a <script> tag and append it to the page\n    // this causes the script with given src to start loading and run when complete\n    let script = document.createElement('script');\n    script.src = src;\n    document.head.append(script);\n  }\n  ```\n  This [[Function]] appends a [[<script>]] tag to the top of an ``HTML Document`` and assigns its src attribute the value given. This way we can dynamically add JS scripts to our Document. This is [[DOM]] manipulation.\n- Autocorrection\n  [[Brower]]s can autocorrect many common HTML errors, such as if we just put some text in a ``.html`` file then they would automatically add the ``<HTML>``, ``<Head>`` and ``<Body>`` tags enclosing it.\n  Similarly, it also auto closes tags.\n- Comment\n  A comment in HTML goes like so ``<!-- .... -->``\n  For ex.:\n  ```html\n  <!DOCTYPE HTML>\n  <html>\n  <body>\n    The truth about elk.\n    <ol>\n      <li>An elk is a smart</li>\n      <!-- comment -->\n      <li>...and cunning animal!</li>\n    </ol>\n  </body>\n  </html>\n  ```\n  Comments still appear in the [[DOM]]\n  ![image.png](../assets/image_1687271848413_0.png)\n- [[HTML Element]]s\n- Each of the [[HTML Element]]s has a ``style`` attribute, which is defined using [[CSS]].\n  That said, there are basically 2 ways to provide style to an [[HTML Element]]\n  Either through the ``style`` attribute which can be provided by inline/internal/external CSS. \n  \n  Or through the ``class`` attribute.\n  Providing a ``class`` attribute to an HTML element also allows it to be styled by the same CSS given it selects the class\n-",536871263]],["^15",[438,"^18",1687830959643,536870919]],["^15",[438,"^19","~m1687834881948",536871262]],["^15",[438,"^Z","pages/HTML.md",536870919]],["^15",[439,"^5",30,536870919]],["^15",[439,"^K",1687830959641,536870919]],["^15",[439,"^@",false,536870919]],["^15",[439,"^Y","hyper text markup language",536870919]],["^15",[439,"^11","Hyper Text Markup Language",536870919]],["^15",[439,"^B",1687830959641,536870919]],["^15",[439,"^;","~u649a41af-7b67-4537-80ed-7252114bccf5",536870919]],["^15",[440,"^Q","[[HTML Element]]s",536870919]],["^15",[440,"^O","^16",536870919]],["^15",[440,"^F",447,536870919]],["^15",[440,"^X",30,536870919]],["^15",[440,"^V",30,536870919]],["^15",[440,"^U",30,536870919]],["^15",[440,"^U",120,536870919]],["^15",[440,"^H",120,536870919]],["^15",[440,"^17",true,536870919]],["^15",[440,"^;","~u649a41af-44de-479b-8513-cd38bc5f317a",536870919]],["^15",[441,"^Q","Each of the [[HTML Element]]s has a ``style`` attribute, which is defined using [[CSS]].\nThat said, there are basically 2 ways to provide style to an [[HTML Element]]\nEither through the ``style`` attribute which can be provided by inline/internal/external CSS. \n\nOr through the ``class`` attribute.\nProviding a ``class`` attribute to an HTML element also allows it to be styled by the same CSS given it selects the class",536870919]],["^15",[441,"^O","^16",536870919]],["^15",[441,"^F",440,536870919]],["^15",[441,"^X",30,536870919]],["^15",[441,"^V",30,536870919]],["^15",[441,"^U",30,536870919]],["^15",[441,"^U",120,536870919]],["^15",[441,"^U",128,536870919]],["^15",[441,"^H",120,536870919]],["^15",[441,"^H",128,536870919]],["^15",[441,"^17",true,536870919]],["^15",[441,"^;","~u649a41af-614a-49a3-aead-6cee6fb8354c",536870919]],["^15",[442,"^Q","",536870919]],["^15",[442,"^O","^16",536870919]],["^15",[442,"^F",441,536870919]],["^15",[442,"^X",30,536870919]],["^15",[442,"^V",30,536870919]],["^15",[442,"^U",30,536870919]],["^15",[442,"^17",true,536870919]],["^15",[442,"^;","~u649a41af-a013-44fb-9b35-d538e379a96a",536870919]],["^15",[443,"^Q","",536870919]],["^15",[443,"^O","^16",536870919]],["^15",[443,"^F",448,536870919]],["^15",[443,"^X",30,536870919]],["^15",[443,"^V",30,536870919]],["^15",[443,"^U",30,536870919]],["^15",[443,"^17",true,536870919]],["^15",[443,"^;","~u649a41af-aa8d-411f-9636-19dd2203e166",536870919]],["^15",[444,"^Q","~``Elements`` and ``Tags``\nHTML Elements are text tokens that are parsed by HTML as meaningful entities, like ``keywords`` of [[ECMAScript]].  Then each tag is a part of an element, generally each element has 2 tags, an opening tag denoting where the element starts and an end tag where it finishes. The content within is the body of the element.\n\nFor ex.:\n```html\n<html>\n</html>\n```\nHere the element is ``html``, and it's start tag is ``<html>`` and end tag is ``</html>``.\nSome elements have a single tag as they don't need an explicit ending tag but they can still optionally use an ending tag. These are also called void elements.\nFor ex.:\n```html\n<img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n```\n\n Consequently, the ``tagName`` of any element, is the name of the element. So here the element is ``html`` so the tag ``<html>`` will have ``tagName`` of ``html``.\n![paragraph element including opening tag, content reading 'my cat is very grumpy', and a closing tag](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-small.png)\n\n* We can nest elements in HTML. Meaning a single element can have multiple children and so on for a variable depth (atleast >100).",536870919]],["^15",[444,"^O","^16",536870919]],["^15",[444,"^F",451,536870919]],["^15",[444,"^X",30,536870919]],["^15",[444,"^V",30,536870919]],["^15",[444,"^U",24,536870919]],["^15",[444,"^U",30,536870919]],["^15",[444,"^H",24,536870919]],["^15",[444,"^17",true,536870919]],["^15",[444,"^;","~u649a41af-fb27-41ad-9f21-d5c89526f318",536870919]],["^15",[445,"^Q","Autocorrection\n[[Brower]]s can autocorrect many common HTML errors, such as if we just put some text in a ``.html`` file then they would automatically add the ``<HTML>``, ``<Head>`` and ``<Body>`` tags enclosing it.\nSimilarly, it also auto closes tags.",536870919]],["^15",[445,"^O","^16",536870919]],["^15",[445,"^F",446,536870919]],["^15",[445,"^X",30,536870919]],["^15",[445,"^V",30,536870919]],["^15",[445,"^U",30,536870919]],["^15",[445,"^U",210,536870919]],["^15",[445,"^H",210,536870919]],["^15",[445,"^17",true,536870919]],["^15",[445,"^;","~u649a41af-b514-46e5-9f37-8c011218b96e",536870919]],["^15",[446,"^Q","Most HTML documents can be created dynamically.\nFor ex.:\n```js\nfunction loadScript(src) {\n  // creates a <script> tag and append it to the page\n  // this causes the script with given src to start loading and run when complete\n  let script = document.createElement('script');\n  script.src = src;\n  document.head.append(script);\n}\n```\nThis [[Function]] appends a [[<script>]] tag to the top of an ``HTML Document`` and assigns its src attribute the value given. This way we can dynamically add JS scripts to our Document. This is [[DOM]] manipulation.",536870919]],["^15",[446,"^O","^16",536870919]],["^15",[446,"^F",443,536870919]],["^15",[446,"^X",30,536870919]],["^15",[446,"^V",30,536870919]],["^15",[446,"^U",29,536870919]],["^15",[446,"^U",30,536870919]],["^15",[446,"^U",44,536870919]],["^15",[446,"^U",114,536870919]],["^15",[446,"^H",29,536870919]],["^15",[446,"^H",44,536870919]],["^15",[446,"^H",114,536870919]],["^15",[446,"^17",true,536870919]],["^15",[446,"^;","~u649a41af-b1cb-48fb-b8e1-d753183dacee",536870919]],["^15",[447,"^Q","Comment\nA comment in HTML goes like so ``<!-- .... -->``\nFor ex.:\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n  The truth about elk.\n  <ol>\n    <li>An elk is a smart</li>\n    <!-- comment -->\n    <li>...and cunning animal!</li>\n  </ol>\n</body>\n</html>\n```\nComments still appear in the [[DOM]]\n![image.png](../assets/image_1687271848413_0.png)",536870919]],["^15",[447,"^O","^16",536870919]],["^15",[447,"^F",445,536870919]],["^15",[447,"^X",30,536870919]],["^15",[447,"^V",30,536870919]],["^15",[447,"^U",30,536870919]],["^15",[447,"^U",114,536870919]],["^15",[447,"^H",114,536870919]],["^15",[447,"^17",true,536870919]],["^15",[447,"^;","~u649a41af-f30e-4ca6-b090-1df9aa8bc36b",536870919]],["^15",[448,"^Q","Attributes\nEvery HTML element has some ``attributes`` which are basically additional properties accepted by the said element. These modify the Element's functionality or are there just to hold some information. \n\nThese are generally ``key=value`` pairs but some are enabled just with a single keyword.\nFor ex.:\n```html\n...\n<div id=\"yo\"> </div>\n<!-- Here yo is the value to the id attribute of div element -->\n```\n![Paragraph opening tag with a class attribute highlighted: class=editor-note](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-attribute-small.png)\n\nAttribute names are case insensitive so we can use ``id`` or ``ID`` etc. it works.\n\nWhilst these depend on the element itself, there are some attributes which are common across all/most elements called [Global Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes).\n* ``id=\"<value>\"``: Unique Id for any given element. This Id can be used by both [[CSS]] and [[<script>]] to modify the element. If it is not unique then any element with the same Id can be picked at random by the script or CSS.\n\n* ``class=\"<value>\"``: Space separated list of identifiers that can be used to group elements together for the CSS and JS. Just like the ID provides a unique identifier for each element, the class attribute provides a/multiple common identifier(s) for each element.",536871261]],["^15",[448,"^O","^16",536870919]],["^15",[448,"^F",450,536870919]],["^15",[448,"^X",30,536870919]],["^15",[448,"^V",30,536870919]],["^15",[448,"^U",29,536870919]],["^15",[448,"^U",30,536870919]],["^15",[448,"^U",128,536870919]],["^15",[448,"^?",["^ "],536871261]],["^15",[448,"^H",29,536871261]],["^15",[448,"^H",128,536871261]],["^15",[448,"^17",true,536870919]],["^15",[448,"^;","~u649a41af-d2d2-42ad-a11d-f9fedd268527",536870919]],["^15",[449,"^Q","It is a text format understood by browsers natively, defined here [HTML](https://html.spec.whatwg.org/). \nThe file format is denoted with``.html``\nFor ex.:\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>My test page</title>\n  </head>\n  <body>\n    <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n  </body>\n</html>\n\n```\n\nHTML is a text markup language, meaning it gives a different look to content, and defines Elements and Attributes that do so.",536870919]],["^15",[449,"^O","^16",536870919]],["^15",[449,"^F",452,536870919]],["^15",[449,"^X",30,536870919]],["^15",[449,"^V",30,536870919]],["^15",[449,"^U",30,536870919]],["^15",[449,"^17",true,536870919]],["^15",[449,"^;","~u649a41af-4eef-451c-86c4-b968fd02a6d6",536870919]],["^15",[450,"^Q","Most useful [[HTML Element]]s \n``html`` element, which wraps the HTML content and is the rootmost element. It also has a ``lang`` attribute which denotes the language of the page.\n``head`` element which is a container for all the content that won't be visible as the content of the page, such as its title, encoding etc.\n``body`` element which finally holds the body of the Document, the content inside it is the content that is displayed on the page by the [[Brower]]s \n[[<script>]] element which holds the executable script (JS) in it. \n``meta`` This void element defines important metadata of the document.\n\nThere can be only single of all of these elements except script and meta element in a document.\nFor ex.:\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>My test page</title>\n  </head>\n  <body>\n    <img src=\"images/firefox-icon.png\" alt=\"My test image\" />\n  </body>\n</html>\n\n```",536871210]],["^15",[450,"^O","^16",536870919]],["^15",[450,"^F",444,536870919]],["^15",[450,"^X",30,536870919]],["^15",[450,"^V",30,536870919]],["^15",[450,"^U",29,536870919]],["^15",[450,"^U",30,536870919]],["^15",[450,"^U",120,536870919]],["^15",[450,"^U",210,536870919]],["^15",[450,"^?",["^ "],536871210]],["^15",[450,"^H",29,536871210]],["^15",[450,"^H",120,536871210]],["^15",[450,"^H",210,536871210]],["^15",[450,"^17",true,536870919]],["^15",[450,"^;","~u649a41af-7516-4b0c-81e9-6ec1295680e6",536870919]],["^15",[451,"^Q","The ``<!DOCTYPE HTML>`` directive denotes a text file is an HTML Document and is necessary. It is not an HTML element but it is still a part of the [[DOM]].\nIt also affects the top-level Geometry properties of the [[DOM Class Property]] by giving odd behavior if not present.",536870919]],["^15",[451,"^O","^16",536870919]],["^15",[451,"^F",449,536870919]],["^15",[451,"^X",30,536870919]],["^15",[451,"^V",30,536870919]],["^15",[451,"^U",30,536870919]],["^15",[451,"^U",114,536870919]],["^15",[451,"^U",211,536870919]],["^15",[451,"^H",114,536870919]],["^15",[451,"^H",211,536870919]],["^15",[451,"^17",true,536870919]],["^15",[451,"^;","~u649a41af-7244-4362-9e53-8a536ebc5d85",536870919]],["^15",[452,"^Q","alias:: Hyper Text Markup Language\n\n",536870919]],["^15",[452,"^O","^16",536870919]],["^15",[452,"^1>",["^1;",[]],536870919]],["^15",[452,"^F",30,536870919]],["^15",[452,"^X",30,536870919]],["^15",[452,"^V",30,536870919]],["^15",[452,"^U",30,536870919]],["^15",[452,"^U",439,536870919]],["^15",[452,"^:",true,536870919]],["^15",[452,"^?",["^ ","^1:",["^1;",["Hyper Text Markup Language"]]],536870919]],["^15",[452,"^J",["^1:"],536870919]],["^15",[452,"^4",["^ ","^1:","Hyper Text Markup Language"],536870919]],["^15",[452,"^H",439,536870919]],["^15",[452,"^17",true,536870919]],["^15",[452,"^;","~u649a41af-d2e4-4d9f-85c6-e17cf3dcb916",536870919]],["^15",[453,"^3","- An Iterable is an [[Object]] that has the [[Symbol]] method `[Symbol.Iterator]` or `[Symbol.asyncIterator]` in it with a value that is a function which returns an Object which has a method ``.next()`` which returns an Object with a value and a done property.\n  For ex.:\n  ```js\n  let x= { \n   a: 0,\n   b: 5,\n   [Symbol.iterator]: function() {\n    return {\n     a: this.a,\n     b: this.b,\n     next() {\n       if (a<=b) \n          return {done: false, value: this.a++};\n       else\n           return {done:true, value: this.a};\n      }\n    };\n   }\n  };\n  \n  for (let i of x) {...} //gets 0,1,2,3,4,5\n  ```\n- [[Async]] Iteration over [[Iterable]]\n  We use ``for await (let value of iterable)`` to [[Loop]] over async iterators.\n  An ``async`` iterator is an Object with a [[Symbol]] property ``Symbol.asyncIterator`` that works much like ``Symbol.Iterator`` but instead uses an async ``.next()``.\n  For ex.:\n  ```js\n  let x = {\n  start = 1,\n  end = 5,\n  [Symbol.asyncIterator](){\n  return {\n   start: this.start,\n   end: this.end,\n   async next() {\n      if(this.start <= this.end) return {done:false, value: this.start++}\n      else return {done: true}\n    }\n   }\n  }\n  }\n  - (async ()=> {\n  for await (let value of x){\n  console.log(value); //prints 1,2,3,4,5\n   }\n  })();\n  ```\n  ``Symbol.asyncIterator`` must have a ``next()`` that returns Promises, so either explicitly or implicitly using async keyword. Recall that we can't use ``await`` outside top-level of [[Module]]s or async functions or Promises, this is why we need to do this trick here to use ``for..await of``.\n- [[Async]] [[Generator Function]] [[Iterable]]\n  We simply make an async Iterable and use yield instead of return in its next. Then we can use an Async Iterable.\n  For ex.:\n  ```js\n  let range = {\n    from: 1,\n    to: 5,\n  \n    async* [Symbol.asyncIterator]() {\n      for(let value = this.from; value <= this.to; value++) {\n        yield value;\n      }\n    }\n  };\n  \n  (async () => {\n  \n    for await (let value of range) {\n      console.log(value); // 1, then 2, then 3, then 4, then 5\n    }\n  \n  })();\n  ```\n  Normal async generator functions can simply use ``async function* <name>(<params>){...}`` and for their values we need to use ``await <generator obj>.next(<optional arg>)`` to get the value.",536870919]],["^15",[453,"^18",1687830959659,536870919]],["^15",[453,"^Z","pages/Iterable.md",536870919]],["^15",[454,"^Q","An Iterable is an [[Object]] that has the [[Symbol]] method `[Symbol.Iterator]` or `[Symbol.asyncIterator]` in it with a value that is a function which returns an Object which has a method ``.next()`` which returns an Object with a value and a done property.\nFor ex.:\n```js\nlet x= { \n a: 0,\n b: 5,\n [Symbol.iterator]: function() {\n  return {\n   a: this.a,\n   b: this.b,\n   next() {\n     if (a<=b) \n        return {done: false, value: this.a++};\n     else\n         return {done:true, value: this.a};\n    }\n  };\n }\n};\n\nfor (let i of x) {...} //gets 0,1,2,3,4,5\n```",536870919]],["^15",[454,"^O","^16",536870919]],["^15",[454,"^F",46,536870919]],["^15",[454,"^X",46,536870919]],["^15",[454,"^V",46,536870919]],["^15",[454,"^U",39,536870919]],["^15",[454,"^U",43,536870919]],["^15",[454,"^U",46,536870919]],["^15",[454,"^H",39,536870919]],["^15",[454,"^H",43,536870919]],["^15",[454,"^17",true,536870919]],["^15",[454,"^;","~u649a41af-af33-4202-a224-d45b2ebecac1",536870919]],["^15",[455,"^Q","[[Async]] Iteration over [[Iterable]]\nWe use ``for await (let value of iterable)`` to [[Loop]] over async iterators.\nAn ``async`` iterator is an Object with a [[Symbol]] property ``Symbol.asyncIterator`` that works much like ``Symbol.Iterator`` but instead uses an async ``.next()``.\nFor ex.:\n```js\nlet x = {\nstart = 1,\nend = 5,\n[Symbol.asyncIterator](){\nreturn {\n start: this.start,\n end: this.end,\n async next() {\n    if(this.start <= this.end) return {done:false, value: this.start++}\n    else return {done: true}\n  }\n }\n}\n}\n- (async ()=> {\nfor await (let value of x){\nconsole.log(value); //prints 1,2,3,4,5\n }\n})();\n```\n``Symbol.asyncIterator`` must have a ``next()`` that returns Promises, so either explicitly or implicitly using async keyword. Recall that we can't use ``await`` outside top-level of [[Module]]s or async functions or Promises, this is why we need to do this trick here to use ``for..await of``.",536870919]],["^15",[455,"^O","^16",536870919]],["^15",[455,"^F",454,536870919]],["^15",[455,"^X",46,536870919]],["^15",[455,"^V",46,536870919]],["^15",[455,"^U",32,536870919]],["^15",[455,"^U",40,536870919]],["^15",[455,"^U",43,536870919]],["^15",[455,"^U",46,536870919]],["^15",[455,"^U",78,536870919]],["^15",[455,"^H",32,536870919]],["^15",[455,"^H",40,536870919]],["^15",[455,"^H",43,536870919]],["^15",[455,"^H",46,536870919]],["^15",[455,"^H",78,536870919]],["^15",[455,"^17",true,536870919]],["^15",[455,"^;","~u649a41af-1ceb-4ba7-a6d1-17171f78c00b",536870919]],["^15",[456,"^Q","[[Async]] [[Generator Function]] [[Iterable]]\nWe simply make an async Iterable and use yield instead of return in its next. Then we can use an Async Iterable.\nFor ex.:\n```js\nlet range = {\n  from: 1,\n  to: 5,\n\n  async* [Symbol.asyncIterator]() {\n    for(let value = this.from; value <= this.to; value++) {\n      yield value;\n    }\n  }\n};\n\n(async () => {\n\n  for await (let value of range) {\n    console.log(value); // 1, then 2, then 3, then 4, then 5\n  }\n\n})();\n```\nNormal async generator functions can simply use ``async function* <name>(<params>){...}`` and for their values we need to use ``await <generator obj>.next(<optional arg>)`` to get the value.",536870919]],["^15",[456,"^O","^16",536870919]],["^15",[456,"^F",455,536870919]],["^15",[456,"^X",46,536870919]],["^15",[456,"^V",46,536870919]],["^15",[456,"^U",46,536870919]],["^15",[456,"^U",78,536870919]],["^15",[456,"^U",413,536870919]],["^15",[456,"^H",46,536870919]],["^15",[456,"^H",78,536870919]],["^15",[456,"^H",413,536870919]],["^15",[456,"^17",true,536870919]],["^15",[456,"^;","~u649a41af-bc81-42e1-b2cb-5ffe29d901a7",536870919]],["^15",[457,"^3","alias:: JavaScript Object Notation\n\n- General format to represent values and objects, as described in [RFC4627](https://datatracker.ietf.org/doc/html/rfc4627)\n- The JSON [[Object]] helps parse and create string from JS Objects. \n  ``JSON.parse(<str>, <optional reviver function (key,value)>)`` parses a str and returns an Object \n  ``JSON.stringify(obj, <optional replacer function (key,value)/array for selecting properties>, <optional int indent space count>)`` Creates a string from an Object. This String follows JSON formatting.\n- The ``.stringify(...)`` method accepts an optional replacer array, only properties given in this array are taken from the object. Or if a function then maps all keys to new values returned by it in the resulting string.\n  For ex.:\n  ```js\n  let meetup = {\n    title: \"Conference\",\n    participants: [{name: \"John\"}, {name: \"Alice\"}],\n  };\n  \n  \n  console.log( JSON.stringify(meetup, ['title', 'participants']) );\n  // {\"title\":\"Conference\",\"participants\":[{},{}]}\n  ```\n- The ``.stringify()`` first checks if the [[Object]] has a ``toJSON()`` [[Function]] in it. If it does, then it calls it and it's result is the return of the function instead.\n  ```js\n  let x= {\n   a:2,\n   toJSON() {\n    return this.a;\n    }\n  };\n  \n  console.log(JSON.stringify(x)); //prints 2\n  ```\n- Similar to ``.stringify(...)``, ``.parse(...)`` accepts a method. Each key and value picked is passed to it and the value returned by the function is assigned to the key in the resulting object.\n-",536870919]],["^15",[457,"^18",1687830959677,536870919]],["^15",[457,"^Z","pages/JSON.md",536870919]],["^15",[458,"^5",281,536870919]],["^15",[458,"^K",1687830959676,536870919]],["^15",[458,"^@",false,536870919]],["^15",[458,"^Y","javascript object notation",536870919]],["^15",[458,"^11","JavaScript Object Notation",536870919]],["^15",[458,"^B",1687830959676,536870919]],["^15",[458,"^;","~u649a41af-dac7-4523-b165-f4c4a7045afa",536870919]],["^15",[459,"^Q","alias:: JavaScript Object Notation\n\n",536870919]],["^15",[459,"^O","^16",536870919]],["^15",[459,"^1>",["^1;",[]],536870919]],["^15",[459,"^F",281,536870919]],["^15",[459,"^X",281,536870919]],["^15",[459,"^V",281,536870919]],["^15",[459,"^U",281,536870919]],["^15",[459,"^U",458,536870919]],["^15",[459,"^:",true,536870919]],["^15",[459,"^?",["^ ","^1:",["^1;",["JavaScript Object Notation"]]],536870919]],["^15",[459,"^J",["^1:"],536870919]],["^15",[459,"^4",["^ ","^1:","JavaScript Object Notation"],536870919]],["^15",[459,"^H",458,536870919]],["^15",[459,"^17",true,536870919]],["^15",[459,"^;","~u649a41af-8f69-40df-8885-d67fdffa6a4c",536870919]],["^15",[460,"^Q","General format to represent values and objects, as described in [RFC4627](https://datatracker.ietf.org/doc/html/rfc4627)",536870919]],["^15",[460,"^O","^16",536870919]],["^15",[460,"^F",459,536870919]],["^15",[460,"^X",281,536870919]],["^15",[460,"^V",281,536870919]],["^15",[460,"^U",281,536870919]],["^15",[460,"^17",true,536870919]],["^15",[460,"^;","~u649a41af-dd1b-4566-a57d-d2f3628a9bad",536870919]],["^15",[461,"^Q","The JSON [[Object]] helps parse and create string from JS Objects. \n``JSON.parse(<str>, <optional reviver function (key,value)>)`` parses a str and returns an Object \n``JSON.stringify(obj, <optional replacer function (key,value)/array for selecting properties>, <optional int indent space count>)`` Creates a string from an Object. This String follows JSON formatting.",536870919]],["^15",[461,"^O","^16",536870919]],["^15",[461,"^F",460,536870919]],["^15",[461,"^X",281,536870919]],["^15",[461,"^V",281,536870919]],["^15",[461,"^U",39,536870919]],["^15",[461,"^U",281,536870919]],["^15",[461,"^H",39,536870919]],["^15",[461,"^17",true,536870919]],["^15",[461,"^;","~u649a41af-2b63-4e92-8e18-1c85b14cc168",536870919]],["^15",[462,"^Q","The ``.stringify(...)`` method accepts an optional replacer array, only properties given in this array are taken from the object. Or if a function then maps all keys to new values returned by it in the resulting string.\nFor ex.:\n```js\nlet meetup = {\n  title: \"Conference\",\n  participants: [{name: \"John\"}, {name: \"Alice\"}],\n};\n\n\nconsole.log( JSON.stringify(meetup, ['title', 'participants']) );\n// {\"title\":\"Conference\",\"participants\":[{},{}]}\n```",536870919]],["^15",[462,"^O","^16",536870919]],["^15",[462,"^F",461,536870919]],["^15",[462,"^X",281,536870919]],["^15",[462,"^V",281,536870919]],["^15",[462,"^U",281,536870919]],["^15",[462,"^17",true,536870919]],["^15",[462,"^;","~u649a41af-a2f5-4262-958b-448a8e6f62c5",536870919]],["^15",[463,"^Q","The ``.stringify()`` first checks if the [[Object]] has a ``toJSON()`` [[Function]] in it. If it does, then it calls it and it's result is the return of the function instead.\n```js\nlet x= {\n a:2,\n toJSON() {\n  return this.a;\n  }\n};\n\nconsole.log(JSON.stringify(x)); //prints 2\n```",536870919]],["^15",[463,"^O","^16",536870919]],["^15",[463,"^F",462,536870919]],["^15",[463,"^X",281,536870919]],["^15",[463,"^V",281,536870919]],["^15",[463,"^U",39,536870919]],["^15",[463,"^U",44,536870919]],["^15",[463,"^U",281,536870919]],["^15",[463,"^H",39,536870919]],["^15",[463,"^H",44,536870919]],["^15",[463,"^17",true,536870919]],["^15",[463,"^;","~u649a41af-af69-4a6a-835f-dd92d6f0f1dd",536870919]],["^15",[464,"^Q","Similar to ``.stringify(...)``, ``.parse(...)`` accepts a method. Each key and value picked is passed to it and the value returned by the function is assigned to the key in the resulting object.",536870919]],["^15",[464,"^O","^16",536870919]],["^15",[464,"^F",463,536870919]],["^15",[464,"^X",281,536870919]],["^15",[464,"^V",281,536870919]],["^15",[464,"^U",281,536870919]],["^15",[464,"^17",true,536870919]],["^15",[464,"^;","~u649a41af-c868-4326-a8fe-0a78763fd550",536870919]],["^15",[465,"^Q","",536870919]],["^15",[465,"^O","^16",536870919]],["^15",[465,"^F",464,536870919]],["^15",[465,"^X",281,536870919]],["^15",[465,"^V",281,536870919]],["^15",[465,"^U",281,536870919]],["^15",[465,"^17",true,536870919]],["^15",[465,"^;","~u649a41af-b483-436b-9a46-c242e862a195",536870919]],["^15",[466,"^3","- In JS, all code is associated with a hidden internal [[Object]] called the ``Lexical Environment``.\n  It is a theoretical construct [Lexical Environment](https://tc39.es/ecma262/#sec-lexical-environments)  that exists only in the spec to define the behavior and is not an actual Object.\n- It has 2 parts,\n  * [[Environment Record]]: An [[Object]] that stores all local variables as properties, and some other information like the values of [[this]].\n  For ex.:\n  ![image.png](../assets/image_1686157370645_0.png)\n   \n  * and a reference to the outer Lexical Environment.\n  \n  There's a ``Global Lexical Environment``, that is associated with the whole JS script. It's outer reference is [[null]] because it has no parent Lexical Environment to refer to.\n- Variable lifetime\n  ![image.png](../assets/image_1686171768924_0.png)\n  \n  JS already stores a declared variable's property in the [[Environment Record]] even before it is actually declared, this is thanks to the JIT [[Compilation]]. There are many [[Optimization]]s and tricks used by the engine to remove unused variables and modify parts, to have the same effect as intended but with lower costs.\n  This is also to say, variables in JS are rather, properties of the [[Environment Record]] [[Object]] and we are simply using that property to hold values.\n- [[Function]] lifetime\n  Unlike the variable lifetime, a function declaration is already initialized in the [[Environment Record]] if it is declared anywhere. This is why Function declarations can be called even before appearing in the code in the same [[Scope]].\n  ![image.png](../assets/image_1686172495303_0.png)\n  \n  This is because function is also a value in JS, and is instantly fully initialized.\n  \n  Function expressions are tied to variables so they follow Variable lifetime.\n- Reference to the outer Lexical Environment\n  Whenever a new LE is created, it has a reference to the outer LE.\n  ![image.png](../assets/image_1686172648317_0.png)\n  \n  This is how this example is valid:\n  ```js\n  function yo() {\n    let x = 1;\n    return function() {\n      console.log(x++);\n    }\n  }\n  \n  let y = yo();\n  y();  //prints 1\n  y(); // 2\n  y(); // 3\n  ```\n  as yo()'s LE is stored by the returned function. \n  \n  This is also to say, when a variable is to be searched, it is searched from within the current to the outermost [[Environment Record]].\n  \n  More specifically, all functions have a hidden [[Environment Object]]\n  ![image.png](../assets/image_1686173328589_0.png)\n  This is always set once, that is when a function is created and holds the outer [[Environment Record]].\n  So here it is ``counter.[[Environment]]`` that has the property ``count`` in it.\n  And in our code, ``y.[[Environment]]`` was holding the property x.\n  (Note, the property itself is called ``[[Environment]]`` so accessing it with ``<obj>.`` is using the dot access [[Operator]] and not the ``[ ]`` access Operator )\n  \n  * A variable is only updated in the LE it exists in.\n  \n  * There is a general term for this concept where a [[Function]] remembers variables and identifiers in its outer [[Scope]] and can modify it, such functions are called ``Closures``. In JS all Functions are closures as they can remember their outer scope using the [[Environment Object]] .\n- Just like normal [[Object]]s, a LE is only subject to [[Garbage Collection]] when it becomes unreachable. This means that LEs, with them all the variables and functions, are kept in the memory if they have just a single reference to them.\n  For ex.:\n  ```js\n  function f() {\n    let value = Math.random();\n  \n    return function() { alert(value); };\n  }\n  \n  let arr = [f(), f(), f()];\n  ```\n  Here, 3 LEs are stored in arr and they aren't cleared up until arr itself has references to them.\n  \n  JS engines perform [[Optimization]] on this as well, such as in V8 engine, while debugging, the [[Environment Object]]'s properties are optimized out.\n  For ex.:\n  Running this code and using Chrome Debugger \n  ```js\n  let value = \"Surprise!\";\n  \n  function f() {\n    let value = \"the closest value\";\n  \n    function g() {\n      debugger; // in console: type alert(value); Surprise!\n    }\n  \n    return g;\n  }\n  \n  let g = f();\n  g();\n  ```\n  \n  results in\n  ![image.png](../assets/image_1686174526926_0.png)\n-",536885133]],["^15",[466,"^18",1687830959714,536870919]],["^15",[466,"^19","~m1712319925766",536885134]],["^15",[466,"^Z","pages/Lexical Environment.md",536870919]],["^15",[467,"^Q","In JS, all code is associated with a hidden internal [[Object]] called the ``Lexical Environment``.\nIt is a theoretical construct [Lexical Environment](https://tc39.es/ecma262/#sec-lexical-environments)  that exists only in the spec to define the behavior and is not an actual Object.",536870919]],["^15",[467,"^O","^16",536870919]],["^15",[467,"^F",355,536870919]],["^15",[467,"^X",355,536870919]],["^15",[467,"^V",355,536870919]],["^15",[467,"^U",39,536870919]],["^15",[467,"^U",355,536870919]],["^15",[467,"^H",39,536885133]],["^15",[467,"^17",true,536870919]],["^15",[467,"^;","~u649a41af-6891-497e-8d4b-94fa124890ac",536870919]],["^15",[468,"^Q","It has 2 parts,\n* [[Environment Record]]: An [[Object]] that stores all local variables as properties, and some other information like the values of [[this]].\nFor ex.:\n![image.png](../assets/image_1686157370645_0.png)\n \n* and a reference to the outer Lexical Environment.\n\nThere's a ``Global Lexical Environment``, that is associated with the whole JS script. It's outer reference is [[null]] because it has no parent Lexical Environment to refer to.",536885133]],["^15",[468,"^O","^16",536870919]],["^15",[468,"^F",467,536870919]],["^15",[468,"^X",355,536870919]],["^15",[468,"^V",355,536870919]],["^15",[468,"^U",39,536870919]],["^15",[468,"^U",144,536870919]],["^15",[468,"^U",173,536870919]],["^15",[468,"^U",340,536870919]],["^15",[468,"^U",355,536870919]],["^15",[468,"^H",39,536885133]],["^15",[468,"^H",144,536885133]],["^15",[468,"^H",173,536885133]],["^15",[468,"^H",340,536885133]],["^15",[468,"^17",true,536870919]],["^15",[468,"^;","~u649a41af-9325-464a-8fd4-680d0ac3b83a",536870919]],["^15",[469,"^Q","Variable lifetime\n![image.png](../assets/image_1686171768924_0.png)\n\nJS already stores a declared variable's property in the [[Environment Record]] even before it is actually declared, this is thanks to the JIT [[Compilation]]. There are many [[Optimization]]s and tricks used by the engine to remove unused variables and modify parts, to have the same effect as intended but with lower costs.\nThis is also to say, variables in JS are rather, properties of the [[Environment Record]] [[Object]] and we are simply using that property to hold values.",536870919]],["^15",[469,"^O","^16",536870919]],["^15",[469,"^F",468,536870919]],["^15",[469,"^X",355,536870919]],["^15",[469,"^V",355,536870919]],["^15",[469,"^U",39,536870919]],["^15",[469,"^U",84,536870919]],["^15",[469,"^U",181,536870919]],["^15",[469,"^U",340,536870919]],["^15",[469,"^U",355,536870919]],["^15",[469,"^H",39,536885133]],["^15",[469,"^H",84,536885133]],["^15",[469,"^H",181,536885133]],["^15",[469,"^H",340,536885133]],["^15",[469,"^17",true,536870919]],["^15",[469,"^;","~u649a41af-5cce-42c9-b72a-77cf1fbbfeb1",536870919]],["^15",[470,"^Q","[[Function]] lifetime\nUnlike the variable lifetime, a function declaration is already initialized in the [[Environment Record]] if it is declared anywhere. This is why Function declarations can be called even before appearing in the code in the same [[Scope]].\n![image.png](../assets/image_1686172495303_0.png)\n\nThis is because function is also a value in JS, and is instantly fully initialized.\n\nFunction expressions are tied to variables so they follow Variable lifetime.",536870919]],["^15",[470,"^O","^16",536870919]],["^15",[470,"^F",469,536870919]],["^15",[470,"^X",355,536870919]],["^15",[470,"^V",355,536870919]],["^15",[470,"^U",44,536870919]],["^15",[470,"^U",82,536870919]],["^15",[470,"^U",340,536870919]],["^15",[470,"^U",355,536870919]],["^15",[470,"^H",44,536885133]],["^15",[470,"^H",82,536885133]],["^15",[470,"^H",340,536885133]],["^15",[470,"^17",true,536870919]],["^15",[470,"^;","~u649a41af-c9c3-4c7e-8b28-7ad3c4e150b4",536870919]],["^15",[471,"^Q","Reference to the outer Lexical Environment\nWhenever a new LE is created, it has a reference to the outer LE.\n![image.png](../assets/image_1686172648317_0.png)\n\nThis is how this example is valid:\n```js\nfunction yo() {\n  let x = 1;\n  return function() {\n    console.log(x++);\n  }\n}\n\nlet y = yo();\ny();  //prints 1\ny(); // 2\ny(); // 3\n```\nas yo()'s LE is stored by the returned function. \n\nThis is also to say, when a variable is to be searched, it is searched from within the current to the outermost [[Environment Record]].\n\nMore specifically, all functions have a hidden [[Environment Object]]\n![image.png](../assets/image_1686173328589_0.png)\nThis is always set once, that is when a function is created and holds the outer [[Environment Record]].\nSo here it is ``counter.[[Environment]]`` that has the property ``count`` in it.\nAnd in our code, ``y.[[Environment]]`` was holding the property x.\n(Note, the property itself is called ``[[Environment]]`` so accessing it with ``<obj>.`` is using the dot access [[Operator]] and not the ``[ ]`` access Operator )\n\n* A variable is only updated in the LE it exists in.\n\n* There is a general term for this concept where a [[Function]] remembers variables and identifiers in its outer [[Scope]] and can modify it, such functions are called ``Closures``. In JS all Functions are closures as they can remember their outer scope using the [[Environment Object]] .",536885133]],["^15",[471,"^O","^16",536870919]],["^15",[471,"^F",470,536870919]],["^15",[471,"^X",355,536870919]],["^15",[471,"^V",355,536870919]],["^15",[471,"^U",44,536870919]],["^15",[471,"^U",76,536870919]],["^15",[471,"^U",82,536870919]],["^15",[471,"^U",339,536870919]],["^15",[471,"^U",340,536870919]],["^15",[471,"^U",355,536870919]],["^15",[471,"^H",44,536885133]],["^15",[471,"^H",76,536885133]],["^15",[471,"^H",82,536885133]],["^15",[471,"^H",339,536885133]],["^15",[471,"^H",340,536885133]],["^15",[471,"^17",true,536870919]],["^15",[471,"^;","~u649a41af-a80d-4563-a0b5-b4d955db4a2b",536870919]],["^15",[472,"^Q","Just like normal [[Object]]s, a LE is only subject to [[Garbage Collection]] when it becomes unreachable. This means that LEs, with them all the variables and functions, are kept in the memory if they have just a single reference to them.\nFor ex.:\n```js\nfunction f() {\n  let value = Math.random();\n\n  return function() { alert(value); };\n}\n\nlet arr = [f(), f(), f()];\n```\nHere, 3 LEs are stored in arr and they aren't cleared up until arr itself has references to them.\n\nJS engines perform [[Optimization]] on this as well, such as in V8 engine, while debugging, the [[Environment Object]]'s properties are optimized out.\nFor ex.:\nRunning this code and using Chrome Debugger \n```js\nlet value = \"Surprise!\";\n\nfunction f() {\n  let value = \"the closest value\";\n\n  function g() {\n    debugger; // in console: type alert(value); Surprise!\n  }\n\n  return g;\n}\n\nlet g = f();\ng();\n```\n\nresults in\n![image.png](../assets/image_1686174526926_0.png)",536870919]],["^15",[472,"^O","^16",536870919]],["^15",[472,"^F",471,536870919]],["^15",[472,"^X",355,536870919]],["^15",[472,"^V",355,536870919]],["^15",[472,"^U",39,536870919]],["^15",[472,"^U",84,536870919]],["^15",[472,"^U",293,536870919]],["^15",[472,"^U",339,536870919]],["^15",[472,"^U",355,536870919]],["^15",[472,"^H",39,536885133]],["^15",[472,"^H",84,536885133]],["^15",[472,"^H",293,536885133]],["^15",[472,"^H",339,536885133]],["^15",[472,"^17",true,536870919]],["^15",[472,"^;","~u649a41af-9ecf-4478-bf72-41bedcaefe05",536870919]],["^15",[473,"^Q","",536870919]],["^15",[473,"^O","^16",536870919]],["^15",[473,"^F",472,536870919]],["^15",[473,"^X",355,536870919]],["^15",[473,"^V",355,536870919]],["^15",[473,"^U",355,536870919]],["^15",[473,"^17",true,536870919]],["^15",[473,"^;","~u649a41af-2647-4c32-a717-2621dc5a8a60",536870919]],["^15",[474,"^3","- The standard,\n  ``for(init; bool; step)`` \n  ``while(<bool>) {...}``\n  and\n  ``do {...} while (<bool>);``\n- [[break]] and [[continue]] directives are supported. Work like in other languages, they break/continue the immediately above loop.\n- for..in Loop\n  With [[Object]]s we can use this loop to loop over properties of the object.\n  For ex.:\n  ```js\n  let x= {...};\n  for(let key in x) {...} //use x[key] to access values or just key to access property names.\n  ```\n  It doesn't loop over [[Symbol]] properties.\n- for..of Loop\n  With [[String]]s we can use this loop to loop over the characters of the String.\n  For ex.:\n  ```js\n  let x = \"...\";\n  for (let char of x) {...}\n  ```\n- In general, for..of can be used with any [[Object]] that implements the [[Symbol]] Symbol.iterator. This property should hold a function that returns an Object which has a ``next()`` [[Function]] in it. This ``next()`` function then must return an Object with 2 keys,\n  {\n   done: boolean,\n   value: any,\n  };\n  \n  For ex.:\n  ```js\n  let x= { \n   a: 0,\n   b: 5,\n   [Symbol.iterator]: function() {\n    return {\n     a: this.a,\n     b: this.b,\n     next() {\n       if (a<=b) \n          return {done: false, value: this.a++};\n       else\n           return {done:true, value: this.a};\n      }\n    };\n   }\n  };\n  \n  for (let i of x) {...} //gets 0,1,2,3,4,5\n  \n  ```\n  This [[Object]] is called an [[Iterable]].\n  \n  for..of calls the function associated with Symbol.Iterator once and parses the Object returned from it.\n  Then it call's the next() method of that Object and keeps calling it until it returns an Object with done: true.\n  \n  This is also to say that we can simply use any Object's iterator explicitly as well.\n  For ex.:\n  ```js\n  let x = \"abc\";\n  let it= x[Symbol.iterator];\n  let val = it[next]();\n  while(!val[done]) {...};\n  ```\n- We can also use [[Generator Function]]s with ``Symbol.Iterator``\n  For ex.:\n  ```js\n  let x = {\n   start: 0,\n   end: 5,\n   *[Symbol.Iterator]() {\n     for(let value= start; start<= end; ++start)\n     yield value;\n    }\n  }; //works \n  ```\n-",536870919]],["^15",[474,"^18",1687830959733,536870919]],["^15",[474,"^Z","pages/Loop.md",536870919]],["^15",[475,"^K",1687830959733,536870919]],["^15",[475,"^@",false,536870919]],["^15",[475,"^Y","continue",536870919]],["^15",[475,"^11","continue",536870919]],["^15",[475,"^B",1687830959733,536870919]],["^15",[475,"^;","~u649a41af-6660-4665-8488-10dc83a5096b",536870919]],["^15",[476,"^Q","The standard,\n``for(init; bool; step)`` \n``while(<bool>) {...}``\nand\n``do {...} while (<bool>);``",536870919]],["^15",[476,"^O","^16",536870919]],["^15",[476,"^F",40,536870919]],["^15",[476,"^X",40,536870919]],["^15",[476,"^V",40,536870919]],["^15",[476,"^U",40,536870919]],["^15",[476,"^17",true,536870919]],["^15",[476,"^;","~u649a41af-a698-4292-b77e-77132a19f184",536870919]],["^15",[477,"^Q","[[break]] and [[continue]] directives are supported. Work like in other languages, they break/continue the immediately above loop.",536870919]],["^15",[477,"^O","^16",536870919]],["^15",[477,"^F",476,536870919]],["^15",[477,"^X",40,536870919]],["^15",[477,"^V",40,536870919]],["^15",[477,"^U",40,536870919]],["^15",[477,"^U",185,536870919]],["^15",[477,"^U",475,536870919]],["^15",[477,"^H",185,536870919]],["^15",[477,"^H",475,536870919]],["^15",[477,"^17",true,536870919]],["^15",[477,"^;","~u649a41af-3395-4077-ad45-0a4cff70ff9d",536870919]],["^15",[478,"^Q","for..in Loop\nWith [[Object]]s we can use this loop to loop over properties of the object.\nFor ex.:\n```js\nlet x= {...};\nfor(let key in x) {...} //use x[key] to access values or just key to access property names.\n```\nIt doesn't loop over [[Symbol]] properties.",536870919]],["^15",[478,"^O","^16",536870919]],["^15",[478,"^F",477,536870919]],["^15",[478,"^X",40,536870919]],["^15",[478,"^V",40,536870919]],["^15",[478,"^U",39,536870919]],["^15",[478,"^U",40,536870919]],["^15",[478,"^U",43,536870919]],["^15",[478,"^H",39,536870919]],["^15",[478,"^H",43,536870919]],["^15",[478,"^17",true,536870919]],["^15",[478,"^;","~u649a41af-75e0-417e-867f-8fc364c4e3da",536870919]],["^15",[479,"^Q","for..of Loop\nWith [[String]]s we can use this loop to loop over the characters of the String.\nFor ex.:\n```js\nlet x = \"...\";\nfor (let char of x) {...}\n```",536870919]],["^15",[479,"^O","^16",536870919]],["^15",[479,"^F",478,536870919]],["^15",[479,"^X",40,536870919]],["^15",[479,"^V",40,536870919]],["^15",[479,"^U",40,536870919]],["^15",[479,"^U",41,536870919]],["^15",[479,"^H",41,536870919]],["^15",[479,"^17",true,536870919]],["^15",[479,"^;","~u649a41af-38ef-4f59-8902-99cb87f14046",536870919]],["^15",[480,"^Q","In general, for..of can be used with any [[Object]] that implements the [[Symbol]] Symbol.iterator. This property should hold a function that returns an Object which has a ``next()`` [[Function]] in it. This ``next()`` function then must return an Object with 2 keys,\n{\n done: boolean,\n value: any,\n};\n\nFor ex.:\n```js\nlet x= { \n a: 0,\n b: 5,\n [Symbol.iterator]: function() {\n  return {\n   a: this.a,\n   b: this.b,\n   next() {\n     if (a<=b) \n        return {done: false, value: this.a++};\n     else\n         return {done:true, value: this.a};\n    }\n  };\n }\n};\n\nfor (let i of x) {...} //gets 0,1,2,3,4,5\n\n```\nThis [[Object]] is called an [[Iterable]].\n\nfor..of calls the function associated with Symbol.Iterator once and parses the Object returned from it.\nThen it call's the next() method of that Object and keeps calling it until it returns an Object with done: true.\n\nThis is also to say that we can simply use any Object's iterator explicitly as well.\nFor ex.:\n```js\nlet x = \"abc\";\nlet it= x[Symbol.iterator];\nlet val = it[next]();\nwhile(!val[done]) {...};\n```",536870919]],["^15",[480,"^O","^16",536870919]],["^15",[480,"^F",479,536870919]],["^15",[480,"^X",40,536870919]],["^15",[480,"^V",40,536870919]],["^15",[480,"^U",39,536870919]],["^15",[480,"^U",40,536870919]],["^15",[480,"^U",43,536870919]],["^15",[480,"^U",44,536870919]],["^15",[480,"^U",46,536870919]],["^15",[480,"^H",39,536870919]],["^15",[480,"^H",43,536870919]],["^15",[480,"^H",44,536870919]],["^15",[480,"^H",46,536870919]],["^15",[480,"^17",true,536870919]],["^15",[480,"^;","~u649a41af-a9c4-46b0-8838-bcc82e230a7a",536870919]],["^15",[481,"^Q","We can also use [[Generator Function]]s with ``Symbol.Iterator``\nFor ex.:\n```js\nlet x = {\n start: 0,\n end: 5,\n *[Symbol.Iterator]() {\n   for(let value= start; start<= end; ++start)\n   yield value;\n  }\n}; //works \n```",536870919]],["^15",[481,"^O","^16",536870919]],["^15",[481,"^F",480,536870919]],["^15",[481,"^X",40,536870919]],["^15",[481,"^V",40,536870919]],["^15",[481,"^U",40,536870919]],["^15",[481,"^U",413,536870919]],["^15",[481,"^H",413,536870919]],["^15",[481,"^17",true,536870919]],["^15",[481,"^;","~u649a41af-d6f5-4432-b90d-2c2a7f7c272b",536870919]],["^15",[482,"^Q","",536870919]],["^15",[482,"^O","^16",536870919]],["^15",[482,"^F",481,536870919]],["^15",[482,"^X",40,536870919]],["^15",[482,"^V",40,536870919]],["^15",[482,"^U",40,536870919]],["^15",[482,"^17",true,536870919]],["^15",[482,"^;","~u649a41af-37a4-44ce-9bbf-c124f015aa62",536870919]],["^15",[483,"^3","- An [[Object]] like data structure.\n  Yes, it is still just an Object but the main specialization are the methods in it that allow keys of any type, even Object and [[NaN]] .\n  To achieve this, Map uses [SameValueZero](https://tc39.github.io/ecma262/#sec-samevaluezero) alg.\n- Methods:\n  * [`new Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) – creates the map.\n  * [`map.set(key, value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set) – stores the value by the key.\n  * [`map.get(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) – returns the value by the key, `undefined` if `key` doesn’t exist in map.\n  * [`map.has(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) – returns `true` if the `key` exists, `false` otherwise.\n  * [`map.delete(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete) – removes the element (the key/value pair) by the key.\n  * [`map.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear) – removes everything from the map.\n  * [`map.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size) – returns the current element count.\n  * [`map.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys) – returns an iterable for keys,\n  * [`map.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values) – returns an iterable for values,\n  * [`map.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries) – returns an iterable for entries `[key, value]`, it’s used by default in `for..of`.\n  * ``.forEach(value,key,map)``\n- Map can be created like so as well\n  ```js\n  let map = new Map([\n    ['1',  'str1'],\n    [1,    'num1'],\n    [true, 'bool1']\n  ]);\n  ```\n- [[Object]] has a method ``Object.entries(<obj>)`` that returns an array of K:V pairs. This can be used to directly create a Map from an Object.\n- Similarly, [[Object]] also has an ``Object.fromEntries(<array of K:V pairs>)`` that returns an Object from the given K:V pairs. Using a ``<map>.entries()``, we can directly convert a Map to an Object.\n-",536870919]],["^15",[483,"^18",1687830959750,536870919]],["^15",[483,"^Z","pages/Map.md",536870919]],["^15",[484,"^Q","An [[Object]] like data structure.\nYes, it is still just an Object but the main specialization are the methods in it that allow keys of any type, even Object and [[NaN]] .\nTo achieve this, Map uses [SameValueZero](https://tc39.github.io/ecma262/#sec-samevaluezero) alg.",536870919]],["^15",[484,"^O","^16",536870919]],["^15",[484,"^F",282,536870919]],["^15",[484,"^X",282,536870919]],["^15",[484,"^V",282,536870919]],["^15",[484,"^U",39,536870919]],["^15",[484,"^U",174,536870919]],["^15",[484,"^U",282,536870919]],["^15",[484,"^H",39,536870919]],["^15",[484,"^H",174,536870919]],["^15",[484,"^17",true,536870919]],["^15",[484,"^;","~u649a41af-3f8f-4575-9430-87e625006436",536870919]],["^15",[485,"^Q","Methods:\n* [`new Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) – creates the map.\n* [`map.set(key, value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set) – stores the value by the key.\n* [`map.get(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) – returns the value by the key, `undefined` if `key` doesn’t exist in map.\n* [`map.has(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) – returns `true` if the `key` exists, `false` otherwise.\n* [`map.delete(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete) – removes the element (the key/value pair) by the key.\n* [`map.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear) – removes everything from the map.\n* [`map.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size) – returns the current element count.\n* [`map.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys) – returns an iterable for keys,\n* [`map.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values) – returns an iterable for values,\n* [`map.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries) – returns an iterable for entries `[key, value]`, it’s used by default in `for..of`.\n* ``.forEach(value,key,map)``",536870919]],["^15",[485,"^O","^16",536870919]],["^15",[485,"^F",484,536870919]],["^15",[485,"^X",282,536870919]],["^15",[485,"^V",282,536870919]],["^15",[485,"^U",282,536870919]],["^15",[485,"^17",true,536870919]],["^15",[485,"^;","~u649a41af-12f7-460e-b089-00dabecba01a",536870919]],["^15",[486,"^Q","Map can be created like so as well\n```js\nlet map = new Map([\n  ['1',  'str1'],\n  [1,    'num1'],\n  [true, 'bool1']\n]);\n```",536870919]],["^15",[486,"^O","^16",536870919]],["^15",[486,"^F",485,536870919]],["^15",[486,"^X",282,536870919]],["^15",[486,"^V",282,536870919]],["^15",[486,"^U",282,536870919]],["^15",[486,"^17",true,536870919]],["^15",[486,"^;","~u649a41af-ad52-441c-a6ec-32ef850afee5",536870919]],["^15",[487,"^Q","[[Object]] has a method ``Object.entries(<obj>)`` that returns an array of K:V pairs. This can be used to directly create a Map from an Object.",536870919]],["^15",[487,"^O","^16",536870919]],["^15",[487,"^F",486,536870919]],["^15",[487,"^X",282,536870919]],["^15",[487,"^V",282,536870919]],["^15",[487,"^U",39,536870919]],["^15",[487,"^U",282,536870919]],["^15",[487,"^H",39,536870919]],["^15",[487,"^17",true,536870919]],["^15",[487,"^;","~u649a41af-8c9e-4d07-9a80-24e26426e102",536870919]],["^15",[488,"^Q","Similarly, [[Object]] also has an ``Object.fromEntries(<array of K:V pairs>)`` that returns an Object from the given K:V pairs. Using a ``<map>.entries()``, we can directly convert a Map to an Object.",536870919]],["^15",[488,"^O","^16",536870919]],["^15",[488,"^F",487,536870919]],["^15",[488,"^X",282,536870919]],["^15",[488,"^V",282,536870919]],["^15",[488,"^U",39,536870919]],["^15",[488,"^U",282,536870919]],["^15",[488,"^H",39,536870919]],["^15",[488,"^17",true,536870919]],["^15",[488,"^;","~u649a41af-b997-4879-9ec9-c8c3348238e8",536870919]],["^15",[489,"^Q","",536870919]],["^15",[489,"^O","^16",536870919]],["^15",[489,"^F",488,536870919]],["^15",[489,"^X",282,536870919]],["^15",[489,"^V",282,536870919]],["^15",[489,"^U",282,536870919]],["^15",[489,"^17",true,536870919]],["^15",[489,"^;","~u649a41af-187f-481c-b4a3-b923e6a43ada",536870919]],["^15",[490,"^3","- As JS is a single-threaded language, tasks need to be managed in different queues depending on if they are [[Asynchronous]] or not. [[Scheduling]] also makes use of these queues.\n- ``Event Loop``\n  In JS, all tasks are put in an infinite loop known as Event Loop and processed sequentially. \n  The engine waits for tasks in this loop, then executes them FIFO whilst more tasks are appended to the end. If there's no task in the event loop, sleep.\n  The queue is aka ``Macrotask Queue`` and the flow looks like so\n  ![image.png](../assets/image_1687018885768_0.png)\n  \n  This includes everything, even things like [[Rendering]] the changes to [[DOM]] as that task is appended in it too and only after the tasks before it are processed is the DOM modified and rendered. However, Rendering is done after a certain point in macrotask queue when the microtask queue is started and finished.\n  \n  This means, if a task takes too long in the macrotask queue, it puts the entire [[WebPage]] on a pause, even [[Browser Event]]s can't be handled as the event handlers are also in this queue.\n  \n  This is why [[Asynchronous]] tasks are put in a separate queue with only their callers in the macrotask queue, like we can see ``setTimeout`` above. So the macrotask ``setTimeout`` puts stuff in the other queue and finishes then the macrotask queue continues.\n- ``Microtask Queue``\n  aka PromiseJobs\n  This is the queue [[Scheduling]] tasks like ``setTimeout`` and [[Asynchronous]] Promises and the like use. \n  Immediately after finishing the macrotask queue until a certain point, the microtask queue is starts getting processed. Further macrotask queue tasks are appended to it as normal but until the microtask queue finishes, the event loop doesn't switch back to the macrotask queue, yes just like the macrotask queue if there are any more tasks added to the microtask queue then they wouldn't be processed until the next switchover from macrotask queue.\n  For ex.:\n  ```js\n  setTimeout(() => console.log(\"timeout\"));\n  \n  Promise.resolve()\n    .then(() => console.log(\"promise\"));\n  \n  console.log(\"code\");\n  //will prints code then timeout then promise\n  ```\n  So the event loop with microtasks and [[Rendering]] look like so \n  ![image.png](../assets/image_1687019511714_0.png)\n  \n  * We can directly add tasks to the microtask queue with ``queueMicrotask(<function>)``\n- [[Web Worker]]s can be used if we don't want to block the main thread. They don't use either of the queues.",536870919]],["^15",[490,"^18",1687830959773,536870919]],["^15",[490,"^Z","pages/Message Queue.md",536870919]],["^15",[491,"^K",1687830959771,536870919]],["^15",[491,"^@",false,536870919]],["^15",[491,"^Y","webpage",536870919]],["^15",[491,"^11","WebPage",536870919]],["^15",[491,"^B",1687830959771,536870919]],["^15",[491,"^;","~u649a41af-25f0-420a-9bcf-de849c55f13c",536870919]],["^15",[492,"^K",1687830959772,536870919]],["^15",[492,"^@",false,536870919]],["^15",[492,"^Y","rendering",536870919]],["^15",[492,"^11","Rendering",536870919]],["^15",[492,"^B",1687830959772,536870919]],["^15",[492,"^;","~u649a41af-932c-4d41-a588-e2ffafcd6be2",536870919]],["^15",[493,"^Q","As JS is a single-threaded language, tasks need to be managed in different queues depending on if they are [[Asynchronous]] or not. [[Scheduling]] also makes use of these queues.",536870919]],["^15",[493,"^O","^16",536870919]],["^15",[493,"^F",80,536870919]],["^15",[493,"^X",80,536870919]],["^15",[493,"^V",80,536870919]],["^15",[493,"^U",80,536870919]],["^15",[493,"^U",83,536870919]],["^15",[493,"^U",288,536870919]],["^15",[493,"^H",83,536870919]],["^15",[493,"^H",288,536870919]],["^15",[493,"^17",true,536870919]],["^15",[493,"^;","~u649a41af-c2f7-4315-8350-2f431bb792ad",536870919]],["^15",[494,"^Q","~``Event Loop``\nIn JS, all tasks are put in an infinite loop known as Event Loop and processed sequentially. \nThe engine waits for tasks in this loop, then executes them FIFO whilst more tasks are appended to the end. If there's no task in the event loop, sleep.\nThe queue is aka ``Macrotask Queue`` and the flow looks like so\n![image.png](../assets/image_1687018885768_0.png)\n\nThis includes everything, even things like [[Rendering]] the changes to [[DOM]] as that task is appended in it too and only after the tasks before it are processed is the DOM modified and rendered. However, Rendering is done after a certain point in macrotask queue when the microtask queue is started and finished.\n\nThis means, if a task takes too long in the macrotask queue, it puts the entire [[WebPage]] on a pause, even [[Browser Event]]s can't be handled as the event handlers are also in this queue.\n\nThis is why [[Asynchronous]] tasks are put in a separate queue with only their callers in the macrotask queue, like we can see ``setTimeout`` above. So the macrotask ``setTimeout`` puts stuff in the other queue and finishes then the macrotask queue continues.",536870919]],["^15",[494,"^O","^16",536870919]],["^15",[494,"^F",493,536870919]],["^15",[494,"^X",80,536870919]],["^15",[494,"^V",80,536870919]],["^15",[494,"^U",73,536870919]],["^15",[494,"^U",80,536870919]],["^15",[494,"^U",83,536870919]],["^15",[494,"^U",114,536870919]],["^15",[494,"^U",491,536870919]],["^15",[494,"^U",492,536870919]],["^15",[494,"^H",73,536870919]],["^15",[494,"^H",83,536870919]],["^15",[494,"^H",114,536870919]],["^15",[494,"^H",491,536870919]],["^15",[494,"^H",492,536870919]],["^15",[494,"^17",true,536870919]],["^15",[494,"^;","~u649a41af-03a3-4b60-813e-fb7d9a11372a",536870919]],["^15",[495,"^Q","~``Microtask Queue``\naka PromiseJobs\nThis is the queue [[Scheduling]] tasks like ``setTimeout`` and [[Asynchronous]] Promises and the like use. \nImmediately after finishing the macrotask queue until a certain point, the microtask queue is starts getting processed. Further macrotask queue tasks are appended to it as normal but until the microtask queue finishes, the event loop doesn't switch back to the macrotask queue, yes just like the macrotask queue if there are any more tasks added to the microtask queue then they wouldn't be processed until the next switchover from macrotask queue.\nFor ex.:\n```js\nsetTimeout(() => console.log(\"timeout\"));\n\nPromise.resolve()\n  .then(() => console.log(\"promise\"));\n\nconsole.log(\"code\");\n//will prints code then timeout then promise\n```\nSo the event loop with microtasks and [[Rendering]] look like so \n![image.png](../assets/image_1687019511714_0.png)\n\n* We can directly add tasks to the microtask queue with ``queueMicrotask(<function>)``",536870919]],["^15",[495,"^O","^16",536870919]],["^15",[495,"^F",494,536870919]],["^15",[495,"^X",80,536870919]],["^15",[495,"^V",80,536870919]],["^15",[495,"^U",80,536870919]],["^15",[495,"^U",83,536870919]],["^15",[495,"^U",288,536870919]],["^15",[495,"^U",492,536870919]],["^15",[495,"^H",83,536870919]],["^15",[495,"^H",288,536870919]],["^15",[495,"^H",492,536870919]],["^15",[495,"^17",true,536870919]],["^15",[495,"^;","~u649a41af-f3cb-4e0e-bda3-24f6b8a691d9",536870919]],["^15",[496,"^Q","[[Web Worker]]s can be used if we don't want to block the main thread. They don't use either of the queues.",536870919]],["^15",[496,"^O","^16",536870919]],["^15",[496,"^F",495,536870919]],["^15",[496,"^X",80,536870919]],["^15",[496,"^V",80,536870919]],["^15",[496,"^U",79,536870919]],["^15",[496,"^U",80,536870919]],["^15",[496,"^H",79,536870919]],["^15",[496,"^17",true,536870919]],["^15",[496,"^;","~u649a41af-2eef-4bed-96c4-5962544e8f42",536870919]],["^15",[497,"^3","- It's a special program meant to space extra space by removing characters from everywhere possible in the code resulting in smaller script sizes which is crucial for the web as the same script has to be downloaded by multiple users. \n  \n  It removes comments, extra spaces, shortens variable names, function names etc. like ``name mangling`` in [[C++]] etc in a smart manner to not affect the execution at all.",536870919]],["^15",[497,"^18",1687830959780,536870919]],["^15",[497,"^Z","pages/Minifier.md",536870919]],["^15",[498,"^Q","It's a special program meant to space extra space by removing characters from everywhere possible in the code resulting in smaller script sizes which is crucial for the web as the same script has to be downloaded by multiple users. \n\nIt removes comments, extra spaces, shortens variable names, function names etc. like ``name mangling`` in [[C++]] etc in a smart manner to not affect the execution at all.",536870919]],["^15",[498,"^O","^16",536870919]],["^15",[498,"^F",354,536870919]],["^15",[498,"^X",354,536870919]],["^15",[498,"^V",354,536870919]],["^15",[498,"^U",42,536870919]],["^15",[498,"^U",354,536870919]],["^15",[498,"^H",42,536870919]],["^15",[498,"^17",true,536870919]],["^15",[498,"^;","~u649a41af-591c-4e07-82f9-a37f1065db74",536870919]],["^15",[499,"^3","- A module is simply another JS file, a single module is a single [[<script>]]. Modules can call each other by importing/exporting Variables,[[Function]]s, [[Class]]es, [[Object]]s etc. .\n- For ex.:\n  In a folder X/ \n  file 1.js\n  ```js\n  export function yo() {\n   return 2;\n  }\n  ```\n  file 2.js\n  ```js\n  import {yo} from './1.js';\n  \n  yo(); //works, return 2\n  ```\n  The import path must be either absolute or relative but not bare, so just ``'1.js'`` wouldn't work in [[Browser]]s. It would work in Node though.\n- Export and Import\n  Export can export multiple declarations at once\n  ```js\n  function uo(){}\n  class X{}\n  \n  export {uo,X}; //ok\n  ```\n  \n  * Import also has features like * and ``as``  and they work like expected.\n  ```js\n  import * as x from './1.js';\n  ```\n  Whilst it pollutes the scope at development time, at runtime, tools like [[Webpack]] do [[Optimization]] and remove unused members.\n  \n  Also supported by export, ``export {x as y};``\n  \n  * Default export\n  A module can choose to export just a single entity, to do so we use\n  ``export default ...`` anything, this allows us to use ``import X from '...';``\n  where X is any name we wish, the entity will be referred by this name here.\n  ![image.png](../assets/image_1687059161793_0.png)\n  \n  Default exported entities don't need a name in exporting module,\n  For ex.:\n  In 1.js\n  ```js\n  export class {...}\n  ```\n  In 2.js\n  ```js\n  import X from '...'; \n  //and X would have that class.\n  ```\n  We can only have at most 1 default export per file and can mix named exports (normal export) as well but its unrecommended.\n  \n  We can also use the ``as`` keyword to make a default,\n  ``export {x as default};``\n  Similarly, we can import default and named exports at the same time\n  ```js\n  import {default as X, y} from '...'; //ok\n  ```\n  And it becomes a property  if * is used,\n  ```js\n  import * as X from '...';\n  \n  let x = X.default; //ok\n  ```\n- Re-export\n  We can re-export modules too\n  ```js\n  export {X, default as Y} from '...'; //this syntax is required for default exports being re-exported\n  export * from '...'; //works, but it ignores default export.\n  ```\n- Modules only work in browsers being served on HTTP(s), not locally.\n  To load a module on in a [[<script>]] in browser we set type attribute to module,  \n  For ex.:\n  ```html\n  <!doctype html>\n  <script type=\"module\">\n    import {yo} from './1.js';\n  \n    document.body.innerHTML = yo();\n  </script>\n  ```\n  And the browser automatically loads the modules.\n  \n  This is also to say, only modules can import/export each other. Normal JS scripts can't use modules.\n- Modules have their own top-level [[Scope]]s called ``Module Level Scopes``. Meaning anything `outside` in a module is still [[Scope]]d. This allows MLS to have some cool features like they are always in ``Strict`` mode and can use [[Asynchronous]] ``await`` as-is. This also prohibits other modules from having direct access to their variables/ [[Function]]s/etc.\n  For ex.:\n  \n  ```html\n  <!doctype html>\n  <script type=\"module\">\n    function yo(){}\n    window.yoo= function(){}\n  </script>\n  <script>\n    function no() {}\n  </script>\n  <script type=\"module\">\n    yo();                   //fails as it can't find yo\n    no();                   //works\n    yoo();                  //also works\n  </script>\n  ```\n  In [[Browser]]s we can still make a variable global by directly assigning it to a [[window]] property.\n  \n  [[this]] is undefined in MLS.\n- Modules are evaluated only once. They have a single [[Global]] State as well. This means, if we modify a module from one file, then use it in another then the changes are persistent.\n  For ex.:\n  In 1.js\n  ```js\n  export let x = {\n   \n  };\n  \n  console.log(\"yo\");\n  ```\n  \n  In 2.js\n  ```js\n  import {x} from './1.js'; //module 1 is evaluated completely, prints yo\n  \n  x[\"naa\"]=2;\n  ```\n  \n  In 3.js\n  ```js\n  import {x} from '1.js'; //already evaluated\n  \n  console.log(x[\"naa\"]); //prints 2\n  ```\n  The order of which file is evaluated first depends on which [[<script>]] tag appears first in the [[HTML]] Document. However, if a file has an import on another module, then it is not evaluated until that file is.\n  Here, 1.js is evaluated first, ``yo`` is printed, then 2.js starts and sees 1.js already evaluated, then 2.js is evaluated and lastly 3.js.\n- ``import.meta``\n  This [[Object]] provides metadata about the current module. In [[Browser]]s has a property ``.url`` which has the url of the script if the script is imported from a url.\n- Modules scripts are  [[Defer]]red in JS. \n  First the entirety of the [[HTML]] is loaded, then any normal [[<script>]]s then finally modules are loaded, despite the order in which the tags appear in the HTML document. Being deferred means they are loaded parallelly by the browser, but they are executed later.\n- External Module [[<script>]]s with the same src tag are ran only once.\n- External Module [[<script>]]s that are fetched from another origin must be supplied with the [[CORS]] header with value ``Access-Control-Allow-Origin`` by the remote server. This ensure the remote server's modules are only executed on trusted domains.\n-",536870919]],["^15",[499,"^18",1687830959816,536870919]],["^15",[499,"^Z","pages/Module.md",536870919]],["^15",[500,"^K",1687830960198,536870919]],["^15",[500,"^[",678,536870919]],["^15",[500,"^@",false,536870919]],["^15",[500,"^Y","webpack",536870919]],["^15",[500,"^11","Webpack",536870919]],["^15",[500,"^B",1687830960198,536870919]],["^15",[500,"^;","~u649a41b0-2e9e-4276-96aa-a563fb932aa5",536870919]],["^15",[501,"^K",1687830959815,536870919]],["^15",[501,"^[",788,536879143]],["^15",[501,"^O","^16",536879122]],["^15",[501,"^@",false,536870919]],["^15",[501,"^Y","cors",536870919]],["^15",[501,"^11","CORS",536870919]],["^15",[501,"^B",1688096094152,536880783]],["^15",[501,"^;","~u649a41af-62fc-470f-bed0-f35fa51e2461",536870919]],["^15",[502,"^Q","External Module [[<script>]]s with the same src tag are ran only once.",536870919]],["^15",[502,"^O","^16",536870919]],["^15",[502,"^F",510,536870919]],["^15",[502,"^X",32,536870919]],["^15",[502,"^V",32,536870919]],["^15",[502,"^U",29,536870919]],["^15",[502,"^U",32,536870919]],["^15",[502,"^H",29,536870919]],["^15",[502,"^17",true,536870919]],["^15",[502,"^;","~u649a41af-6064-4383-8027-3d2cb30d93d6",536870919]],["^15",[503,"^Q","Re-export\nWe can re-export modules too\n```js\nexport {X, default as Y} from '...'; //this syntax is required for default exports being re-exported\nexport * from '...'; //works, but it ignores default export.\n```",536870919]],["^15",[503,"^O","^16",536870919]],["^15",[503,"^F",511,536870919]],["^15",[503,"^X",32,536870919]],["^15",[503,"^V",32,536870919]],["^15",[503,"^U",32,536870919]],["^15",[503,"^17",true,536870919]],["^15",[503,"^;","~u649a41af-8669-49a5-a0cf-7f50a51eaf8f",536870919]],["^15",[504,"^Q","",536870919]],["^15",[504,"^O","^16",536870919]],["^15",[504,"^F",505,536870919]],["^15",[504,"^X",32,536870919]],["^15",[504,"^V",32,536870919]],["^15",[504,"^U",32,536870919]],["^15",[504,"^17",true,536870919]],["^15",[504,"^;","~u649a41af-51dd-49a6-aa5c-7169ce2995e2",536870919]],["^15",[505,"^Q","External Module [[<script>]]s that are fetched from another origin must be supplied with the [[CORS]] header with value ``Access-Control-Allow-Origin`` by the remote server. This ensure the remote server's modules are only executed on trusted domains.",536870919]],["^15",[505,"^O","^16",536870919]],["^15",[505,"^F",502,536870919]],["^15",[505,"^X",32,536870919]],["^15",[505,"^V",32,536870919]],["^15",[505,"^U",29,536870919]],["^15",[505,"^U",32,536870919]],["^15",[505,"^U",501,536870919]],["^15",[505,"^H",29,536870919]],["^15",[505,"^H",501,536870919]],["^15",[505,"^17",true,536870919]],["^15",[505,"^;","~u649a41af-ae98-424c-8397-da852249cefe",536870919]],["^15",[506,"^Q","Modules only work in browsers being served on HTTP(s), not locally.\nTo load a module on in a [[<script>]] in browser we set type attribute to module,  \nFor ex.:\n```html\n<!doctype html>\n<script type=\"module\">\n  import {yo} from './1.js';\n\n  document.body.innerHTML = yo();\n</script>\n```\nAnd the browser automatically loads the modules.\n\nThis is also to say, only modules can import/export each other. Normal JS scripts can't use modules.",536870919]],["^15",[506,"^O","^16",536870919]],["^15",[506,"^F",503,536870919]],["^15",[506,"^X",32,536870919]],["^15",[506,"^V",32,536870919]],["^15",[506,"^U",29,536870919]],["^15",[506,"^U",32,536870919]],["^15",[506,"^H",29,536870919]],["^15",[506,"^17",true,536870919]],["^15",[506,"^;","~u649a41af-199c-46cd-8059-0e16b4c3e3d2",536870919]],["^15",[507,"^Q","Modules are evaluated only once. They have a single [[Global]] State as well. This means, if we modify a module from one file, then use it in another then the changes are persistent.\nFor ex.:\nIn 1.js\n```js\nexport let x = {\n \n};\n\nconsole.log(\"yo\");\n```\n\nIn 2.js\n```js\nimport {x} from './1.js'; //module 1 is evaluated completely, prints yo\n\nx[\"naa\"]=2;\n```\n\nIn 3.js\n```js\nimport {x} from '1.js'; //already evaluated\n\nconsole.log(x[\"naa\"]); //prints 2\n```\nThe order of which file is evaluated first depends on which [[<script>]] tag appears first in the [[HTML]] Document. However, if a file has an import on another module, then it is not evaluated until that file is.\nHere, 1.js is evaluated first, ``yo`` is printed, then 2.js starts and sees 1.js already evaluated, then 2.js is evaluated and lastly 3.js.",536870919]],["^15",[507,"^O","^16",536870919]],["^15",[507,"^F",509,536870919]],["^15",[507,"^X",32,536870919]],["^15",[507,"^V",32,536870919]],["^15",[507,"^U",29,536870919]],["^15",[507,"^U",30,536870919]],["^15",[507,"^U",32,536870919]],["^15",[507,"^U",296,536870919]],["^15",[507,"^H",29,536870919]],["^15",[507,"^H",30,536870919]],["^15",[507,"^H",296,536870919]],["^15",[507,"^17",true,536870919]],["^15",[507,"^;","~u649a41af-d896-4a98-96af-866e8c03023f",536870919]],["^15",[508,"^Q","For ex.:\nIn a folder X/ \nfile 1.js\n```js\nexport function yo() {\n return 2;\n}\n```\nfile 2.js\n```js\nimport {yo} from './1.js';\n\nyo(); //works, return 2\n```\nThe import path must be either absolute or relative but not bare, so just ``'1.js'`` wouldn't work in [[Browser]]s. It would work in Node though.",536870919]],["^15",[508,"^O","^16",536870919]],["^15",[508,"^F",513,536870919]],["^15",[508,"^X",32,536870919]],["^15",[508,"^V",32,536870919]],["^15",[508,"^U",32,536870919]],["^15",[508,"^U",33,536870919]],["^15",[508,"^H",33,536870919]],["^15",[508,"^17",true,536870919]],["^15",[508,"^;","~u649a41af-56cc-4d43-aed0-655cf361923c",536870919]],["^15",[509,"^Q","Modules have their own top-level [[Scope]]s called ``Module Level Scopes``. Meaning anything `outside` in a module is still [[Scope]]d. This allows MLS to have some cool features like they are always in ``Strict`` mode and can use [[Asynchronous]] ``await`` as-is. This also prohibits other modules from having direct access to their variables/ [[Function]]s/etc.\nFor ex.:\n\n```html\n<!doctype html>\n<script type=\"module\">\n  function yo(){}\n  window.yoo= function(){}\n</script>\n<script>\n  function no() {}\n</script>\n<script type=\"module\">\n  yo();                   //fails as it can't find yo\n  no();                   //works\n  yoo();                  //also works\n</script>\n```\nIn [[Browser]]s we can still make a variable global by directly assigning it to a [[window]] property.\n\n[[this]] is undefined in MLS.",536870919]],["^15",[509,"^O","^16",536870919]],["^15",[509,"^F",506,536870919]],["^15",[509,"^X",32,536870919]],["^15",[509,"^V",32,536870919]],["^15",[509,"^U",32,536870919]],["^15",[509,"^U",33,536870919]],["^15",[509,"^U",44,536870919]],["^15",[509,"^U",82,536870919]],["^15",[509,"^U",83,536870919]],["^15",[509,"^U",144,536870919]],["^15",[509,"^U",209,536870919]],["^15",[509,"^H",33,536870919]],["^15",[509,"^H",44,536870919]],["^15",[509,"^H",82,536870919]],["^15",[509,"^H",83,536870919]],["^15",[509,"^H",144,536870919]],["^15",[509,"^H",209,536870919]],["^15",[509,"^17",true,536870919]],["^15",[509,"^;","~u649a41af-bdbe-42d4-8d90-b612206251e8",536870919]],["^15",[510,"^Q","Modules scripts are  [[Defer]]red in JS. \nFirst the entirety of the [[HTML]] is loaded, then any normal [[<script>]]s then finally modules are loaded, despite the order in which the tags appear in the HTML document. Being deferred means they are loaded parallelly by the browser, but they are executed later.",536870919]],["^15",[510,"^O","^16",536870919]],["^15",[510,"^F",512,536870919]],["^15",[510,"^X",32,536870919]],["^15",[510,"^V",32,536870919]],["^15",[510,"^U",29,536870919]],["^15",[510,"^U",30,536870919]],["^15",[510,"^U",31,536870919]],["^15",[510,"^U",32,536870919]],["^15",[510,"^H",29,536870919]],["^15",[510,"^H",30,536870919]],["^15",[510,"^H",31,536870919]],["^15",[510,"^17",true,536870919]],["^15",[510,"^;","~u649a41af-766d-49b2-8699-9be9f23a33ec",536870919]],["^15",[511,"^Q","Export and Import\nExport can export multiple declarations at once\n```js\nfunction uo(){}\nclass X{}\n\nexport {uo,X}; //ok\n```\n\n* Import also has features like * and ``as``  and they work like expected.\n```js\nimport * as x from './1.js';\n```\nWhilst it pollutes the scope at development time, at runtime, tools like [[Webpack]] do [[Optimization]] and remove unused members.\n\nAlso supported by export, ``export {x as y};``\n\n* Default export\nA module can choose to export just a single entity, to do so we use\n``export default ...`` anything, this allows us to use ``import X from '...';``\nwhere X is any name we wish, the entity will be referred by this name here.\n![image.png](../assets/image_1687059161793_0.png)\n\nDefault exported entities don't need a name in exporting module,\nFor ex.:\nIn 1.js\n```js\nexport class {...}\n```\nIn 2.js\n```js\nimport X from '...'; \n//and X would have that class.\n```\nWe can only have at most 1 default export per file and can mix named exports (normal export) as well but its unrecommended.\n\nWe can also use the ``as`` keyword to make a default,\n``export {x as default};``\nSimilarly, we can import default and named exports at the same time\n```js\nimport {default as X, y} from '...'; //ok\n```\nAnd it becomes a property  if * is used,\n```js\nimport * as X from '...';\n\nlet x = X.default; //ok\n```",536870919]],["^15",[511,"^O","^16",536870919]],["^15",[511,"^F",508,536870919]],["^15",[511,"^X",32,536870919]],["^15",[511,"^V",32,536870919]],["^15",[511,"^U",32,536870919]],["^15",[511,"^U",84,536870919]],["^15",[511,"^U",500,536870919]],["^15",[511,"^H",84,536870919]],["^15",[511,"^H",500,536870919]],["^15",[511,"^17",true,536870919]],["^15",[511,"^;","~u649a41af-135e-4045-9ab4-bf7f87333500",536870919]],["^15",[512,"^Q","~``import.meta``\nThis [[Object]] provides metadata about the current module. In [[Browser]]s has a property ``.url`` which has the url of the script if the script is imported from a url.",536870919]],["^15",[512,"^O","^16",536870919]],["^15",[512,"^F",507,536870919]],["^15",[512,"^X",32,536870919]],["^15",[512,"^V",32,536870919]],["^15",[512,"^U",32,536870919]],["^15",[512,"^U",33,536870919]],["^15",[512,"^U",39,536870919]],["^15",[512,"^H",33,536870919]],["^15",[512,"^H",39,536870919]],["^15",[512,"^17",true,536870919]],["^15",[512,"^;","~u649a41af-fe9f-47ad-a675-a6194fbb781b",536870919]],["^15",[513,"^Q","A module is simply another JS file, a single module is a single [[<script>]]. Modules can call each other by importing/exporting Variables,[[Function]]s, [[Class]]es, [[Object]]s etc. .",536870919]],["^15",[513,"^O","^16",536870919]],["^15",[513,"^F",32,536870919]],["^15",[513,"^X",32,536870919]],["^15",[513,"^V",32,536870919]],["^15",[513,"^U",29,536870919]],["^15",[513,"^U",32,536870919]],["^15",[513,"^U",39,536870919]],["^15",[513,"^U",44,536870919]],["^15",[513,"^U",75,536870919]],["^15",[513,"^H",29,536870919]],["^15",[513,"^H",39,536870919]],["^15",[513,"^H",44,536870919]],["^15",[513,"^H",75,536870919]],["^15",[513,"^17",true,536870919]],["^15",[513,"^;","~u649a41af-2fe2-4617-918b-8f37b2a36846",536870919]],["^15",[514,"^3","- Special [[Number]] value that always returns false when compared against any other Number.",536870919]],["^15",[514,"^18",1687830959821,536870919]],["^15",[514,"^Z","pages/NaN.md",536870919]],["^15",[515,"^Q","Special [[Number]] value that always returns false when compared against any other Number.",536870919]],["^15",[515,"^O","^16",536870919]],["^15",[515,"^F",174,536870919]],["^15",[515,"^X",174,536870919]],["^15",[515,"^V",174,536870919]],["^15",[515,"^U",100,536870919]],["^15",[515,"^U",174,536870919]],["^15",[515,"^H",100,536870919]],["^15",[515,"^17",true,536870919]],["^15",[515,"^;","~u649a41af-37ee-46ca-a47f-72f8fec55917",536870919]],["^15",[516,"^3","- This operator takes 2 [[Operand]]s and checks if the first operand is [[null]] or [[undefined]], if it is either then the second Operand is returned.\n  For ex.:\n  ```js\n  let x= null ?? 2; //returns 2\n  ```\n- It's kind of like the Logical Operator OR, but where OR returns the first truthy value, i.e., value that is not false (like 0), this [[Operator]] returns the first defined value (like 0).\n  For ex.:\n  ```js\n  let x= 0 || 1; //returns 1 \n  x= 0 ?? 1; //returns 0\n  ```\n-",536870919]],["^15",[516,"^18",1687830959834,536870919]],["^15",[516,"^Z","pages/Nullish-Coalescing Operator.md",536870919]],["^15",[517,"^K",1687830959983,536870919]],["^15",[517,"^[",575,536870919]],["^15",[517,"^@",false,536870919]],["^15",[517,"^Y","operand",536870919]],["^15",[517,"^11","Operand",536870919]],["^15",[517,"^B",1687830959983,536870919]],["^15",[517,"^;","~u65a4cc08-e475-4f1d-a368-186b4074eee8",536885071]],["^15",[518,"^Q","This operator takes 2 [[Operand]]s and checks if the first operand is [[null]] or [[undefined]], if it is either then the second Operand is returned.\nFor ex.:\n```js\nlet x= null ?? 2; //returns 2\n```",536870919]],["^15",[518,"^O","^16",536870919]],["^15",[518,"^F",367,536870919]],["^15",[518,"^X",367,536870919]],["^15",[518,"^V",367,536870919]],["^15",[518,"^U",45,536870919]],["^15",[518,"^U",173,536870919]],["^15",[518,"^U",367,536870919]],["^15",[518,"^U",517,536870919]],["^15",[518,"^H",45,536870919]],["^15",[518,"^H",173,536870919]],["^15",[518,"^H",517,536870919]],["^15",[518,"^17",true,536870919]],["^15",[518,"^;","~u649a41af-60e7-4f8b-a819-53701a80ec40",536870919]],["^15",[519,"^Q","It's kind of like the Logical Operator OR, but where OR returns the first truthy value, i.e., value that is not false (like 0), this [[Operator]] returns the first defined value (like 0).\nFor ex.:\n```js\nlet x= 0 || 1; //returns 1 \nx= 0 ?? 1; //returns 0\n```",536870919]],["^15",[519,"^O","^16",536870919]],["^15",[519,"^F",518,536870919]],["^15",[519,"^X",367,536870919]],["^15",[519,"^V",367,536870919]],["^15",[519,"^U",76,536870919]],["^15",[519,"^U",367,536870919]],["^15",[519,"^H",76,536870919]],["^15",[519,"^17",true,536870919]],["^15",[519,"^;","~u649a41af-67d5-4efe-ae57-bd71efebe343",536870919]],["^15",[520,"^Q","",536870919]],["^15",[520,"^O","^16",536870919]],["^15",[520,"^F",519,536870919]],["^15",[520,"^X",367,536870919]],["^15",[520,"^V",367,536870919]],["^15",[520,"^U",367,536870919]],["^15",[520,"^17",true,536870919]],["^15",[520,"^;","~u649a41af-fdfe-4701-a05d-bca2412dd8ed",536870919]],["^15",[521,"^3","- [[Object]] wrapper for primitive type ``number``\n- Regular Numbers are stored in 64-bit format so there are always 64 bits to store any number, 52 bits are for the actual value of the number, 11 bits for the decimal position and 1 bit for the sign.\n- Includes Integer and Floating-Point Numbers\n  There are some special values also stored in Numeric type,\n  ``Infinity``, ``-Infinity``, ``NaN``\n- For  ex.:\n  ```js\n  let x = 2/0; // stores Infinity in x\n  x= Infinity //same\n  x= \"yo\"/3; //error, stores NaN in x\n  x= x*3; //still NaN\n  ```\n  NaN is a result of any computational error and any mathematical operation with NaN results back in NaN. This is also to say, ``maths is safe`` in JS as it would never crash the script, just store NaN in the worst case.\n- Integers: $$\\pm {(2^{53} - 3)}$$\n  BigInt: Implementation-Defined Range, For chrome it is >1 billion bits\n- Ints don't wrap around in JS, this means\n  ```js\n  console.log(9007199254740991 + 1); // 9007199254740992\n  console.log(9007199254740991 + 2); // 9007199254740992\n  ```\n  [[BigInt]]s have a much larger limit, however, using them is not safe as there may be precision errors the more bits we use.\n  To create a BigInt we append literal ``n`` to a Number.\n  For ex.:\n  ```js\n  let x = 234n; //BigInt\n  ```\n- Numbers can use ``e`` which is the same as in [[C++]].\n  ```js\n  let x = 1e3; //1 * 1000\n  ```\n- Numbers can use ``_`` to break up larger values.\n- By default, numbers are in decimal. To write other systems we prefix the number:\n  Octal: ``0o``\n  Hex: ``0x``\n  Binary: ``0b``\n- ``.toString(<optional base>)`` converts a number to int and returns a string.\n  The method accepts a number between 2 to 36 and converts the number to that base and returns the value in string.\n  For ex.:\n  ```js\n  let x = 255;\n  x.toString(16); //returns \"ff\"\n  ```\n- The ``Math`` [[Object]] is an inbuilt JS Object that contains many important Math functions like ``Math.trunc(<num>)``. \n  Reference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)\n- ``.toFixed(<num>)`` rounds a number to given number of digits.\n- ``Infinity`` is greater than any other Number in [[Comparison]] to a Number, similarly ``-Infinity`` is smaller.\n- IsNaN(<value>) converts given arg to Number and returns true if it is equal to NaN. We can't compare [[NaN]] to anything, not even itself. This is why we need to use this special [[Function]] to check if a Number is NaN.\n- isFinite(<value>) returns false if the value is ``Infinity``/``-Infinity``/``NaN``.\n- Both isNaN and isFinite also exist in ``Number`` [[Object]], these are more stricter variants that only accept number type as argument.\n- -0 and 0 can be both stored as Numbers in JS.\n- ``parseInt(<value>,<optional base>)`` and ``parseFloat(<value>,<optional base>)`` read the value for a number until a character that isn't a Number is found, then returns the result. This is better than ``+\"num\"`` or ``Number()`` which requires value to be strictly a number or returns NaN. \n  \n  The optional base called ``radix``  specifies which base the value is of. Default value is 10.\n-",536883700]],["^15",[521,"^18",1687830959855,536870919]],["^15",[521,"^19","~m1692114717319",536883699]],["^15",[521,"^Z","pages/Number.md",536870919]],["^15",[522,"^Q","~``.toFixed(<num>)`` rounds a number to given number of digits.",536870919]],["^15",[522,"^O","^16",536870919]],["^15",[522,"^F",539,536870919]],["^15",[522,"^X",100,536870919]],["^15",[522,"^V",100,536870919]],["^15",[522,"^U",100,536870919]],["^15",[522,"^17",true,536870919]],["^15",[522,"^;","~u649a41af-e7cf-4d80-8e50-28248ff688a2",536870919]],["^15",[523,"^Q","By default, numbers are in decimal. To write other systems we prefix the number:\nOctal: ``0o``\nHex: ``0x``\nBinary: ``0b``",536870919]],["^15",[523,"^O","^16",536870919]],["^15",[523,"^F",528,536870919]],["^15",[523,"^X",100,536870919]],["^15",[523,"^V",100,536870919]],["^15",[523,"^U",100,536870919]],["^15",[523,"^17",true,536870919]],["^15",[523,"^;","~u649a41af-5712-4124-9ec7-12b3fed548a5",536870919]],["^15",[524,"^Q","isFinite(<value>) returns false if the value is ``Infinity``/``-Infinity``/``NaN``.",536870919]],["^15",[524,"^O","^16",536870919]],["^15",[524,"^F",538,536870919]],["^15",[524,"^X",100,536870919]],["^15",[524,"^V",100,536870919]],["^15",[524,"^U",100,536870919]],["^15",[524,"^17",true,536870919]],["^15",[524,"^;","~u649a41af-5e8b-4303-b9f5-003aa04c3960",536870919]],["^15",[525,"^Q","Integers: $$\\pm {(2^{53} - 3)}$$\nBigInt: Implementation-Defined Range, For chrome it is >1 billion bits",536870919]],["^15",[525,"^O","^16",536870919]],["^15",[525,"^F",536,536870919]],["^15",[525,"^X",100,536870919]],["^15",[525,"^V",100,536870919]],["^15",[525,"^U",100,536870919]],["^15",[525,"^17",true,536870919]],["^15",[525,"^;","~u649a41af-f879-426c-9ab1-274398b25519",536870919]],["^15",[526,"^Q","~``parseInt(<value>,<optional base>)`` and ``parseFloat(<value>,<optional base>)`` read the value for a number until a character that isn't a Number is found, then returns the result. This is better than ``+\"num\"`` or ``Number()`` which requires value to be strictly a number or returns NaN. \n\nThe optional base called ``radix``  specifies which base the value is of. Default value is 10.",536870919]],["^15",[526,"^O","^16",536870919]],["^15",[526,"^F",534,536870919]],["^15",[526,"^X",100,536870919]],["^15",[526,"^V",100,536870919]],["^15",[526,"^U",100,536870919]],["^15",[526,"^17",true,536870919]],["^15",[526,"^;","~u649a41af-e3b0-4181-840b-2d2b1799b726",536870919]],["^15",[527,"^Q","Both isNaN and isFinite also exist in ``Number`` [[Object]], these are more stricter variants that only accept number type as argument.",536870919]],["^15",[527,"^O","^16",536870919]],["^15",[527,"^F",524,536870919]],["^15",[527,"^X",100,536870919]],["^15",[527,"^V",100,536870919]],["^15",[527,"^U",39,536870919]],["^15",[527,"^U",100,536870919]],["^15",[527,"^H",39,536870919]],["^15",[527,"^17",true,536870919]],["^15",[527,"^;","~u649a41af-4ed9-4589-b1ce-8e6bc8acf8f1",536870919]],["^15",[528,"^Q","Numbers can use ``_`` to break up larger values.",536870919]],["^15",[528,"^O","^16",536870919]],["^15",[528,"^F",540,536870919]],["^15",[528,"^X",100,536870919]],["^15",[528,"^V",100,536870919]],["^15",[528,"^U",100,536870919]],["^15",[528,"^17",true,536870919]],["^15",[528,"^;","~u649a41af-2926-4367-9b45-8d9052d3c3f6",536870919]],["^15",[529,"^Q","~``Infinity`` is greater than any other Number in [[Comparison]] to a Number, similarly ``-Infinity`` is smaller.",536870919]],["^15",[529,"^O","^16",536870919]],["^15",[529,"^F",522,536870919]],["^15",[529,"^X",100,536870919]],["^15",[529,"^V",100,536870919]],["^15",[529,"^U",100,536870919]],["^15",[529,"^U",171,536870919]],["^15",[529,"^H",171,536870919]],["^15",[529,"^17",true,536870919]],["^15",[529,"^;","~u649a41af-d4d2-4548-a7fc-25a730b2b703",536870919]],["^15",[530,"^Q","Includes Integer and Floating-Point Numbers\nThere are some special values also stored in Numeric type,\n``Infinity``, ``-Infinity``, ``NaN``",536870919]],["^15",[530,"^O","^16",536870919]],["^15",[530,"^F",537,536870919]],["^15",[530,"^X",100,536870919]],["^15",[530,"^V",100,536870919]],["^15",[530,"^U",100,536870919]],["^15",[530,"^17",true,536870919]],["^15",[530,"^;","~u649a41af-0250-4878-b905-de0cc7c4e8c8",536870919]],["^15",[531,"^Q","Ints don't wrap around in JS, this means\n```js\nconsole.log(9007199254740991 + 1); // 9007199254740992\nconsole.log(9007199254740991 + 2); // 9007199254740992\n```\n[[BigInt]]s have a much larger limit, however, using them is not safe as there may be precision errors the more bits we use.\nTo create a BigInt we append literal ``n`` to a Number.\nFor ex.:\n```js\nlet x = 234n; //BigInt\n```",536870919]],["^15",[531,"^O","^16",536870919]],["^15",[531,"^F",525,536870919]],["^15",[531,"^X",100,536870919]],["^15",[531,"^V",100,536870919]],["^15",[531,"^U",98,536870919]],["^15",[531,"^U",100,536870919]],["^15",[531,"^H",98,536870919]],["^15",[531,"^17",true,536870919]],["^15",[531,"^;","~u649a41af-0e2f-4bfe-996e-13d85a545e49",536870919]],["^15",[532,"^Q","[[Object]] wrapper for primitive type ``number``",536870919]],["^15",[532,"^O","^16",536870919]],["^15",[532,"^F",100,536870919]],["^15",[532,"^X",100,536870919]],["^15",[532,"^V",100,536870919]],["^15",[532,"^U",39,536870919]],["^15",[532,"^U",100,536870919]],["^15",[532,"^H",39,536870919]],["^15",[532,"^17",true,536870919]],["^15",[532,"^;","~u649a41af-a160-4704-8fb3-18e02593ab8a",536870919]],["^15",[533,"^Q","~``.toString(<optional base>)`` converts a number to int and returns a string.\nThe method accepts a number between 2 to 36 and converts the number to that base and returns the value in string.\nFor ex.:\n```js\nlet x = 255;\nx.toString(16); //returns \"ff\"\n```",536883698]],["^15",[533,"^O","^16",536870919]],["^15",[533,"^F",523,536870919]],["^15",[533,"^X",100,536870919]],["^15",[533,"^V",100,536870919]],["^15",[533,"^U",100,536870919]],["^15",[533,"^?",["^ "],536883698]],["^15",[533,"^17",true,536870919]],["^15",[533,"^;","~u649a41af-15f4-4253-b2ff-0726fd31eba1",536870919]],["^15",[534,"^Q","-0 and 0 can be both stored as Numbers in JS.",536870919]],["^15",[534,"^O","^16",536870919]],["^15",[534,"^F",527,536870919]],["^15",[534,"^X",100,536870919]],["^15",[534,"^V",100,536870919]],["^15",[534,"^U",100,536870919]],["^15",[534,"^17",true,536870919]],["^15",[534,"^;","~u649a41af-d748-420e-b98d-ce9fa1ab5ab9",536870919]],["^15",[535,"^Q","",536870919]],["^15",[535,"^O","^16",536870919]],["^15",[535,"^F",526,536870919]],["^15",[535,"^X",100,536870919]],["^15",[535,"^V",100,536870919]],["^15",[535,"^U",100,536870919]],["^15",[535,"^17",true,536870919]],["^15",[535,"^;","~u649a41af-f9b7-4828-a537-ea946499bc24",536870919]],["^15",[536,"^Q","For  ex.:\n```js\nlet x = 2/0; // stores Infinity in x\nx= Infinity //same\nx= \"yo\"/3; //error, stores NaN in x\nx= x*3; //still NaN\n```\nNaN is a result of any computational error and any mathematical operation with NaN results back in NaN. This is also to say, ``maths is safe`` in JS as it would never crash the script, just store NaN in the worst case.",536870919]],["^15",[536,"^O","^16",536870919]],["^15",[536,"^F",530,536870919]],["^15",[536,"^X",100,536870919]],["^15",[536,"^V",100,536870919]],["^15",[536,"^U",100,536870919]],["^15",[536,"^17",true,536870919]],["^15",[536,"^;","~u649a41af-1491-4e50-bdfc-daa1e4380268",536870919]],["^15",[537,"^Q","Regular Numbers are stored in 64-bit format so there are always 64 bits to store any number, 52 bits are for the actual value of the number, 11 bits for the decimal position and 1 bit for the sign.",536870919]],["^15",[537,"^O","^16",536870919]],["^15",[537,"^F",532,536870919]],["^15",[537,"^X",100,536870919]],["^15",[537,"^V",100,536870919]],["^15",[537,"^U",100,536870919]],["^15",[537,"^17",true,536870919]],["^15",[537,"^;","~u649a41af-87b6-42c0-8646-c8deddb45112",536870919]],["^15",[538,"^Q","IsNaN(<value>) converts given arg to Number and returns true if it is equal to NaN. We can't compare [[NaN]] to anything, not even itself. This is why we need to use this special [[Function]] to check if a Number is NaN.",536870919]],["^15",[538,"^O","^16",536870919]],["^15",[538,"^F",529,536870919]],["^15",[538,"^X",100,536870919]],["^15",[538,"^V",100,536870919]],["^15",[538,"^U",44,536870919]],["^15",[538,"^U",100,536870919]],["^15",[538,"^U",174,536870919]],["^15",[538,"^H",44,536870919]],["^15",[538,"^H",174,536870919]],["^15",[538,"^17",true,536870919]],["^15",[538,"^;","~u649a41af-4694-40d6-8be1-61eec52b4a77",536870919]],["^15",[539,"^Q","The ``Math`` [[Object]] is an inbuilt JS Object that contains many important Math functions like ``Math.trunc(<num>)``. \nReference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)",536870919]],["^15",[539,"^O","^16",536870919]],["^15",[539,"^F",533,536870919]],["^15",[539,"^X",100,536870919]],["^15",[539,"^V",100,536870919]],["^15",[539,"^U",39,536870919]],["^15",[539,"^U",100,536870919]],["^15",[539,"^H",39,536870919]],["^15",[539,"^17",true,536870919]],["^15",[539,"^;","~u649a41af-8b5f-4269-915a-0870a4a1cc14",536870919]],["^15",[540,"^Q","Numbers can use ``e`` which is the same as in [[C++]].\n```js\nlet x = 1e3; //1 * 1000\n```",536870919]],["^15",[540,"^O","^16",536870919]],["^15",[540,"^F",531,536870919]],["^15",[540,"^X",100,536870919]],["^15",[540,"^V",100,536870919]],["^15",[540,"^U",42,536870919]],["^15",[540,"^U",100,536870919]],["^15",[540,"^H",42,536870919]],["^15",[540,"^17",true,536870919]],["^15",[540,"^;","~u649a41af-13f1-45a6-8aab-0a45073faf65",536870919]],["^15",[541,"^3","- The signature ``object`` type.\n  It's a non-primitive type that can contain collections of data with multiple entities, think of them as \"Map\" or \"Dictionary\" from other languages but with the extensibility of \"Classes\". They are used everywhere in JS, and almost everything in JS is an Object or uses Object.\n  For ex.:\n  ```js\n  let obj= new Object();  //Object Ctor Syntax \n  let obj2 = { }; //same thing, Object Literal Syntax, implicitly calls new Object()\n  ```\n- Objects store ``Key:Value`` pairs, each pair is called a ``Property`` and the key is called the ``Property Name`` whilst the ``Value`` is just called the ``Value``.\n  \n  For ex.:\n  ```js\n  let obj = {\n   name: \"YOo\",\n   age: 200,\n   \"yoo yoo\": 20, //This is a multi-word property name\n  }\n  ```\n  Objects in JS are hash tables, so the Time Complexity of accessing a key is $$\\Theta\\text{(1)}$$ and O(n).\n  \n  To create/update a property\n  ```js\n  obj.name= 2;\n  //or  \n  obj[\"yoo yoo\"] =\"yo\";\n  ```\n  \n  To retrieve\n  ```js\n  console.log(obj.name); //works\n  //or  \n  console.log( obj[\"yoo yoo\"] );\n  ```\n  \n  To delete\n  ```js\n  delete obj.name; \n  //or\n  delete obj[\"name\"]; \n  ```\n  Multi-word Properties can only be accessed with [...] and not the Dot [[Operator]].\n-\n- [...] access also supports variables inside them.\n  For ex.:\n  ```js\n  let x= \"yo\";\n  let y= {...};\n  y[x]; //ok \n  ```\n- Object keys can be variables, in which case the variable name becomes the Property Name.\n  \n  For ex.\n  ```js\n  'use strict';\n  let x = 3;\n  let obj= {\n          x:2,\n  };\n  \n  console.log(obj.x); //prints 2\n  ```\n- Computed Properties\n  Property names inside ``[ ]`` are computed, and the computed values are then assigned the values.\n  These properties can accept variables too.\n  For ex.:\n  \n  ```js\n  'use strict';\n  \n  function yo(){\n      let x=\"aye\";\n  \n      let obj= {\n          x:\"yoo\",\n          [x]:4,\n      };\n  \n      let obj2 = {\n          x: 2,\n          [x]:3,\n        \t[x+\"X\"]: 34,\n      };\n  \n      console.log(obj.x);\t //prints yoo\n      console.log(obj[\"aye\"]); //prints 4\n    \n      console.log(obj2.x); //prints 2\n      console.log(obj2[\"aye\"]); //prints 3\n    \tconsole.log(obj2.aye);\t//prints 3\n  \tconsole.log(obj2[\"ayeX\"]); //prints 34\n    \tconsole.log(obj2.ayeX); //prints 34\n  }\n  \n  yo();\n  \n  ```\n- To check if a key exists in an Object we can use the ``in`` [[Operator]]\n  ``if \"x\" in myobj``\n  We can also use ``if myobj[\"x\"]===undefined`` but this also returns true if \"x\" does exist and stores a value of [[undefined]] in it.\n- Property Value Shorthand\n  If a key name and variable holding its value has the same name, we can omit the value and it will pick it up from the variable.\n  For ex.:\n  ```js\n  let name = \"yo\";\n  let y= {\n     name, //that's it.\n  }\n  y.name; //works and returns \"yo\"\n  ```\n  This copies the value not references it.\n- Keys / Property Names can be either strings or [[Symbol]]s only, the other type are converted to strings. There is no restriction to a property's name as well. We don't need to use ``\" \"`` for strings for property names, it is automatically inserted.\n  For ex.:\n  ```js\n  let x= { \n    return: 2, //ok\n    \"yo\": 23, //  using string syntax\n    0: 2, //0 is of type Number, so it is converted to \"0\"\n    b() {\n      this.y=2; //works too, sets y to 2 for ``this`` Object, which can be x.\n    }\n  }\n  x.return; //works, returns 2\n  x[\"0\"]; //returns 2 \n  console.log(x.y); //prints undefined\n  x.b();\n  console.log(x.y); //prints 2\n  ```\n  There's a widely accepted convention that property names that start with \"_\" are ``hidden`` properties and hence mustn't be accessed by outside code. JS doesn't enforce it by default.\n-\n- Methods\n  * [Object.keys(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) – returns an [[Array]] of keys (doesn't include [[Symbol]] properties or [[Prototype Object]] properties).\n  * [Object.values(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) – returns an array of values.\n  * [Object.entries(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) – returns an array of `[key, value]` pairs.\n  ``Object.getOwnPropertySymbols(obj)`` to get array of Symbol Keys.\n  ``Reflect.ownKeys(obj)`` to get array of all keys, including Symbol properties.\n-\n- for..in [[Loop]] can be used with [[Object]], and also with the various methods of Object that return arrays.\n  This loop doesn't iterate over Symbol Keys.\n  This loop even iterates over properties of the [[Prototype Object]].\n- Integer Properties and Ordering\n  When we loop over keys of an Object, they appear in the order they were created unless they are Integer Properties.\n  \n  Integer properties are property names that are integers or strings that are directly and fully convertible to integers. Integer properties are sorted automatically.\n  For ex.:\n  ```js\n  let x= {\n    \"24\": \"yp\",\n    \"2\": \"aa\"\n  }\n  let y= {\n    \"+24\": \"yp\",  //Whilst it can be directly converted to number 24, it is not fully convertible as + is lost\n    \"abc\": \"aa\"\n  }\n  \n  for (let key in x) {...} //key is 2 then 24 \n  for (let key in y) {...} //key is +24 then abc\n  ```\n- Variables storing [[Primitives]] store their value directly, i.e., the variable of a primitive is a memory location holding the value directly. However [[Object]]s are always stored by reference.\n  For ex.:\n  \n  ```js\n  let user = {\n    name: \"x\"\n  }\n  ```\n  Here user actually stores the address of the Object.\n  ![image.png](../assets/image_1685705623118_0.png){:height 272, :width 371}\n  \n  This is also to say, if we copy an object by assignment operator, we actually copy the address and not the actual object and hence we copy by reference.\n  ```js\n  let x = {...}\n  let y= x; \n  //any change on y or x will be visible to both\n  ```\n- Comparison\n  To compare objects we can use the simple ``==`` Operator. It compares the address pointed by the variable.\n  ```js\n  let x= { };\n  let y= { };\n  x==y; //false\n  y= x;\n  x==y; //true\n  ```\n- To copy an Object,\n  Shallow Copy: Copy using assignment operator\n  Deep Copy: Iterate over keys and assign each primitive to the other Object. \n  Or\n  use ``Object.assign(dest, ...sources)``\n  This method returns the dest Object back as well. This method also copies over [[Symbol]] properties.\n  However it is still only a single level copy, if there are multiple levels to an Object, i.e., it has nested Objects then it will shallow copy the further levels. \n  \n  To deep copy all levels of an Object, we can iterate over keys and check if a key is an Object and if it is we recursively go in it and copy all the primitives\n  Or\n  use ``let dest =structuredClone(source)`` which does the same.\n  ``structuredClone`` also solves circular reference correctly.\n  That is,\n  ```js\n  let x= { };\n  x.me= x;\n  \n  let y= structuredClone(x);\n  y===y.me; //returns true\n  ```\n  However, it can't copy functions defined in an object so either custom loop or using an external library is required.\n  \n  Anoher way of copying an Object is \n  ```js\n  let x={};\n  let clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(x));\n  ```\n  This works because ``Object.defineProperties(...)`` defines properties with their descriptors on an empty object and returns it, and ``Object.getOwnPropertyDescriptors(...)`` gets all properties with their descriptors. Even copies other Objects such as [[Function]]s.\n  \n  Similarly, there's yet another way of cloning an Object with everything, including its [[Prototype Object]]\n  ```js\n  let obj = {};\n  let clone = Object.create(\n    Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj)\n  );\n  ```\n  This uses ``Object.create(<prototype object>, <descriptors>)`` to create an object and even sets the same ``[[Prototype]]`` as the original Object.\n-\n- Methods\n  Properties of Objects that hold [[Function]]s.\n  For ex.:\n  ```js\n  let x= { \n    bo: function() {...}, \n    bow() {...},    //method shorthand\n  \n  };\n  x.yo= function() {...};\n  \n  x.yo(); //works\n  ```\n  These are the 3 ways to create a method in an Object.\n  \n  To access the properties of the object inside the function property, we can use the [[this]] keyword.\n-\n-\n- Optional Chaining [[Operator]]\n  If a property is [[undefined]] for an object, using this operator we can get undefined instead of an error and if it's not undefined, we can get that property's value instead. \n  ``?.``\n  For ex.:\n  ```js\n  let x= {...};\n  console.log(x?.name?.yo); \n  ```\n  If x.name exists then get it then if name.yo exists get that. If x.name doesn't exist immediately return undefined, this is also a [[Short-circuit Evaluation]] . This also avoids an error if a property that doesn't exist is accessed using the dot operator.\n  \n  For methods, we can use the ``?.()``variant.\n  That is,\n  ```js\n  let y= {};\n  console.log(y?.yo()); //error\n  console.log(y.yo?.()); //ok, returns undefined\n  ```\n  Similarly, if we are using ``[]`` to access properties, we can use the ``?.[]`` variant.\n  ``y?.[\"abc\"]`` works.\n  \n  And this also Op also works with delete,\n  ``delete y?.name;``\n- [[Object]] Wrapper:\n  Primitive types have no properties/methods, they only have values as they are meant to be fast and lightweight. This is why JS provides Object wrappers for almost all primitive types, as these Objects provide the utility methods and also store the type and its value.\n  A key principle of Object wrappers is to never return the Object wrapper itself, always the primitive value associated with it. \n  For ex.:\n  ```js\n  let x = String(\"yo\") //is an Object Wrapper String(), but it returns the primitive type string.\n  ```\n  \n  We can get the Object wrapper back from an Object Wrapper using [[new]], however it is highly unrecommended.\n  ```js\n  let x = new Number(2) //returns an Object\n  ```\n  This is only valid as it is meant for internal use only.\n  \n  As for properties and methods on primitive values, they come from the Object Wrappers, but JS simply inserts the methods/properties automatically.\n  ```js\n  let x = 2;\n  x.toString();\n  ```\n  Here .toString() is added automatically by JS later.\n  For [[Number]] specifically, if we want to call a method/property on a direct value, we have to use 2 dot [[Operator]] ``..``, this is to avoid ambiguity we'd have with a single dot which also stands for decimal.\n  For ex.:\n  ```js\n  123..toString(); //ok\n  //or\n  (123).toString();\n  ```\n-\n- [[null]] and [[undefined]] have no Object Wrappers associated with them.\n- ``Object.is(a,b)`` is the same as ``a===b`` for [[Comparison]]. However it also handles 2 edge cases, if a and b are NaN, it returns true as [[NaN]] returns false by direct comparison. Secondly it returns false if a is -0 and b is 0 (or the other way around).\n- Object properties aren't simply just ``Key:Value`` pairs, they also have other sub-properties/attributes, known as ``flags``. There's 3 of them and these are all boolean ``Key:Value`` pairs,\n  \n  * ``writable``: if the property's value is writable(true)/read-only(false)\n  * ``enumerable``: if the property is enumerated in loops/Object.keys and the like (true), or not (false)\n  * ``configurable``: If true, allows these attributes to be modifiable and the property to be deletable. Regardless of this attribute, the value itself is mutable if it is writable. This is a one-way road, an attribute set to false configurable can't be reverted back. However we can modify writable attribute if it is true and set it to false if configurable is false.\n  All 3 are true for properties by default. \n  \n  In [[Old Mode]], flag violations (such as writing value when ``writable`` is )are silently ignored and the changes not applies. In ``Strict Mode``, flag violations result in an [[Error]] and the changes aren't applied. \n  \n  To get these attributes we use ``Object.getOwnPropertyDescriptor(<obj>, <prop name>)``\n  For ex.:\n  ```js\n  let x= {\n   a:2,\n   b() {\n    }\n  };\n  let descriptor = Object.getOwnPropertyDescriptor(x, \"a\"); //descriptor is a normal Object representing //the attributes\n  console.log(descriptor)\n  //prints { value: 2, writable: true, enumerable: true, configurable: true }\n  \n  console.log(Object.getOwnPropertyDescriptor(x, \"b\")); \n  //prints { value: [Function: b], writable: true, enumerable: true, configurable: true }\n  ```\n  Similarly, we have ``Object.getOwnPropertyDescriptors(<obj>)`` which returns all the properties with their descriptors from an Object.\n  \n  We can set/update these attributes using ``Object.defineProperty(<obj>,<prop name>, <descriptor obj>)``\n  For ex.:\n  ```js\n  let x= {\n   a:2,\n  };\n  Object.defineProperty(x, \"b\", { value: 4, writable: false });\n  console.log(Object.getOwnPropertyDescriptor(x, \"b\"));\n  //prints { value: 4, writable: false, enumerable: false, configurable: false}\n  ```\n  If the property doesn't exist, it is created. Then for it's attributes, if an attribute is supplied it is set to the given value, otherwise it is set to false. \n  \n  Similarly, we have ``Object.defineProperties(<obj>, <Object like so {\n  <prop 1 name>: <descriptor1>, \n  <prop 2 name>: <descriptor2>, \n  ...\n  }>)``\n  to set multiple properties with their descriptors at once. Attributes not set are false for any property here as well.``Object.defineProperties(...)`` also returns the modified Object.\n  \n  This is why combining ``Object.defineProperties(...)``and ``Object.getOwnPropertyDescriptors(...)`` allows for another type of copy. As properties with their attributes are copied over, even properties that aren't ``enumerable`` are copied over this way.\n- Sealing an Object:\n  \n  * [Object.preventExtensions(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n  : Forbids the addition of new properties to the object.\n  * [Object.seal(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n  : Forbids adding/removing of properties. Sets `configurable: false` for all existing properties.\n  * [Object.freeze(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n  : Forbids adding/removing/changing of properties. Sets `configurable: false, writable: false` for all existing properties.\n  \n  And also there are tests for them:\n   * [Object.isExtensible(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n  : Returns `false` if adding properties is forbidden, otherwise `true`.\n  * [Object.isSealed(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n  : Returns `true` if adding/removing properties is forbidden, and all existing properties have `configurable: false`.\n  * [Object.isFrozen(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n  : Returns `true` if adding/removing/changing properties is forbidden, and all current properties are `configurable: false, writable: false`.\n- Getter/Setter [[Function]]s (Methods):\n  Implemented using ``Accessor Properties`` which have syntax almost like a function with special keyword ``get`` and ``set`` which get/set value of/for a property.\n  For ex.:\n  ```js\n  let x = {\n   a: 2,\n   b: 3,\n   get ab() {\n    return a+b;\n  }\n  set ab(value) {\n   this.a= value/2;\n   this.b= value/2;\n  }\n   \n  };\n  console.log(x.ab); //prints 5\n  x.ab(4); //sets a and b to 2.\n  ```\n  Properties like a and b are called ``data properties`` whilst methods like these are called ``accessor properties``. There's only these 2, so if any property uses get/set it is an ``Accessor Property``.\n  \n  As we saw above, ``ab(...)`` isn't a normal method/function as there's 2 of it. So the accessor property is ``ab``.\n  \n  G/Setters can't have the same name as any other property/method, just like normal methods/properties.\n- Accessor properties have a different Object for descriptors, it has\n  `get` – a function without arguments, that works when a property is read,\n  `set` – a function with one argument, that is called when the property is set,\n  `enumerable`– same as for data properties,\n  `configurable` – same as for data properties.\n- There is a special property [[__proto__]] which can't be set for an Object to a non-Object value, that is ``x.__proto__= 2; `` will work but retrieving ``x.__proto__`` will return ``[object] [object]``.\n  This is because, [[Prototype Object]] is a property for any Object that defines its ``Prototypal Inheritance``.\n- ``Object.toString()``\n  This is quite a powerful method as it can be extracted and then used to identify Object type.\n  For ex.:\n  ```js\n  let s = Object.prototype.toString;\n  \n  console.log( s.call(123) ); // [object Number]\n  console.log( s.call(null) ); // [object Null]\n  console.log( s.call(alert) ); // [object Function]\n  ```\n  It examines the [[this]] Object and returns a string.\n  \n  If our Object has a special [[Symbol]] property [Symbol.toStringTag] set with a value of a string, then toString() gets that value instead.\n  For ex.:\n  ```js\n  let x = {\n   [Symbol.toStringTag]: \"Yo\",\n  };\n  console.log({}.toString(x)); //prints Yo\n  console.log(window[Symbol.toStringTag]); //prints window\n  ```",536885485]],["^15",[541,"^18",1687830959937,536870919]],["^15",[541,"^19","~m1712761146033",536885484]],["^15",[541,"^Z","pages/Object.md",536870919]],["^15",[542,"^5",143,536885065]],["^15",[542,"^K",1687830960250,536870919]],["^15",[542,"^[",683,536870919]],["^15",[542,"^@",false,536870919]],["^15",[542,"^Y","__proto__",536870919]],["^15",[542,"^11","__proto__",536870919]],["^15",[542,"^?",["^ ","^1:",["^1;",["Prototype Object"]]],536870919]],["^15",[542,"^4",["^ ","^1:","Prototype Object"],536870919]],["^15",[542,"^B",1687830960250,536870919]],["^15",[542,"^;","~u6616a43c-4e38-4e52-9a93-2b9112e223f1",536885136]],["^15",[543,"^K",1687830959985,536870919]],["^15",[543,"^@",false,536870919]],["^15",[543,"^Y","short-circuit evaluation",536870919]],["^15",[543,"^11","Short-Circuit Evaluation",536870919]],["^15",[543,"^B",1687830959985,536870919]],["^15",[543,"^;","~u6616a43c-e711-4df4-8fe1-f1bc83e01465",536885136]],["^15",[544,"^Q","To copy an Object,\nShallow Copy: Copy using assignment operator\nDeep Copy: Iterate over keys and assign each primitive to the other Object. \nOr\nuse ``Object.assign(dest, ...sources)``\nThis method returns the dest Object back as well. This method also copies over [[Symbol]] properties.\nHowever it is still only a single level copy, if there are multiple levels to an Object, i.e., it has nested Objects then it will shallow copy the further levels. \n\nTo deep copy all levels of an Object, we can iterate over keys and check if a key is an Object and if it is we recursively go in it and copy all the primitives\nOr\nuse ``let dest =structuredClone(source)`` which does the same.\n``structuredClone`` also solves circular reference correctly.\nThat is,\n```js\nlet x= { };\nx.me= x;\n\nlet y= structuredClone(x);\ny===y.me; //returns true\n```\nHowever, it can't copy functions defined in an object so either custom loop or using an external library is required.\n\nAnoher way of copying an Object is \n```js\nlet x={};\nlet clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(x));\n```\nThis works because ``Object.defineProperties(...)`` defines properties with their descriptors on an empty object and returns it, and ``Object.getOwnPropertyDescriptors(...)`` gets all properties with their descriptors. Even copies other Objects such as [[Function]]s.\n\nSimilarly, there's yet another way of cloning an Object with everything, including its [[Prototype Object]]\n```js\nlet obj = {};\nlet clone = Object.create(\n  Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj)\n);\n```\nThis uses ``Object.create(<prototype object>, <descriptors>)`` to create an object and even sets the same ``[[Prototype]]`` as the original Object.",536870919]],["^15",[544,"^O","^16",536870919]],["^15",[544,"^F",571,536870919]],["^15",[544,"^X",39,536870919]],["^15",[544,"^V",39,536870919]],["^15",[544,"^U",39,536870919]],["^15",[544,"^U",43,536870919]],["^15",[544,"^U",44,536870919]],["^15",[544,"^U",143,536870919]],["^15",[544,"^H",43,536885136]],["^15",[544,"^H",44,536885136]],["^15",[544,"^H",143,536885136]],["^15",[544,"^17",true,536870919]],["^15",[544,"^;","~u649a41af-4fe4-48fa-8aa3-335cc060c9ca",536870919]],["^15",[545,"^Q","Objects store ``Key:Value`` pairs, each pair is called a ``Property`` and the key is called the ``Property Name`` whilst the ``Value`` is just called the ``Value``.\n\nFor ex.:\n```js\nlet obj = {\n name: \"YOo\",\n age: 200,\n \"yoo yoo\": 20, //This is a multi-word property name\n}\n```\nObjects in JS are hash tables, so the Time Complexity of accessing a key is $$\\Theta\\text{(1)}$$ and O(n).\n\nTo create/update a property\n```js\nobj.name= 2;\n//or  \nobj[\"yoo yoo\"] =\"yo\";\n```\n\nTo retrieve\n```js\nconsole.log(obj.name); //works\n//or  \nconsole.log( obj[\"yoo yoo\"] );\n```\n\nTo delete\n```js\ndelete obj.name; \n//or\ndelete obj[\"name\"]; \n```\nMulti-word Properties can only be accessed with [...] and not the Dot [[Operator]].",536870919]],["^15",[545,"^O","^16",536870919]],["^15",[545,"^F",570,536870919]],["^15",[545,"^X",39,536870919]],["^15",[545,"^V",39,536870919]],["^15",[545,"^U",39,536870919]],["^15",[545,"^U",76,536870919]],["^15",[545,"^H",76,536885136]],["^15",[545,"^17",true,536870919]],["^15",[545,"^;","~u649a41af-dc75-4010-8d9a-4690e18d52c4",536870919]],["^15",[546,"^Q","",536870919]],["^15",[546,"^O","^16",536870919]],["^15",[546,"^F",544,536870919]],["^15",[546,"^X",39,536870919]],["^15",[546,"^V",39,536870919]],["^15",[546,"^U",39,536870919]],["^15",[546,"^17",true,536870919]],["^15",[546,"^;","~u649a41af-d3fa-4d4a-baf9-0841295ab761",536870919]],["^15",[547,"^Q","Variables storing [[Primitives]] store their value directly, i.e., the variable of a primitive is a memory location holding the value directly. However [[Object]]s are always stored by reference.\nFor ex.:\n\n```js\nlet user = {\n  name: \"x\"\n}\n```\nHere user actually stores the address of the Object.\n![image.png](../assets/image_1685705623118_0.png){:height 272, :width 371}\n\nThis is also to say, if we copy an object by assignment operator, we actually copy the address and not the actual object and hence we copy by reference.\n```js\nlet x = {...}\nlet y= x; \n//any change on y or x will be visible to both\n```",536870919]],["^15",[547,"^O","^16",536870919]],["^15",[547,"^F",562,536870919]],["^15",[547,"^X",39,536870919]],["^15",[547,"^V",39,536870919]],["^15",[547,"^U",39,536870919]],["^15",[547,"^U",285,536870919]],["^15",[547,"^H",39,536885136]],["^15",[547,"^H",285,536885136]],["^15",[547,"^17",true,536870919]],["^15",[547,"^;","~u649a41af-e863-4118-b08e-1532c0fec2b0",536870919]],["^15",[548,"^Q","",536870919]],["^15",[548,"^O","^16",536870919]],["^15",[548,"^F",545,536870919]],["^15",[548,"^X",39,536870919]],["^15",[548,"^V",39,536870919]],["^15",[548,"^U",39,536870919]],["^15",[548,"^17",true,536870919]],["^15",[548,"^;","~u649a41af-c6af-465c-9e94-f754c0af5b4b",536870919]],["^15",[549,"^Q","To check if a key exists in an Object we can use the ``in`` [[Operator]]\n``if \"x\" in myobj``\nWe can also use ``if myobj[\"x\"]===undefined`` but this also returns true if \"x\" does exist and stores a value of [[undefined]] in it.",536870919]],["^15",[549,"^O","^16",536870919]],["^15",[549,"^F",957,536885136]],["^15",[549,"^X",39,536870919]],["^15",[549,"^V",39,536870919]],["^15",[549,"^U",39,536870919]],["^15",[549,"^U",45,536870919]],["^15",[549,"^U",76,536870919]],["^15",[549,"^H",45,536885136]],["^15",[549,"^H",76,536885136]],["^15",[549,"^17",true,536870919]],["^15",[549,"^;","~u649a41af-4ad4-4304-9b0c-db8db0ea1ed1",536870919]],["^15",[550,"^Q","Object properties aren't simply just ``Key:Value`` pairs, they also have other sub-properties/attributes, known as ``flags``. There's 3 of them and these are all boolean ``Key:Value`` pairs,\n\n* ``writable``: if the property's value is writable(true)/read-only(false)\n* ``enumerable``: if the property is enumerated in loops/Object.keys and the like (true), or not (false)\n* ``configurable``: If true, allows these attributes to be modifiable and the property to be deletable. Regardless of this attribute, the value itself is mutable if it is writable. This is a one-way road, an attribute set to false configurable can't be reverted back. However we can modify writable attribute if it is true and set it to false if configurable is false.\nAll 3 are true for properties by default. \n\nIn [[Old Mode]], flag violations (such as writing value when ``writable`` is )are silently ignored and the changes not applies. In ``Strict Mode``, flag violations result in an [[Error]] and the changes aren't applied. \n\nTo get these attributes we use ``Object.getOwnPropertyDescriptor(<obj>, <prop name>)``\nFor ex.:\n```js\nlet x= {\n a:2,\n b() {\n  }\n};\nlet descriptor = Object.getOwnPropertyDescriptor(x, \"a\"); //descriptor is a normal Object representing //the attributes\nconsole.log(descriptor)\n//prints { value: 2, writable: true, enumerable: true, configurable: true }\n\nconsole.log(Object.getOwnPropertyDescriptor(x, \"b\")); \n//prints { value: [Function: b], writable: true, enumerable: true, configurable: true }\n```\nSimilarly, we have ``Object.getOwnPropertyDescriptors(<obj>)`` which returns all the properties with their descriptors from an Object.\n\nWe can set/update these attributes using ``Object.defineProperty(<obj>,<prop name>, <descriptor obj>)``\nFor ex.:\n```js\nlet x= {\n a:2,\n};\nObject.defineProperty(x, \"b\", { value: 4, writable: false });\nconsole.log(Object.getOwnPropertyDescriptor(x, \"b\"));\n//prints { value: 4, writable: false, enumerable: false, configurable: false}\n```\nIf the property doesn't exist, it is created. Then for it's attributes, if an attribute is supplied it is set to the given value, otherwise it is set to false. \n\nSimilarly, we have ``Object.defineProperties(<obj>, <Object like so {\n<prop 1 name>: <descriptor1>, \n<prop 2 name>: <descriptor2>, \n...\n}>)``\nto set multiple properties with their descriptors at once. Attributes not set are false for any property here as well.``Object.defineProperties(...)`` also returns the modified Object.\n\nThis is why combining ``Object.defineProperties(...)``and ``Object.getOwnPropertyDescriptors(...)`` allows for another type of copy. As properties with their attributes are copied over, even properties that aren't ``enumerable`` are copied over this way.",536870919]],["^15",[550,"^O","^16",536870919]],["^15",[550,"^F",559,536870919]],["^15",[550,"^X",39,536870919]],["^15",[550,"^V",39,536870919]],["^15",[550,"^U",39,536870919]],["^15",[550,"^U",77,536870919]],["^15",[550,"^U",284,536870919]],["^15",[550,"^H",77,536885136]],["^15",[550,"^H",284,536885136]],["^15",[550,"^17",true,536870919]],["^15",[550,"^;","~u649a41af-f6c8-4886-8366-9a777cee0846",536870919]],["^15",[551,"^Q","Getter/Setter [[Function]]s (Methods):\nImplemented using ``Accessor Properties`` which have syntax almost like a function with special keyword ``get`` and ``set`` which get/set value of/for a property.\nFor ex.:\n```js\nlet x = {\n a: 2,\n b: 3,\n get ab() {\n  return a+b;\n}\nset ab(value) {\n this.a= value/2;\n this.b= value/2;\n}\n \n};\nconsole.log(x.ab); //prints 5\nx.ab(4); //sets a and b to 2.\n```\nProperties like a and b are called ``data properties`` whilst methods like these are called ``accessor properties``. There's only these 2, so if any property uses get/set it is an ``Accessor Property``.\n\nAs we saw above, ``ab(...)`` isn't a normal method/function as there's 2 of it. So the accessor property is ``ab``.\n\nG/Setters can't have the same name as any other property/method, just like normal methods/properties.",536870919]],["^15",[551,"^O","^16",536870919]],["^15",[551,"^F",569,536870919]],["^15",[551,"^X",39,536870919]],["^15",[551,"^V",39,536870919]],["^15",[551,"^U",39,536870919]],["^15",[551,"^U",44,536870919]],["^15",[551,"^H",44,536885136]],["^15",[551,"^17",true,536870919]],["^15",[551,"^;","~u649a41af-e601-4115-a5dd-bcba3d02df49",536870919]],["^15",[552,"^Q","Methods\nProperties of Objects that hold [[Function]]s.\nFor ex.:\n```js\nlet x= { \n  bo: function() {...}, \n  bow() {...},    //method shorthand\n\n};\nx.yo= function() {...};\n\nx.yo(); //works\n```\nThese are the 3 ways to create a method in an Object.\n\nTo access the properties of the object inside the function property, we can use the [[this]] keyword.",536870919]],["^15",[552,"^O","^16",536870919]],["^15",[552,"^F",546,536870919]],["^15",[552,"^X",39,536870919]],["^15",[552,"^V",39,536870919]],["^15",[552,"^U",39,536870919]],["^15",[552,"^U",44,536870919]],["^15",[552,"^U",144,536870919]],["^15",[552,"^H",44,536885136]],["^15",[552,"^H",144,536885136]],["^15",[552,"^17",true,536870919]],["^15",[552,"^;","~u649a41af-326a-41e4-bbce-604425996de5",536870919]],["^15",[553,"^Q","[[Object]] Wrapper:\nPrimitive types have no properties/methods, they only have values as they are meant to be fast and lightweight. This is why JS provides Object wrappers for almost all primitive types, as these Objects provide the utility methods and also store the type and its value.\nA key principle of Object wrappers is to never return the Object wrapper itself, always the primitive value associated with it. \nFor ex.:\n```js\nlet x = String(\"yo\") //is an Object Wrapper String(), but it returns the primitive type string.\n```\n\nWe can get the Object wrapper back from an Object Wrapper using [[new]], however it is highly unrecommended.\n```js\nlet x = new Number(2) //returns an Object\n```\nThis is only valid as it is meant for internal use only.\n\nAs for properties and methods on primitive values, they come from the Object Wrappers, but JS simply inserts the methods/properties automatically.\n```js\nlet x = 2;\nx.toString();\n```\nHere .toString() is added automatically by JS later.\nFor [[Number]] specifically, if we want to call a method/property on a direct value, we have to use 2 dot [[Operator]] ``..``, this is to avoid ambiguity we'd have with a single dot which also stands for decimal.\nFor ex.:\n```js\n123..toString(); //ok\n//or\n(123).toString();\n```",536870919]],["^15",[553,"^O","^16",536870919]],["^15",[553,"^F",554,536870919]],["^15",[553,"^X",39,536870919]],["^15",[553,"^V",39,536870919]],["^15",[553,"^U",39,536870919]],["^15",[553,"^U",76,536870919]],["^15",[553,"^U",100,536870919]],["^15",[553,"^U",145,536870919]],["^15",[553,"^H",39,536885136]],["^15",[553,"^H",76,536885136]],["^15",[553,"^H",100,536885136]],["^15",[553,"^H",145,536885136]],["^15",[553,"^17",true,536870919]],["^15",[553,"^;","~u649a41af-152d-44ad-98e9-fbf204ee451d",536870919]],["^15",[554,"^Q","Optional Chaining [[Operator]]\nIf a property is [[undefined]] for an object, using this operator we can get undefined instead of an error and if it's not undefined, we can get that property's value instead. \n``?.``\nFor ex.:\n```js\nlet x= {...};\nconsole.log(x?.name?.yo); \n```\nIf x.name exists then get it then if name.yo exists get that. If x.name doesn't exist immediately return undefined, this is also a [[Short-circuit Evaluation]] . This also avoids an error if a property that doesn't exist is accessed using the dot operator.\n\nFor methods, we can use the ``?.()``variant.\nThat is,\n```js\nlet y= {};\nconsole.log(y?.yo()); //error\nconsole.log(y.yo?.()); //ok, returns undefined\n```\nSimilarly, if we are using ``[]`` to access properties, we can use the ``?.[]`` variant.\n``y?.[\"abc\"]`` works.\n\nAnd this also Op also works with delete,\n``delete y?.name;``",536870919]],["^15",[554,"^O","^16",536870919]],["^15",[554,"^F",956,536885136]],["^15",[554,"^X",39,536870919]],["^15",[554,"^V",39,536870919]],["^15",[554,"^U",39,536870919]],["^15",[554,"^U",45,536870919]],["^15",[554,"^U",76,536870919]],["^15",[554,"^U",543,536870919]],["^15",[554,"^H",45,536885136]],["^15",[554,"^H",76,536885136]],["^15",[554,"^H",543,536885136]],["^15",[554,"^17",true,536870919]],["^15",[554,"^;","~u649a41af-e522-4969-88f8-039bd564c96b",536870919]],["^15",[555,"^Q","[[null]] and [[undefined]] have no Object Wrappers associated with them.",536870919]],["^15",[555,"^O","^16",536870919]],["^15",[555,"^F",566,536870919]],["^15",[555,"^X",39,536870919]],["^15",[555,"^V",39,536870919]],["^15",[555,"^U",39,536870919]],["^15",[555,"^U",45,536870919]],["^15",[555,"^U",173,536870919]],["^15",[555,"^H",45,536885136]],["^15",[555,"^H",173,536885136]],["^15",[555,"^17",true,536870919]],["^15",[555,"^;","~u649a41af-7fd8-4fcd-80e0-7c32b93e92c8",536870919]],["^15",[556,"^Q","for..in [[Loop]] can be used with [[Object]], and also with the various methods of Object that return arrays.\nThis loop doesn't iterate over Symbol Keys.\nThis loop even iterates over properties of the [[Prototype Object]].",536870919]],["^15",[556,"^O","^16",536870919]],["^15",[556,"^F",561,536870919]],["^15",[556,"^X",39,536870919]],["^15",[556,"^V",39,536870919]],["^15",[556,"^U",39,536870919]],["^15",[556,"^U",40,536870919]],["^15",[556,"^U",143,536870919]],["^15",[556,"^H",39,536885136]],["^15",[556,"^H",40,536885136]],["^15",[556,"^H",143,536885136]],["^15",[556,"^17",true,536870919]],["^15",[556,"^;","~u649a41af-be98-4bed-99b0-572f0a733d5e",536870919]],["^15",[557,"^Q","Accessor properties have a different Object for descriptors, it has\n`get` – a function without arguments, that works when a property is read,\n`set` – a function with one argument, that is called when the property is set,\n`enumerable`– same as for data properties,\n`configurable` – same as for data properties.",536870919]],["^15",[557,"^O","^16",536870919]],["^15",[557,"^F",551,536870919]],["^15",[557,"^X",39,536870919]],["^15",[557,"^V",39,536870919]],["^15",[557,"^U",39,536870919]],["^15",[557,"^17",true,536870919]],["^15",[557,"^;","~u649a41af-ab9a-41be-adb2-079450836909",536870919]],["^15",[558,"^Q","Object keys can be variables, in which case the variable name becomes the Property Name.\n\nFor ex.\n```js\n'use strict';\nlet x = 3;\nlet obj= {\n        x:2,\n};\n\nconsole.log(obj.x); //prints 2\n```",536885136]],["^15",[558,"^O","^16",536870919]],["^15",[558,"^F",573,536870919]],["^15",[558,"^X",39,536870919]],["^15",[558,"^V",39,536870919]],["^15",[558,"^U",39,536870919]],["^15",[558,"^17",true,536870919]],["^15",[558,"^;","~u649a41af-b837-45ed-b7e6-b54e39f959ac",536870919]],["^15",[559,"^Q","~``Object.is(a,b)`` is the same as ``a===b`` for [[Comparison]]. However it also handles 2 edge cases, if a and b are NaN, it returns true as [[NaN]] returns false by direct comparison. Secondly it returns false if a is -0 and b is 0 (or the other way around).",536870919]],["^15",[559,"^O","^16",536870919]],["^15",[559,"^F",555,536870919]],["^15",[559,"^X",39,536870919]],["^15",[559,"^V",39,536870919]],["^15",[559,"^U",39,536870919]],["^15",[559,"^U",171,536870919]],["^15",[559,"^U",174,536870919]],["^15",[559,"^H",171,536885136]],["^15",[559,"^H",174,536885136]],["^15",[559,"^17",true,536870919]],["^15",[559,"^;","~u649a41af-d3d4-4753-be2b-76944dd9d3f8",536870919]],["^15",[560,"^Q","Property Value Shorthand\nIf a key name and variable holding its value has the same name, we can omit the value and it will pick it up from the variable.\nFor ex.:\n```js\nlet name = \"yo\";\nlet y= {\n   name, //that's it.\n}\ny.name; //works and returns \"yo\"\n```\nThis copies the value not references it.",536885483]],["^15",[560,"^O","^16",536870919]],["^15",[560,"^F",549,536870919]],["^15",[560,"^X",39,536870919]],["^15",[560,"^V",39,536870919]],["^15",[560,"^U",39,536870919]],["^15",[560,"^?",["^ "],536885483]],["^15",[560,"^17",true,536870919]],["^15",[560,"^;","~u649a41af-3aa7-40d7-b434-f525e7012f02",536870919]],["^15",[561,"^Q","",536870919]],["^15",[561,"^O","^16",536870919]],["^15",[561,"^F",568,536870919]],["^15",[561,"^X",39,536870919]],["^15",[561,"^V",39,536870919]],["^15",[561,"^U",39,536870919]],["^15",[561,"^17",true,536870919]],["^15",[561,"^;","~u649a41af-ea11-4863-8e35-e09e555a82fc",536870919]],["^15",[562,"^Q","Integer Properties and Ordering\nWhen we loop over keys of an Object, they appear in the order they were created unless they are Integer Properties.\n\nInteger properties are property names that are integers or strings that are directly and fully convertible to integers. Integer properties are sorted automatically.\nFor ex.:\n```js\nlet x= {\n  \"24\": \"yp\",\n  \"2\": \"aa\"\n}\nlet y= {\n  \"+24\": \"yp\",  //Whilst it can be directly converted to number 24, it is not fully convertible as + is lost\n  \"abc\": \"aa\"\n}\n\nfor (let key in x) {...} //key is 2 then 24 \nfor (let key in y) {...} //key is +24 then abc\n```",536870919]],["^15",[562,"^O","^16",536870919]],["^15",[562,"^F",556,536870919]],["^15",[562,"^X",39,536870919]],["^15",[562,"^V",39,536870919]],["^15",[562,"^U",39,536870919]],["^15",[562,"^17",true,536870919]],["^15",[562,"^;","~u649a41af-715d-49d9-864d-7764b822cc55",536870919]],["^15",[563,"^Q","",536870919]],["^15",[563,"^O","^16",536870919]],["^15",[563,"^F",552,536870919]],["^15",[563,"^X",39,536870919]],["^15",[563,"^V",39,536870919]],["^15",[563,"^U",39,536870919]],["^15",[563,"^17",true,536870919]],["^15",[563,"^;","~u649a41af-3070-43d4-8a6c-604690d470ca",536870919]],["^15",[566,"^Q","",536870919]],["^15",[566,"^O","^16",536870919]],["^15",[566,"^F",553,536870919]],["^15",[566,"^X",39,536870919]],["^15",[566,"^V",39,536870919]],["^15",[566,"^U",39,536870919]],["^15",[566,"^17",true,536870919]],["^15",[566,"^;","~u649a41af-f71e-4688-9893-184ce1b50522",536870919]],["^15",[567,"^Q","Keys / Property Names can be either strings or [[Symbol]]s only, the other type are converted to strings. There is no restriction to a property's name as well. We don't need to use ``\" \"`` for strings for property names, it is automatically inserted.\nFor ex.:\n```js\nlet x= { \n  return: 2, //ok\n  \"yo\": 23, //  using string syntax\n  0: 2, //0 is of type Number, so it is converted to \"0\"\n  b() {\n    this.y=2; //works too, sets y to 2 for ``this`` Object, which can be x.\n  }\n}\nx.return; //works, returns 2\nx[\"0\"]; //returns 2 \nconsole.log(x.y); //prints undefined\nx.b();\nconsole.log(x.y); //prints 2\n```\nThere's a widely accepted convention that property names that start with \"_\" are ``hidden`` properties and hence mustn't be accessed by outside code. JS doesn't enforce it by default.",536885068]],["^15",[567,"^O","^16",536870919]],["^15",[567,"^F",560,536870919]],["^15",[567,"^X",39,536870919]],["^15",[567,"^V",39,536870919]],["^15",[567,"^U",39,536870919]],["^15",[567,"^U",43,536870919]],["^15",[567,"^H",43,536885136]],["^15",[567,"^17",true,536870919]],["^15",[567,"^;","~u649a41af-e825-44fe-90a2-d741ddeef1b3",536870919]],["^15",[568,"^Q","Methods\n* [Object.keys(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) – returns an [[Array]] of keys (doesn't include [[Symbol]] properties or [[Prototype Object]] properties).\n* [Object.values(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) – returns an array of values.\n* [Object.entries(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) – returns an array of `[key, value]` pairs.\n``Object.getOwnPropertySymbols(obj)`` to get array of Symbol Keys.\n``Reflect.ownKeys(obj)`` to get array of all keys, including Symbol properties.",536870919]],["^15",[568,"^O","^16",536870919]],["^15",[568,"^F",926,536885068]],["^15",[568,"^X",39,536870919]],["^15",[568,"^V",39,536870919]],["^15",[568,"^U",39,536870919]],["^15",[568,"^U",43,536870919]],["^15",[568,"^U",47,536870919]],["^15",[568,"^U",143,536870919]],["^15",[568,"^H",43,536885136]],["^15",[568,"^H",47,536885136]],["^15",[568,"^H",143,536885136]],["^15",[568,"^17",true,536870919]],["^15",[568,"^;","~u649a41af-2416-4c74-8f6d-5c1162e084d3",536870919]],["^15",[569,"^Q","Sealing an Object:\n\n* [Object.preventExtensions(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n: Forbids the addition of new properties to the object.\n* [Object.seal(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n: Forbids adding/removing of properties. Sets `configurable: false` for all existing properties.\n* [Object.freeze(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n: Forbids adding/removing/changing of properties. Sets `configurable: false, writable: false` for all existing properties.\n\nAnd also there are tests for them:\n * [Object.isExtensible(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n: Returns `false` if adding properties is forbidden, otherwise `true`.\n* [Object.isSealed(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n: Returns `true` if adding/removing properties is forbidden, and all existing properties have `configurable: false`.\n* [Object.isFrozen(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n: Returns `true` if adding/removing/changing properties is forbidden, and all current properties are `configurable: false, writable: false`.",536870919]],["^15",[569,"^O","^16",536870919]],["^15",[569,"^F",550,536870919]],["^15",[569,"^X",39,536870919]],["^15",[569,"^V",39,536870919]],["^15",[569,"^U",39,536870919]],["^15",[569,"^17",true,536870919]],["^15",[569,"^;","~u649a41af-8c5b-4b5e-bdc8-3424092491a1",536870919]],["^15",[570,"^Q","The signature ``object`` type.\nIt's a non-primitive type that can contain collections of data with multiple entities, think of them as \"Map\" or \"Dictionary\" from other languages but with the extensibility of \"Classes\". They are used everywhere in JS, and almost everything in JS is an Object or uses Object.\nFor ex.:\n```js\nlet obj= new Object();  //Object Ctor Syntax \nlet obj2 = { }; //same thing, Object Literal Syntax, implicitly calls new Object()\n```",536870919]],["^15",[570,"^O","^16",536870919]],["^15",[570,"^F",39,536870919]],["^15",[570,"^X",39,536870919]],["^15",[570,"^V",39,536870919]],["^15",[570,"^U",39,536870919]],["^15",[570,"^17",true,536870919]],["^15",[570,"^;","~u649a41af-055a-4d70-9ae2-053a125286f9",536870919]],["^15",[571,"^Q","Comparison\nTo compare objects we can use the simple ``==`` Operator. It compares the address pointed by the variable.\n```js\nlet x= { };\nlet y= { };\nx==y; //false\ny= x;\nx==y; //true\n```",536870919]],["^15",[571,"^O","^16",536870919]],["^15",[571,"^F",547,536870919]],["^15",[571,"^X",39,536870919]],["^15",[571,"^V",39,536870919]],["^15",[571,"^U",39,536870919]],["^15",[571,"^17",true,536870919]],["^15",[571,"^;","~u649a41af-7110-4d5c-b37f-917df827f5dc",536870919]],["^15",[572,"^Q","There is a special property [[__proto__]] which can't be set for an Object to a non-Object value, that is ``x.__proto__= 2; `` will work but retrieving ``x.__proto__`` will return ``[object] [object]``.\nThis is because, [[Prototype Object]] is a property for any Object that defines its ``Prototypal Inheritance``.",536870919]],["^15",[572,"^O","^16",536870919]],["^15",[572,"^F",557,536870919]],["^15",[572,"^X",39,536870919]],["^15",[572,"^V",39,536870919]],["^15",[572,"^U",39,536870919]],["^15",[572,"^U",143,536870919]],["^15",[572,"^U",542,536870919]],["^15",[572,"^H",143,536885136]],["^15",[572,"^H",542,536885136]],["^15",[572,"^17",true,536870919]],["^15",[572,"^;","~u649a41af-aa4f-414d-8e89-a0bd20f34088",536870919]],["^15",[573,"^Q","[...] access also supports variables inside them.\nFor ex.:\n```js\nlet x= \"yo\";\nlet y= {...};\ny[x]; //ok \n```",536870919]],["^15",[573,"^O","^16",536870919]],["^15",[573,"^F",548,536870919]],["^15",[573,"^X",39,536870919]],["^15",[573,"^V",39,536870919]],["^15",[573,"^U",39,536870919]],["^15",[573,"^17",true,536870919]],["^15",[573,"^;","~u649a41af-b54f-4bbc-891f-279c51881efe",536870919]],["^15",[574,"^Q","~``Object.toString()``\nThis is quite a powerful method as it can be extracted and then used to identify Object type.\nFor ex.:\n```js\nlet s = Object.prototype.toString;\n\nconsole.log( s.call(123) ); // [object Number]\nconsole.log( s.call(null) ); // [object Null]\nconsole.log( s.call(alert) ); // [object Function]\n```\nIt examines the [[this]] Object and returns a string.\n\nIf our Object has a special [[Symbol]] property [Symbol.toStringTag] set with a value of a string, then toString() gets that value instead.\nFor ex.:\n```js\nlet x = {\n [Symbol.toStringTag]: \"Yo\",\n};\nconsole.log({}.toString(x)); //prints Yo\nconsole.log(window[Symbol.toStringTag]); //prints window\n```",536870919]],["^15",[574,"^O","^16",536870919]],["^15",[574,"^F",572,536870919]],["^15",[574,"^X",39,536870919]],["^15",[574,"^V",39,536870919]],["^15",[574,"^U",39,536870919]],["^15",[574,"^U",43,536870919]],["^15",[574,"^U",144,536870919]],["^15",[574,"^H",43,536885136]],["^15",[574,"^H",144,536885136]],["^15",[574,"^17",true,536870919]],["^15",[574,"^;","~u649a41af-d39b-40f3-bd3e-601a5aaa202c",536870919]],["^15",[575,"^3","- Basically the terms around a single [[Operator]] are called [[Operand]]s.\n  For ex.:\n  ```js\n  6+2\n  ```\n  Here 6 and 2 are operands.\n-",536870919]],["^15",[575,"^18",1687830959944,536870919]],["^15",[575,"^Z","pages/Operand.md",536870919]],["^15",[576,"^Q","Basically the terms around a single [[Operator]] are called [[Operand]]s.\nFor ex.:\n```js\n6+2\n```\nHere 6 and 2 are operands.",536870919]],["^15",[576,"^O","^16",536870919]],["^15",[576,"^F",517,536870919]],["^15",[576,"^X",517,536870919]],["^15",[576,"^V",517,536870919]],["^15",[576,"^U",76,536870919]],["^15",[576,"^U",517,536870919]],["^15",[576,"^H",76,536870919]],["^15",[576,"^H",517,536870919]],["^15",[576,"^17",true,536870919]],["^15",[576,"^;","~u649a41af-7060-460c-8227-357262e62635",536870919]],["^15",[577,"^Q","",536870919]],["^15",[577,"^O","^16",536870919]],["^15",[577,"^F",576,536870919]],["^15",[577,"^X",517,536870919]],["^15",[577,"^V",517,536870919]],["^15",[577,"^U",517,536870919]],["^15",[577,"^17",true,536870919]],["^15",[577,"^;","~u649a41af-16f4-4f9f-b77a-23e5e2c62111",536870919]],["^15",[578,"^3","- [[Operand]]s and [[Operator]]s make a mathematical expression.\n- 2 types: Unary and Binary. Unary means the operator accepts a single operand, binary means 2.\n- Supported Operators in [[ECMAScript]]\n  ![image.png](../assets/image_1685373168911_0.png)\n- [[String]] concatenation adds 2 strings together.\n- The binary \"+\" is the only operator that supports strings in such a way. Other ops don't.\n  For ex.:\n  ```js\n  let x=6-'2'; //stores 4\n  ```\n- The unary \"+\" is a bit different too.\n  If applied to [[Number]], does nothing. But if applied to other types, converts them to [[Number]]s.\n  Works like ``Number(<var/val>)``\n  \n  For ex.:\n  ```js\n  let x=2;\n  x= +x; //returns 2\n  x = -2;\n  x = +x; //returns -2\n  x= \"1\";\n  x= +x; //converts \"1\" to int.\n  ```\n- Precedence\n  Basic precedency list\n  ![image.png](../assets/image_1685374105624_0.png)\n  If every operator has the same precedency then it is solved left to right (unless the operator is '=')\n   \n  \n  Reference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n- All operators in [[ECMAScript]] return a value.\n  Even '=' with a precedency value of 2.\n  The '=' operator writes a value of the right operand into the left and then returns the value on the right.\n  For ex.:\n  ```js\n  let x= 3;\n  let y= (x=5); //solves '=' and then returns 5\n  \n  ```\n  This allows us to do ``chain assignment``, which is evaluated from right to left if everything has same precedence.\n- The ',' (comma) operator has a precedency of 1. This operator only returns the value of its right operand.\n  For ex.:\n  ```js\n  let x= (2+3,4+5); //returns 9\n  ```\n  \\+ has a higher precedence than ',' so it is solved first and 2+3 becomes 5, 4+5 becomes 9. Then the comma operator returns the right operand, 9.\n- [[ECMAScript]] supports pre/post increment/decrement operators on variables.\n- [[ECMAScript]] also supports modify-then-assign operators like ``+=``.\n- [[Bitwise]] Operators\n  [[ECMAScript]] also supports these.\n  ![image.png](../assets/image_1685374441877_0.png)\n  \n  Reference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators)\n- [[Comparison]] operators always returns a [[Boolean]] value. \n  There's ``'<','>','<=','>=','!=','==' and '==='``\n  For ex.:\n  ```js\n  let x= 2 > 3; //returns false\n  let y= \"A\" > \"Z\"; //returns false\n  ```\n  [[String]]s are compared using lexicographical (letter by letter unicode value) comparison.\n  \n  When values of different types are compared, they are converted to [[Number]]s. \n  For ex.:\n  ```js\n  let x= \"A\" > true; //converts A to Number and gets NaN and compares NaN to 1 (true is converted to 1). Returns false.\n  let y= false == \"0\"; //returns true, because false becomes 0 and \"0\" also becomes 0.\n  ```\n  All implicit conversion behaviors can be avoided using [[Strict Equality]] operators.\n-\n- [[Conditional]] Operator\n  Always returns a value, which is given by one of its expressions.\n  Combination of ``<bool> ? <expr on true> : <expr on false>``\n  For ex.:\n  ```js\n  let x= 2>3 ? 2 : 3; //returns 3 to x \n  ```\n  \n  Yes we can nest multiple Conditional Operators.\n- Logical Operator\n  AND``&&`` OR``||`` NOT``!`` and [[Nullish-Coalescing Operator]]``??``\n  \n  Unlike in other langs, they can be applied to non-[[Boolean]]s as well and they implicitly convert the value to Boolean and then apply the logical operations.\n  For ex.:\n  ```js\n  let x= null || 1; //converts null to Boolean, gets false, then converts 1 to Boolean, gets true and returns true.\n  ```\n  \n  [[Short-Circuit Evaluation]] is used. That is, in a logical operation the expression is solved from left-to-right converting all non-Boolean values to Boolean and checking them right away. For AND, the first ``false`` terminates/short-circuits the expression and false is returned, for OR the first ``true`` terminates the expression right away.\n- dot Operator\n  It is used to access whatever is on its left with whatever is on its right.\n  For ex.:\n  ```js\n  let x ={\n   a:2,\n   yo() {\n     console.log(this.a);\n    }\n   no() {\n   }\n  };\n  \n  x.yo(); //prints 2\n  let y = x.yo();\n  y(); //fails as ``this`` is undefined\n  \n  //Similarly\n  (x.a==2 ? x.yo: x.no)(); //fails as ``this`` is undefined\n  ```\n  [[this]] is [[undefined]] in these calls because whenever a [[Function]] is called using the dot Operator, the dot Op. doesn't return a function but a special [Reference Type](https://tc39.es/ecma262/#sec-reference-specification-type) which is an internal type from the spec.\n  It returns a 3 value combination ``(<base obj>, <prop name>, <is strict mode>)`` so ``x.yo()`` is actually ``(x,'yo',true)``, this allows JS to assign the correct ``this`` to the method. But when we explicitly copy just the function, the [[this]] is lost and hence the function, if relying on ``this``, fails.\n  \n  The ``[ ]`` access Operator works similarly in this case.\n-",536885521]],["^15",[578,"^18",1687830959986,536870919]],["^15",[578,"^19","~m1713380044573",536885520]],["^15",[578,"^Z","pages/Operator.md",536870919]],["^15",[579,"^K",1687830959984,536870919]],["^15",[579,"^@",false,536870919]],["^15",[579,"^Y","bitwise",536870919]],["^15",[579,"^11","Bitwise",536870919]],["^15",[579,"^B",1687830959984,536870919]],["^15",[579,"^;","~u65a4cc08-0048-4227-93a8-0ca4e39ce900",536885071]],["^15",[580,"^Q","The unary \"+\" is a bit different too.\nIf applied to [[Number]], does nothing. But if applied to other types, converts them to [[Number]]s.\nWorks like ``Number(<var/val>)``\n\nFor ex.:\n```js\nlet x=2;\nx= +x; //returns 2\nx = -2;\nx = +x; //returns -2\nx= \"1\";\nx= +x; //converts \"1\" to int.\n```",536870919]],["^15",[580,"^O","^16",536870919]],["^15",[580,"^F",585,536870919]],["^15",[580,"^X",76,536870919]],["^15",[580,"^V",76,536870919]],["^15",[580,"^U",76,536870919]],["^15",[580,"^U",100,536870919]],["^15",[580,"^H",100,536885071]],["^15",[580,"^17",true,536870919]],["^15",[580,"^;","~u649a41af-8134-4561-b63a-e274dd7f2c13",536870919]],["^15",[581,"^Q","[[ECMAScript]] also supports modify-then-assign operators like ``+=``.",536870919]],["^15",[581,"^O","^16",536870919]],["^15",[581,"^F",590,536870919]],["^15",[581,"^X",76,536870919]],["^15",[581,"^V",76,536870919]],["^15",[581,"^U",24,536870919]],["^15",[581,"^U",76,536870919]],["^15",[581,"^H",24,536885071]],["^15",[581,"^17",true,536870919]],["^15",[581,"^;","~u649a41af-d3b0-41a2-a4fe-3b375073d509",536870919]],["^15",[582,"^Q","",536870919]],["^15",[582,"^O","^16",536870919]],["^15",[582,"^F",597,536870919]],["^15",[582,"^X",76,536870919]],["^15",[582,"^V",76,536870919]],["^15",[582,"^U",76,536870919]],["^15",[582,"^17",true,536870919]],["^15",[582,"^;","~u649a41af-6809-4662-8993-61788ff9ed4b",536870919]],["^15",[583,"^Q","All operators in [[ECMAScript]] return a value.\nEven '=' with a precedency value of 2.\nThe '=' operator writes a value of the right operand into the left and then returns the value on the right.\nFor ex.:\n```js\nlet x= 3;\nlet y= (x=5); //solves '=' and then returns 5\n\n```\nThis allows us to do ``chain assignment``, which is evaluated from right to left if everything has same precedence.",536885071]],["^15",[583,"^O","^16",536870919]],["^15",[583,"^F",584,536870919]],["^15",[583,"^X",76,536870919]],["^15",[583,"^V",76,536870919]],["^15",[583,"^U",24,536870919]],["^15",[583,"^U",76,536870919]],["^15",[583,"^H",24,536885071]],["^15",[583,"^17",true,536870919]],["^15",[583,"^;","~u649a41af-0d4e-483b-8b51-0ad0a4d1b14f",536870919]],["^15",[584,"^Q","Precedence\nBasic precedency list\n![image.png](../assets/image_1685374105624_0.png)\nIf every operator has the same precedency then it is solved left to right (unless the operator is '=')\n \n\nReference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)",536870919]],["^15",[584,"^O","^16",536870919]],["^15",[584,"^F",580,536870919]],["^15",[584,"^X",76,536870919]],["^15",[584,"^V",76,536870919]],["^15",[584,"^U",76,536870919]],["^15",[584,"^17",true,536870919]],["^15",[584,"^;","~u649a41af-e0f9-48b6-b383-7bef240c11cf",536870919]],["^15",[585,"^Q","The binary \"+\" is the only operator that supports strings in such a way. Other ops don't.\nFor ex.:\n```js\nlet x=6-'2'; //stores 4\n```",536870919]],["^15",[585,"^O","^16",536870919]],["^15",[585,"^F",596,536870919]],["^15",[585,"^X",76,536870919]],["^15",[585,"^V",76,536870919]],["^15",[585,"^U",76,536870919]],["^15",[585,"^17",true,536870919]],["^15",[585,"^;","~u649a41af-55c0-46f6-9052-5fa935766def",536870919]],["^15",[587,"^Q","[[Operand]]s and [[Operator]]s make a mathematical expression.",536870919]],["^15",[587,"^O","^16",536870919]],["^15",[587,"^F",76,536870919]],["^15",[587,"^X",76,536870919]],["^15",[587,"^V",76,536870919]],["^15",[587,"^U",76,536870919]],["^15",[587,"^U",517,536870919]],["^15",[587,"^H",76,536885071]],["^15",[587,"^H",517,536885071]],["^15",[587,"^17",true,536870919]],["^15",[587,"^;","~u649a41af-b0ad-49a9-b3bc-30f3557350bf",536870919]],["^15",[588,"^Q","Logical Operator\nAND``&&`` OR``||`` NOT``!`` and [[Nullish-Coalescing Operator]]``??``\n\nUnlike in other langs, they can be applied to non-[[Boolean]]s as well and they implicitly convert the value to Boolean and then apply the logical operations.\nFor ex.:\n```js\nlet x= null || 1; //converts null to Boolean, gets false, then converts 1 to Boolean, gets true and returns true.\n```\n\n[[Short-Circuit Evaluation]] is used. That is, in a logical operation the expression is solved from left-to-right converting all non-Boolean values to Boolean and checking them right away. For AND, the first ``false`` terminates/short-circuits the expression and false is returned, for OR the first ``true`` terminates the expression right away.",536870919]],["^15",[588,"^O","^16",536870919]],["^15",[588,"^F",592,536870919]],["^15",[588,"^X",76,536870919]],["^15",[588,"^V",76,536870919]],["^15",[588,"^U",76,536870919]],["^15",[588,"^U",99,536870919]],["^15",[588,"^U",367,536870919]],["^15",[588,"^U",543,536870919]],["^15",[588,"^H",99,536885071]],["^15",[588,"^H",367,536885071]],["^15",[588,"^H",543,536885071]],["^15",[588,"^17",true,536870919]],["^15",[588,"^;","~u649a41af-6ca8-4205-8a8e-f53b0a80847c",536870919]],["^15",[589,"^Q","dot Operator\nIt is used to access whatever is on its left with whatever is on its right.\nFor ex.:\n```js\nlet x ={\n a:2,\n yo() {\n   console.log(this.a);\n  }\n no() {\n }\n};\n\nx.yo(); //prints 2\nlet y = x.yo();\ny(); //fails as ``this`` is undefined\n\n//Similarly\n(x.a==2 ? x.yo: x.no)(); //fails as ``this`` is undefined\n```\n[[this]] is [[undefined]] in these calls because whenever a [[Function]] is called using the dot Operator, the dot Op. doesn't return a function but a special [Reference Type](https://tc39.es/ecma262/#sec-reference-specification-type) which is an internal type from the spec.\nIt returns a 3 value combination ``(<base obj>, <prop name>, <is strict mode>)`` so ``x.yo()`` is actually ``(x,'yo',true)``, this allows JS to assign the correct ``this`` to the method. But when we explicitly copy just the function, the [[this]] is lost and hence the function, if relying on ``this``, fails.\n\nThe ``[ ]`` access Operator works similarly in this case.",536870919]],["^15",[589,"^O","^16",536870919]],["^15",[589,"^F",588,536870919]],["^15",[589,"^X",76,536870919]],["^15",[589,"^V",76,536870919]],["^15",[589,"^U",44,536870919]],["^15",[589,"^U",45,536870919]],["^15",[589,"^U",76,536870919]],["^15",[589,"^U",144,536870919]],["^15",[589,"^H",44,536885071]],["^15",[589,"^H",45,536885071]],["^15",[589,"^H",144,536885071]],["^15",[589,"^17",true,536870919]],["^15",[589,"^;","~u649a41af-19fa-4c2b-9392-601774d209b2",536870919]],["^15",[590,"^Q","[[ECMAScript]] supports pre/post increment/decrement operators on variables.",536870919]],["^15",[590,"^O","^16",536870919]],["^15",[590,"^F",928,536885071]],["^15",[590,"^X",76,536870919]],["^15",[590,"^V",76,536870919]],["^15",[590,"^U",24,536870919]],["^15",[590,"^U",76,536870919]],["^15",[590,"^H",24,536885071]],["^15",[590,"^17",true,536870919]],["^15",[590,"^;","~u649a41af-2489-4b58-86c9-ce5aaa7d14a5",536870919]],["^15",[591,"^Q","",536870919]],["^15",[591,"^O","^16",536870919]],["^15",[591,"^F",589,536870919]],["^15",[591,"^X",76,536870919]],["^15",[591,"^V",76,536870919]],["^15",[591,"^U",76,536870919]],["^15",[591,"^17",true,536870919]],["^15",[591,"^;","~u649a41af-9ffc-48dd-a7d2-75057a352fd4",536870919]],["^15",[592,"^Q","[[Conditional]] Operator\nAlways returns a value, which is given by one of its expressions.\nCombination of ``<bool> ? <expr on true> : <expr on false>``\nFor ex.:\n```js\nlet x= 2>3 ? 2 : 3; //returns 3 to x \n```\n\nYes we can nest multiple Conditional Operators.",536870919]],["^15",[592,"^O","^16",536870919]],["^15",[592,"^F",582,536870919]],["^15",[592,"^X",76,536870919]],["^15",[592,"^V",76,536870919]],["^15",[592,"^U",76,536870919]],["^15",[592,"^U",184,536870919]],["^15",[592,"^H",184,536885071]],["^15",[592,"^17",true,536870919]],["^15",[592,"^;","~u649a41af-2e49-4f71-92df-c1073cc5e602",536870919]],["^15",[593,"^Q","Supported Operators in [[ECMAScript]]\n![image.png](../assets/image_1685373168911_0.png)",536870919]],["^15",[593,"^O","^16",536870919]],["^15",[593,"^F",594,536870919]],["^15",[593,"^X",76,536870919]],["^15",[593,"^V",76,536870919]],["^15",[593,"^U",24,536870919]],["^15",[593,"^U",76,536870919]],["^15",[593,"^H",24,536885071]],["^15",[593,"^17",true,536870919]],["^15",[593,"^;","~u649a41af-e6f1-47e6-85dd-7aca4e8a68b4",536870919]],["^15",[594,"^Q","2 types: Unary and Binary. Unary means the operator accepts a single operand, binary means 2.",536870919]],["^15",[594,"^O","^16",536870919]],["^15",[594,"^F",587,536870919]],["^15",[594,"^X",76,536870919]],["^15",[594,"^V",76,536870919]],["^15",[594,"^U",76,536870919]],["^15",[594,"^17",true,536870919]],["^15",[594,"^;","~u649a41af-fb6b-425b-96da-921ded4da87d",536870919]],["^15",[595,"^Q","[[Bitwise]] Operators\n[[ECMAScript]] also supports these.\n![image.png](../assets/image_1685374441877_0.png)\n\nReference: [Mozilla Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators)",536870919]],["^15",[595,"^O","^16",536870919]],["^15",[595,"^F",581,536870919]],["^15",[595,"^X",76,536870919]],["^15",[595,"^V",76,536870919]],["^15",[595,"^U",24,536870919]],["^15",[595,"^U",76,536870919]],["^15",[595,"^U",579,536870919]],["^15",[595,"^H",24,536885071]],["^15",[595,"^H",579,536885071]],["^15",[595,"^17",true,536870919]],["^15",[595,"^;","~u649a41af-249f-4b39-8416-66350c15b1a3",536870919]],["^15",[596,"^Q","[[String]] concatenation adds 2 strings together.",536870919]],["^15",[596,"^O","^16",536870919]],["^15",[596,"^F",593,536870919]],["^15",[596,"^X",76,536870919]],["^15",[596,"^V",76,536870919]],["^15",[596,"^U",41,536870919]],["^15",[596,"^U",76,536870919]],["^15",[596,"^H",41,536885071]],["^15",[596,"^17",true,536870919]],["^15",[596,"^;","~u649a41af-82f1-4ce1-905b-28c6e476ff5f",536870919]],["^15",[597,"^Q","[[Comparison]] operators always returns a [[Boolean]] value. \nThere's ``'<','>','<=','>=','!=','==' and '==='``\nFor ex.:\n```js\nlet x= 2 > 3; //returns false\nlet y= \"A\" > \"Z\"; //returns false\n```\n[[String]]s are compared using lexicographical (letter by letter unicode value) comparison.\n\nWhen values of different types are compared, they are converted to [[Number]]s. \nFor ex.:\n```js\nlet x= \"A\" > true; //converts A to Number and gets NaN and compares NaN to 1 (true is converted to 1). Returns false.\nlet y= false == \"0\"; //returns true, because false becomes 0 and \"0\" also becomes 0.\n```\nAll implicit conversion behaviors can be avoided using [[Strict Equality]] operators.",536885519]],["^15",[597,"^O","^16",536870919]],["^15",[597,"^F",595,536870919]],["^15",[597,"^X",76,536870919]],["^15",[597,"^V",76,536870919]],["^15",[597,"^U",41,536870919]],["^15",[597,"^U",76,536870919]],["^15",[597,"^U",99,536870919]],["^15",[597,"^U",100,536870919]],["^15",[597,"^U",171,536870919]],["^15",[597,"^U",172,536870919]],["^15",[597,"^?",["^ "],536885519]],["^15",[597,"^H",41,536885519]],["^15",[597,"^H",99,536885519]],["^15",[597,"^H",100,536885519]],["^15",[597,"^H",171,536885519]],["^15",[597,"^H",172,536885519]],["^15",[597,"^17",true,536870919]],["^15",[597,"^;","~u649a41af-8d2d-4bd8-8d4e-c8217fc87a18",536870919]],["^15",[598,"^3","- Just like the [[Transpiler]] except instead of converting new syntax into compatible older syntax, it adds missing functions. So if a new JS version includes a new method and we target an old one, then polyfill will simply define that function. [core js](https://github.com/zloirock/core-js) and [polyfill.io](https://polyfill.io/v3/) are good polyfill tools.\n-",536870919]],["^15",[598,"^18",1687830959996,536870919]],["^15",[598,"^Z","pages/Polyfill.md",536870919]],["^15",[599,"^Q","Just like the [[Transpiler]] except instead of converting new syntax into compatible older syntax, it adds missing functions. So if a new JS version includes a new method and we target an old one, then polyfill will simply define that function. [core js](https://github.com/zloirock/core-js) and [polyfill.io](https://polyfill.io/v3/) are good polyfill tools.",536870919]],["^15",[599,"^O","^16",536870919]],["^15",[599,"^F",101,536870919]],["^15",[599,"^X",101,536870919]],["^15",[599,"^V",101,536870919]],["^15",[599,"^U",101,536870919]],["^15",[599,"^U",300,536870919]],["^15",[599,"^H",300,536870919]],["^15",[599,"^17",true,536870919]],["^15",[599,"^;","~u649a41af-1153-444a-8482-cc018ca2b3d6",536870919]],["^15",[600,"^Q","",536870919]],["^15",[600,"^O","^16",536870919]],["^15",[600,"^F",599,536870919]],["^15",[600,"^X",101,536870919]],["^15",[600,"^V",101,536870919]],["^15",[600,"^U",101,536870919]],["^15",[600,"^17",true,536870919]],["^15",[600,"^;","~u649a41af-7a46-447f-b516-b6c8ed1d58b2",536870919]],["^15",[601,"^3","alias:: Proxy Object\n\n- A PO is a special [[Object]] in JS that wraps over another Object and whatever operation is performed on it, it is passed over to the wrapped Object called its ``target``.\n- We use the ``Proxy`` class to do so, the syntax being ``Proxy(<target obj>, <handler object>)`` where handler is an [[Object]] that intercepts calls to given methods. \n  For ex.:\n  ```js\n  let x ={};\n  let proxy = new Proxy(x, {});\n  proxy.yo= 2; //ok\n  console.log(x.yo); //prints 2\n  console.log(proxy.yo); //also prints 2\n  ```\n  It looks like so\n  ![image.png](../assets/image_1687183225812_0.png)\n  \n  We can iterate over proxy keys too, which return the target Object's Keys returned as [[Iterable]].\n  It is ideal to replace the original [[Object]] with the Proxy Object.\n- Internal [[Object]] methods\n  Objects in JS have internal methods that define its behavior and behavior of its properties/methods, these internal methods can only be called internally and not through our code. Similarly, we also have Internal Properties like [[Environment Object]], ``[[HomeObject]]``, [[Prototype Object]] etc.. \n  The ``Proxy`` Class hooks into these methods of a target Object and can intercept these calls, provided they are defined in the handler object with the mapped name.\n  They are:\n  ![image.png](../assets/image_1687192358700_0.png)\n  When we create an intercept for an internal method in the proxy handler, it is known as a trap.\n  \n  * Invariant: JS enforces some rules to be followed when working with traps to ensure consistent behavior of Objects. The [Spec](https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots) defines these.\n  \n  * Each trap is a method with its params.\n  For ex.\n  The ``get`` trap has 3 params, ``get(<target obj>,<prop name>,<reciever obj>)`` where reciever obj is the obj passed as [[this]] to the intercepted method ``[[GET]]`` if the target property is a getter accessor property. So this trap is called for read access to any property (Remember there is no [[Function]] overloading in JS as methods are identified by name alone, so there can only be 1 method of a name)\n  ```js\n  \n  let x = {\n    a: 2,\n  };\n  \n  let proxy = new Proxy(x, {\n    get(x, prop) {\n      if (prop == \"a\") {\n        return 1;\n      } else return x[prop];\n    },\n  });\n  \n  console.log(proxy.a);\n  ```\n  \n  Similarly we have set, ``set(target, property, value, receiver)``, this method returns a bool which should be true on a successful updating of the Object, and false otherwise as this is said by an ``Invariant``. \n  Similarly we have other traps like ``apply(target, thisArg, args)`` that wraps functions and is called when the proxy object is called as a function.\n  \n  * Despite that [[Strict Equality]] differentiates between an [[Object]] and its Proxy.\n  An Object is strictly equal to itself only and that can't be intercepted.\n  For ex.:\n  ```js\n  let x= {\n   a:2,\n  };\n  let y = new Set();\n  y.add(x);\n  console.log(y.has(x)); //true\n  x = new Proxy(x, {});\n  console.log(y.has(x)); //false\n  ```\n- ``Reflect``\n  This special [[Object]] wraps over all internal methods that the ``Proxy`` Object does, with the same name as the trap method and same args.\n  ![image.png](../assets/image_1687202127438_0.png)\n  It provides a way to directly access the object's internal methods without a Proxy.\n  For ex.:\n  ```js\n  let x ={};\n  Reflect.set(x,'a',2);\n  console.log(x[a]); //prints 2\n  ```\n- Not all inbuilt [[Object]] can be Proxied similarly, this is because apart from internal methods and properties, Objects also have  ``internal slot``s. These are special internal properties reserved for internal use, like [[Map]] has ``[MapData]``, these are not trapped by the ``Proxy`` Object so the operations fail on proxy objects. \n  For ex.:\n  ```js\n  let map = new Map();\n  \n  let proxy = new Proxy(map, {});\n  \n  proxy.set('test', 1); // Error\n  ```\n  A simple trick to fix these errors is\n  \n  ```js\n  let map = new Map();\n  \n  let proxy = new Proxy(map, {\n    get(target, prop, receiver) {\n      let value = Reflect.get(...arguments);\n      return typeof value == 'function' ? value.bind(target) : value;\n    }\n  });\n  \n  proxy.set('test', 1); //works\n  ```\n  This works because get call here binds the ``this`` of Map's internal methods with the Map Object and so when an object of Map tries to access ``[MapData]`` using [[this]] it gets the binded Map object and not Proxy.\n  \n  [[Array]] uses no ``internal slot``s. [[Class]]es do use them for private properties/[[Function]]s.\n- Revocable Proxy\n  A proxy that can be revoked/disabled at any time.\n  ```js\n  let x = {\n  a:2,\n  };\n  let {proxy, revoke} = new Proxy.revocable(x, {});\n  \n  console.log(proxy.a); //prints 2\n  revoke();\n  console.log(proxy.a); //error, proxy is revoked\n  ```\n  Uses [[Destructuring Assignment]].\n-\n-",536870919]],["^15",[601,"^18",1687830960032,536870919]],["^15",[601,"^Z","pages/Proxy.md",536870919]],["^15",[602,"^5",298,536870919]],["^15",[602,"^K",1687830960031,536870919]],["^15",[602,"^@",false,536870919]],["^15",[602,"^Y","proxy object",536870919]],["^15",[602,"^11","Proxy Object",536870919]],["^15",[602,"^B",1687830960031,536870919]],["^15",[602,"^;","~u649a41b0-b4af-486e-978b-7aca0334a5fd",536870919]],["^15",[603,"^Q","We use the ``Proxy`` class to do so, the syntax being ``Proxy(<target obj>, <handler object>)`` where handler is an [[Object]] that intercepts calls to given methods. \nFor ex.:\n```js\nlet x ={};\nlet proxy = new Proxy(x, {});\nproxy.yo= 2; //ok\nconsole.log(x.yo); //prints 2\nconsole.log(proxy.yo); //also prints 2\n```\nIt looks like so\n![image.png](../assets/image_1687183225812_0.png)\n\nWe can iterate over proxy keys too, which return the target Object's Keys returned as [[Iterable]].\nIt is ideal to replace the original [[Object]] with the Proxy Object.",536870919]],["^15",[603,"^O","^16",536870919]],["^15",[603,"^F",608,536870919]],["^15",[603,"^X",298,536870919]],["^15",[603,"^V",298,536870919]],["^15",[603,"^U",39,536870919]],["^15",[603,"^U",46,536870919]],["^15",[603,"^U",298,536870919]],["^15",[603,"^H",39,536870919]],["^15",[603,"^H",46,536870919]],["^15",[603,"^17",true,536870919]],["^15",[603,"^;","~u649a41b0-fb5e-4c42-aaa9-ecfcf7ed2166",536870919]],["^15",[604,"^Q","",536870919]],["^15",[604,"^O","^16",536870919]],["^15",[604,"^F",605,536870919]],["^15",[604,"^X",298,536870919]],["^15",[604,"^V",298,536870919]],["^15",[604,"^U",298,536870919]],["^15",[604,"^17",true,536870919]],["^15",[604,"^;","~u649a41b0-6e49-43b5-b523-c2c5a5bde3c1",536870919]],["^15",[605,"^Q","Revocable Proxy\nA proxy that can be revoked/disabled at any time.\n```js\nlet x = {\na:2,\n};\nlet {proxy, revoke} = new Proxy.revocable(x, {});\n\nconsole.log(proxy.a); //prints 2\nrevoke();\nconsole.log(proxy.a); //error, proxy is revoked\n```\nUses [[Destructuring Assignment]].",536870919]],["^15",[605,"^O","^16",536870919]],["^15",[605,"^F",607,536870919]],["^15",[605,"^X",298,536870919]],["^15",[605,"^V",298,536870919]],["^15",[605,"^U",258,536870919]],["^15",[605,"^U",298,536870919]],["^15",[605,"^H",258,536870919]],["^15",[605,"^17",true,536870919]],["^15",[605,"^;","~u649a41b0-d9f4-4a48-b79a-7f99e73eadc5",536870919]],["^15",[606,"^Q","Internal [[Object]] methods\nObjects in JS have internal methods that define its behavior and behavior of its properties/methods, these internal methods can only be called internally and not through our code. Similarly, we also have Internal Properties like [[Environment Object]], ``[[HomeObject]]``, [[Prototype Object]] etc.. \nThe ``Proxy`` Class hooks into these methods of a target Object and can intercept these calls, provided they are defined in the handler object with the mapped name.\nThey are:\n![image.png](../assets/image_1687192358700_0.png)\nWhen we create an intercept for an internal method in the proxy handler, it is known as a trap.\n\n* Invariant: JS enforces some rules to be followed when working with traps to ensure consistent behavior of Objects. The [Spec](https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots) defines these.\n\n* Each trap is a method with its params.\nFor ex.\nThe ``get`` trap has 3 params, ``get(<target obj>,<prop name>,<reciever obj>)`` where reciever obj is the obj passed as [[this]] to the intercepted method ``[[GET]]`` if the target property is a getter accessor property. So this trap is called for read access to any property (Remember there is no [[Function]] overloading in JS as methods are identified by name alone, so there can only be 1 method of a name)\n```js\n\nlet x = {\n  a: 2,\n};\n\nlet proxy = new Proxy(x, {\n  get(x, prop) {\n    if (prop == \"a\") {\n      return 1;\n    } else return x[prop];\n  },\n});\n\nconsole.log(proxy.a);\n```\n\nSimilarly we have set, ``set(target, property, value, receiver)``, this method returns a bool which should be true on a successful updating of the Object, and false otherwise as this is said by an ``Invariant``. \nSimilarly we have other traps like ``apply(target, thisArg, args)`` that wraps functions and is called when the proxy object is called as a function.\n\n* Despite that [[Strict Equality]] differentiates between an [[Object]] and its Proxy.\nAn Object is strictly equal to itself only and that can't be intercepted.\nFor ex.:\n```js\nlet x= {\n a:2,\n};\nlet y = new Set();\ny.add(x);\nconsole.log(y.has(x)); //true\nx = new Proxy(x, {});\nconsole.log(y.has(x)); //false\n```",536870919]],["^15",[606,"^O","^16",536870919]],["^15",[606,"^F",603,536870919]],["^15",[606,"^X",298,536870919]],["^15",[606,"^V",298,536870919]],["^15",[606,"^U",39,536870919]],["^15",[606,"^U",44,536870919]],["^15",[606,"^U",143,536870919]],["^15",[606,"^U",144,536870919]],["^15",[606,"^U",172,536870919]],["^15",[606,"^U",298,536870919]],["^15",[606,"^U",339,536870919]],["^15",[606,"^H",39,536870919]],["^15",[606,"^H",44,536870919]],["^15",[606,"^H",143,536870919]],["^15",[606,"^H",144,536870919]],["^15",[606,"^H",172,536870919]],["^15",[606,"^H",339,536870919]],["^15",[606,"^17",true,536870919]],["^15",[606,"^;","~u649a41b0-9eed-4f07-baa1-2a9474abcc25",536870919]],["^15",[607,"^Q","Not all inbuilt [[Object]] can be Proxied similarly, this is because apart from internal methods and properties, Objects also have  ``internal slot``s. These are special internal properties reserved for internal use, like [[Map]] has ``[MapData]``, these are not trapped by the ``Proxy`` Object so the operations fail on proxy objects. \nFor ex.:\n```js\nlet map = new Map();\n\nlet proxy = new Proxy(map, {});\n\nproxy.set('test', 1); // Error\n```\nA simple trick to fix these errors is\n\n```js\nlet map = new Map();\n\nlet proxy = new Proxy(map, {\n  get(target, prop, receiver) {\n    let value = Reflect.get(...arguments);\n    return typeof value == 'function' ? value.bind(target) : value;\n  }\n});\n\nproxy.set('test', 1); //works\n```\nThis works because get call here binds the ``this`` of Map's internal methods with the Map Object and so when an object of Map tries to access ``[MapData]`` using [[this]] it gets the binded Map object and not Proxy.\n\n[[Array]] uses no ``internal slot``s. [[Class]]es do use them for private properties/[[Function]]s.",536870919]],["^15",[607,"^O","^16",536870919]],["^15",[607,"^F",611,536870919]],["^15",[607,"^X",298,536870919]],["^15",[607,"^V",298,536870919]],["^15",[607,"^U",39,536870919]],["^15",[607,"^U",44,536870919]],["^15",[607,"^U",47,536870919]],["^15",[607,"^U",75,536870919]],["^15",[607,"^U",144,536870919]],["^15",[607,"^U",282,536870919]],["^15",[607,"^U",298,536870919]],["^15",[607,"^H",39,536870919]],["^15",[607,"^H",44,536870919]],["^15",[607,"^H",47,536870919]],["^15",[607,"^H",75,536870919]],["^15",[607,"^H",144,536870919]],["^15",[607,"^H",282,536870919]],["^15",[607,"^17",true,536870919]],["^15",[607,"^;","~u649a41b0-8ba6-4534-8b0d-93a70ab7953a",536870919]],["^15",[608,"^Q","A PO is a special [[Object]] in JS that wraps over another Object and whatever operation is performed on it, it is passed over to the wrapped Object called its ``target``.",536870919]],["^15",[608,"^O","^16",536870919]],["^15",[608,"^F",610,536870919]],["^15",[608,"^X",298,536870919]],["^15",[608,"^V",298,536870919]],["^15",[608,"^U",39,536870919]],["^15",[608,"^U",298,536870919]],["^15",[608,"^H",39,536870919]],["^15",[608,"^17",true,536870919]],["^15",[608,"^;","~u649a41b0-36cd-47e0-b480-d925c09bce9c",536870919]],["^15",[609,"^Q","",536870919]],["^15",[609,"^O","^16",536870919]],["^15",[609,"^F",604,536870919]],["^15",[609,"^X",298,536870919]],["^15",[609,"^V",298,536870919]],["^15",[609,"^U",298,536870919]],["^15",[609,"^17",true,536870919]],["^15",[609,"^;","~u649a41b0-c7f4-4478-85da-7cfc46c79775",536870919]],["^15",[610,"^Q","alias:: Proxy Object\n\n",536870919]],["^15",[610,"^O","^16",536870919]],["^15",[610,"^1>",["^1;",[]],536870919]],["^15",[610,"^F",298,536870919]],["^15",[610,"^X",298,536870919]],["^15",[610,"^V",298,536870919]],["^15",[610,"^U",298,536870919]],["^15",[610,"^U",602,536870919]],["^15",[610,"^:",true,536870919]],["^15",[610,"^?",["^ ","^1:",["^1;",["Proxy Object"]]],536870919]],["^15",[610,"^J",["^1:"],536870919]],["^15",[610,"^4",["^ ","^1:","Proxy Object"],536870919]],["^15",[610,"^H",602,536870919]],["^15",[610,"^17",true,536870919]],["^15",[610,"^;","~u649a41b0-96cc-4130-a79d-0864f03dbde0",536870919]],["^15",[611,"^Q","~``Reflect``\nThis special [[Object]] wraps over all internal methods that the ``Proxy`` Object does, with the same name as the trap method and same args.\n![image.png](../assets/image_1687202127438_0.png)\nIt provides a way to directly access the object's internal methods without a Proxy.\nFor ex.:\n```js\nlet x ={};\nReflect.set(x,'a',2);\nconsole.log(x[a]); //prints 2\n```",536870919]],["^15",[611,"^O","^16",536870919]],["^15",[611,"^F",606,536870919]],["^15",[611,"^X",298,536870919]],["^15",[611,"^V",298,536870919]],["^15",[611,"^U",39,536870919]],["^15",[611,"^U",298,536870919]],["^15",[611,"^H",39,536870919]],["^15",[611,"^17",true,536870919]],["^15",[611,"^;","~u649a41b0-13b3-4dd2-aee1-84c61e68ec21",536870919]],["^15",[612,"^3","- In JS, we have special functions to schedule given functions or expressions after a set time period.\n- We do so using [timers](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers) in JS. Some of them are:\n  ``setTimeout``: Runs the given expression or [[Function]] after given milliseconds of delay, also passing it given args if it accepts.\n  ```js\n  let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)\n  ```\n  (Note when passing a function x, pass it's value with x not execute it right away with x())\n  \n  ``setInterval``: Runs the given expr./function after given delay, then repeats the same.\n  ```js\n  let timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)\n  ```\n  \n  ``clearTimeout(<id>)``: If we pass a setTimeout's/setInterval's returned id to it, it clears the timeout.\n  \n  We can  nest setTimeout to create a loop much like setInterval. The difference between the 2 execution methodologies is that in setInterval, the timer is already running by the time function execution starts so the function's execution eats into the waiting time and so the actual time difference between calls is always less than the given delay. However, in setTimeout if we set the timer again at the end, it will only start the timer when the execution ends giving closer to given delay between each call.\n  For ex.:\n  ![image.png](../assets/image_1686239861758_0.png)\n  setTimeout with 100ms delay\n  vs.\n  ![image.png](../assets/image_1686239876001_0.png)\n  setInterval with 100ms delay\n  \n  No matter how much delay we choose, even 0, it will run set...'s code after the synchronous code has finished executing in the [[Message Queue]]. \n  For ex.:\n  ```js\n  setTimeout(() => console.log(\"World\"));\n  \n  console.log(\"Hello\"); //prints \"Hello World\"\n  ```\n  That is also to say, 0-delay is also not quite 0 in web browsers, because according to [[HTML]] spec, after 5 nested 0-delay set... calls, the minimum delay between the next call will be at-least 4ms.\n  \n  The functions passed to these functions lose their ``this``, as we see in Caching in [[Function]]s. However, in browsers, ``set...`` sets their passed function's ``this`` to  the [[window]] [[Object]], for Node.js, ``this`` is set to the timer [[Object]].\n-\n-",536874760]],["^15",[612,"^18",1687830960047,536870919]],["^15",[612,"^19","~m1687887853979",536874759]],["^15",[612,"^Z","pages/Scheduling.md",536870919]],["^15",[613,"^Q","In JS, we have special functions to schedule given functions or expressions after a set time period.",536870919]],["^15",[613,"^O","^16",536870919]],["^15",[613,"^F",288,536870919]],["^15",[613,"^X",288,536870919]],["^15",[613,"^V",288,536870919]],["^15",[613,"^U",288,536870919]],["^15",[613,"^17",true,536870919]],["^15",[613,"^;","~u649a41b0-a5e1-4144-b7cc-b259cf3a7e77",536870919]],["^15",[614,"^Q","We do so using [timers](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers) in JS. Some of them are:\n``setTimeout``: Runs the given expression or [[Function]] after given milliseconds of delay, also passing it given args if it accepts.\n```js\nlet timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)\n```\n(Note when passing a function x, pass it's value with x not execute it right away with x())\n\n``setInterval``: Runs the given expr./function after given delay, then repeats the same.\n```js\nlet timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)\n```\n\n``clearTimeout(<id>)``: If we pass a setTimeout's/setInterval's returned id to it, it clears the timeout.\n\nWe can  nest setTimeout to create a loop much like setInterval. The difference between the 2 execution methodologies is that in setInterval, the timer is already running by the time function execution starts so the function's execution eats into the waiting time and so the actual time difference between calls is always less than the given delay. However, in setTimeout if we set the timer again at the end, it will only start the timer when the execution ends giving closer to given delay between each call.\nFor ex.:\n![image.png](../assets/image_1686239861758_0.png)\nsetTimeout with 100ms delay\nvs.\n![image.png](../assets/image_1686239876001_0.png)\nsetInterval with 100ms delay\n\nNo matter how much delay we choose, even 0, it will run set...'s code after the synchronous code has finished executing in the [[Message Queue]]. \nFor ex.:\n```js\nsetTimeout(() => console.log(\"World\"));\n\nconsole.log(\"Hello\"); //prints \"Hello World\"\n```\nThat is also to say, 0-delay is also not quite 0 in web browsers, because according to [[HTML]] spec, after 5 nested 0-delay set... calls, the minimum delay between the next call will be at-least 4ms.\n\nThe functions passed to these functions lose their ``this``, as we see in Caching in [[Function]]s. However, in browsers, ``set...`` sets their passed function's ``this`` to  the [[window]] [[Object]], for Node.js, ``this`` is set to the timer [[Object]].",536874758]],["^15",[614,"^O","^16",536870919]],["^15",[614,"^F",613,536870919]],["^15",[614,"^X",288,536870919]],["^15",[614,"^V",288,536870919]],["^15",[614,"^U",30,536874752]],["^15",[614,"^U",39,536874752]],["^15",[614,"^U",44,536874752]],["^15",[614,"^U",80,536874752]],["^15",[614,"^U",209,536874752]],["^15",[614,"^U",288,536874752]],["^15",[614,"^?",["^ "],536874758]],["^15",[614,"^H",30,536874758]],["^15",[614,"^H",39,536874758]],["^15",[614,"^H",44,536874758]],["^15",[614,"^H",80,536874758]],["^15",[614,"^H",209,536874758]],["^15",[614,"^17",true,536870919]],["^15",[614,"^;","~u649a41b0-0a4a-4f64-81f7-bdbfc9be236e",536870919]],["^15",[615,"^Q","",536870919]],["^15",[615,"^O","^16",536870919]],["^15",[615,"^F",614,536870919]],["^15",[615,"^X",288,536870919]],["^15",[615,"^V",288,536870919]],["^15",[615,"^U",288,536870919]],["^15",[615,"^17",true,536870919]],["^15",[615,"^;","~u649a41b0-7142-4c17-8ae6-0515e6c85f94",536870919]],["^15",[616,"^Q","",536870919]],["^15",[616,"^O","^16",536870919]],["^15",[616,"^F",615,536870919]],["^15",[616,"^X",288,536870919]],["^15",[616,"^V",288,536870919]],["^15",[616,"^U",288,536870919]],["^15",[616,"^17",true,536870919]],["^15",[616,"^;","~u649a41b0-47d7-4335-bd99-f5b240f6ee08",536870919]],["^15",[617,"^3","- A code block, i.e. anything between ``{...}`` where the ``{...}`` is used to hold multiple statements and lines, has its own scope and can access variables of the parent scope. A scope is a boundary within which identifiers are valid, the lifetime of any variable/function/etc. is limited to the scope/boundary they are in (and ones below them).\n  \n  For ex.:\n  ```js\n  {\n   let x =2;\n  }\n  //x is not accessible anymore.\n  \n  {\n   let x =2;\n   {\n    console.log(x); //works because x is in a parent scope.\n   }\n  }\n  ```\n- However, identifiers in scopes are passed around, this is because of [[Lexical Environment]].\n-",536870919]],["^15",[617,"^18",1687830960056,536870919]],["^15",[617,"^Z","pages/Scope.md",536870919]],["^15",[618,"^Q","A code block, i.e. anything between ``{...}`` where the ``{...}`` is used to hold multiple statements and lines, has its own scope and can access variables of the parent scope. A scope is a boundary within which identifiers are valid, the lifetime of any variable/function/etc. is limited to the scope/boundary they are in (and ones below them).\n\nFor ex.:\n```js\n{\n let x =2;\n}\n//x is not accessible anymore.\n\n{\n let x =2;\n {\n  console.log(x); //works because x is in a parent scope.\n }\n}\n```",536870919]],["^15",[618,"^O","^16",536870919]],["^15",[618,"^F",82,536870919]],["^15",[618,"^X",82,536870919]],["^15",[618,"^V",82,536870919]],["^15",[618,"^U",82,536870919]],["^15",[618,"^17",true,536870919]],["^15",[618,"^;","~u649a41b0-7acc-4383-b3d0-3d25a8ad428b",536870919]],["^15",[619,"^Q","However, identifiers in scopes are passed around, this is because of [[Lexical Environment]].",536870919]],["^15",[619,"^O","^16",536870919]],["^15",[619,"^F",618,536870919]],["^15",[619,"^X",82,536870919]],["^15",[619,"^V",82,536870919]],["^15",[619,"^U",82,536870919]],["^15",[619,"^U",355,536870919]],["^15",[619,"^H",355,536870919]],["^15",[619,"^17",true,536870919]],["^15",[619,"^;","~u649a41b0-57f5-4cf5-a3e2-f5ba255c8752",536870919]],["^15",[620,"^Q","",536870919]],["^15",[620,"^O","^16",536870919]],["^15",[620,"^F",619,536870919]],["^15",[620,"^X",82,536870919]],["^15",[620,"^V",82,536870919]],["^15",[620,"^U",82,536870919]],["^15",[620,"^17",true,536870919]],["^15",[620,"^;","~u649a41b0-a1ca-4ffb-9dd9-0d16e7e17339",536870919]],["^15",[621,"^3","- In JS, a Set is less like an [[Array]] and more like a [[Map]] as it is still an [[Object]] and hence we need to use its methods to CRUD values in it.\n- Main methods\n  * [`new Set([iterable])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set) – creates the set, and if an `iterable` object is provided (usually an array), copies values from it into the set.\n  * [`set.add(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add) – adds a value, returns the set itself.\n  * [`set.delete(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete) – removes the value, returns `true` if `value` existed at the moment of the call, otherwise `false`.\n  * [`set.has(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) – returns `true` if the value exists in the set, otherwise `false`.\n  * [`set.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear) – removes everything from the set.\n  * [`set.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size) – is the elements count.\n  * [`set.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys) – returns an iterable object for values,\n  * [`set.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) – same as `set.keys()`, for compatibility with `Map`,\n  * [`set.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries) – returns an iterable object for entries `[value, value]`, exists for compatibility with `Map`.\n- Just like a map, a set can take value of any type.",536870919]],["^15",[621,"^18",1687830960069,536870919]],["^15",[621,"^Z","pages/Set.md",536870919]],["^15",[622,"^Q","In JS, a Set is less like an [[Array]] and more like a [[Map]] as it is still an [[Object]] and hence we need to use its methods to CRUD values in it.",536870919]],["^15",[622,"^O","^16",536870919]],["^15",[622,"^F",292,536870919]],["^15",[622,"^X",292,536870919]],["^15",[622,"^V",292,536870919]],["^15",[622,"^U",39,536870919]],["^15",[622,"^U",47,536870919]],["^15",[622,"^U",282,536870919]],["^15",[622,"^U",292,536870919]],["^15",[622,"^H",39,536870919]],["^15",[622,"^H",47,536870919]],["^15",[622,"^H",282,536870919]],["^15",[622,"^17",true,536870919]],["^15",[622,"^;","~u649a41b0-a166-4447-8ed4-7e07cb702c8f",536870919]],["^15",[623,"^Q","Main methods\n* [`new Set([iterable])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set) – creates the set, and if an `iterable` object is provided (usually an array), copies values from it into the set.\n* [`set.add(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add) – adds a value, returns the set itself.\n* [`set.delete(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete) – removes the value, returns `true` if `value` existed at the moment of the call, otherwise `false`.\n* [`set.has(value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) – returns `true` if the value exists in the set, otherwise `false`.\n* [`set.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear) – removes everything from the set.\n* [`set.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size) – is the elements count.\n* [`set.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys) – returns an iterable object for values,\n* [`set.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) – same as `set.keys()`, for compatibility with `Map`,\n* [`set.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries) – returns an iterable object for entries `[value, value]`, exists for compatibility with `Map`.",536870919]],["^15",[623,"^O","^16",536870919]],["^15",[623,"^F",622,536870919]],["^15",[623,"^X",292,536870919]],["^15",[623,"^V",292,536870919]],["^15",[623,"^U",292,536870919]],["^15",[623,"^17",true,536870919]],["^15",[623,"^;","~u649a41b0-e006-4566-b954-079393cc7d05",536870919]],["^15",[624,"^Q","Just like a map, a set can take value of any type.",536870919]],["^15",[624,"^O","^16",536870919]],["^15",[624,"^F",623,536870919]],["^15",[624,"^X",292,536870919]],["^15",[624,"^V",292,536870919]],["^15",[624,"^U",292,536870919]],["^15",[624,"^17",true,536870919]],["^15",[624,"^;","~u649a41b0-c82f-491a-9683-590e2e091139",536870919]],["^15",[625,"^3","alias:: Variable Shadowing\n\n- If an inner [[Scope]] declares a variable with the same name as the outer scope, then the inner scope variable will be accessed in this scope and scopes below it.\n  For ex.:\n  ```js\n  let x=2;\n  function xyz(){\n      let x =3; \n     console.log(x); //prints 3\n  }\n  ```\n-",536870919]],["^15",[625,"^18",1687830960082,536870919]],["^15",[625,"^Z","pages/Shadowed.md",536870919]],["^15",[626,"^5",147,536870919]],["^15",[626,"^K",1687830960082,536870919]],["^15",[626,"^@",false,536870919]],["^15",[626,"^Y","variable shadowing",536870919]],["^15",[626,"^11","Variable Shadowing",536870919]],["^15",[626,"^B",1687830960082,536870919]],["^15",[626,"^;","~u649a41b0-ca39-4cd0-b069-1b358271aa11",536870919]],["^15",[627,"^Q","alias:: Variable Shadowing\n\n",536870919]],["^15",[627,"^O","^16",536870919]],["^15",[627,"^1>",["^1;",[]],536870919]],["^15",[627,"^F",147,536870919]],["^15",[627,"^X",147,536870919]],["^15",[627,"^V",147,536870919]],["^15",[627,"^U",147,536870919]],["^15",[627,"^U",626,536870919]],["^15",[627,"^:",true,536870919]],["^15",[627,"^?",["^ ","^1:",["^1;",["Variable Shadowing"]]],536870919]],["^15",[627,"^J",["^1:"],536870919]],["^15",[627,"^4",["^ ","^1:","Variable Shadowing"],536870919]],["^15",[627,"^H",626,536870919]],["^15",[627,"^17",true,536870919]],["^15",[627,"^;","~u649a41b0-44a3-4276-81d7-e5082d47f5ef",536870919]],["^15",[628,"^Q","If an inner [[Scope]] declares a variable with the same name as the outer scope, then the inner scope variable will be accessed in this scope and scopes below it.\nFor ex.:\n```js\nlet x=2;\nfunction xyz(){\n    let x =3; \n   console.log(x); //prints 3\n}\n```",536870919]],["^15",[628,"^O","^16",536870919]],["^15",[628,"^F",627,536870919]],["^15",[628,"^X",147,536870919]],["^15",[628,"^V",147,536870919]],["^15",[628,"^U",82,536870919]],["^15",[628,"^U",147,536870919]],["^15",[628,"^H",82,536870919]],["^15",[628,"^17",true,536870919]],["^15",[628,"^;","~u649a41b0-4240-4b79-acb5-630213c3e2dd",536870919]],["^15",[629,"^Q","",536870919]],["^15",[629,"^O","^16",536870919]],["^15",[629,"^F",628,536870919]],["^15",[629,"^X",147,536870919]],["^15",[629,"^V",147,536870919]],["^15",[629,"^U",147,536870919]],["^15",[629,"^17",true,536870919]],["^15",[629,"^;","~u649a41b0-c2fc-4351-97f8-b9055fed1f75",536870919]],["^15",[630,"^3","- Here, comparison checks the type and the value. If either of them is not same, the value returned by this comparison operator is false.\n  For ex.:\n  ```js\n  let x= 0==false; //true\n  let y= 0===false; //false\n  \n  ```\n-",536870919]],["^15",[630,"^18",1687830960088,536870919]],["^15",[630,"^Z","pages/Strict Equality.md",536870919]],["^15",[631,"^Q","Here, comparison checks the type and the value. If either of them is not same, the value returned by this comparison operator is false.\nFor ex.:\n```js\nlet x= 0==false; //true\nlet y= 0===false; //false\n\n```",536870919]],["^15",[631,"^O","^16",536870919]],["^15",[631,"^F",172,536870919]],["^15",[631,"^X",172,536870919]],["^15",[631,"^V",172,536870919]],["^15",[631,"^U",172,536870919]],["^15",[631,"^17",true,536870919]],["^15",[631,"^;","~u649a41b0-79c9-4f1b-9351-0bfbeb779b93",536870919]],["^15",[632,"^Q","",536870919]],["^15",[632,"^O","^16",536870919]],["^15",[632,"^F",631,536870919]],["^15",[632,"^X",172,536870919]],["^15",[632,"^V",172,536870919]],["^15",[632,"^U",172,536870919]],["^15",[632,"^17",true,536870919]],["^15",[632,"^;","~u649a41b0-902d-47bf-aacb-2780b4c4c7f6",536870919]],["^15",[633,"^3","- [[Object]] wrapper for primitive type ``string``.\n- Strings are stored with UTF-16 encoding in JS.\n- There are 3 ways of declaring strings\n  For ex.:\n  ```js\n  //3 ways of declaring strings\n  let x= \"Yo\"\n  x= 'Yo'\n  let y=2\n  x= `Yo ${y}`\n  ```\n  The former 2 are the same, but backticks provide extended functionality, i.e., allowing us to embed other variables and expressions into them with ``${...}``\n- There is no char type in JS.\n- String concatenation:\n  We can concat 2 strings with <string val/var> + <string val/var>\n  \n  Any other type of value also gets converted to string.\n  For ex.:\n  ```js\n  let a= \"1\"+2+3; //is \"123\"\n  let b= 1+2+\"3\"; //is \"33\"\n  ```\n  This also shows that [[Operator]]s are solved from left to right if they have the same precedence, so if an operand on the left converts the result to string, the ones to the right follow string concatenation.\n- [Tagged Templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates): \n  We can call a function before a string is processed, the syntax is ``<func> <string enclosed in backticks>``. The function receives the string, processes it and returns the string.\n- Special Characters are supported in JS:\n  ![image.png](../assets/image_1685814128037_0.png){:height 265, :width 778}\n  \n  ``\\`` is the escape character in JS. \n  \n  Yes each special character is just a single character.\n- ``.length`` to get a string's length.\n- ``[<num>]`` or ``.at(<num>)`` to access individual character of a string. ``.at()`` can also go from the right end if we use a negative number.\n- Strings are immutable in JS, we can access individual chars but not mutate them.\n- Methods like ``<str>.toLowerCase()``, ``<str>.toUpperCase()``, ``<str>.slice(start, optional end)``, ``<str>.substring(start, optional end)``, ``<str>.substr(start,length)``, ``<str>.indexOf(<value>)`` etc exist.  \n  Slice and Substring are the same except substring swaps start and end if start>end.\n  \n  To convert a char to int, \n  ``<str>.codePointAt(<position>)``\n  To convert an int to char\n  ``String.fromCodePoint(<value>)``\n- ``.split(<str sep>)``: Returns an [[Array]] from a string.\n- Each string character is represented by 1-4 bytes in JS as strings are represented by Unicode in JS.\n  We can also use unicode directly\n  * ``\\xXX`` here \\x says this is a unicode char, and XX are 2 hex digits so the range is 00 to FF.\n  For ex.:\n  ```js\n  console.log(\"\\x7A\"); //prints z\n  ```\n  * ``\\uXXXX``\n  * ``\\u{X->XXXXXX}``, that is 1 to 6 hex chars.\n- Initially, JS only supported 2 bytes per char and this lead to ``surrogate pairs`` which are special representations of characters that took more than 2 bytes to be stored, as a result we got\n  ```js\n  console.log('𝒳'.length); //2\n  console.log('😂'.length); //2\n  console.log('𩷶'.length); //2\n  ```\n  Surrogate Pairs are useless without the whole, so visiting a byte of a surrogate pair returns weird symbols.\n- String to Int and Int to String\n  * [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) : Understands surrogate pairs\n  and\n  ``String.fromCharCode`` which doesn't\n  \n  * [str.codePointAt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt): Understands surrogate pairs\n  and\n  ``String.charCodeAt``which doesn't",536885140]],["^15",[633,"^18",1687830960113,536870919]],["^15",[633,"^19","~m1711974983423",536885141]],["^15",[633,"^Z","pages/String.md",536870919]],["^15",[634,"^Q","Initially, JS only supported 2 bytes per char and this lead to ``surrogate pairs`` which are special representations of characters that took more than 2 bytes to be stored, as a result we got\n```js\nconsole.log('𝒳'.length); //2\nconsole.log('😂'.length); //2\nconsole.log('𩷶'.length); //2\n```\nSurrogate Pairs are useless without the whole, so visiting a byte of a surrogate pair returns weird symbols.",536885140]],["^15",[634,"^O","^16",536870919]],["^15",[634,"^F",640,536870919]],["^15",[634,"^X",41,536870919]],["^15",[634,"^V",41,536870919]],["^15",[634,"^U",41,536870919]],["^15",[634,"^17",true,536870919]],["^15",[634,"^;","~u649a41b0-f19b-49a7-bb6a-cb85d56dddd1",536870919]],["^15",[635,"^Q","Strings are immutable in JS, we can access individual chars but not mutate them.",536870919]],["^15",[635,"^O","^16",536870919]],["^15",[635,"^F",644,536870919]],["^15",[635,"^X",41,536870919]],["^15",[635,"^V",41,536870919]],["^15",[635,"^U",41,536870919]],["^15",[635,"^17",true,536870919]],["^15",[635,"^;","~u649a41b0-92f4-460c-823b-0c2893d26640",536870919]],["^15",[636,"^Q","Methods like ``<str>.toLowerCase()``, ``<str>.toUpperCase()``, ``<str>.slice(start, optional end)``, ``<str>.substring(start, optional end)``, ``<str>.substr(start,length)``, ``<str>.indexOf(<value>)`` etc exist.  \nSlice and Substring are the same except substring swaps start and end if start>end.\n\nTo convert a char to int, \n``<str>.codePointAt(<position>)``\nTo convert an int to char\n``String.fromCodePoint(<value>)``",536870919]],["^15",[636,"^O","^16",536870919]],["^15",[636,"^F",635,536870919]],["^15",[636,"^X",41,536870919]],["^15",[636,"^V",41,536870919]],["^15",[636,"^U",41,536870919]],["^15",[636,"^17",true,536870919]],["^15",[636,"^;","~u649a41b0-8f29-450d-b00c-a92e7b552d88",536870919]],["^15",[637,"^Q","String to Int and Int to String\n* [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) : Understands surrogate pairs\nand\n``String.fromCharCode`` which doesn't\n\n* [str.codePointAt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt): Understands surrogate pairs\nand\n``String.charCodeAt``which doesn't",536870919]],["^15",[637,"^O","^16",536870919]],["^15",[637,"^F",634,536870919]],["^15",[637,"^X",41,536870919]],["^15",[637,"^V",41,536870919]],["^15",[637,"^U",41,536870919]],["^15",[637,"^17",true,536870919]],["^15",[637,"^;","~u649a41b0-dd09-449d-a575-c08f01222731",536870919]],["^15",[638,"^Q","Strings are stored with UTF-16 encoding in JS.",536870919]],["^15",[638,"^O","^16",536870919]],["^15",[638,"^F",645,536870919]],["^15",[638,"^X",41,536870919]],["^15",[638,"^V",41,536870919]],["^15",[638,"^U",41,536870919]],["^15",[638,"^17",true,536870919]],["^15",[638,"^;","~u649a41b0-738e-49e8-8aab-becc7cee88e3",536870919]],["^15",[639,"^Q","There are 3 ways of declaring strings\nFor ex.:\n```js\n//3 ways of declaring strings\nlet x= \"Yo\"\nx= 'Yo'\nlet y=2\nx= `Yo ${y}`\n```\nThe former 2 are the same, but backticks provide extended functionality, i.e., allowing us to embed other variables and expressions into them with ``${...}``",536870919]],["^15",[639,"^O","^16",536870919]],["^15",[639,"^F",638,536870919]],["^15",[639,"^X",41,536870919]],["^15",[639,"^V",41,536870919]],["^15",[639,"^U",41,536870919]],["^15",[639,"^17",true,536870919]],["^15",[639,"^;","~u649a41b0-e7b9-4678-80ba-d9e9931deefe",536870919]],["^15",[640,"^Q","Each string character is represented by 1-4 bytes in JS as strings are represented by Unicode in JS.\nWe can also use unicode directly\n* ``\\xXX`` here \\x says this is a unicode char, and XX are 2 hex digits so the range is 00 to FF.\nFor ex.:\n```js\nconsole.log(\"\\x7A\"); //prints z\n```\n* ``\\uXXXX``\n* ``\\u{X->XXXXXX}``, that is 1 to 6 hex chars.",536870919]],["^15",[640,"^O","^16",536870919]],["^15",[640,"^F",647,536870919]],["^15",[640,"^X",41,536870919]],["^15",[640,"^V",41,536870919]],["^15",[640,"^U",41,536870919]],["^15",[640,"^17",true,536870919]],["^15",[640,"^;","~u649a41b0-f0f5-4053-acf0-995d60b32bcf",536870919]],["^15",[641,"^Q","Special Characters are supported in JS:\n![image.png](../assets/image_1685814128037_0.png){:height 265, :width 778}\n\n``\\`` is the escape character in JS. \n\nYes each special character is just a single character.",536870919]],["^15",[641,"^O","^16",536870919]],["^15",[641,"^F",646,536870919]],["^15",[641,"^X",41,536870919]],["^15",[641,"^V",41,536870919]],["^15",[641,"^U",41,536870919]],["^15",[641,"^17",true,536870919]],["^15",[641,"^;","~u649a41b0-a254-4d8a-9777-a61037363765",536870919]],["^15",[642,"^Q","String concatenation:\nWe can concat 2 strings with <string val/var> + <string val/var>\n\nAny other type of value also gets converted to string.\nFor ex.:\n```js\nlet a= \"1\"+2+3; //is \"123\"\nlet b= 1+2+\"3\"; //is \"33\"\n```\nThis also shows that [[Operator]]s are solved from left to right if they have the same precedence, so if an operand on the left converts the result to string, the ones to the right follow string concatenation.",536870919]],["^15",[642,"^O","^16",536870919]],["^15",[642,"^F",648,536870919]],["^15",[642,"^X",41,536870919]],["^15",[642,"^V",41,536870919]],["^15",[642,"^U",41,536870919]],["^15",[642,"^U",76,536870919]],["^15",[642,"^H",76,536885140]],["^15",[642,"^17",true,536870919]],["^15",[642,"^;","~u649a41b0-4be3-4c9b-a07d-b3f4c2ad9d06",536870919]],["^15",[643,"^Q","~``.length`` to get a string's length.",536870919]],["^15",[643,"^O","^16",536870919]],["^15",[643,"^F",641,536870919]],["^15",[643,"^X",41,536870919]],["^15",[643,"^V",41,536870919]],["^15",[643,"^U",41,536870919]],["^15",[643,"^17",true,536870919]],["^15",[643,"^;","~u649a41b0-97a3-4785-9f25-ba8d62b88a24",536870919]],["^15",[644,"^Q","~``[<num>]`` or ``.at(<num>)`` to access individual character of a string. ``.at()`` can also go from the right end if we use a negative number.",536870919]],["^15",[644,"^O","^16",536870919]],["^15",[644,"^F",643,536870919]],["^15",[644,"^X",41,536870919]],["^15",[644,"^V",41,536870919]],["^15",[644,"^U",41,536870919]],["^15",[644,"^17",true,536870919]],["^15",[644,"^;","~u649a41b0-9f80-4abf-82c3-14c4f615e2a3",536870919]],["^15",[645,"^Q","[[Object]] wrapper for primitive type ``string``.",536870919]],["^15",[645,"^O","^16",536870919]],["^15",[645,"^F",41,536870919]],["^15",[645,"^X",41,536870919]],["^15",[645,"^V",41,536870919]],["^15",[645,"^U",39,536870919]],["^15",[645,"^U",41,536870919]],["^15",[645,"^H",39,536885140]],["^15",[645,"^17",true,536870919]],["^15",[645,"^;","~u649a41b0-4cfb-436f-a7cf-5a4a026fa03d",536870919]],["^15",[646,"^Q","[Tagged Templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates): \nWe can call a function before a string is processed, the syntax is ``<func> <string enclosed in backticks>``. The function receives the string, processes it and returns the string.",536870919]],["^15",[646,"^O","^16",536870919]],["^15",[646,"^F",642,536870919]],["^15",[646,"^X",41,536870919]],["^15",[646,"^V",41,536870919]],["^15",[646,"^U",41,536870919]],["^15",[646,"^17",true,536870919]],["^15",[646,"^;","~u649a41b0-492d-4088-850d-ef7af288bb01",536870919]],["^15",[647,"^Q","~``.split(<str sep>)``: Returns an [[Array]] from a string.",536870919]],["^15",[647,"^O","^16",536870919]],["^15",[647,"^F",636,536870919]],["^15",[647,"^X",41,536870919]],["^15",[647,"^V",41,536870919]],["^15",[647,"^U",41,536870919]],["^15",[647,"^U",47,536870919]],["^15",[647,"^H",47,536885140]],["^15",[647,"^17",true,536870919]],["^15",[647,"^;","~u649a41b0-78a4-4a1e-a7bc-3f5f77b4e747",536870919]],["^15",[648,"^Q","There is no char type in JS.",536870919]],["^15",[648,"^O","^16",536870919]],["^15",[648,"^F",639,536870919]],["^15",[648,"^X",41,536870919]],["^15",[648,"^V",41,536870919]],["^15",[648,"^U",41,536870919]],["^15",[648,"^17",true,536870919]],["^15",[648,"^;","~u649a41b0-ae23-4ba9-a88a-a4e3d10761e0",536870919]],["^15",[649,"^3","- [[Object]] wrapper for primitive type ``symbol``\n- A ``symbol`` represents a unique identifier in JS.\n  For ex.:\n  ```js\n  let x = Symbol(\"yoo\");\n  ```\n  The \"yoo\" is the symbol's description(aka Symbol name), it is optional but helps in debugging.\n  We can get the description of a Symbol with the ``.description`` property.\n- Symbols are always unique, that is 2 symbols are always inequal, even if they have the same description.\n  ```js\n  let x= Symbol();\n  let y= Symbol();\n  x==y; //false\n  ```\n- Symbols are the only type that don't implicitly get converted to another type.\n  So if we call ``alert(...)`` with a Symbol, it will give an error. We can explicitly convert a Symbol to a string with ``.toString()`` method of the Symbol.\n- Since Symbols are always unique, they are meant to be used as unique property names for [[Object]]s. This way we never overwrite any pre-existing Object property.\n  ```js\n  let x= Symbol(\"id\");\n  let y= {...};\n  y[x]= \"yo\";\n  y[\"id\"]= \"abc\";\n  \n  y[x]; //returns \"yo\"\n  \n  //To use a Symbol inside the Object declaration,\n  let z= {\n    [x]: \"yo\", //we use this special [<Symbol>] syntax.\n  }\n  ```\n- Global Symbol Registry\n  Since Symbols are always unique, sometimes we may need Symbols properties to be accessible even outside the scope of the variable holding the Symbol.\n  To achieve this we can use the Global Symbol Registry which stores Symbols and these symbols are called ``Global Symbols``.\n  \n  To create a symbol in the GSR, if it doesn't already exist \n  ```js\n  let x = Symbol.for(\"yo\");\n  ```\n  Creates a Symbol with the \"yo\" key, if it doesn't already exist in the GS. If it does exist, it simply returns it, otherwise it creates it, stores it in the GSR and returns it to x.\n  \n  If we wish to check if a Symbol with the given key/description exists in the GSR, we can use ``Symbol.keyFor(<symbol>)``. It returns undefined if the Symbol with the same key isn't found in the GSR, otherwise it returns the Symbol's key/description\n  For ex.:\n  ```js\n  \"use strict\";\n  \n  function yo() {\n    let s = Symbol(\"id\");\n    console.log(Symbol.keyFor(s)); //prints undefined\n    let x= Symbol.for(\"id\");\n    console.log(Symbol.keyFor(x)); //prints id\n  }\n  \n  yo();\n  ```\n- There are various other Symbols, that can be used to fine-tune [[Object]]s.\n  They are known as [System Symbols](https://tc39.es/ecma262/#sec-well-known-symbols).\n-",536885143]],["^15",[649,"^18",1687830960135,536870919]],["^15",[649,"^19","~m1712152309092",536885144]],["^15",[649,"^Z","pages/Symbol.md",536870919]],["^15",[650,"^Q","",536870919]],["^15",[650,"^O","^16",536870919]],["^15",[650,"^F",958,536885143]],["^15",[650,"^X",43,536870919]],["^15",[650,"^V",43,536870919]],["^15",[650,"^U",43,536870919]],["^15",[650,"^17",true,536870919]],["^15",[650,"^;","~u649a41b0-af7f-4dc5-8a99-b9220cbc7eed",536870919]],["^15",[651,"^Q","[[Object]] wrapper for primitive type ``symbol``",536870919]],["^15",[651,"^O","^16",536870919]],["^15",[651,"^F",43,536870919]],["^15",[651,"^X",43,536870919]],["^15",[651,"^V",43,536870919]],["^15",[651,"^U",39,536870919]],["^15",[651,"^U",43,536870919]],["^15",[651,"^H",39,536885143]],["^15",[651,"^17",true,536870919]],["^15",[651,"^;","~u649a41b0-1669-4385-a474-c3cac0a65390",536870919]],["^15",[653,"^Q","Symbols are the only type that don't implicitly get converted to another type.\nSo if we call ``alert(...)`` with a Symbol, it will give an error. We can explicitly convert a Symbol to a string with ``.toString()`` method of the Symbol.",536870919]],["^15",[653,"^O","^16",536870919]],["^15",[653,"^F",655,536870919]],["^15",[653,"^X",43,536870919]],["^15",[653,"^V",43,536870919]],["^15",[653,"^U",43,536870919]],["^15",[653,"^17",true,536870919]],["^15",[653,"^;","~u649a41b0-04d6-4800-9be6-fdeec13ae9e9",536870919]],["^15",[655,"^Q","Symbols are always unique, that is 2 symbols are always inequal, even if they have the same description.\n```js\nlet x= Symbol();\nlet y= Symbol();\nx==y; //false\n```",536870919]],["^15",[655,"^O","^16",536870919]],["^15",[655,"^F",658,536870919]],["^15",[655,"^X",43,536870919]],["^15",[655,"^V",43,536870919]],["^15",[655,"^U",43,536870919]],["^15",[655,"^17",true,536870919]],["^15",[655,"^;","~u649a41b0-64f2-46b1-83fc-d3148bbbeaa4",536870919]],["^15",[656,"^Q","Global Symbol Registry\nSince Symbols are always unique, sometimes we may need Symbols properties to be accessible even outside the scope of the variable holding the Symbol.\nTo achieve this we can use the Global Symbol Registry which stores Symbols and these symbols are called ``Global Symbols``.\n\nTo create a symbol in the GSR, if it doesn't already exist \n```js\nlet x = Symbol.for(\"yo\");\n```\nCreates a Symbol with the \"yo\" key, if it doesn't already exist in the GS. If it does exist, it simply returns it, otherwise it creates it, stores it in the GSR and returns it to x.\n\nIf we wish to check if a Symbol with the given key/description exists in the GSR, we can use ``Symbol.keyFor(<symbol>)``. It returns undefined if the Symbol with the same key isn't found in the GSR, otherwise it returns the Symbol's key/description\nFor ex.:\n```js\n\"use strict\";\n\nfunction yo() {\n  let s = Symbol(\"id\");\n  console.log(Symbol.keyFor(s)); //prints undefined\n  let x= Symbol.for(\"id\");\n  console.log(Symbol.keyFor(x)); //prints id\n}\n\nyo();\n```",536885143]],["^15",[656,"^O","^16",536870919]],["^15",[656,"^F",657,536870919]],["^15",[656,"^X",43,536870919]],["^15",[656,"^V",43,536870919]],["^15",[656,"^U",43,536870919]],["^15",[656,"^17",true,536870919]],["^15",[656,"^;","~u649a41b0-cd82-4b34-818d-e994b06aa5b9",536870919]],["^15",[657,"^Q","Since Symbols are always unique, they are meant to be used as unique property names for [[Object]]s. This way we never overwrite any pre-existing Object property.\n```js\nlet x= Symbol(\"id\");\nlet y= {...};\ny[x]= \"yo\";\ny[\"id\"]= \"abc\";\n\ny[x]; //returns \"yo\"\n\n//To use a Symbol inside the Object declaration,\nlet z= {\n  [x]: \"yo\", //we use this special [<Symbol>] syntax.\n}\n```",536870919]],["^15",[657,"^O","^16",536870919]],["^15",[657,"^F",653,536870919]],["^15",[657,"^X",43,536870919]],["^15",[657,"^V",43,536870919]],["^15",[657,"^U",39,536870919]],["^15",[657,"^U",43,536870919]],["^15",[657,"^H",39,536885143]],["^15",[657,"^17",true,536870919]],["^15",[657,"^;","~u649a41b0-0b2d-442b-9f9f-3643810ddcec",536870919]],["^15",[658,"^Q","A ``symbol`` represents a unique identifier in JS.\nFor ex.:\n```js\nlet x = Symbol(\"yoo\");\n```\nThe \"yoo\" is the symbol's description(aka Symbol name), it is optional but helps in debugging.\nWe can get the description of a Symbol with the ``.description`` property.",536870919]],["^15",[658,"^O","^16",536870919]],["^15",[658,"^F",651,536870919]],["^15",[658,"^X",43,536870919]],["^15",[658,"^V",43,536870919]],["^15",[658,"^U",43,536870919]],["^15",[658,"^17",true,536870919]],["^15",[658,"^;","~u649a41b0-79ce-41b4-8f01-e009d7bf2f51",536870919]],["^15",[659,"^3","- It is recommended to do ``Behavior Driven Development`` (BDD) which means we should write Tests, Documentation and Examples for all functions/features.\n- For ex.:\n  ```js\n  describe(\"pow\", function() {\n  \n    it(\"raises to n-th power\", function() {\n      assert.equal(pow(2, 3), 8);\n    });\n  \n  });\n  ```\n  Using ``Mocha`` for ``describe`` and ``it``, ``Chai`` for ``assert.equal`` and ``Sinon`` to inject into functions.",536870919]],["^15",[659,"^18",1687830960146,536870919]],["^15",[659,"^Z","pages/Testing.md",536870919]],["^15",[660,"^Q","It is recommended to do ``Behavior Driven Development`` (BDD) which means we should write Tests, Documentation and Examples for all functions/features.",536870919]],["^15",[660,"^O","^16",536870919]],["^15",[660,"^F",283,536870919]],["^15",[660,"^X",283,536870919]],["^15",[660,"^V",283,536870919]],["^15",[660,"^U",283,536870919]],["^15",[660,"^17",true,536870919]],["^15",[660,"^;","~u649a41b0-98ca-489b-b5c9-317aec6f25c9",536870919]],["^15",[661,"^Q","For ex.:\n```js\ndescribe(\"pow\", function() {\n\n  it(\"raises to n-th power\", function() {\n    assert.equal(pow(2, 3), 8);\n  });\n\n});\n```\nUsing ``Mocha`` for ``describe`` and ``it``, ``Chai`` for ``assert.equal`` and ``Sinon`` to inject into functions.",536870919]],["^15",[661,"^O","^16",536870919]],["^15",[661,"^F",660,536870919]],["^15",[661,"^X",283,536870919]],["^15",[661,"^V",283,536870919]],["^15",[661,"^U",283,536870919]],["^15",[661,"^17",true,536870919]],["^15",[661,"^;","~u649a41b0-2329-4777-9e3e-a94d5f887fc1",536870919]],["^15",[662,"^3","- New features to JS are added regularly, such as the [[Nullish-Coalescing Operator]] added in 2020. To maintain compatibility with older browser versions, a process called Transpilation is used, done through a Transpiler such as [[Babel]] or [[Webpack]] (Implicitly). This tool converts new JS code into code that the target version can understand, so for Null-Coalescing Operator ``??`` it might generate a simple ``x !== undefined && x!== null``.\n-",536870919]],["^15",[662,"^18",1687830960152,536870919]],["^15",[662,"^Z","pages/Transpiler.md",536870919]],["^15",[663,"^Q","New features to JS are added regularly, such as the [[Nullish-Coalescing Operator]] added in 2020. To maintain compatibility with older browser versions, a process called Transpilation is used, done through a Transpiler such as [[Babel]] or [[Webpack]] (Implicitly). This tool converts new JS code into code that the target version can understand, so for Null-Coalescing Operator ``??`` it might generate a simple ``x !== undefined && x!== null``.",536870919]],["^15",[663,"^O","^16",536870919]],["^15",[663,"^F",300,536870919]],["^15",[663,"^X",300,536870919]],["^15",[663,"^V",300,536870919]],["^15",[663,"^U",94,536870919]],["^15",[663,"^U",300,536870919]],["^15",[663,"^U",367,536870919]],["^15",[663,"^U",500,536870919]],["^15",[663,"^H",94,536870919]],["^15",[663,"^H",367,536870919]],["^15",[663,"^H",500,536870919]],["^15",[663,"^17",true,536870919]],["^15",[663,"^;","~u649a41b0-335f-45f7-93d9-f89d1cd65f02",536870919]],["^15",[664,"^Q","",536870919]],["^15",[664,"^O","^16",536870919]],["^15",[664,"^F",663,536870919]],["^15",[664,"^X",300,536870919]],["^15",[664,"^V",300,536870919]],["^15",[664,"^U",300,536870919]],["^15",[664,"^17",true,536870919]],["^15",[664,"^;","~u649a41b0-7de8-42fc-9f15-1bf29fda1b51",536870919]],["^15",[665,"^3","- A weaker variant of the [[Map]].\n- Methods:\n  ``new WeakMap()``\n  * [`weakMap.set(key, value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set)\n  * [`weakMap.get(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get)\n  * [`weakMap.delete(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete)\n  * [`weakMap.has(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has)\n- Only accepts [[Object]]s as keys and doesn't prevent [[Garbage Collection]].\n  That is,\n  ```js\n  let x = new Map();\n  let y = {};\n  x.set(y,2);\n  y=null;\n  \n  //y still exists in Map x\n  ```\n  Now even though we can never explicitly get y again, it's still a reachable reference and is hence not Garbage Collected. This is also because we can iterate over Map keys and then get it again.\n  A weakMap prevents that as it is not [[Iterable]] and once an Object is removed, it is unreachable and is hence removed from the WeakMap as well.\n  That is,\n  ```js\n  let x = new WeakMap();\n  let y = {};\n  x.set(y,2);\n  y=null;\n  \n  //y doesn't exist anymore in WeakMap x\n  \n  ```\n  The GC can occur at any time, it is upto the JS engine and is not automatically triggered when an Object loses reference.\n-",536870919]],["^15",[665,"^18",1687830960170,536870919]],["^15",[665,"^Z","pages/WeakMap.md",536870919]],["^15",[666,"^Q","A weaker variant of the [[Map]].",536870919]],["^15",[666,"^O","^16",536870919]],["^15",[666,"^F",297,536870919]],["^15",[666,"^X",297,536870919]],["^15",[666,"^V",297,536870919]],["^15",[666,"^U",282,536870919]],["^15",[666,"^U",297,536870919]],["^15",[666,"^H",282,536870919]],["^15",[666,"^17",true,536870919]],["^15",[666,"^;","~u649a41b0-1748-49e0-b317-c53502ea30e3",536870919]],["^15",[667,"^Q","Methods:\n``new WeakMap()``\n* [`weakMap.set(key, value)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set)\n* [`weakMap.get(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get)\n* [`weakMap.delete(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete)\n* [`weakMap.has(key)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has)",536870919]],["^15",[667,"^O","^16",536870919]],["^15",[667,"^F",666,536870919]],["^15",[667,"^X",297,536870919]],["^15",[667,"^V",297,536870919]],["^15",[667,"^U",297,536870919]],["^15",[667,"^17",true,536870919]],["^15",[667,"^;","~u649a41b0-75cf-48c1-b60e-29a3085a9ee8",536870919]],["^15",[668,"^Q","Only accepts [[Object]]s as keys and doesn't prevent [[Garbage Collection]].\nThat is,\n```js\nlet x = new Map();\nlet y = {};\nx.set(y,2);\ny=null;\n\n//y still exists in Map x\n```\nNow even though we can never explicitly get y again, it's still a reachable reference and is hence not Garbage Collected. This is also because we can iterate over Map keys and then get it again.\nA weakMap prevents that as it is not [[Iterable]] and once an Object is removed, it is unreachable and is hence removed from the WeakMap as well.\nThat is,\n```js\nlet x = new WeakMap();\nlet y = {};\nx.set(y,2);\ny=null;\n\n//y doesn't exist anymore in WeakMap x\n\n```\nThe GC can occur at any time, it is upto the JS engine and is not automatically triggered when an Object loses reference.",536870919]],["^15",[668,"^O","^16",536870919]],["^15",[668,"^F",667,536870919]],["^15",[668,"^X",297,536870919]],["^15",[668,"^V",297,536870919]],["^15",[668,"^U",39,536870919]],["^15",[668,"^U",46,536870919]],["^15",[668,"^U",293,536870919]],["^15",[668,"^U",297,536870919]],["^15",[668,"^H",39,536870919]],["^15",[668,"^H",46,536870919]],["^15",[668,"^H",293,536870919]],["^15",[668,"^17",true,536870919]],["^15",[668,"^;","~u649a41b0-da4f-4307-ab1e-3e2291e0046e",536870919]],["^15",[669,"^Q","",536870919]],["^15",[669,"^O","^16",536870919]],["^15",[669,"^F",668,536870919]],["^15",[669,"^X",297,536870919]],["^15",[669,"^V",297,536870919]],["^15",[669,"^U",297,536870919]],["^15",[669,"^17",true,536870919]],["^15",[669,"^;","~u649a41b0-ed62-4ef1-8fae-67d944ebc0ee",536870919]],["^15",[670,"^3","- Just like [[Map]] has [[WeakMap]], a [[Set]] has WeakSet.\n- Methods:\n  ``.add(key,value)``\n  ``.has(key)``\n  ``.delete(key)``\n- Everything is the same as in a [[WeakMap]], that a WeakSet is not [[Iterable]] and only accepts Objects as Keys.\n-",536870919]],["^15",[670,"^18",1687830960180,536870919]],["^15",[670,"^Z","pages/WeakSet.md",536870919]],["^15",[671,"^Q","Just like [[Map]] has [[WeakMap]], a [[Set]] has WeakSet.",536870919]],["^15",[671,"^O","^16",536870919]],["^15",[671,"^F",295,536870919]],["^15",[671,"^X",295,536870919]],["^15",[671,"^V",295,536870919]],["^15",[671,"^U",282,536870919]],["^15",[671,"^U",292,536870919]],["^15",[671,"^U",295,536870919]],["^15",[671,"^U",297,536870919]],["^15",[671,"^H",282,536870919]],["^15",[671,"^H",292,536870919]],["^15",[671,"^H",297,536870919]],["^15",[671,"^17",true,536870919]],["^15",[671,"^;","~u649a41b0-8ee9-406d-880b-b298d8ca128f",536870919]],["^15",[672,"^Q","Methods:\n``.add(key,value)``\n``.has(key)``\n``.delete(key)``",536870919]],["^15",[672,"^O","^16",536870919]],["^15",[672,"^F",671,536870919]],["^15",[672,"^X",295,536870919]],["^15",[672,"^V",295,536870919]],["^15",[672,"^U",295,536870919]],["^15",[672,"^17",true,536870919]],["^15",[672,"^;","~u649a41b0-7e4e-48b4-9d74-964be0702bee",536870919]],["^15",[673,"^Q","Everything is the same as in a [[WeakMap]], that a WeakSet is not [[Iterable]] and only accepts Objects as Keys.",536870919]],["^15",[673,"^O","^16",536870919]],["^15",[673,"^F",672,536870919]],["^15",[673,"^X",295,536870919]],["^15",[673,"^V",295,536870919]],["^15",[673,"^U",46,536870919]],["^15",[673,"^U",295,536870919]],["^15",[673,"^U",297,536870919]],["^15",[673,"^H",46,536870919]],["^15",[673,"^H",297,536870919]],["^15",[673,"^17",true,536870919]],["^15",[673,"^;","~u649a41b0-2f30-4471-9802-cf3774e457e0",536870919]],["^15",[674,"^Q","",536870919]],["^15",[674,"^O","^16",536870919]],["^15",[674,"^F",673,536870919]],["^15",[674,"^X",295,536870919]],["^15",[674,"^V",295,536870919]],["^15",[674,"^U",295,536870919]],["^15",[674,"^17",true,536870919]],["^15",[674,"^;","~u649a41b0-68b6-4f85-98c3-6c25ea37491b",536870919]],["^15",[675,"^3","- A [[Module]] in NodeJS.\n-",536870919]],["^15",[675,"^18",1687830960185,536870919]],["^15",[675,"^Z","pages/Web Worker.md",536870919]],["^15",[676,"^Q","A [[Module]] in NodeJS.",536870919]],["^15",[676,"^O","^16",536870919]],["^15",[676,"^F",79,536870919]],["^15",[676,"^X",79,536870919]],["^15",[676,"^V",79,536870919]],["^15",[676,"^U",32,536870919]],["^15",[676,"^U",79,536870919]],["^15",[676,"^H",32,536870919]],["^15",[676,"^17",true,536870919]],["^15",[676,"^;","~u649a41b0-3f20-4586-86ea-449ca2b4f5a5",536870919]],["^15",[677,"^Q","",536870919]],["^15",[677,"^O","^16",536870919]],["^15",[677,"^F",676,536870919]],["^15",[677,"^X",79,536870919]],["^15",[677,"^V",79,536870919]],["^15",[677,"^U",79,536870919]],["^15",[677,"^17",true,536870919]],["^15",[677,"^;","~u649a41b0-3fc9-4981-82d8-69900b091c86",536870919]],["^15",[678,"^3","- [Webpack](https://webpack.js.org/)\n- Bundles assets and content for better serving website to client browsers.\n- They do something like so\n  \n  * Take a “main” module, the one intended to be put in `<script type=\"module\">` in HTML.\n  * Analyze its dependencies: imports and then imports of imports etc.\n  * Build a single file with all modules (or multiple files, that’s tunable), replacing native `import` calls with bundler functions, so that it works. “Special” module types like HTML/CSS modules are also supported.\n  * In the process, other transformations and optimizations may be applied like\n  Unreachable code removed.\n  Unused exports removed (“tree-shaking”).\n  Development-specific statements like `console` and `debugger` removed.\n  Modern, bleeding-edge JavaScript syntax may be transformed to older one with similar functionality using [Babel](https://babeljs.io/).\n  The resulting file is minified (spaces removed, variables replaced with shorter names, etc).\n  \n  So we get something like this\n  ```html\n  <!-- Assuming we got bundle.js from a tool like Webpack -->\n  <script src=\"bundle.js\"></script>\n  ```\n  \n  The generated bundle.js has all the [[Module]]s and [[Optimization]]s and can be directly used without the module type in the [[<script>]].\n-",536870919]],["^15",[678,"^18",1687830960199,536870919]],["^15",[678,"^Z","pages/Webpack.md",536870919]],["^15",[679,"^Q","[Webpack](https://webpack.js.org/)",536870919]],["^15",[679,"^O","^16",536870919]],["^15",[679,"^F",500,536870919]],["^15",[679,"^X",500,536870919]],["^15",[679,"^V",500,536870919]],["^15",[679,"^U",500,536870919]],["^15",[679,"^17",true,536870919]],["^15",[679,"^;","~u649a41b0-4a42-4f9b-8ad1-3bd070cc3143",536870919]],["^15",[680,"^Q","Bundles assets and content for better serving website to client browsers.",536870919]],["^15",[680,"^O","^16",536870919]],["^15",[680,"^F",679,536870919]],["^15",[680,"^X",500,536870919]],["^15",[680,"^V",500,536870919]],["^15",[680,"^U",500,536870919]],["^15",[680,"^17",true,536870919]],["^15",[680,"^;","~u649a41b0-e564-4c76-a795-1579be60a16e",536870919]],["^15",[681,"^Q","They do something like so\n\n* Take a “main” module, the one intended to be put in `<script type=\"module\">` in HTML.\n* Analyze its dependencies: imports and then imports of imports etc.\n* Build a single file with all modules (or multiple files, that’s tunable), replacing native `import` calls with bundler functions, so that it works. “Special” module types like HTML/CSS modules are also supported.\n* In the process, other transformations and optimizations may be applied like\nUnreachable code removed.\nUnused exports removed (“tree-shaking”).\nDevelopment-specific statements like `console` and `debugger` removed.\nModern, bleeding-edge JavaScript syntax may be transformed to older one with similar functionality using [Babel](https://babeljs.io/).\nThe resulting file is minified (spaces removed, variables replaced with shorter names, etc).\n\nSo we get something like this\n```html\n<!-- Assuming we got bundle.js from a tool like Webpack -->\n<script src=\"bundle.js\"></script>\n```\n\nThe generated bundle.js has all the [[Module]]s and [[Optimization]]s and can be directly used without the module type in the [[<script>]].",536870919]],["^15",[681,"^O","^16",536870919]],["^15",[681,"^F",680,536870919]],["^15",[681,"^X",500,536870919]],["^15",[681,"^V",500,536870919]],["^15",[681,"^U",29,536870919]],["^15",[681,"^U",32,536870919]],["^15",[681,"^U",84,536870919]],["^15",[681,"^U",500,536870919]],["^15",[681,"^H",29,536870919]],["^15",[681,"^H",32,536870919]],["^15",[681,"^H",84,536870919]],["^15",[681,"^17",true,536870919]],["^15",[681,"^;","~u649a41b0-77e6-4443-b127-f1af2b3e1f6c",536870919]],["^15",[682,"^Q","",536870919]],["^15",[682,"^O","^16",536870919]],["^15",[682,"^F",681,536870919]],["^15",[682,"^X",500,536870919]],["^15",[682,"^V",500,536870919]],["^15",[682,"^U",500,536870919]],["^15",[682,"^17",true,536870919]],["^15",[682,"^;","~u649a41b0-93d2-4ab9-8c7d-7e23209290b3",536870919]],["^15",[683,"^3","alias:: Prototype Object\n\n- In JS, much like ``classes`` in [[C++]], an [[Object]] can inherit another Object. This is done using an inbuilt Object property known as ``[[Prototype]]`` of an Object by the spec. In Implementation, this property can be accessed using the getter/setter ``__proto__``. This is not the same as directly accessing the ``[[Prototype]]`` property. This getter/setter is historical, modern JS recommends using ``Object.getPrototypeOf(<obj>)`` and ``Object.setPrototypeOf(<obj>, <prototype object>)`` instead. We can also use ``Object.create(<prototype object>, <descriptor object>)`` to create an Object with a prototype set.\n  \n  This property can have either the value of [[null]] or another Object.  \n  ![image.png](../assets/image_1686622520624_0.png)\n  \n  If set, it acts like inheritance. So if we access a property and it is not present in the ``child`` Object, it is looked for in the ``parent`` Object. And if it is in both then the child Object's property has the parent's property [[Shadowed]].\n  \n  For ex.:\n  ```js\n  let x= {\n    run: true,\n    cow: \"noo\"\n  };\n  \n  let y= {\n    cow: \"nyaa\"\n  };\n  y.__proto__ = x;\n  console.log(y.run); //prints true\n  console.log(y.cow); //prints nyaa\n  console.log(y.__proto__ == x); //true\n  ```\n  \n  We can directly use ``__proto__`` in an Object too.\n  ```js\n  let x ={};\n  let y = {\n   __proto__: x, //works\n  };\n  ```\n  but all these ways of getting/setting/initializing the `` [[Prototype]]`` have their modern equivalents\n  ```js\n  let y ={}\n  let x = Object.create(y, {\n   yo: {value: 2}\n  });\n  console.log(Object.getPrototypeOf(x) == y); //true\n  let z ={};\n  Object.setPrototypeOf(x,z);\n  console.log(Object.getPrototypeOf(x) == z); //true\n  ```\n  \n  However, it is unrecommended to get/set ``[[Prototype]]`` often, it is acceptable for one time but not anymore as each operation is slow. The JS engine has many optimizations on Objects and they break if we modify``[[Prototype]]`` hence leading to performance loss.\n- There can only ever be a single ``[[Prototype]]`` of an Object, so this is akin to ``Single Inheritance`` in other languages, we can have chain/hierarchy, and modify the parent Object at any time, but there can only be 1 parent to any Object.\n- The whole ``prototypal chain`` is traversed to look for a property, that means even if we have longer inheritance chains, it will work similarly. \n  The only limitations are, if there's a cycle in this chain then that causes an error and that the value of ``[[Prototype]]`` must always be either null or another Object.\n  \n  For ex.:\n  ```js\n  let x= {\n    run: true,\n    cow: \"noo\"\n  };\n  \n  let y= {\n    cow: \"nyaa\"\n  };\n  y.__proto__ = x;\n  console.log(y.run); //prints true\n  console.log(y.cow); //prints nyaa\n  ```\n  \n  This only works for reading, for writing, the given [[Object]] is the one used. The only exception is when we set a value using an accessor [[Function]] like so\n  ```js\n  let x= {\n    a:2,\n    b: 5,\n   get ap() {return this.a;},\n    set ap(value) { this.a = value; },\n    bp() {return this.b;},\n  };\n  \n  let y ={\n   __proto__: x,\n  };\n  \n  y.a=4; \n  console.log(x.a); //prints 2\n  \n  console.log(y.a); //prints 4\n  console.log(y.bp()); //prints 5\n  ```\n  Here [[this]] is ``y`` and not ``x``, this is because ``this`` gets the Object that called the method, not the ``this`` that refers to the same Object i.e. ``x``. Here, even though ``this`` is y, when we get b through ``bp()``, it gets b from x as it follows the inheritance chain for reading b (remember, ``this`` is just an Object so it's not doing anything special here).\n- In [[Object]], ``<obj>.hasOwnProperty(<prop name>)`` returns true if a property belongs to the Object and is not inherited.\n- ``Object.prototype`` [[Object]]\n  \n  Every Object in JS inherits this special Object, this is the Object that defines methods like ``.hasOwnProperty(...)`` on Objects. All its properties have their attributes ``enumerable`` as false so they don't appear in any loops, similarly ``Object.keys`` and other methods also ignore this Object's properties. \n  \n  So\n  ![image.png](../assets/image_1686686755458_0.png)\n  Assume rabbit and animal are any object and rabbit inherits animal, then as we can see, even animal implicitly inherits from this special Object.\n  \n  We can even check it,\n  ```js\n  let obj = {};\n  \n  console.log(obj.__proto__ === Object.prototype); // true\n  ```\n- [[Function]]'s ``<func>.prototype``:\n  Every Function has a ``.prototype`` property, that assigns an Object to the ``[[Prototype]]`` of the newly created Object when using [[new]]. \n  For ex.:\n  ```js\n  let animal = {\n    eats: true\n  };\n  \n  function Rabbit(name) {\n    this.name = name;\n    console.log(this.eats); //works if the .prototype is set before this function is ran\n  }\n  \n  Rabbit.prototype = animal;\n  \n  let rabbit = new Rabbit(\"White Rabbit\"); \n  \n  console.log( rabbit.eats ); //prints true\n  ```\n  \n  The ``<func>.prototype`` is a property and not the ``[[Prototype]]`` itself, \n  ![image.png](../assets/image_1686787038439_0.png)\n  We can also access ``animal``'s properties in the function ``Rabbit(...)`` as well, as [[this]] Object inherits it first then passes this Object back to the caller. This is to say, ``.prototype`` does nothing but sets the ``[[Prototype]]`` of the ``this`` Object and the rest works as expected.\n  \n  * If we change the ``.prototype`` then it changes the ``[[Prototype]]`` for the Object's created after that assignment, but not for Object's created before it. \n  \n  * ``.prototype`` is only passed when the function is called with ``new <func>(...)``. However, it is always set to some value so it always exists.\n  \n  * Default ``<func>.prototype``:\n  Every function has a  default ``.prototype`` set, this is set to an Object that has a single property named ``constructor`` which points back to the function. \n  For ex.:\n  ```js\n  function yo() {}\n  // yo.prototype = { constructor: yo };  implicitly\n  \n  console.log( yo.prototype.constructor == yo); //prints true\n  \n  let x = new Yo();\n  console.log( x..constructor == yo); //also true because the prototype is always inherited with new <func>(...)\n  \n  //so we can do this too\n  let y= new x.constructor(); //works\n  ```\n  We can work with this ``constructor`` property however we want and JS has no check against it, so we can set it to other functions, have it in our custom Object and then use that Object as ``[[Prototype]]`` etc.\n- As we know, **all** [[Object]]s inherit from ``Object.prototype``, this is true for [[Array]], [[Function]], [[Number]] etc.\n  \n  ![image.png](../assets/image_1686712608418_0.png)\n  \n  These Object's also have their own `.prototype` Objects, called ``native prototypes`` which then define helper properties/methods, and when we create their ``<object>``'s using either literal syntax or [[new]] syntax (recall that they are the same thing, ``new Object()`` is always called), the ``<object>``'s actually inherit ``native prototypes`` which all inherit the ``Object.prototype``\n  Like so\n  ![image.png](../assets/image_1686789747813_0.png)\n  \n  Basically, all data types ([[String]], [[Number]] and [[Boolean]]) except [[null]] and [[undefined]] have their helper functions/properties defined in special Object's, these are known as ``wrapper objects`` and whilst the value theirselves are primitives, the ``new String()``, ``new Number()``, etc. use these Object wrappers aka ``native prototypes`` which have their ``.prototype`` set to these Objects with the helper functions.\n  null and undefined are special as they have no wrappers, hence they have no properties either.\n-\n- We can modify the native prototypes to extend [[String]]/ [[Number]]/[[Boolean]]/[[Array]] etc.\n  Like so\n  ```js\n  String.prototype.yo = function() {\n   console.log(this);\n  };\n  \n  \"hayo\".yo(); //prints \"hayo\"\n  ```\n  It's unrecommended to modify native prototypes as it may be overwritten by some external script if we use one, and secondly other developers may not be aware if a given function is inbuilt or custom making it harder to maintain the code. \n  However, it is acceptable to modify the native prototype to [[Polyfill]] some functionality, i.e., the property exists in some other versions so to make sure your own script has it we can do so.\n- We can borrow prototypal methods too, \n  For ex.:\n  ```js\n  let x = {\n   0: \"Yo\",\n   1: \"ayo\",\n   length: 2,\n  };\n  x.prototype = Array.prototype.join;\n  console.log(x.join(\" \")); //prints Yo ayo\n  ```\n  We can make ``x`` an [[Array]] or some other Object Wrapper too given we set it's ``[[Prototype]]`` to the appropriate native prototype.\n- [[null]] ``[[Prototype]]``\n  As we know\n  ```js\n  let x = {};\n  x.__proto__  =2 ; //ignored\n  console.log(x.__proto__); //prints [object object]\n  ```\n  This is because ``__proto__`` is an accessor property to get/set the ``[[Prototype]]`` and the actual ``[[Prototype]]`` comes from ``Object.prototype`` which is implicitly set for all Objects. That is, ``x.__proto__`` above is ignored because ``x``'s ``[[Prototype]]`` is already set and now ``x.__proto__`` is accessing the ``Object.prototype``'s accessor property ``__proto__`` so we are essentially calling the accessor property in ``Object.prototype``method, which looks like so ``x.__proto__.__proto__=2`` .\n  To circumvent this, we can use a trick\n  ```js\n  let x = {__proto__=null};\n  //or let x = Object.create(null);\n  x.__proto__=2\n  console.log(x.__proto__); //prints 2\n  \n  //or\n  \n  let z ={};\n  Object.setPrototypeOf(z, null);\n  z.__proto__= 2;\n  console.log(z.__proto__); //works\n  \n  ```\n  By setting the property explicitly to null already, JS doesn't implicitly set the ``__proto__`` to ``Object.prototype`` which has an accessor property named ``.__proto__``. The ``Object.setPrototypeOf(...)`` is also smart enough to correctly do it.\n-",536885065]],["^15",[683,"^18",1687830960252,536870919]],["^15",[683,"^19","~m1699627326428",536885066]],["^15",[683,"^Z","pages/__proto__.md",536870919]],["^15",[684,"^Q","In [[Object]], ``<obj>.hasOwnProperty(<prop name>)`` returns true if a property belongs to the Object and is not inherited.",536870919]],["^15",[684,"^O","^16",536870919]],["^15",[684,"^F",691,536870919]],["^15",[684,"^X",542,536870919]],["^15",[684,"^V",542,536870919]],["^15",[684,"^U",39,536870919]],["^15",[684,"^U",542,536870919]],["^15",[684,"^H",39,536885065]],["^15",[684,"^17",true,536870919]],["^15",[684,"^;","~u649a41b0-c3ff-4d5b-8eb6-ec92c9326ab4",536870919]],["^15",[685,"^Q","~``Object.prototype`` [[Object]]\n\nEvery Object in JS inherits this special Object, this is the Object that defines methods like ``.hasOwnProperty(...)`` on Objects. All its properties have their attributes ``enumerable`` as false so they don't appear in any loops, similarly ``Object.keys`` and other methods also ignore this Object's properties. \n\nSo\n![image.png](../assets/image_1686686755458_0.png)\nAssume rabbit and animal are any object and rabbit inherits animal, then as we can see, even animal implicitly inherits from this special Object.\n\nWe can even check it,\n```js\nlet obj = {};\n\nconsole.log(obj.__proto__ === Object.prototype); // true\n```",536870919]],["^15",[685,"^O","^16",536870919]],["^15",[685,"^F",684,536870919]],["^15",[685,"^X",542,536870919]],["^15",[685,"^V",542,536870919]],["^15",[685,"^U",39,536870919]],["^15",[685,"^U",542,536870919]],["^15",[685,"^H",39,536885065]],["^15",[685,"^17",true,536870919]],["^15",[685,"^;","~u649a41b0-4847-4c0b-9681-28389d306210",536870919]],["^15",[686,"^Q","There can only ever be a single ``[[Prototype]]`` of an Object, so this is akin to ``Single Inheritance`` in other languages, we can have chain/hierarchy, and modify the parent Object at any time, but there can only be 1 parent to any Object.",536870919]],["^15",[686,"^O","^16",536870919]],["^15",[686,"^F",925,536885065]],["^15",[686,"^X",542,536870919]],["^15",[686,"^V",542,536870919]],["^15",[686,"^U",542,536870919]],["^15",[686,"^17",true,536870919]],["^15",[686,"^;","~u649a41b0-afe4-4f93-9365-83213a715f1b",536870919]],["^15",[687,"^Q","alias:: Prototype Object\n\n",536870919]],["^15",[687,"^O","^16",536870919]],["^15",[687,"^1>",["^1;",[]],536885065]],["^15",[687,"^F",542,536870919]],["^15",[687,"^X",542,536870919]],["^15",[687,"^V",542,536870919]],["^15",[687,"^U",143,536870919]],["^15",[687,"^U",542,536870919]],["^15",[687,"^:",true,536885065]],["^15",[687,"^?",["^ ","^1:",["^1;",["Prototype Object"]]],536885065]],["^15",[687,"^J",["^1:"],536885065]],["^15",[687,"^4",["^ ","^1:","Prototype Object"],536885065]],["^15",[687,"^H",143,536885065]],["^15",[687,"^17",true,536870919]],["^15",[687,"^;","~u649a41b0-d659-484f-a24c-093db4ee1f8d",536870919]],["^15",[688,"^Q","We can borrow prototypal methods too, \nFor ex.:\n```js\nlet x = {\n 0: \"Yo\",\n 1: \"ayo\",\n length: 2,\n};\nx.prototype = Array.prototype.join;\nconsole.log(x.join(\" \")); //prints Yo ayo\n```\nWe can make ``x`` an [[Array]] or some other Object Wrapper too given we set it's ``[[Prototype]]`` to the appropriate native prototype.",536870919]],["^15",[688,"^O","^16",536870919]],["^15",[688,"^F",692,536870919]],["^15",[688,"^X",542,536870919]],["^15",[688,"^V",542,536870919]],["^15",[688,"^U",47,536870919]],["^15",[688,"^U",542,536870919]],["^15",[688,"^H",47,536885065]],["^15",[688,"^17",true,536870919]],["^15",[688,"^;","~u649a41b0-cb6b-42e7-8a38-edadc0f6a6db",536870919]],["^15",[690,"^Q","[[Function]]'s ``<func>.prototype``:\nEvery Function has a ``.prototype`` property, that assigns an Object to the ``[[Prototype]]`` of the newly created Object when using [[new]]. \nFor ex.:\n```js\nlet animal = {\n  eats: true\n};\n\nfunction Rabbit(name) {\n  this.name = name;\n  console.log(this.eats); //works if the .prototype is set before this function is ran\n}\n\nRabbit.prototype = animal;\n\nlet rabbit = new Rabbit(\"White Rabbit\"); \n\nconsole.log( rabbit.eats ); //prints true\n```\n\nThe ``<func>.prototype`` is a property and not the ``[[Prototype]]`` itself, \n![image.png](../assets/image_1686787038439_0.png)\nWe can also access ``animal``'s properties in the function ``Rabbit(...)`` as well, as [[this]] Object inherits it first then passes this Object back to the caller. This is to say, ``.prototype`` does nothing but sets the ``[[Prototype]]`` of the ``this`` Object and the rest works as expected.\n\n* If we change the ``.prototype`` then it changes the ``[[Prototype]]`` for the Object's created after that assignment, but not for Object's created before it. \n\n* ``.prototype`` is only passed when the function is called with ``new <func>(...)``. However, it is always set to some value so it always exists.\n\n* Default ``<func>.prototype``:\nEvery function has a  default ``.prototype`` set, this is set to an Object that has a single property named ``constructor`` which points back to the function. \nFor ex.:\n```js\nfunction yo() {}\n// yo.prototype = { constructor: yo };  implicitly\n\nconsole.log( yo.prototype.constructor == yo); //prints true\n\nlet x = new Yo();\nconsole.log( x..constructor == yo); //also true because the prototype is always inherited with new <func>(...)\n\n//so we can do this too\nlet y= new x.constructor(); //works\n```\nWe can work with this ``constructor`` property however we want and JS has no check against it, so we can set it to other functions, have it in our custom Object and then use that Object as ``[[Prototype]]`` etc.",536870919]],["^15",[690,"^O","^16",536870919]],["^15",[690,"^F",685,536870919]],["^15",[690,"^X",542,536870919]],["^15",[690,"^V",542,536870919]],["^15",[690,"^U",44,536870919]],["^15",[690,"^U",144,536870919]],["^15",[690,"^U",145,536870919]],["^15",[690,"^U",542,536870919]],["^15",[690,"^H",44,536885065]],["^15",[690,"^H",144,536885065]],["^15",[690,"^H",145,536885065]],["^15",[690,"^17",true,536870919]],["^15",[690,"^;","~u649a41b0-a00d-4e3c-b614-3584710c02e1",536870919]],["^15",[691,"^Q","The whole ``prototypal chain`` is traversed to look for a property, that means even if we have longer inheritance chains, it will work similarly. \nThe only limitations are, if there's a cycle in this chain then that causes an error and that the value of ``[[Prototype]]`` must always be either null or another Object.\n\nFor ex.:\n```js\nlet x= {\n  run: true,\n  cow: \"noo\"\n};\n\nlet y= {\n  cow: \"nyaa\"\n};\ny.__proto__ = x;\nconsole.log(y.run); //prints true\nconsole.log(y.cow); //prints nyaa\n```\n\nThis only works for reading, for writing, the given [[Object]] is the one used. The only exception is when we set a value using an accessor [[Function]] like so\n```js\nlet x= {\n  a:2,\n  b: 5,\n get ap() {return this.a;},\n  set ap(value) { this.a = value; },\n  bp() {return this.b;},\n};\n\nlet y ={\n __proto__: x,\n};\n\ny.a=4; \nconsole.log(x.a); //prints 2\n\nconsole.log(y.a); //prints 4\nconsole.log(y.bp()); //prints 5\n```\nHere [[this]] is ``y`` and not ``x``, this is because ``this`` gets the Object that called the method, not the ``this`` that refers to the same Object i.e. ``x``. Here, even though ``this`` is y, when we get b through ``bp()``, it gets b from x as it follows the inheritance chain for reading b (remember, ``this`` is just an Object so it's not doing anything special here).",536885065]],["^15",[691,"^O","^16",536870919]],["^15",[691,"^F",686,536870919]],["^15",[691,"^X",542,536870919]],["^15",[691,"^V",542,536870919]],["^15",[691,"^U",39,536870919]],["^15",[691,"^U",44,536870919]],["^15",[691,"^U",144,536870919]],["^15",[691,"^U",542,536870919]],["^15",[691,"^H",39,536885065]],["^15",[691,"^H",44,536885065]],["^15",[691,"^H",144,536885065]],["^15",[691,"^17",true,536870919]],["^15",[691,"^;","~u649a41b0-b172-4d54-b2eb-80bf6079a5e6",536870919]],["^15",[692,"^Q","We can modify the native prototypes to extend [[String]]/ [[Number]]/[[Boolean]]/[[Array]] etc.\nLike so\n```js\nString.prototype.yo = function() {\n console.log(this);\n};\n\n\"hayo\".yo(); //prints \"hayo\"\n```\nIt's unrecommended to modify native prototypes as it may be overwritten by some external script if we use one, and secondly other developers may not be aware if a given function is inbuilt or custom making it harder to maintain the code. \nHowever, it is acceptable to modify the native prototype to [[Polyfill]] some functionality, i.e., the property exists in some other versions so to make sure your own script has it we can do so.",536870919]],["^15",[692,"^O","^16",536870919]],["^15",[692,"^F",695,536870919]],["^15",[692,"^X",542,536870919]],["^15",[692,"^V",542,536870919]],["^15",[692,"^U",41,536870919]],["^15",[692,"^U",47,536870919]],["^15",[692,"^U",99,536870919]],["^15",[692,"^U",100,536870919]],["^15",[692,"^U",101,536870919]],["^15",[692,"^U",542,536870919]],["^15",[692,"^H",41,536885065]],["^15",[692,"^H",47,536885065]],["^15",[692,"^H",99,536885065]],["^15",[692,"^H",100,536885065]],["^15",[692,"^H",101,536885065]],["^15",[692,"^17",true,536870919]],["^15",[692,"^;","~u649a41b0-4a42-4d50-8ff5-81a9694836bb",536870919]],["^15",[693,"^Q","[[null]] ``[[Prototype]]``\nAs we know\n```js\nlet x = {};\nx.__proto__  =2 ; //ignored\nconsole.log(x.__proto__); //prints [object object]\n```\nThis is because ``__proto__`` is an accessor property to get/set the ``[[Prototype]]`` and the actual ``[[Prototype]]`` comes from ``Object.prototype`` which is implicitly set for all Objects. That is, ``x.__proto__`` above is ignored because ``x``'s ``[[Prototype]]`` is already set and now ``x.__proto__`` is accessing the ``Object.prototype``'s accessor property ``__proto__`` so we are essentially calling the accessor property in ``Object.prototype``method, which looks like so ``x.__proto__.__proto__=2`` .\nTo circumvent this, we can use a trick\n```js\nlet x = {__proto__=null};\n//or let x = Object.create(null);\nx.__proto__=2\nconsole.log(x.__proto__); //prints 2\n\n//or\n\nlet z ={};\nObject.setPrototypeOf(z, null);\nz.__proto__= 2;\nconsole.log(z.__proto__); //works\n\n```\nBy setting the property explicitly to null already, JS doesn't implicitly set the ``__proto__`` to ``Object.prototype`` which has an accessor property named ``.__proto__``. The ``Object.setPrototypeOf(...)`` is also smart enough to correctly do it.",536870919]],["^15",[693,"^O","^16",536870919]],["^15",[693,"^F",688,536870919]],["^15",[693,"^X",542,536870919]],["^15",[693,"^V",542,536870919]],["^15",[693,"^U",173,536870919]],["^15",[693,"^U",542,536870919]],["^15",[693,"^H",173,536885065]],["^15",[693,"^17",true,536870919]],["^15",[693,"^;","~u649a41b0-4a55-443d-8e40-2f928e0c7a36",536870919]],["^15",[694,"^Q","",536870919]],["^15",[694,"^O","^16",536870919]],["^15",[694,"^F",693,536870919]],["^15",[694,"^X",542,536870919]],["^15",[694,"^V",542,536870919]],["^15",[694,"^U",542,536870919]],["^15",[694,"^17",true,536870919]],["^15",[694,"^;","~u649a41b0-eb1b-4a85-9964-fc0d757c6fa8",536870919]],["^15",[695,"^Q","",536870919]],["^15",[695,"^O","^16",536870919]],["^15",[695,"^F",696,536870919]],["^15",[695,"^X",542,536870919]],["^15",[695,"^V",542,536870919]],["^15",[695,"^U",542,536870919]],["^15",[695,"^17",true,536870919]],["^15",[695,"^;","~u649a41b0-f860-450c-9772-d9ace487425e",536870919]],["^15",[696,"^Q","As we know, **all** [[Object]]s inherit from ``Object.prototype``, this is true for [[Array]], [[Function]], [[Number]] etc.\n\n![image.png](../assets/image_1686712608418_0.png)\n\nThese Object's also have their own `.prototype` Objects, called ``native prototypes`` which then define helper properties/methods, and when we create their ``<object>``'s using either literal syntax or [[new]] syntax (recall that they are the same thing, ``new Object()`` is always called), the ``<object>``'s actually inherit ``native prototypes`` which all inherit the ``Object.prototype``\nLike so\n![image.png](../assets/image_1686789747813_0.png)\n\nBasically, all data types ([[String]], [[Number]] and [[Boolean]]) except [[null]] and [[undefined]] have their helper functions/properties defined in special Object's, these are known as ``wrapper objects`` and whilst the value theirselves are primitives, the ``new String()``, ``new Number()``, etc. use these Object wrappers aka ``native prototypes`` which have their ``.prototype`` set to these Objects with the helper functions.\nnull and undefined are special as they have no wrappers, hence they have no properties either.",536870919]],["^15",[696,"^O","^16",536870919]],["^15",[696,"^F",690,536870919]],["^15",[696,"^X",542,536870919]],["^15",[696,"^V",542,536870919]],["^15",[696,"^U",39,536870919]],["^15",[696,"^U",41,536870919]],["^15",[696,"^U",44,536870919]],["^15",[696,"^U",45,536870919]],["^15",[696,"^U",47,536870919]],["^15",[696,"^U",99,536870919]],["^15",[696,"^U",100,536870919]],["^15",[696,"^U",145,536870919]],["^15",[696,"^U",173,536870919]],["^15",[696,"^U",542,536870919]],["^15",[696,"^H",39,536885065]],["^15",[696,"^H",41,536885065]],["^15",[696,"^H",44,536885065]],["^15",[696,"^H",45,536885065]],["^15",[696,"^H",47,536885065]],["^15",[696,"^H",99,536885065]],["^15",[696,"^H",100,536885065]],["^15",[696,"^H",145,536885065]],["^15",[696,"^H",173,536885065]],["^15",[696,"^17",true,536870919]],["^15",[696,"^;","~u649a41b0-401e-4891-af29-eea85350a322",536870919]],["^15",[697,"^3","alias:: ASI\n",536870919]],["^15",[697,"^18",1687830960259,536870919]],["^15",[697,"^Z","pages/automatic semicolon insertion.md",536870919]],["^15",[698,"^Q","alias:: ASI\n",536870919]],["^15",[698,"^O","^16",536870919]],["^15",[698,"^1>",["^1;",[]],536870919]],["^15",[698,"^F",289,536870919]],["^15",[698,"^X",289,536870919]],["^15",[698,"^V",289,536870919]],["^15",[698,"^U",289,536870919]],["^15",[698,"^U",299,536870919]],["^15",[698,"^:",true,536870919]],["^15",[698,"^?",["^ ","^1:",["^1;",["ASI"]]],536870919]],["^15",[698,"^J",["^1:"],536870919]],["^15",[698,"^4",["^ ","^1:","ASI"],536870919]],["^15",[698,"^H",299,536870919]],["^15",[698,"^17",true,536870919]],["^15",[698,"^;","~u649a41b0-455b-4ef4-a8ee-675ca71a1de4",536870919]],["^15",[699,"^3","- ``break;``\n- [[ECMAScript]] also supports Labelled Breaks\n  For ex.:\n  ```js\n  xy: while(...) {\n       while(...) {\n           break xy;\n         }\n  }\n  ```\n  breaks to the labelled loop xy.\n  The label can be used anywhere, only requirement is for a label to be declared before it is used in the code.\n  For ex.:\n  ```js\n  xy: {\n    break xy; //works\n  }\n  ```\n-",536870919]],["^15",[699,"^18",1687830960269,536870919]],["^15",[699,"^Z","pages/break.md",536870919]],["^15",[700,"^Q","~``break;``",536870919]],["^15",[700,"^O","^16",536870919]],["^15",[700,"^F",185,536870919]],["^15",[700,"^X",185,536870919]],["^15",[700,"^V",185,536870919]],["^15",[700,"^U",185,536870919]],["^15",[700,"^17",true,536870919]],["^15",[700,"^;","~u649a41b0-f6f8-4c22-9db2-c3ab8da145c1",536870919]],["^15",[701,"^Q","[[ECMAScript]] also supports Labelled Breaks\nFor ex.:\n```js\nxy: while(...) {\n     while(...) {\n         break xy;\n       }\n}\n```\nbreaks to the labelled loop xy.\nThe label can be used anywhere, only requirement is for a label to be declared before it is used in the code.\nFor ex.:\n```js\nxy: {\n  break xy; //works\n}\n```",536870919]],["^15",[701,"^O","^16",536870919]],["^15",[701,"^F",700,536870919]],["^15",[701,"^X",185,536870919]],["^15",[701,"^V",185,536870919]],["^15",[701,"^U",24,536870919]],["^15",[701,"^U",185,536870919]],["^15",[701,"^H",24,536870919]],["^15",[701,"^17",true,536870919]],["^15",[701,"^;","~u649a41b0-4229-4e3d-b271-bd8f5d040ebb",536870919]],["^15",[702,"^Q","",536870919]],["^15",[702,"^O","^16",536870919]],["^15",[702,"^F",701,536870919]],["^15",[702,"^X",185,536870919]],["^15",[702,"^V",185,536870919]],["^15",[702,"^U",185,536870919]],["^15",[702,"^17",true,536870919]],["^15",[702,"^;","~u649a41b0-8599-4e5d-91a3-69d33172bbbb",536870919]],["^15",[703,"^3","- new.target\n  Returns a bool which is true if the parent function was called with new.\n  For ex.:\n  ```js\n  function Yo() {\n   if(!new.target){\n   return new Yo();\n   }\n   this.name = \"yo\";\n  }\n  \n  let x = Yo(); //works\n  ```\n  This is unadvised.\n- A Ctor [[Function]] call can omit the ``()`` if it doesn't take any params. \n  So ``let x = new Yo`` is valid syntax if ctor fn Yo exists. It is the equivalent of ``let x = new Yo()``.\n-",536870919]],["^15",[703,"^18",1687830960280,536870919]],["^15",[703,"^Z","pages/new.md",536870919]],["^15",[704,"^Q","new.target\nReturns a bool which is true if the parent function was called with new.\nFor ex.:\n```js\nfunction Yo() {\n if(!new.target){\n return new Yo();\n }\n this.name = \"yo\";\n}\n\nlet x = Yo(); //works\n```\nThis is unadvised.",536870919]],["^15",[704,"^O","^16",536870919]],["^15",[704,"^F",145,536870919]],["^15",[704,"^X",145,536870919]],["^15",[704,"^V",145,536870919]],["^15",[704,"^U",145,536870919]],["^15",[704,"^17",true,536870919]],["^15",[704,"^;","~u649a41b0-8def-4099-9012-faa620ce10dc",536870919]],["^15",[705,"^Q","A Ctor [[Function]] call can omit the ``()`` if it doesn't take any params. \nSo ``let x = new Yo`` is valid syntax if ctor fn Yo exists. It is the equivalent of ``let x = new Yo()``.",536870919]],["^15",[705,"^O","^16",536870919]],["^15",[705,"^F",704,536870919]],["^15",[705,"^X",145,536870919]],["^15",[705,"^V",145,536870919]],["^15",[705,"^U",44,536870919]],["^15",[705,"^U",145,536870919]],["^15",[705,"^H",44,536870919]],["^15",[705,"^17",true,536870919]],["^15",[705,"^;","~u649a41b0-bc6a-429d-a015-8c2814152c24",536870919]],["^15",[706,"^Q","",536870919]],["^15",[706,"^O","^16",536870919]],["^15",[706,"^F",705,536870919]],["^15",[706,"^X",145,536870919]],["^15",[706,"^V",145,536870919]],["^15",[706,"^U",145,536870919]],["^15",[706,"^17",true,536870919]],["^15",[706,"^;","~u649a41b0-2fd6-44ac-a1f4-44372c815f16",536870919]],["^15",[707,"^3","- null has no Object wrapper, and this type has only 1 value, ``null``.\n- Unlike other langs, null is a type of its own and the only value this type takes is ``null``.\n  For ex.:\n  ```js\n  let x = null; //null type and null value\n  ```\n  Represents \"Nothing\".",536870919]],["^15",[707,"^18",1687830960286,536870919]],["^15",[707,"^Z","pages/null.md",536870919]],["^15",[708,"^Q","null has no Object wrapper, and this type has only 1 value, ``null``.",536870919]],["^15",[708,"^O","^16",536870919]],["^15",[708,"^F",173,536870919]],["^15",[708,"^X",173,536870919]],["^15",[708,"^V",173,536870919]],["^15",[708,"^U",173,536870919]],["^15",[708,"^17",true,536870919]],["^15",[708,"^;","~u649a41b0-83d2-47e6-a9a2-3a44b6dfa03e",536870919]],["^15",[709,"^Q","Unlike other langs, null is a type of its own and the only value this type takes is ``null``.\nFor ex.:\n```js\nlet x = null; //null type and null value\n```\nRepresents \"Nothing\".",536870919]],["^15",[709,"^O","^16",536870919]],["^15",[709,"^F",708,536870919]],["^15",[709,"^X",173,536870919]],["^15",[709,"^V",173,536870919]],["^15",[709,"^U",173,536870919]],["^15",[709,"^17",true,536870919]],["^15",[709,"^;","~u649a41b0-fd1d-4f5c-b20f-a2877b381cc4",536870919]],["^15",[710,"^3","- This keyword is special in JS and is not evaluated until runtime.\n- It is not bound to any construct in [[ECMAScript]] either, i.e., it can be used anywhere.\n  For ex.:\n  In an [[Object]]\n  ```js\n  let x ={\n   age:2,\n  };\n  function bobo() {\n    return this.age;  \n   }\n  \n  x.yo= bobo; \n  x.yo(); //returns 2\n  \n  bobo(); //error as 'this' is undefined. Here 'this' is called unbound.\n  ```\n  In [[Old Mode]] an unbound this refers to the parent object, such as in a browser JS script if the function is global then the unbound this will refer to the [[window]] object.\n- Arrow [[Function]]s have no context so they don't bind a this. Instead they allow ``this`` to reference the outer [[Scope]].\n  For ex.:\n  ```js\n  let x= {\n   name: \"aa\",\n    yo() {\n      let a= () => {console.log(this.name)};\n    }\n  };\n  \n  x.yo(); //works, prints aa\n  ```\n-",536870919]],["^15",[710,"^18",1687830960298,536870919]],["^15",[710,"^Z","pages/this.md",536870919]],["^15",[711,"^Q","This keyword is special in JS and is not evaluated until runtime.",536870919]],["^15",[711,"^O","^16",536870919]],["^15",[711,"^F",144,536870919]],["^15",[711,"^X",144,536870919]],["^15",[711,"^V",144,536870919]],["^15",[711,"^U",144,536870919]],["^15",[711,"^17",true,536870919]],["^15",[711,"^;","~u649a41b0-c564-4436-b414-47c3427e2523",536870919]],["^15",[712,"^Q","It is not bound to any construct in [[ECMAScript]] either, i.e., it can be used anywhere.\nFor ex.:\nIn an [[Object]]\n```js\nlet x ={\n age:2,\n};\nfunction bobo() {\n  return this.age;  \n }\n\nx.yo= bobo; \nx.yo(); //returns 2\n\nbobo(); //error as 'this' is undefined. Here 'this' is called unbound.\n```\nIn [[Old Mode]] an unbound this refers to the parent object, such as in a browser JS script if the function is global then the unbound this will refer to the [[window]] object.",536870919]],["^15",[712,"^O","^16",536870919]],["^15",[712,"^F",711,536870919]],["^15",[712,"^X",144,536870919]],["^15",[712,"^V",144,536870919]],["^15",[712,"^U",24,536870919]],["^15",[712,"^U",39,536870919]],["^15",[712,"^U",144,536870919]],["^15",[712,"^U",209,536870919]],["^15",[712,"^U",284,536870919]],["^15",[712,"^H",24,536870919]],["^15",[712,"^H",39,536870919]],["^15",[712,"^H",209,536870919]],["^15",[712,"^H",284,536870919]],["^15",[712,"^17",true,536870919]],["^15",[712,"^;","~u649a41b0-2b25-4826-a675-e4d43def62a6",536870919]],["^15",[713,"^Q","Arrow [[Function]]s have no context so they don't bind a this. Instead they allow ``this`` to reference the outer [[Scope]].\nFor ex.:\n```js\nlet x= {\n name: \"aa\",\n  yo() {\n    let a= () => {console.log(this.name)};\n  }\n};\n\nx.yo(); //works, prints aa\n```",536870919]],["^15",[713,"^O","^16",536870919]],["^15",[713,"^F",712,536870919]],["^15",[713,"^X",144,536870919]],["^15",[713,"^V",144,536870919]],["^15",[713,"^U",44,536870919]],["^15",[713,"^U",82,536870919]],["^15",[713,"^U",144,536870919]],["^15",[713,"^H",44,536870919]],["^15",[713,"^H",82,536870919]],["^15",[713,"^17",true,536870919]],["^15",[713,"^;","~u649a41b0-7a71-45a6-99e5-c7106d376a63",536870919]],["^15",[714,"^Q","",536870919]],["^15",[714,"^O","^16",536870919]],["^15",[714,"^F",713,536870919]],["^15",[714,"^X",144,536870919]],["^15",[714,"^V",144,536870919]],["^15",[714,"^U",144,536870919]],["^15",[714,"^17",true,536870919]],["^15",[714,"^;","~u649a41b0-eaec-445e-9203-ac709717dde5",536870919]],["^15",[715,"^3","- An [[Operator]] . Returns the type of a value/variable in string.\n- For ex.:\n  ```js\n  typeof 2 //\"Integer\"\n  - typeof null //\"object\"\n  - typeof Symbol(\"id\") //\"symbol\"\n  - typeof alert //\"Function\"\n  ```\n  The typeof null is not \"Object\", this is a known error with typeof.\n  [[Function]]s are not a type in JS, they belong to [[object]] but typeof returns \"Function\" for the sake of convenience.\n- There's also the function variant of ``typeof(...)``, it's the same but uses a [[Function]] instead.",536870919]],["^15",[715,"^18",1687830960307,536870919]],["^15",[715,"^Z","pages/typeOf.md",536870919]],["^15",[716,"^Q","An [[Operator]] . Returns the type of a value/variable in string.",536870919]],["^15",[716,"^O","^16",536870919]],["^15",[716,"^F",38,536870919]],["^15",[716,"^X",38,536870919]],["^15",[716,"^V",38,536870919]],["^15",[716,"^U",38,536870919]],["^15",[716,"^U",76,536870919]],["^15",[716,"^H",76,536870919]],["^15",[716,"^17",true,536870919]],["^15",[716,"^;","~u649a41b0-88e8-4483-9beb-c8576c0f3914",536870919]],["^15",[717,"^Q","For ex.:\n```js\ntypeof 2 //\"Integer\"\n- typeof null //\"object\"\n- typeof Symbol(\"id\") //\"symbol\"\n- typeof alert //\"Function\"\n```\nThe typeof null is not \"Object\", this is a known error with typeof.\n[[Function]]s are not a type in JS, they belong to [[object]] but typeof returns \"Function\" for the sake of convenience.",536870919]],["^15",[717,"^O","^16",536870919]],["^15",[717,"^F",716,536870919]],["^15",[717,"^X",38,536870919]],["^15",[717,"^V",38,536870919]],["^15",[717,"^U",38,536870919]],["^15",[717,"^U",39,536870919]],["^15",[717,"^U",44,536870919]],["^15",[717,"^H",39,536870919]],["^15",[717,"^H",44,536870919]],["^15",[717,"^17",true,536870919]],["^15",[717,"^;","~u649a41b0-4eef-4f12-8250-891088c54a76",536870919]],["^15",[718,"^Q","There's also the function variant of ``typeof(...)``, it's the same but uses a [[Function]] instead.",536870919]],["^15",[718,"^O","^16",536870919]],["^15",[718,"^F",717,536870919]],["^15",[718,"^X",38,536870919]],["^15",[718,"^V",38,536870919]],["^15",[718,"^U",38,536870919]],["^15",[718,"^U",44,536870919]],["^15",[718,"^H",44,536870919]],["^15",[718,"^17",true,536870919]],["^15",[718,"^;","~u649a41b0-df96-4f4f-bcdf-ef4cf7693619",536870919]],["^15",[719,"^3","- Just like [[null]], ``undefined`` has no [[Object]] wrapper and has only 1 value to its type, ``undefined``.\n- Represents an un-assigned value. We can assign manually or it can be a result of not initializing a variable either because of a non-assignment or because of an error that itself returns undefined.\n  For ex.:\n  ```js\n  let x= undefined; //Not recommended but works\n  let y; //value is 'undefined' until assigned\n  ```",536870919]],["^15",[719,"^18",1687830960318,536870919]],["^15",[719,"^Z","pages/undefined.md",536870919]],["^15",[720,"^Q","Just like [[null]], ``undefined`` has no [[Object]] wrapper and has only 1 value to its type, ``undefined``.",536870919]],["^15",[720,"^O","^16",536870919]],["^15",[720,"^F",45,536870919]],["^15",[720,"^X",45,536870919]],["^15",[720,"^V",45,536870919]],["^15",[720,"^U",39,536870919]],["^15",[720,"^U",45,536870919]],["^15",[720,"^U",173,536870919]],["^15",[720,"^H",39,536870919]],["^15",[720,"^H",173,536870919]],["^15",[720,"^17",true,536870919]],["^15",[720,"^;","~u649a41b0-ed15-4d1b-a1c5-af0700286e96",536870919]],["^15",[721,"^Q","Represents an un-assigned value. We can assign manually or it can be a result of not initializing a variable either because of a non-assignment or because of an error that itself returns undefined.\nFor ex.:\n```js\nlet x= undefined; //Not recommended but works\nlet y; //value is 'undefined' until assigned\n```",536870919]],["^15",[721,"^O","^16",536870919]],["^15",[721,"^F",720,536870919]],["^15",[721,"^X",45,536870919]],["^15",[721,"^V",45,536870919]],["^15",[721,"^U",45,536870919]],["^15",[721,"^17",true,536870919]],["^15",[721,"^;","~u649a41b0-1f2b-4ffa-b570-beddd1aa336e",536870919]],["^15",[722,"^3","- An old way of declaring variables, it is unrecommended to be used in modern JS.\n- Variables declared with var are only either [[Function]] [[Scope]]d or Global Scoped\n  For ex.:\n  ```js\n  {\n   var yo= 2;\n  }\n  console.log(yo); //works, prints 2\n  ```\n  Here yo became Global Scoped and that allows it to be visible in any other scope.\n  var can be redeclared. The redeclaration is simply ignored and if there's initialization with redeclaration, that is assigned to the variable.\n  For ex.:\n  ```js\n  var x=2;\n  var x=3;\n  console.log(x); //prints 3\n  ```\n- Variables declared with var are ``hoisted``, aka ``raised`` to the top of the function/global [[Scope]].\n  However, their assignments are not, they occur only where they are made.\n  That is,\n  ```js\n  function sayHi() {\n  console.log(phrase); // is not an error, prints undefined\n  phrase = \"Hello\"; // is not an error\n  \n    if (false) {\n      var phrase= \"yo\";\n    }\n  \n    console.log(phrase);\n  }\n  sayHi();\n  ```\n  Works. ``phrase`` is undefined, but declared in the first line inside the function. The declaration from below ``hoists``, pierces through the code block and gets declared at function start. This is how var declares variables.\n-",536870919]],["^15",[722,"^18",1687830960332,536870919]],["^15",[722,"^Z","pages/var.md",536870919]],["^15",[723,"^Q","An old way of declaring variables, it is unrecommended to be used in modern JS.",536870919]],["^15",[723,"^O","^16",536870919]],["^15",[723,"^F",287,536870919]],["^15",[723,"^X",287,536870919]],["^15",[723,"^V",287,536870919]],["^15",[723,"^U",287,536870919]],["^15",[723,"^17",true,536870919]],["^15",[723,"^;","~u649a41b0-e1f7-407d-b742-edf8e7408d01",536870919]],["^15",[724,"^Q","Variables declared with var are only either [[Function]] [[Scope]]d or Global Scoped\nFor ex.:\n```js\n{\n var yo= 2;\n}\nconsole.log(yo); //works, prints 2\n```\nHere yo became Global Scoped and that allows it to be visible in any other scope.\nvar can be redeclared. The redeclaration is simply ignored and if there's initialization with redeclaration, that is assigned to the variable.\nFor ex.:\n```js\nvar x=2;\nvar x=3;\nconsole.log(x); //prints 3\n```",536870919]],["^15",[724,"^O","^16",536870919]],["^15",[724,"^F",723,536870919]],["^15",[724,"^X",287,536870919]],["^15",[724,"^V",287,536870919]],["^15",[724,"^U",44,536870919]],["^15",[724,"^U",82,536870919]],["^15",[724,"^U",287,536870919]],["^15",[724,"^H",44,536870919]],["^15",[724,"^H",82,536870919]],["^15",[724,"^17",true,536870919]],["^15",[724,"^;","~u649a41b0-7049-42bc-ae87-3c520ce6c7f3",536870919]],["^15",[725,"^Q","Variables declared with var are ``hoisted``, aka ``raised`` to the top of the function/global [[Scope]].\nHowever, their assignments are not, they occur only where they are made.\nThat is,\n```js\nfunction sayHi() {\nconsole.log(phrase); // is not an error, prints undefined\nphrase = \"Hello\"; // is not an error\n\n  if (false) {\n    var phrase= \"yo\";\n  }\n\n  console.log(phrase);\n}\nsayHi();\n```\nWorks. ``phrase`` is undefined, but declared in the first line inside the function. The declaration from below ``hoists``, pierces through the code block and gets declared at function start. This is how var declares variables.",536870919]],["^15",[725,"^O","^16",536870919]],["^15",[725,"^F",724,536870919]],["^15",[725,"^X",287,536870919]],["^15",[725,"^V",287,536870919]],["^15",[725,"^U",82,536870919]],["^15",[725,"^U",287,536870919]],["^15",[725,"^H",82,536870919]],["^15",[725,"^17",true,536870919]],["^15",[725,"^;","~u649a41b0-9d82-4850-af51-9fad71b63fd1",536870919]],["^15",[726,"^Q","",536870919]],["^15",[726,"^O","^16",536870919]],["^15",[726,"^F",725,536870919]],["^15",[726,"^X",287,536870919]],["^15",[726,"^V",287,536870919]],["^15",[726,"^U",287,536870919]],["^15",[726,"^17",true,536870919]],["^15",[726,"^;","~u649a41b0-4d51-40de-a443-7049dc050e31",536870919]],["^15",[727,"^3","- In [[Browser]]s , this Object provides the functionality required for JS to run, then interact with the [[DOM]] and the [[BOM]]\n  ![image.png](../assets/image_1687263712458_0.png)\n  \n  So the window [[Object]] has 2 roles, it is the [[Global]] Object and secondly it provides interactivity with the BOM and DOM.\n-\n-",536870919]],["^15",[727,"^18",1687830960343,536870919]],["^15",[727,"^Z","pages/window.md",536870919]],["^15",[728,"^Q","In [[Browser]]s , this Object provides the functionality required for JS to run, then interact with the [[DOM]] and the [[BOM]]\n![image.png](../assets/image_1687263712458_0.png)\n\nSo the window [[Object]] has 2 roles, it is the [[Global]] Object and secondly it provides interactivity with the BOM and DOM.",536870919]],["^15",[728,"^O","^16",536870919]],["^15",[728,"^F",209,536870919]],["^15",[728,"^X",209,536870919]],["^15",[728,"^V",209,536870919]],["^15",[728,"^U",33,536870919]],["^15",[728,"^U",39,536870919]],["^15",[728,"^U",114,536870919]],["^15",[728,"^U",209,536870919]],["^15",[728,"^U",286,536870919]],["^15",[728,"^U",296,536870919]],["^15",[728,"^H",33,536870919]],["^15",[728,"^H",39,536870919]],["^15",[728,"^H",114,536870919]],["^15",[728,"^H",286,536870919]],["^15",[728,"^H",296,536870919]],["^15",[728,"^17",true,536870919]],["^15",[728,"^;","~u649a41b0-9cce-4dcf-accc-15f46b18f46d",536870919]],["^15",[729,"^Q","",536870919]],["^15",[729,"^O","^16",536870919]],["^15",[729,"^F",728,536870919]],["^15",[729,"^X",209,536870919]],["^15",[729,"^V",209,536870919]],["^15",[729,"^U",209,536870919]],["^15",[729,"^17",true,536870919]],["^15",[729,"^;","~u649a41b0-c165-44e2-be4e-a4be782db658",536870919]],["^15",[730,"^Q","",536870919]],["^15",[730,"^O","^16",536870919]],["^15",[730,"^F",729,536870919]],["^15",[730,"^X",209,536870919]],["^15",[730,"^V",209,536870919]],["^15",[730,"^U",209,536870919]],["^15",[730,"^17",true,536870919]],["^15",[730,"^;","~u649a41b0-146b-4c47-b621-5b52f75bc1a2",536870919]],["^15",[731,"^2",1,536870920]],["^15",[731,"^T","^2",536870920]],["^15",[732,"^T","^R",536870921]],["^15",[732,"^R",["^14",["ecmascript","function","generator function","loop","conditional","comparison","operator","operand","conversion","object","string","649a41ae-15f0-41c8-997d-018557f4ce6f","developer tools","card","css property"]],536885537]],["^15",[733,"^T","~:recent/search",536870923]],["^15",[733,"^1?",["^14",["CSS","EVent","br","defer","Browser Eve"]],536883713]],["^15",[734,"^Q","An event is a signal and most things in [[Browser]]s generate events. There are events generated by [[DOM]] nodes, [[CSS]] property changes such as changes in CSS [[Animation]]s, mouse events generated by the browser itself etc.\n\nWe can assign ``handlers`` to all events, these are [[ECMAScript]] [[Function]]s which are executed whenever an event is triggered.",536871071]],["^15",[734,"^O","^16",536870926]],["^15",[734,"^@",false,536870926]],["^15",[734,"^F",73,536870926]],["^15",[734,"^X",73,536870926]],["^15",[734,"^V",73,536870926]],["^15",[734,"^U",24,536871056]],["^15",[734,"^U",33,536871056]],["^15",[734,"^U",44,536871056]],["^15",[734,"^U",73,536871056]],["^15",[734,"^U",114,536871056]],["^15",[734,"^U",128,536871056]],["^15",[734,"^U",736,536871056]],["^15",[734,"^?",["^ "],536871071]],["^15",[734,"^H",24,536871071]],["^15",[734,"^H",33,536871071]],["^15",[734,"^H",44,536871071]],["^15",[734,"^H",114,536871071]],["^15",[734,"^H",128,536871071]],["^15",[734,"^H",736,536871071]],["^15",[734,"^17",true,536870926]],["^15",[734,"^;","~u649a4ec5-bd1d-4cba-84a6-96376654a53f",536870926]],["^15",[735,"^3","- An event is a signal and most things in [[Browser]]s generate events. There are events generated by [[DOM]] nodes, [[CSS]] property changes such as changes in CSS [[Animation]]s, mouse events generated by the browser itself etc.\n  \n  We can assign ``handlers`` to all events, these are [[ECMAScript]] [[Function]]s which are executed whenever an event is triggered.\n- [[Browser Event List]]\n- Assigning event handlers\n  There can only be a single event handler for any event. \n  \n  We can assign an event handler to an [[HTML Element]] directly using the ``on<eventname>=<func>()`` attribute which is a common attribute.\n  \n  For ex.:\n  ```html\n  <input value=\"Click me\" onclick=\"alert('Click!')\" type=\"button\">\n  <!-- or -->\n  <input id=\"x\" value=\"Click me\" onclick=\"yo()\" type=\"button\">\n  \n  <script>\n  function yo() {}\n  </script>\n  ```\n  The HTML attribute copies the body of the value of an event handler to a method and then calls that method instead. So, \n  ``onclick=yo()``\n  becomes\n  ```js\n  x.onclick=function(event) {\n  yo();\n  }\n  ```\n  The ``event`` Object is always passed, this is why we can use it directly in the attribute's value too.\n  \n  Similarly we can assign using [[DOM]] by using any ``node``'s ``on<event name>`` property.\n  ```js\n  let elem=...;\n  elem.onclick= function(){};\n  \n  elem.onclick= null; //to unassign an event handler\n  \n  function yo(){}\n  \n  elem.onclick=yo; //works, notice the lack of ()\n  ```\n  If the HTML attribute assigns an event handler, then it is available in the DOM.\n  We can't assign event handlers using ``<node>.setAttribute(...)``.\n  \n  * Whilst a single event can only have a single event handler, we can have handlers that call multiple handlers, this is already implemented with ``<node>.addEventListener(\"<event name>\", <handler func or Object>, <optional options>)`` and ``<node>.removeEventListener(\"<event name>\", <handler func or Object>, <optional options>)``\n  For ex.:\n  ```js\n  let elem=...;\n  function yo(){}\n  elem.addEventListener(\"click\",yo);\n  elem.removeEventListener(\"click\",yo); //ok\n  ```\n  The ``.removeEventListener(...)`` must be called with the exact same args to work. And since there's no way to read all the assigned handlers for a node, if we assign an anonymous [[Function]], it will never be removed.\n  \n  The optional options is an [[Object]] that can have these properties\n  ``once``: Boolean value, removes listener after a single trigger.\n  ``capture``: Boolean, the phase of the event where this listener will be triggered. If default/false, the handler is executed on the bubbling phase otherwise the capturing phase.\n  ``passive``: Boolean, if true, it denotes that the handler wouldn't call ``<event Object>.preventDefault()``.\n  \n  The ``passive`` property is an optimization that allows browsers to not anticipate a ``preventDefault()`` call from an event handler, thereby optimizing the event flow.\n  \n  Some events can only be assigned handlers through these methods, such as ``DOMContentLoaded``. Furthermore, it is advised to use these methods to add/remove handlers from the ``document`` DOM Object directly.\n  \n  The handler can be an [[Object]] too, in which case the object's ``handleEvent(event)`` is called.\n  \n  These methods guarantee the order of execution from the order of declaration given the handlers are assigned for the same phase. \n  For ex.:\n  ```js\n  elem.addEventListener(\"click\", e => alert(1)); // guaranteed to trigger first\n  elem.addEventListener(\"click\", e => alert(2));\n  ```\n- Event handler's [[this]], except for arrow [[Function]]s, is always assigned the [[DOM]] node.\n- Events propagate in [[Brower]]s\n  That is, they flow into other elements.\n  [DOM Events](https://www.w3.org/TR/DOM-Level-3-Events/) describe there to be 3 ``phases`` of event propagation\n  * Bubbling Phase: The event flows upward, from the most nested element to the least nested element.\n  * Capturing Phase: The event flows downward, from the least nested to the most nested element at which the event occurred.\n  * Target Phase: The event is at the element\n  Like so\n  \n  ![image.png](../assets/image_1687860745168_0.png)\n  Here the ``td`` element is the recipient of the event.\n  \n  As we can see, every event propagates in both directions.\n  \n  By default, event handlers only handle events bubbling up.\n  By setting the ``capture`` [[Boolean]] to true for the ``<node>.addEventListener(...)`` we can switch to the capturing phase instead.\n  \n  * We can call ``<event Object>.stopPropagation()`` to stop the bubbling and capturing at the current element.\n  If there are multiple handlers on the event in this element, they are still ran. We can call ``<event Object>.stopImmediatePropagation()`` to stop propagation and prevent any other handler to be executed. \n  However it is recommended to only stop bubbling/capturing if explicitly required as there are obvious behaviors.\n- Bubbling\n  When an event occurs on any [[HTML Element]], it triggers the most nested element's handler then the event bubbles up and triggers the parent element's handler and so on. \n  \n  For ex.:\n  ```html\n  <form onclick=\"alert('form')\">FORM\n    <div onclick=\"alert('div')\">DIV\n      <p onclick=\"alert('p')\">P</p>\n    </div>\n  </form>\n  ```\n  Here if we click ``P``, we would first get ``P`` then ``div`` then ``form``.\n  Like so\n  ![image.png](../assets/image_1687857846296_0.png)\n  \n  Almost all events bubble, some events like ``focus`` don't. However, the amount of bubbling is variable, some events reach all the way from elements to ``html`` to ``document`` then to [[window]], but others stop at ``html`` and so on.\n- The ``event`` [[Object]]\n  This event is passed to all event handlers and has some properties on it set to better describe the events.\n  Common properties are\n  ``.type``: The event name\n  ``.currentTarget``: The [[HTML Element]] or [[DOM]] node that handled the event.\n  ``.target``: This is a [[DOM]] node where the event occurred, this allows us to see if an event bubbled up or originated at the current node. \n  In an event handler, [[this]] is the DOM node at which the handler is ran, and now we know ``.target`` has the node where the event occurred so we can compare these 2 to check where the event occurred.\n- The bubbling/capturing allows us to assign a single event handler on the ``document``, then check if the event occurred on a specific [[HTML Element]] by either checking their ``id`` or ``tagName`` or custom attribute and then execute some functionality for them centrally without assigning an event handler for each element separately.\n- Event handlers can return values but they are generally ignored.\n- Browser Default Actions\n  Browsers perform some default actions like navigating to url on click of ``a`` [[HTML Element]].\n  We can prevent these in 2 ways:\n  Assigning custom handler to the event and doing ``<event Object>.preventDefault()``.\n  Assigning handler using ``on<event>`` either through [[DOM]] or [[HTML]] attribute and returning ``false``.\n  For ex.:\n  ```js\n  menu.onclick = function(event) {\n    if (event.target.nodeName != 'A') return;\n  \n    let href = event.target.getAttribute('href');\n    alert( href );\n  \n    return false; // prevent browser action (don't go to the URL)\n  };\n  ```\n  \n  * Default Action event propagation is different from normal bubbling/capturing. The former only triggers the browser inbuilt event handlers, the latter triggers both. \n  ``.preventDefault()`` only stops default action event propagation. \n  The other event handlers can use ``<event Object>.defaultPrevented()`` to get a bool is true if the default event propagation was prevented.\n- Some events flow into other events, such as ``mousedown`` event also triggers ``focus`` event. These are also part of browser default actions, so if we do ``<event>.preventDefault()``, these don't occur.\n- Custom Events\n  We can generate custom events as well as trigger predefined events using [[ECMAScript]].\n  \n  To create a custom event we use the ``Event`` Class. It has the args ``let event = new Event(\"<type>\", <optional options Object>);``\n  * ``type``: The name/type of the event, can be a predefined event, like \"click\" or custom.\n  * Options: An [[Object]] that can have these properties\n  ``bubbles``: Boolean, if true the event bubbles.\n  ``cancellable``: Boolean, if true then the default action event may be prevented.\n  Both are false by default.\n  \n  Then, to fire an event on an [[HTML Element]], we use ``<node>.dispatchEvent(<event Object>)`` from the [[DOM]].\n  \n  For ex.:\n  ```html\n  <button id=\"elem\" onclick=\"alert('Click!');\">Autoclick</button>\n  \n  <script>\n    let event = new Event(\"click\");\n    elem.dispatchEvent(event); //works\n  </script>\n  ```\n  Here the ``click`` event is triggered on ``\"elem\"`` and it doesn't bubble up. \n  \n  * ``<event Object>.isTrusted`` is a property for event Objects and is false for custom triggered events.\n  \n  * The ``Event`` class is the most base class for all event types. There are more specialized [event interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event) which we can use for more specialized event types. Such as ``new MouseEvent(...)`` would generate a mouse event. \n  \n  * There's also ``CustomEvent`` [[Class]] which is meant specifically for custom events. It is the same as the base ``Event`` class, but has 1 change and that is that its ``Options`` Object also recognizes an additional property ``detail`` which can have any type of value and is passed with the event.\n  Technically, we can add custom properties to the normal Event and they will be passed around as well but using this class is recommended for truly custom events.\n- Events in the [[Message Queue]]\n  Events are synchronous, so if ``click`` event occurs and then immediately after it ``contextmenu`` occurs then the latter is queued up so the handlers for the ``click`` event will be called first then the ``contextmenu`` handlers.\n  The only exception is when an event handler itself triggers another event, then the event is not queued up and its handlers are processed immediately. \n  We can use [[Scheduling]] to trigger an event from an event and have it processed afterwards.\n- Monitor Events\n  We can monitor events fired on any element using ``monitorEvents(<node>)`` [[Function]]. It returns an [[Object]] with every event triggered on the node with the event details, it basically returns the event Object itself like an observer on every event triggered on it.\n  \n  If we use it in the Chrome [[Debugging]] Console, it will print the event Object on a node each time the node receives an event.\n  For ex.:\n  ```js\n  monitorEvents($0)\n  ```\n  in the debug console would work as expected.\n-",536883588]],["^15",[735,"^19","~m1688630513844",536883587]],["^15",[735,"^Z","pages/Browser Event.md",536870929]],["^15",[736,"^K",1687834401465,536870977]],["^15",[736,"^@",false,536870977]],["^15",[736,"^Y","animation",536870977]],["^15",[736,"^11","Animation",536870977]],["^15",[736,"^B",1687834401465,536870977]],["^15",[736,"^;","~u649a4f21-ae21-4a64-8cc8-375cf23f3a69",536870977]],["^15",[737,"^Q","Assigning event handlers\nThere can only be a single event handler for any event. \n\nWe can assign an event handler to an [[HTML Element]] directly using the ``on<eventname>=<func>()`` attribute which is a common attribute.\n\nFor ex.:\n```html\n<input value=\"Click me\" onclick=\"alert('Click!')\" type=\"button\">\n<!-- or -->\n<input id=\"x\" value=\"Click me\" onclick=\"yo()\" type=\"button\">\n\n<script>\nfunction yo() {}\n</script>\n```\nThe HTML attribute copies the body of the value of an event handler to a method and then calls that method instead. So, \n``onclick=yo()``\nbecomes\n```js\nx.onclick=function(event) {\nyo();\n}\n```\nThe ``event`` Object is always passed, this is why we can use it directly in the attribute's value too.\n\nSimilarly we can assign using [[DOM]] by using any ``node``'s ``on<event name>`` property.\n```js\nlet elem=...;\nelem.onclick= function(){};\n\nelem.onclick= null; //to unassign an event handler\n\nfunction yo(){}\n\nelem.onclick=yo; //works, notice the lack of ()\n```\nIf the HTML attribute assigns an event handler, then it is available in the DOM.\nWe can't assign event handlers using ``<node>.setAttribute(...)``.\n\n* Whilst a single event can only have a single event handler, we can have handlers that call multiple handlers, this is already implemented with ``<node>.addEventListener(\"<event name>\", <handler func or Object>, <optional options>)`` and ``<node>.removeEventListener(\"<event name>\", <handler func or Object>, <optional options>)``\nFor ex.:\n```js\nlet elem=...;\nfunction yo(){}\nelem.addEventListener(\"click\",yo);\nelem.removeEventListener(\"click\",yo); //ok\n```\nThe ``.removeEventListener(...)`` must be called with the exact same args to work. And since there's no way to read all the assigned handlers for a node, if we assign an anonymous [[Function]], it will never be removed.\n\nThe optional options is an [[Object]] that can have these properties\n``once``: Boolean value, removes listener after a single trigger.\n``capture``: Boolean, the phase of the event where this listener will be triggered. If default/false, the handler is executed on the bubbling phase otherwise the capturing phase.\n``passive``: Boolean, if true, it denotes that the handler wouldn't call ``<event Object>.preventDefault()``.\n\nThe ``passive`` property is an optimization that allows browsers to not anticipate a ``preventDefault()`` call from an event handler, thereby optimizing the event flow.\n\nSome events can only be assigned handlers through these methods, such as ``DOMContentLoaded``. Furthermore, it is advised to use these methods to add/remove handlers from the ``document`` DOM Object directly.\n\nThe handler can be an [[Object]] too, in which case the object's ``handleEvent(event)`` is called.\n\nThese methods guarantee the order of execution from the order of declaration given the handlers are assigned for the same phase. \nFor ex.:\n```js\nelem.addEventListener(\"click\", e => alert(1)); // guaranteed to trigger first\nelem.addEventListener(\"click\", e => alert(2));\n```",536873784]],["^15",[737,"^O","^16",536871014]],["^15",[737,"^@",false,536871014]],["^15",[737,"^F",753,536873787]],["^15",[737,"^X",73,536871014]],["^15",[737,"^V",73,536871014]],["^15",[737,"^U",39,536871912]],["^15",[737,"^U",44,536871912]],["^15",[737,"^U",73,536871912]],["^15",[737,"^U",114,536871912]],["^15",[737,"^U",120,536871912]],["^15",[737,"^?",["^ "],536873784]],["^15",[737,"^H",39,536873784]],["^15",[737,"^H",44,536873784]],["^15",[737,"^H",114,536873784]],["^15",[737,"^H",120,536873784]],["^15",[737,"^17",true,536871014]],["^15",[737,"^;","~u649a4fbd-03df-4ff3-987a-ba5c68ba0368",536871014]],["^15",[739,"^Q","Every attribute of an [[HTML Element]] is mapped to a [[DOM Class Property]] on its node. \nHowever, whilst HTML attributes are case insensitive, DOM attributes are case sensitive as JS is case sensitive.",536871636]],["^15",[739,"^O","^16",536871564]],["^15",[739,"^F",235,536871564]],["^15",[739,"^X",114,536871564]],["^15",[739,"^V",114,536871564]],["^15",[739,"^U",114,536871621]],["^15",[739,"^U",120,536871621]],["^15",[739,"^U",211,536871621]],["^15",[739,"^?",["^ "],536871636]],["^15",[739,"^H",120,536871636]],["^15",[739,"^H",211,536871636]],["^15",[739,"^17",true,536871564]],["^15",[739,"^;","~u649a52c5-72e0-4e06-ac19-bda56031ccf6",536871564]],["^15",[741,"^Q","Event handler's [[this]], except for arrow [[Function]]s, is always assigned the [[DOM]] node.",536872159]],["^15",[741,"^O","^16",536872085]],["^15",[741,"^@",false,536872085]],["^15",[741,"^F",737,536873069]],["^15",[741,"^X",73,536872085]],["^15",[741,"^V",73,536872085]],["^15",[741,"^U",44,536872160]],["^15",[741,"^U",73,536872160]],["^15",[741,"^U",114,536872160]],["^15",[741,"^U",144,536872160]],["^15",[741,"^?",["^ "],536872159]],["^15",[741,"^H",44,536872159]],["^15",[741,"^H",114,536872159]],["^15",[741,"^H",144,536872159]],["^15",[741,"^17",true,536872085]],["^15",[741,"^;","~u649a55ef-9f4b-49b2-9b2e-f30e18eede5f",536872085]],["^15",[742,"^Q","Bubbling\nWhen an event occurs on any [[HTML Element]], it triggers the most nested element's handler then the event bubbles up and triggers the parent element's handler and so on. \n\nFor ex.:\n```html\n<form onclick=\"alert('form')\">FORM\n  <div onclick=\"alert('div')\">DIV\n    <p onclick=\"alert('p')\">P</p>\n  </div>\n</form>\n```\nHere if we click ``P``, we would first get ``P`` then ``div`` then ``form``.\nLike so\n![image.png](../assets/image_1687857846296_0.png)\n\nAlmost all events bubble, some events like ``focus`` don't. However, the amount of bubbling is variable, some events reach all the way from elements to ``html`` to ``document`` then to [[window]], but others stop at ``html`` and so on.",536873212]],["^15",[742,"^O","^16",536872247]],["^15",[742,"^@",false,536872247]],["^15",[742,"^F",744,536873222]],["^15",[742,"^X",73,536872247]],["^15",[742,"^V",73,536872247]],["^15",[742,"^U",73,536872544]],["^15",[742,"^U",120,536872544]],["^15",[742,"^U",209,536872544]],["^15",[742,"^?",["^ "],536873222]],["^15",[742,"^H",120,536873222]],["^15",[742,"^H",209,536873222]],["^15",[742,"^17",true,536872247]],["^15",[742,"^;","~u649aaa1b-8bdd-4088-b1fb-4c03ae2049f5",536872247]],["^15",[743,"^Q","The ``event`` [[Object]]\nThis event is passed to all event handlers and has some properties on it set to better describe the events.\nCommon properties are\n``.type``: The event name\n``.currentTarget``: The [[HTML Element]] or [[DOM]] node that handled the event.\n``.target``: This is a [[DOM]] node where the event occurred, this allows us to see if an event bubbled up or originated at the current node. \nIn an event handler, [[this]] is the DOM node at which the handler is ran, and now we know ``.target`` has the node where the event occurred so we can compare these 2 to check where the event occurred.",536872511]],["^15",[743,"^O","^16",536872390]],["^15",[743,"^@",false,536872390]],["^15",[743,"^F",742,536872390]],["^15",[743,"^X",73,536872390]],["^15",[743,"^V",73,536872390]],["^15",[743,"^U",39,536872447]],["^15",[743,"^U",73,536872447]],["^15",[743,"^U",114,536872447]],["^15",[743,"^U",120,536872447]],["^15",[743,"^U",144,536872447]],["^15",[743,"^?",["^ "],536872511]],["^15",[743,"^H",39,536872511]],["^15",[743,"^H",114,536872511]],["^15",[743,"^H",120,536872511]],["^15",[743,"^H",144,536872511]],["^15",[743,"^17",true,536872390]],["^15",[743,"^;","~u649aab11-9e00-4339-9d5f-0d624cee7d0c",536872390]],["^15",[744,"^Q","Events propagate in [[Brower]]s\nThat is, they flow into other elements.\n[DOM Events](https://www.w3.org/TR/DOM-Level-3-Events/) describe there to be 3 ``phases`` of event propagation\n* Bubbling Phase: The event flows upward, from the most nested element to the least nested element.\n* Capturing Phase: The event flows downward, from the least nested to the most nested element at which the event occurred.\n* Target Phase: The event is at the element\nLike so\n\n![image.png](../assets/image_1687860745168_0.png)\nHere the ``td`` element is the recipient of the event.\n\nAs we can see, every event propagates in both directions.\n\nBy default, event handlers only handle events bubbling up.\nBy setting the ``capture`` [[Boolean]] to true for the ``<node>.addEventListener(...)`` we can switch to the capturing phase instead.\n\n* We can call ``<event Object>.stopPropagation()`` to stop the bubbling and capturing at the current element.\nIf there are multiple handlers on the event in this element, they are still ran. We can call ``<event Object>.stopImmediatePropagation()`` to stop propagation and prevent any other handler to be executed. \nHowever it is recommended to only stop bubbling/capturing if explicitly required as there are obvious behaviors.",536873264]],["^15",[744,"^O","^16",536872736]],["^15",[744,"^@",false,536872736]],["^15",[744,"^F",741,536872736]],["^15",[744,"^X",73,536872736]],["^15",[744,"^V",73,536872736]],["^15",[744,"^U",73,536872943]],["^15",[744,"^U",99,536872943]],["^15",[744,"^U",210,536872943]],["^15",[744,"^?",["^ "],536873264]],["^15",[744,"^H",99,536873264]],["^15",[744,"^H",210,536873264]],["^15",[744,"^17",true,536872736]],["^15",[744,"^;","~u649aadac-0b18-447a-b883-1ba286fb148e",536872736]],["^15",[745,"^U",73,536873070]],["^15",[747,"^Q","The bubbling/capturing allows us to assign a single event handler on the ``document``, then check if the event occurred on a specific [[HTML Element]] by either checking their ``id`` or ``tagName`` or custom attribute and then execute some functionality for them centrally without assigning an event handler for each element separately.",536873410]],["^15",[747,"^O","^16",536873300]],["^15",[747,"^@",false,536873300]],["^15",[747,"^F",743,536873300]],["^15",[747,"^X",73,536873300]],["^15",[747,"^V",73,536873300]],["^15",[747,"^U",73,536873347]],["^15",[747,"^U",120,536873347]],["^15",[747,"^?",["^ "],536873410]],["^15",[747,"^H",120,536873410]],["^15",[747,"^17",true,536873300]],["^15",[747,"^;","~u649afb24-fddb-4526-b9f0-08189384032d",536873300]],["^15",[748,"^Q","Browser Default Actions\nBrowsers perform some default actions like navigating to url on click of ``a`` [[HTML Element]].\nWe can prevent these in 2 ways:\nAssigning custom handler to the event and doing ``<event Object>.preventDefault()``.\nAssigning handler using ``on<event>`` either through [[DOM]] or [[HTML]] attribute and returning ``false``.\nFor ex.:\n```js\nmenu.onclick = function(event) {\n  if (event.target.nodeName != 'A') return;\n\n  let href = event.target.getAttribute('href');\n  alert( href );\n\n  return false; // prevent browser action (don't go to the URL)\n};\n```\n\n* Default Action event propagation is different from normal bubbling/capturing. The former only triggers the browser inbuilt event handlers, the latter triggers both. \n``.preventDefault()`` only stops default action event propagation. \nThe other event handlers can use ``<event Object>.defaultPrevented()`` to get a bool is true if the default event propagation was prevented.",536873947]],["^15",[748,"^O","^16",536873413]],["^15",[748,"^@",false,536873413]],["^15",[748,"^F",749,536873557]],["^15",[748,"^X",73,536873413]],["^15",[748,"^V",73,536873413]],["^15",[748,"^U",30,536873520]],["^15",[748,"^U",73,536873520]],["^15",[748,"^U",114,536873520]],["^15",[748,"^U",120,536873520]],["^15",[748,"^?",["^ "],536873947]],["^15",[748,"^H",30,536873947]],["^15",[748,"^H",114,536873947]],["^15",[748,"^H",120,536873947]],["^15",[748,"^17",true,536873413]],["^15",[748,"^;","~u649afbf5-40ab-400a-b7bd-89f8fc330983",536873413]],["^15",[749,"^Q","Event handlers can return values but they are generally ignored.",536873476]],["^15",[749,"^O","^16",536873466]],["^15",[749,"^@",false,536873466]],["^15",[749,"^F",747,536873466]],["^15",[749,"^X",73,536873466]],["^15",[749,"^V",73,536873466]],["^15",[749,"^U",73,536873467]],["^15",[749,"^?",["^ "],536873476]],["^15",[749,"^17",true,536873466]],["^15",[749,"^;","~u649afee6-c2c6-409f-bddc-a70340d10c05",536873466]],["^15",[751,"^Q","Some events flow into other events, such as ``mousedown`` event also triggers ``focus`` event. These are also part of browser default actions, so if we do ``<event>.preventDefault()``, these don't occur.",536873660]],["^15",[751,"^O","^16",536873560]],["^15",[751,"^@",false,536873560]],["^15",[751,"^F",748,536873560]],["^15",[751,"^X",73,536873560]],["^15",[751,"^V",73,536873560]],["^15",[751,"^U",73,536873561]],["^15",[751,"^?",["^ "],536873660]],["^15",[751,"^17",true,536873560]],["^15",[751,"^;","~u649b030d-0c36-41b0-ba02-9a86d4e7fc19",536873560]],["^15",[752,"^Q","Custom Events\nWe can generate custom events as well as trigger predefined events using [[ECMAScript]].\n\nTo create a custom event we use the ``Event`` Class. It has the args ``let event = new Event(\"<type>\", <optional options Object>);``\n* ``type``: The name/type of the event, can be a predefined event, like \"click\" or custom.\n* Options: An [[Object]] that can have these properties\n``bubbles``: Boolean, if true the event bubbles.\n``cancellable``: Boolean, if true then the default action event may be prevented.\nBoth are false by default.\n\nThen, to fire an event on an [[HTML Element]], we use ``<node>.dispatchEvent(<event Object>)`` from the [[DOM]].\n\nFor ex.:\n```html\n<button id=\"elem\" onclick=\"alert('Click!');\">Autoclick</button>\n\n<script>\n  let event = new Event(\"click\");\n  elem.dispatchEvent(event); //works\n</script>\n```\nHere the ``click`` event is triggered on ``\"elem\"`` and it doesn't bubble up. \n\n* ``<event Object>.isTrusted`` is a property for event Objects and is false for custom triggered events.\n\n* The ``Event`` class is the most base class for all event types. There are more specialized [event interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event) which we can use for more specialized event types. Such as ``new MouseEvent(...)`` would generate a mouse event. \n\n* There's also ``CustomEvent`` [[Class]] which is meant specifically for custom events. It is the same as the base ``Event`` class, but has 1 change and that is that its ``Options`` Object also recognizes an additional property ``detail`` which can have any type of value and is passed with the event.\nTechnically, we can add custom properties to the normal Event and they will be passed around as well but using this class is recommended for truly custom events.",536874612]],["^15",[752,"^O","^16",536873669]],["^15",[752,"^@",false,536873669]],["^15",[752,"^F",751,536873669]],["^15",[752,"^X",73,536873669]],["^15",[752,"^V",73,536873669]],["^15",[752,"^U",24,536874537]],["^15",[752,"^U",39,536874537]],["^15",[752,"^U",73,536874537]],["^15",[752,"^U",75,536874537]],["^15",[752,"^U",114,536874537]],["^15",[752,"^U",120,536874537]],["^15",[752,"^?",["^ "],536874612]],["^15",[752,"^H",24,536874612]],["^15",[752,"^H",39,536874612]],["^15",[752,"^H",75,536874612]],["^15",[752,"^H",114,536874612]],["^15",[752,"^H",120,536874612]],["^15",[752,"^17",true,536873669]],["^15",[752,"^;","~u649b04d1-ca17-48d6-bce5-a4853a03c424",536873669]],["^15",[753,"^Q","[[Browser Event List]]",536873791]],["^15",[753,"^O","^16",536873787]],["^15",[753,"^@",false,536873787]],["^15",[753,"^F",734,536873787]],["^15",[753,"^X",73,536873787]],["^15",[753,"^V",73,536873787]],["^15",[753,"^U",73,536873792]],["^15",[753,"^U",754,536873792]],["^15",[753,"^?",["^ "],536873791]],["^15",[753,"^H",754,536873791]],["^15",[753,"^17",true,536873787]],["^15",[753,"^;","~u649b0b84-0bb0-45ec-8751-dacb1f7c6130",536873787]],["^15",[754,"^K",1687882645226,536873791]],["^15",[754,"^[",756,536873800]],["^15",[754,"^O","^16",536873795]],["^15",[754,"^@",false,536873791]],["^15",[754,"^Y","browser event list",536873791]],["^15",[754,"^11","Browser Event List",536873791]],["^15",[754,"^B",1688009118956,536879069]],["^15",[754,"^;","~u649b0b95-0958-4202-908b-18b59947813b",536873791]],["^15",[755,"^Q","~``contextmenu``\nWhen an element receives a right click.",536873824]],["^15",[755,"^O","^16",536873796]],["^15",[755,"^@",false,536873796]],["^15",[755,"^F",764,536874801]],["^15",[755,"^X",754,536873796]],["^15",[755,"^V",754,536873796]],["^15",[755,"^U",754,536873797]],["^15",[755,"^?",["^ "],536874801]],["^15",[755,"^17",true,536873796]],["^15",[755,"^;","~u649b0b96-618a-4692-8a99-b30ed1b9bbda",536873796]],["^15",[756,"^3","- The main event types are: [Event Interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event) and then each type defines events that use the interface/blueprint of the type.\n- ``click``\n  When an element receives a left click.\n- ``contextmenu``\n  When an element receives a right click.\n- Mouse Events\n  Events that are of the ``MouseEvent`` [[Class]], they map all the common mouse actions such as ``click``, ``dblclick``, ``mousedown``, ``mouseover`` (when a mouse comes over an element), ``mouseout`` (when a mouse leaves an element) etc.\n  \n  All events triggered by mouse and are instance of ``MouseEvent`` have a ``.button`` property which is a [[Number]] as in this table\n  ![image.png](../assets/image_1687928322388_0.png)\n  Similarly, there's a deprecated ``.which`` property.\n  \n  There's also a ``.buttons`` property which is a bitmask of all the mouse buttons pressed at the time of event.\n  \n  * Modifier Keys:\n  If any one or more of the modifier key is pressed, a property with its same name is true.\n  Modifier Keys are\n  ``altKey``,``shiftKey``, ``ctrlKey`` and ``metaKey`` (Cmd on Mac).\n  \n  * Touch\n  Common Touch actions are automatically translated by [[Brower]]s to ``MouseEvent``, like single tap on an element is a ``click`` and long hold is a ``contextmenu``. But they also trigger Touch Events and Pointer Events. \n  \n  * Coordinates\n  MouseEvent class also has pageX/pageY and clientX/clientY [[DOM]] property to denote the cursor position at the time of the event.\n  \n  * Drag and Drop\n  ``dragstart`` and ``dragend`` for when a mouse holds left click over an element and drags it around.\n-\n- ``copy``\n  This event is triggered whenever user tries copying an element.\n- Pointer Event\n  This Class encompasses both Touch and Mouse Events. It is recommended to use this when a standard behavior is expected. Class is ``PointerEvent``.\n  It has properties like \n  ``pointerId``: Unique [[Browser]] generated Id per pointer, useful in multi touch screens.\n  ``pointerType``: A [[String]] from \"pen\", \"mouse\" or \"touch\"\n  ``isPrimary``: Boolean, true if the left click or the first finger has triggered the event\n  ``width`` and ``height``: The size of the touch, for mouse it is always 1.\n  ``pressure``\n  ``tangentialPressure``\n  ``tiltX/Y`` and ``twist``\n  \n  Mapping Pointer Events to Mouse Events\n  ![image.png](../assets/image_1687970654284_0.png)\n  \n  ``pointercancel`` is triggered when a pointer interaction is ongoing and it is abruptly disturbed, such as when the device orientation changes, or the pointer hardware was disabled etc.\n  \n  * Pointer Capturing\n  We can bind a pointer to a [[DOM]] node, this is done using ``<node>.setPointerCapture(<pointerId>)`` and now any pointer event where the pointer has this pointerId, anywhere, targets its events to this node. This capturing also triggers an event, ``gotpointercapture``.\n  This binding can be removed with ``<node>.releasePointerCapture(<pointerId>)``, or automatically if the node is removed or ``pointerup`` or ``pointercancel`` event is triggered. And this releasing also triggers an event, ``lostpointercapture``.\n- Keyboard Events\n  They use the ``KeyboardEvent`` class and common events that use it are, ``keydown``, ``keyup`` etc.\n  \n  Instances of this class have 2 important properties, ``.key`` and ``.code``. ``.key`` is a string that contains the exact character that initiated the event.\n  So for ``z`` it is ``\"z\"``, for ``Shit+z`` which is ``Z`` it is ``\"Z\"`` and so on. It will correctly represent languages and their characters.\n  The ``.code`` is a case-insensitive mapping code for the key, no matter the language or case, if the position of the key is the same as given here in [specs](https://www.w3.org/TR/uievents-code/#keyboard-sections) it will be the same as shown in the image. \n  ![image.png](../assets/image_1688000882369_0.png)\n  \n  For alphabets it is ``Key<char>``, for digits it is ``Digit<digit>`` and for special keys it is the name itself like ``\"Enter\"`` etc. \n  For ex.: \n  ``z`` will be ``\"KeyZ\"``, ``Z`` will be ``\"KeyZ\"`` and so on.\n  However, the ``.code`` is always distinct for a different place on the keyboard, so ``Shift`` will be ``\"Shift\"`` in ``.key`` despite being right or left ``Shift`` whereas ``\"ShiftLeft\"`` or ``\"ShiftRight\"`` will the value in .``code``\n  \n  * ``.repeat``: Boolean, if the key was held down and repeatedly triggered the ``keydown`` event, then this Boolean becomes true.\n  \n  * Preventing Default [[Browser Event]] handler on ``keydown`` handlers is able to stop most of the automatic actions such as ``Ctrl+s`` to save etc. but the [[Browser]] won't stop ``Alt+F4`` and other system keys.\n  \n  * Legacy properties like ``keypress``, ``keycode``, ``charCode``, ``which`` also exist but they are deprecated.\n  \n  * The ``Fn`` key has no mapping in the browser, the browser can simply not catch ``Fn``.\n- ``scroll``\n  Event is triggered when scroll is initiated. As we know from [[DOM]], we can use ``<event Object>.preventDefault()`` or ``<event Object>.preventImmediateDefault()`` to prevent scrolling but we can also do the same through Keyboard or Mouse Events to prevent the scroll.\n- ``focus`` and ``blur``\n  The ``focus`` event is triggered when an element receives the user's focus (the user clicks on it or presses ``Tab`` key) and the ``blur`` event when it loses the focus.\n  \n  We can use [[DOM]] methods to do the same as well with ``<node>.focus()`` and ``<node>.blur()``.\n  The [[HTML]] attribute ``autofocus`` gets the focus on an element whenever the Document loads.\n  \n  * ``blur`` is triggered after the focus is lost, so we can't prevent its default to prevent focus loss.\n  \n  * Focus/Blur generally only works by default on [[HTML Element]]s that take some input/interaction but elements like ``div``, ``p`` etc. are unfocusable hence these events are never triggered for them.\n  \n  * The ``tabindex=\"<number value>\"`` HTML attribute allows any element to be focusable and its value defines its priority and focusability.\n  If ``tabindex`` ==  \"-1\", then it is only focusable by manual focus.\n  If ``tabindex`` ==  \"0\", then it is focusable and doesn't alter focus priority.\n  If ``tabindex`` >= \"1\", the lower the value, the higher the priority, and then pressing ``Tab`` would switch to the next same or lower priority element, so if there are 2 elements, one has value of \"1\" and other has \"2\" then if we press ``Tab`` the focus will jump to the \"1\" and then if we do it again it will switch to \"2\" and so on. \n  After the higher priority elements have got and lost focus, the elements with \"0\" are focused.\n  \n  We can set the same attribute using the [[DOM]]'s ``<node>.tabIndex`` property.\n  \n  * Focus/blur don't Bubble up, but they do go down in the capturing phase. \n  There's also ``focusin`` and ``focusout`` which do bubble and capture down but their handlers must be assigned with ``<node>.addEventListener(...)``.\n- ``change``\n  This event is triggered when an element has finished changing. Like after an ``input`` [[HTML Element]] loses focus.\n- ``input``\n  This event is triggered every time after a value is modified by the user. It is triggered after the modification so preventing default doesn't work.\n- ``cut``/``copy``/``paste``\n  Triggered when their actions occur. We can prevent default to abort the intended action.\n  These events can only be user-initiated and are of ``ClipboardEvent`` class.\n  \n  These events have ``<event Object>.clipboardData`` which has the clipboard data but only in the context of the browser, and we can use ``.getData(\"text/plain\")`` to get its data in plain-text. More details in the [spec](https://www.w3.org/TR/clipboard-apis/#clipboard-event-interfaces).\n- Resource elements have ``load`` and ``error`` events\n  ``load`` is triggered after the resource has been successfully loaded, and ``error`` otherwise.\n-",536879071]],["^15",[756,"^19","~m1688009120350",536879070]],["^15",[756,"^Z","pages/Browser Event List.md",536873800]],["^15",[757,"^Q","The main event types are: [Event Interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event) and then each type defines events that use the interface/blueprint of the type.",536874033]],["^15",[757,"^O","^16",536873951]],["^15",[757,"^@",false,536873951]],["^15",[757,"^F",754,536873951]],["^15",[757,"^X",754,536873951]],["^15",[757,"^V",754,536873951]],["^15",[757,"^U",754,536873952]],["^15",[757,"^?",["^ "],536874033]],["^15",[757,"^17",true,536873951]],["^15",[757,"^;","~u649b1634-7cfe-4a85-a02d-75044398e596",536873951]],["^15",[758,"^Q","Events in the [[Message Queue]]\nEvents are synchronous, so if ``click`` event occurs and then immediately after it ``contextmenu`` occurs then the latter is queued up so the handlers for the ``click`` event will be called first then the ``contextmenu`` handlers.\nThe only exception is when an event handler itself triggers another event, then the event is not queued up and its handlers are processed immediately. \nWe can use [[Scheduling]] to trigger an event from an event and have it processed afterwards.",536874735]],["^15",[758,"^O","^16",536874239]],["^15",[758,"^@",false,536874239]],["^15",[758,"^F",752,536874239]],["^15",[758,"^X",73,536874239]],["^15",[758,"^V",73,536874239]],["^15",[758,"^U",73,536874705]],["^15",[758,"^U",80,536874705]],["^15",[758,"^U",288,536874705]],["^15",[758,"^?",["^ "],536874735]],["^15",[758,"^H",80,536874735]],["^15",[758,"^H",288,536874735]],["^15",[758,"^17",true,536874239]],["^15",[758,"^;","~u649b1bee-d8d3-426e-8b98-8dd5c97a0ca8",536874239]],["^15",[759,"^12",2,536874763]],["^15",[760,"^K",1687927975054,536874764]],["^15",[760,"^O","^16",536874764]],["^15",[760,"^N",20230628,536874764]],["^15",[760,"^@",true,536874764]],["^15",[760,"^Y","jun 28th, 2023",536874764]],["^15",[760,"^11","Jun 28th, 2023",536874764]],["^15",[760,"^B",1687927975054,536874764]],["^15",[760,"^;","~u649bbca7-3eba-4b6b-ace6-323c7619f621",536874764]],["^15",[761,"^Q","",536874765]],["^15",[761,"^O","^16",536874765]],["^15",[761,"^N",20230628,536874765]],["^15",[761,"^@",true,536874765]],["^15",[761,"^F",760,536874765]],["^15",[761,"^X",760,536874765]],["^15",[761,"^V",760,536874765]],["^15",[761,"^U",760,536874766]],["^15",[761,"^?",["^ "],536874765]],["^15",[761,"^17",true,536874765]],["^15",[761,"^;","~u649bbca7-88df-4db2-b8e6-9b7d305a5d9d",536874765]],["^15",[762,"^12",2,536874769]],["^15",[763,"^Q","Mouse Events\nEvents that are of the ``MouseEvent`` [[Class]], they map all the common mouse actions such as ``click``, ``dblclick``, ``mousedown``, ``mouseover`` (when a mouse comes over an element), ``mouseout`` (when a mouse leaves an element) etc.\n\nAll events triggered by mouse and are instance of ``MouseEvent`` have a ``.button`` property which is a [[Number]] as in this table\n![image.png](../assets/image_1687928322388_0.png)\nSimilarly, there's a deprecated ``.which`` property.\n\nThere's also a ``.buttons`` property which is a bitmask of all the mouse buttons pressed at the time of event.\n\n* Modifier Keys:\nIf any one or more of the modifier key is pressed, a property with its same name is true.\nModifier Keys are\n``altKey``,``shiftKey``, ``ctrlKey`` and ``metaKey`` (Cmd on Mac).\n\n* Touch\nCommon Touch actions are automatically translated by [[Brower]]s to ``MouseEvent``, like single tap on an element is a ``click`` and long hold is a ``contextmenu``. But they also trigger Touch Events and Pointer Events. \n\n* Coordinates\nMouseEvent class also has pageX/pageY and clientX/clientY [[DOM]] property to denote the cursor position at the time of the event.\n\n* Drag and Drop\n``dragstart`` and ``dragend`` for when a mouse holds left click over an element and drags it around.",536875369]],["^15",[763,"^O","^16",536874771]],["^15",[763,"^@",false,536874771]],["^15",[763,"^F",755,536874771]],["^15",[763,"^X",754,536874771]],["^15",[763,"^V",754,536874771]],["^15",[763,"^U",75,536875214]],["^15",[763,"^U",100,536875214]],["^15",[763,"^U",114,536875214]],["^15",[763,"^U",210,536875214]],["^15",[763,"^U",754,536875214]],["^15",[763,"^?",["^ "],536875369]],["^15",[763,"^H",75,536875369]],["^15",[763,"^H",100,536875369]],["^15",[763,"^H",114,536875369]],["^15",[763,"^H",210,536875369]],["^15",[763,"^17",true,536874771]],["^15",[763,"^;","~u649bbd01-59f4-4e26-b3ea-8cf63131ec0e",536874771]],["^15",[764,"^Q","~``click``\nWhen an element receives a left click.",536874813]],["^15",[764,"^O","^16",536874784]],["^15",[764,"^@",false,536874784]],["^15",[764,"^F",757,536874784]],["^15",[764,"^X",754,536874784]],["^15",[764,"^V",754,536874784]],["^15",[764,"^U",754,536874785]],["^15",[764,"^?",["^ "],536874813]],["^15",[764,"^17",true,536874784]],["^15",[764,"^;","~u649bbd0a-f3af-49ba-b0c5-830fbb328bc4",536874784]],["^15",[765,"^12",2,536874897]],["^15",[766,"^Q","~``copy``\nThis event is triggered whenever user tries copying an element.",536875247]],["^15",[766,"^O","^16",536875180]],["^15",[766,"^@",false,536875180]],["^15",[766,"^F",768,536875347]],["^15",[766,"^X",754,536875180]],["^15",[766,"^V",754,536875180]],["^15",[766,"^U",754,536875181]],["^15",[766,"^?",["^ "],536875247]],["^15",[766,"^17",true,536875180]],["^15",[766,"^;","~u649c5f94-3aff-49fa-b29f-68215389ea4c",536875180]],["^15",[767,"^Q","Pointer Event\nThis Class encompasses both Touch and Mouse Events. It is recommended to use this when a standard behavior is expected. Class is ``PointerEvent``.\nIt has properties like \n``pointerId``: Unique [[Browser]] generated Id per pointer, useful in multi touch screens.\n``pointerType``: A [[String]] from \"pen\", \"mouse\" or \"touch\"\n``isPrimary``: Boolean, true if the left click or the first finger has triggered the event\n``width`` and ``height``: The size of the touch, for mouse it is always 1.\n``pressure``\n``tangentialPressure``\n``tiltX/Y`` and ``twist``\n\nMapping Pointer Events to Mouse Events\n![image.png](../assets/image_1687970654284_0.png)\n\n``pointercancel`` is triggered when a pointer interaction is ongoing and it is abruptly disturbed, such as when the device orientation changes, or the pointer hardware was disabled etc.\n\n* Pointer Capturing\nWe can bind a pointer to a [[DOM]] node, this is done using ``<node>.setPointerCapture(<pointerId>)`` and now any pointer event where the pointer has this pointerId, anywhere, targets its events to this node. This capturing also triggers an event, ``gotpointercapture``.\nThis binding can be removed with ``<node>.releasePointerCapture(<pointerId>)``, or automatically if the node is removed or ``pointerup`` or ``pointercancel`` event is triggered. And this releasing also triggers an event, ``lostpointercapture``.",536875788]],["^15",[767,"^O","^16",536875337]],["^15",[767,"^@",false,536875337]],["^15",[767,"^F",766,536875337]],["^15",[767,"^X",754,536875337]],["^15",[767,"^V",754,536875337]],["^15",[767,"^U",33,536875664]],["^15",[767,"^U",41,536875664]],["^15",[767,"^U",114,536875664]],["^15",[767,"^U",754,536875664]],["^15",[767,"^?",["^ "],536875788]],["^15",[767,"^H",33,536875788]],["^15",[767,"^H",41,536875788]],["^15",[767,"^H",114,536875788]],["^15",[767,"^17",true,536875337]],["^15",[767,"^;","~u649c630b-64a0-4893-a33d-a1666538d629",536875337]],["^15",[768,"^Q","",536875357]],["^15",[768,"^O","^16",536875347]],["^15",[768,"^@",false,536875347]],["^15",[768,"^F",763,536875347]],["^15",[768,"^X",754,536875347]],["^15",[768,"^V",754,536875347]],["^15",[768,"^U",754,536875348]],["^15",[768,"^?",["^ "],536875357]],["^15",[768,"^17",true,536875347]],["^15",[768,"^;","~u649c6317-49e3-4b34-8108-300c1662bf61",536875347]],["^15",[769,"^Q","Keyboard Events\nThey use the ``KeyboardEvent`` class and common events that use it are, ``keydown``, ``keyup`` etc.\n\nInstances of this class have 2 important properties, ``.key`` and ``.code``. ``.key`` is a string that contains the exact character that initiated the event.\nSo for ``z`` it is ``\"z\"``, for ``Shit+z`` which is ``Z`` it is ``\"Z\"`` and so on. It will correctly represent languages and their characters.\nThe ``.code`` is a case-insensitive mapping code for the key, no matter the language or case, if the position of the key is the same as given here in [specs](https://www.w3.org/TR/uievents-code/#keyboard-sections) it will be the same as shown in the image. \n![image.png](../assets/image_1688000882369_0.png)\n\nFor alphabets it is ``Key<char>``, for digits it is ``Digit<digit>`` and for special keys it is the name itself like ``\"Enter\"`` etc. \nFor ex.: \n``z`` will be ``\"KeyZ\"``, ``Z`` will be ``\"KeyZ\"`` and so on.\nHowever, the ``.code`` is always distinct for a different place on the keyboard, so ``Shift`` will be ``\"Shift\"`` in ``.key`` despite being right or left ``Shift`` whereas ``\"ShiftLeft\"`` or ``\"ShiftRight\"`` will the value in .``code``\n\n* ``.repeat``: Boolean, if the key was held down and repeatedly triggered the ``keydown`` event, then this Boolean becomes true.\n\n* Preventing Default [[Browser Event]] handler on ``keydown`` handlers is able to stop most of the automatic actions such as ``Ctrl+s`` to save etc. but the [[Browser]] won't stop ``Alt+F4`` and other system keys.\n\n* Legacy properties like ``keypress``, ``keycode``, ``charCode``, ``which`` also exist but they are deprecated.\n\n* The ``Fn`` key has no mapping in the browser, the browser can simply not catch ``Fn``.",536876547]],["^15",[769,"^O","^16",536875653]],["^15",[769,"^@",false,536875653]],["^15",[769,"^F",767,536875653]],["^15",[769,"^X",754,536875653]],["^15",[769,"^V",754,536875886]],["^15",[769,"^U",33,536876493]],["^15",[769,"^U",73,536876493]],["^15",[769,"^U",754,536876493]],["^15",[769,"^?",["^ "],536876547]],["^15",[769,"^H",33,536876547]],["^15",[769,"^H",73,536876547]],["^15",[769,"^17",true,536875653]],["^15",[769,"^;","~u649c6b55-79b5-429c-ba15-1a5e89ceade0",536875653]],["^15",[770,"^K",1687977049393,536875799]],["^15",[770,"^O","^16",536875799]],["^15",[770,"^N",20230629,536875799]],["^15",[770,"^@",true,536875799]],["^15",[770,"^Y","jun 29th, 2023",536875799]],["^15",[770,"^11","Jun 29th, 2023",536875799]],["^15",[770,"^B",1687977049393,536875799]],["^15",[770,"^;","~u649c7c59-4373-42af-a320-be1c60a1aa3d",536875799]],["^15",[771,"^Q","",536875800]],["^15",[771,"^O","^16",536875800]],["^15",[771,"^N",20230629,536875800]],["^15",[771,"^@",true,536875800]],["^15",[771,"^F",770,536875800]],["^15",[771,"^X",770,536875800]],["^15",[771,"^V",770,536875800]],["^15",[771,"^U",770,536875801]],["^15",[771,"^?",["^ "],536875800]],["^15",[771,"^17",true,536875800]],["^15",[771,"^;","~u649c7c59-2eed-4ee7-87c8-568fc60c1f0a",536875800]],["^15",[772,"^12",2,536875803]],["^15",[773,"^Q","~``scroll``\nEvent is triggered when scroll is initiated. As we know from [[DOM]], we can use ``<event Object>.preventDefault()`` or ``<event Object>.preventImmediateDefault()`` to prevent scrolling but we can also do the same through Keyboard or Mouse Events to prevent the scroll.",536876635]],["^15",[773,"^O","^16",536876253]],["^15",[773,"^@",false,536876253]],["^15",[773,"^F",769,536876253]],["^15",[773,"^X",754,536876253]],["^15",[773,"^V",754,536876253]],["^15",[773,"^U",114,536876557]],["^15",[773,"^U",754,536876557]],["^15",[773,"^?",["^ "],536876635]],["^15",[773,"^H",114,536876635]],["^15",[773,"^17",true,536876253]],["^15",[773,"^;","~u649cd93d-23bc-4e52-bbc7-1973da0cdf37",536876253]],["^15",[774,"^Q","Forms and control elements\n[Form](https://html.spec.whatwg.org/multipage/forms.html)s in [[HTML]] are an [[HTML Element]] which are treated specially. Similarly, control elements like ``input`` are also treated specially by [[Browser]]s.\n\nThey are available in a named and ordered collection ``<node>.forms`` so all forms directly under a node are available in its ``.forms``. Like the forms in the main document are in ``document.forms``. \nSince they are named and ordered, we can access a form node like ``<node>.forms.myForm`` where ``myForm`` is its ``id`` or with ``<node>.forms[0]`` if its the first form under the node (from top to bottom in the [[HTML]] Document).\nFor ex.:\n```html\n<form name=\"my\">\n  <input name=\"one\" value=\"1\">\n  <input name=\"two\" value=\"2\">\n</form>\n\n<script>\n\n  let form = document.forms.my; // <form name=\"my\"> element\n\n  let elem = form.elements.one; // <input name=\"one\"> element\n\n  alert(elem.value); // 1\n</script>\n```\n``Form`` nodes have a prop ``.elements`` which is also a named Collection of nodes under the form but the ``name`` is used instead of the ``id``. If there are multiple elements with the same ``name``, then it returns a collection instead of a node. All control elements under a form, despite any level are available to ``<form>.elements``.\n\n* All elements under a ``<form>.elements`` are also properties on the form Object itself, however, if the name of the form changes then the old properties and new ones are still valid.\nThat is\n```html\n<form name=\"yo\">\n  <input name = \"x\" >\n</form>\n\n<script>\n let form = document.forms.yo;\n let x= form.x; //works\n x.name=\"y\";\nlet y = form.x; //still works\nlet y1= form.elements.x; //doesnt exist\n\n</script>\n```\n\n* All elements under a form have a backreference to the form itself which is kept in ``<node>.form`` property of the nodes under the form.\n![image.png](../assets/image_1688003269350_0.png)\n\n* Forms have a [[Browser Event]] ``submit`` which is triggered when the form submits. We can also use ``<form node>.submit()`` to do so manually.\nFor ex.:\n```js\nlet form = document.createElement('form');\nform.action = 'https://google.com/search';\nform.method = 'GET';\n\nform.innerHTML = '<input name=\"q\" value=\"test\">';\n\n// the form must be in the document to submit it\ndocument.body.append(form);\n\nform.submit();\n```",536878290]],["^15",[774,"^O","^16",536876638]],["^15",[774,"^@",false,536876638]],["^15",[774,"^F",241,536876638]],["^15",[774,"^X",114,536876638]],["^15",[774,"^V",114,536877107]],["^15",[774,"^U",30,536878242]],["^15",[774,"^U",33,536878242]],["^15",[774,"^U",73,536878242]],["^15",[774,"^U",114,536878242]],["^15",[774,"^U",120,536878242]],["^15",[774,"^?",["^ "],536878290]],["^15",[774,"^H",30,536878290]],["^15",[774,"^H",33,536878290]],["^15",[774,"^H",73,536878290]],["^15",[774,"^H",120,536878290]],["^15",[774,"^17",true,536876638]],["^15",[774,"^;","~u649cdfb0-5fb2-47ea-9a02-0717eb279f75",536876638]],["^15",[775,"^Q","Page Events\nThere are a few important [[Browser Event]]s that trigger on an [[HTML]] page's lifecycle.\n\nThe events are triggered in this order:\n``DOMContentLoaded``: The DOM is loaded and ready. The [[<script>]]s of the page are loaded as well, but [[Async]] scripts and dynamically generated scripts are loaded after this event. \nThe event handler has to be on the ``document`` [[DOM]] node. \n``load``: External resources are loaded, like [[CSS]] stylesheets, images etc.\n``beforeunload`` and ``unload``: The user is has gone to another page and now the page is unloading. \n\nFor load/unload the [[window]] has to take the event handler.\n\n* ``document.readyState``: This [[DOM Class Property]] has one of 3 values \"loading\" (doc is loading), \"interactive\" (doc is fully read) and \"complete\" (doc is read and ext. resources loaded) and indicates the readiness of the document's loading. \nThe ``readystatechange`` event is triggered when this property changes.",536878624]],["^15",[775,"^O","^16",536877274]],["^15",[775,"^@",false,536877274]],["^15",[775,"^F",774,536877274]],["^15",[775,"^X",114,536877274]],["^15",[775,"^V",114,536878569]],["^15",[775,"^U",29,536878579]],["^15",[775,"^U",30,536878579]],["^15",[775,"^U",73,536878579]],["^15",[775,"^U",78,536878579]],["^15",[775,"^U",114,536878579]],["^15",[775,"^U",128,536878579]],["^15",[775,"^U",209,536878579]],["^15",[775,"^U",211,536878579]],["^15",[775,"^?",["^ "],536878624]],["^15",[775,"^H",29,536878624]],["^15",[775,"^H",30,536878624]],["^15",[775,"^H",73,536878624]],["^15",[775,"^H",78,536878624]],["^15",[775,"^H",114,536878624]],["^15",[775,"^H",128,536878624]],["^15",[775,"^H",209,536878624]],["^15",[775,"^H",211,536878624]],["^15",[775,"^17",true,536877274]],["^15",[775,"^;","~u649ce293-b92d-46f6-af7d-5ca58e0126ed",536877274]],["^15",[776,"^Q","~``focus`` and ``blur``\nThe ``focus`` event is triggered when an element receives the user's focus (the user clicks on it or presses ``Tab`` key) and the ``blur`` event when it loses the focus.\n\nWe can use [[DOM]] methods to do the same as well with ``<node>.focus()`` and ``<node>.blur()``.\nThe [[HTML]] attribute ``autofocus`` gets the focus on an element whenever the Document loads.\n\n* ``blur`` is triggered after the focus is lost, so we can't prevent its default to prevent focus loss.\n\n* Focus/Blur generally only works by default on [[HTML Element]]s that take some input/interaction but elements like ``div``, ``p`` etc. are unfocusable hence these events are never triggered for them.\n\n* The ``tabindex=\"<number value>\"`` HTML attribute allows any element to be focusable and its value defines its priority and focusability.\nIf ``tabindex`` ==  \"-1\", then it is only focusable by manual focus.\nIf ``tabindex`` ==  \"0\", then it is focusable and doesn't alter focus priority.\nIf ``tabindex`` >= \"1\", the lower the value, the higher the priority, and then pressing ``Tab`` would switch to the next same or lower priority element, so if there are 2 elements, one has value of \"1\" and other has \"2\" then if we press ``Tab`` the focus will jump to the \"1\" and then if we do it again it will switch to \"2\" and so on. \nAfter the higher priority elements have got and lost focus, the elements with \"0\" are focused.\n\nWe can set the same attribute using the [[DOM]]'s ``<node>.tabIndex`` property.\n\n* Focus/blur don't Bubble up, but they do go down in the capturing phase. \nThere's also ``focusin`` and ``focusout`` which do bubble and capture down but their handlers must be assigned with ``<node>.addEventListener(...)``.",536877985]],["^15",[776,"^O","^16",536877350]],["^15",[776,"^@",false,536877350]],["^15",[776,"^F",773,536877350]],["^15",[776,"^X",754,536877350]],["^15",[776,"^V",754,536877350]],["^15",[776,"^U",30,536877528]],["^15",[776,"^U",114,536877528]],["^15",[776,"^U",120,536877528]],["^15",[776,"^U",754,536877528]],["^15",[776,"^?",["^ "],536877985]],["^15",[776,"^H",30,536877985]],["^15",[776,"^H",114,536877985]],["^15",[776,"^H",120,536877985]],["^15",[776,"^17",true,536877350]],["^15",[776,"^;","~u649ce827-57f3-4903-a24d-f2a80de735f6",536877350]],["^15",[777,"^Q","~``change``\nThis event is triggered when an element has finished changing. Like after an ``input`` [[HTML Element]] loses focus.",536878019]],["^15",[777,"^O","^16",536877894]],["^15",[777,"^@",false,536877894]],["^15",[777,"^F",776,536877894]],["^15",[777,"^X",754,536877894]],["^15",[777,"^V",754,536877894]],["^15",[777,"^U",120,536878004]],["^15",[777,"^U",754,536878004]],["^15",[777,"^?",["^ "],536878019]],["^15",[777,"^H",120,536878019]],["^15",[777,"^17",true,536877894]],["^15",[777,"^;","~u649ceb26-dd8f-4fbf-b775-51ea4945e1e1",536877894]],["^15",[778,"^Q","~``input``\nThis event is triggered every time after a value is modified by the user. It is triggered after the modification so preventing default doesn't work.",536878072]],["^15",[778,"^O","^16",536878022]],["^15",[778,"^@",false,536878022]],["^15",[778,"^F",777,536878022]],["^15",[778,"^X",754,536878022]],["^15",[778,"^V",754,536878022]],["^15",[778,"^U",754,536878023]],["^15",[778,"^?",["^ "],536878072]],["^15",[778,"^17",true,536878022]],["^15",[778,"^;","~u649cef0b-fe12-44d3-ab52-bd1c81304cad",536878022]],["^15",[779,"^Q","~``cut``/``copy``/``paste``\nTriggered when their actions occur. We can prevent default to abort the intended action.\nThese events can only be user-initiated and are of ``ClipboardEvent`` class.\n\nThese events have ``<event Object>.clipboardData`` which has the clipboard data but only in the context of the browser, and we can use ``.getData(\"text/plain\")`` to get its data in plain-text. More details in the [spec](https://www.w3.org/TR/clipboard-apis/#clipboard-event-interfaces).",536878234]],["^15",[779,"^O","^16",536878051]],["^15",[779,"^@",false,536878051]],["^15",[779,"^F",778,536878051]],["^15",[779,"^X",754,536878051]],["^15",[779,"^V",754,536878085]],["^15",[779,"^U",754,536878052]],["^15",[779,"^?",["^ "],536878234]],["^15",[779,"^17",true,536878051]],["^15",[779,"^;","~u649cef2d-88c0-4579-a7aa-0107544b55d2",536878051]],["^15",[780,"^Q","Resource elements have ``load`` and ``error`` events\n``load`` is triggered after the resource has been successfully loaded, and ``error`` otherwise.",536879069]],["^15",[780,"^O","^16",536878235]],["^15",[780,"^@",false,536878235]],["^15",[780,"^F",779,536878235]],["^15",[780,"^X",754,536878235]],["^15",[780,"^V",754,536878235]],["^15",[780,"^U",754,536878236]],["^15",[780,"^?",["^ "],536879069]],["^15",[780,"^17",true,536878235]],["^15",[780,"^;","~u649cf036-03b2-4459-b349-29b6276aa3ec",536878235]],["^15",[781,"^Q","[[MutationObserver]]",536879381]],["^15",[781,"^O","^16",536878294]],["^15",[781,"^@",false,536878294]],["^15",[781,"^F",775,536878569]],["^15",[781,"^X",114,536878294]],["^15",[781,"^V",114,536878294]],["^15",[781,"^U",114,536879382]],["^15",[781,"^U",789,536879382]],["^15",[781,"^?",["^ "],536879381]],["^15",[781,"^H",789,536879381]],["^15",[781,"^17",true,536878294]],["^15",[781,"^;","~u649cf3fb-52f2-4f51-84b2-7fa3d8902f79",536878294]],["^15",[782,"^Q","",536878630]],["^15",[782,"^O","^16",536878630]],["^15",[782,"^@",false,536878630]],["^15",[782,"^F",31,536878630]],["^15",[782,"^X",31,536878630]],["^15",[782,"^V",31,536878630]],["^15",[782,"^U",31,536878631]],["^15",[782,"^?",["^ "],536878630]],["^15",[782,"^17",true,536878630]],["^15",[782,"^;","~u649cf640-12b6-48c4-b30e-71a54e631734",536878630]],["^15",[783,"^Q","",536878666]],["^15",[783,"^O","^16",536878640]],["^15",[783,"^F",35,536878640]],["^15",[783,"^X",29,536878640]],["^15",[783,"^V",29,536878640]],["^15",[783,"^U",29,536878667]],["^15",[783,"^?",["^ "],536878666]],["^15",[783,"^17",true,536878640]],["^15",[783,"^;","~u649cf680-55a4-4ad9-8e57-1033ee0cfdd1",536878640]],["^15",[784,"^Q","~``defer`` script\n[[Defer]]rs the script loading.\nThe script is loaded in the background and the rest of the [[HTML]] document doesn't wait for it. Then when the DOM is built and ready, just before the ``DOMContentLoaded`` [[Browser Event]], the deferred scripts are executed. The event waits for these scripts to finish loading and executing and then finally triggers.\n\nThat is, the order of loading and execution is\n[[HTML]] Document is loaded\nDOM is loaded\nDeferred Scripts are loaded parallely to each other, but executed in their relative order on the Document.\n``DOMContentLoaded`` event is triggered\n\nFor ex.:\n```html\n<script defer src=\"https://javascript.info/article/script-async-defer/long.js\"></script>\n```\nThis attribute is only valid on external scripts.",536878857]],["^15",[784,"^O","^16",536878670]],["^15",[784,"^F",34,536878670]],["^15",[784,"^X",29,536878670]],["^15",[784,"^V",29,536878813]],["^15",[784,"^U",29,536878737]],["^15",[784,"^U",30,536878737]],["^15",[784,"^U",31,536878737]],["^15",[784,"^U",73,536878737]],["^15",[784,"^?",["^ "],536878857]],["^15",[784,"^H",30,536878857]],["^15",[784,"^H",31,536878857]],["^15",[784,"^H",73,536878857]],["^15",[784,"^17",true,536878670]],["^15",[784,"^;","~u649cf717-cfc4-400b-87dc-3987e4e077e3",536878670]],["^15",[785,"^Q","",536879060]],["^15",[785,"^O","^16",536879060]],["^15",[785,"^@",false,536879060]],["^15",[785,"^F",780,536879060]],["^15",[785,"^X",754,536879060]],["^15",[785,"^V",754,536879060]],["^15",[785,"^U",754,536879061]],["^15",[785,"^?",["^ "],536879060]],["^15",[785,"^17",true,536879060]],["^15",[785,"^;","~u649cf999-34f4-4a99-a207-2b83e37c150d",536879060]],["^15",[786,"^Q","~``crossorigin``\nThis attribute is necessary for cross-origin access/[[CORS]], that is when the external script being loaded is on another domain.",536879138]],["^15",[786,"^O","^16",536879072]],["^15",[786,"^F",36,536879072]],["^15",[786,"^X",29,536879072]],["^15",[786,"^V",29,536879072]],["^15",[786,"^U",29,536879117]],["^15",[786,"^U",501,536879117]],["^15",[786,"^?",["^ "],536879138]],["^15",[786,"^H",501,536879138]],["^15",[786,"^17",true,536879072]],["^15",[786,"^;","~u649cf9c2-f887-4a18-8959-913517ca065a",536879072]],["^15",[787,"^Q","There are 2 requirements for CORS loaded resources to be allowed loading in our own [[HTML]] document by the [[Brower]]\n\nThe resource/ [[HTML Element]] must have the ``crossorigin=\"<value>\"`` attribute\nIf the value to this attribute is \"anonymous\" and the server responds to our [[HTTP]] request with a response with header ``Access-Control-Allow-Origin`` with value \"\\*\" then it is allowed.\n\nIf the value to this attribute is \"use-credentials\" and the server responds with ``Access-Control-Allow-Origin`` with value \"*\" or \"<our domain name>\" as well as ``Access-Control-Allow-Credentials`` with value \"true\" then it is allowed.",536880783]],["^15",[787,"^O","^16",536879123]],["^15",[787,"^@",false,536879123]],["^15",[787,"^F",501,536879123]],["^15",[787,"^X",501,536879123]],["^15",[787,"^V",501,536879123]],["^15",[787,"^U",30,536879213]],["^15",[787,"^U",113,536879213]],["^15",[787,"^U",120,536879213]],["^15",[787,"^U",210,536879213]],["^15",[787,"^U",501,536879213]],["^15",[787,"^?",["^ "],536880783]],["^15",[787,"^H",30,536880783]],["^15",[787,"^H",113,536880783]],["^15",[787,"^H",120,536880783]],["^15",[787,"^H",210,536880783]],["^15",[787,"^17",true,536879123]],["^15",[787,"^;","~u649cfa14-73fa-4231-bab8-544333786118",536879123]],["^15",[788,"^3","- There are 2 requirements for CORS loaded resources to be allowed loading in our own [[HTML]] document by the [[Brower]]\n  \n  The resource/ [[HTML Element]] must have the ``crossorigin=\"<value>\"`` attribute\n  If the value to this attribute is \"anonymous\" and the server responds to our [[HTTP]] request with a response with header ``Access-Control-Allow-Origin`` with value \"\\*\" then it is allowed.\n  \n  If the value to this attribute is \"use-credentials\" and the server responds with ``Access-Control-Allow-Origin`` with value \"*\" or \"<our domain name>\" as well as ``Access-Control-Allow-Credentials`` with value \"true\" then it is allowed.",536880785]],["^15",[788,"^19","~m1688096094520",536880784]],["^15",[788,"^Z","pages/CORS.md",536879143]],["^15",[789,"^K",1688009572963,536879381]],["^15",[789,"^[",791,536879390]],["^15",[789,"^O","^16",536879385]],["^15",[789,"^@",false,536879381]],["^15",[789,"^Y","mutationobserver",536879381]],["^15",[789,"^11","MutationObserver",536879381]],["^15",[789,"^B",1688010224085,536879862]],["^15",[789,"^;","~u649cfb64-aa86-4699-b53c-94aefe013346",536879381]],["^15",[790,"^Q","This is a built-in [[Object]] that observes a given [[DOM]] node and triggers a callback [[Function]] when it detects a change in the node.\n\nWe can create an instance with ``let observer= new MutationObserver(<callback function>)`` then attach it to a node with ``<observer Object>.observe(<node>, <optional config Object>)`` where the config Object is an Object with properties\n``childList``: Boolean, should observe changes on direct child of node\n``subtree``: Boolean, should observe changes on any level child of node\n``attributes``: Boolean, should observe changes on attributes of node\n``attributeFilter``: an [[Array]] of attribute names, to observe only selected ones.\n``characterData``: Boolean, should observe ``<node>.data`` (text content)\n\nThe callback receives an Object of ``MutationRecord`` class. This instance has some useful properties like \n![image.png](../assets/image_1688010111752_0.png)\nas given in the [spec](https://dom.spec.whatwg.org/#mutationrecord) \n\nThen to stop observing we can use ``<observer Object>.disconnect()`` .\n* We can use ``<observer Object>.takeRecords()`` to get a list of unprocessed records for which the callback hasn't been executed yet. These records are removed from the active processing queue.\n\n* [[Garbage Collection]] isn't affected by MutationObserver.",536879862]],["^15",[790,"^O","^16",536879386]],["^15",[790,"^@",false,536879386]],["^15",[790,"^F",789,536879386]],["^15",[790,"^X",789,536879386]],["^15",[790,"^V",789,536879386]],["^15",[790,"^U",39,536879850]],["^15",[790,"^U",44,536879850]],["^15",[790,"^U",47,536879850]],["^15",[790,"^U",114,536879850]],["^15",[790,"^U",293,536879850]],["^15",[790,"^U",789,536879850]],["^15",[790,"^?",["^ "],536879862]],["^15",[790,"^H",39,536879862]],["^15",[790,"^H",44,536879862]],["^15",[790,"^H",47,536879862]],["^15",[790,"^H",114,536879862]],["^15",[790,"^H",293,536879862]],["^15",[790,"^17",true,536879386]],["^15",[790,"^;","~u649cfb65-11f3-4a40-81a1-bb0e05736de4",536879386]],["^15",[791,"^3","- This is a built-in [[Object]] that observes a given [[DOM]] node and triggers a callback [[Function]] when it detects a change in the node.\n  \n  We can create an instance with ``let observer= new MutationObserver(<callback function>)`` then attach it to a node with ``<observer Object>.observe(<node>, <optional config Object>)`` where the config Object is an Object with properties\n  ``childList``: Boolean, should observe changes on direct child of node\n  ``subtree``: Boolean, should observe changes on any level child of node\n  ``attributes``: Boolean, should observe changes on attributes of node\n  ``attributeFilter``: an [[Array]] of attribute names, to observe only selected ones.\n  ``characterData``: Boolean, should observe ``<node>.data`` (text content)\n  \n  The callback receives an Object of ``MutationRecord`` class. This instance has some useful properties like \n  ![image.png](../assets/image_1688010111752_0.png)\n  as given in the [spec](https://dom.spec.whatwg.org/#mutationrecord) \n  \n  Then to stop observing we can use ``<observer Object>.disconnect()`` .\n  * We can use ``<observer Object>.takeRecords()`` to get a list of unprocessed records for which the callback hasn't been executed yet. These records are removed from the active processing queue.\n  \n  * [[Garbage Collection]] isn't affected by MutationObserver.\n-\n-",536879864]],["^15",[791,"^19","~m1688010225024",536879863]],["^15",[791,"^Z","pages/MutationObserver.md",536879390]],["^15",[792,"^Q","",536879674]],["^15",[792,"^O","^16",536879674]],["^15",[792,"^@",false,536879674]],["^15",[792,"^F",793,536879816]],["^15",[792,"^X",789,536879674]],["^15",[792,"^V",789,536879674]],["^15",[792,"^U",789,536879675]],["^15",[792,"^?",["^ "],536879674]],["^15",[792,"^17",true,536879674]],["^15",[792,"^;","~u649cfcbc-bca6-403f-84bc-4313f4874f25",536879674]],["^15",[793,"^Q","",536879816]],["^15",[793,"^O","^16",536879816]],["^15",[793,"^@",false,536879816]],["^15",[793,"^F",790,536879816]],["^15",[793,"^X",789,536879816]],["^15",[793,"^V",789,536879816]],["^15",[793,"^U",789,536879817]],["^15",[793,"^?",["^ "],536879816]],["^15",[793,"^17",true,536879816]],["^15",[793,"^;","~u649cfdb1-9ea0-49bf-8ea3-943d9efe2e8e",536879816]],["^15",[794,"^Q","Range\nThis [[Class]] allows us to select a range of data from the nodes. \n\nWe can create an instance with ``let range= new Range();`` then each Range object/instance requires 2 endpoints, start and end. \nWe set the start with ``<range Object>.setStart(<node>, <offset>)`` and end with ``<range Object>.setEnd(<node>, <offset>)``. \nThe start and end node can be different. The offset must be a [[Number]].\n\nIf the start node is a text node, then it returns the given position of characters in its text content from start to end encompassing all text nodes from start to end.\nFor ex.:\n```html\n<p id=\"p\">Hello</p>\n<p id=\"p2\">Example: <i>italic</i> and <b>bold</b></p>\n<script>\n  let range = new Range();\n  range.setStart(p.firstChild, 2); //the first child is the text node\n  range.setEnd(p.firstChild, 4);\n\n  // toString of a range returns its content as text\n  console.log(range); // ll\n\n  range.setStart(p2.firstChild, 2);\n  range.setEnd(p2.querySelector('b').firstChild, 3);\n\n  console.log(range); // ample: italic and bol\n</script>\n```\n![image.png](../assets/image_1688010650331_0.png)\nand\n![image.png](../assets/image_1688010758960_0.png)\n\nIf the start node is an element node, then it returns the nodes in the range.\nFor ex.:\n```js\n<p id=\"p\">Example: <i>italic</i> and <b>bold</b></p>\n\n<script>\n  let range = new Range();\n\n  range.setStart(p, 0);\n  range.setEnd(p, 2);\n\n  // toString of a range returns its content as text, without tags\n  console.log(range); // Example: italic\n</script>\n```\n\nEvery range object has these properties\n![image.png](../assets/image_1688010962681_0.png)\n\nThere are more selection methods and also range editing methods [here](https://javascript.info/selection-range#range-selection-methods)",536880279]],["^15",[794,"^O","^16",536879865]],["^15",[794,"^@",false,536879865]],["^15",[794,"^F",781,536879865]],["^15",[794,"^X",114,536879865]],["^15",[794,"^V",114,536879865]],["^15",[794,"^U",75,536880164]],["^15",[794,"^U",100,536880164]],["^15",[794,"^U",114,536880164]],["^15",[794,"^?",["^ "],536880279]],["^15",[794,"^H",75,536880279]],["^15",[794,"^H",100,536880279]],["^15",[794,"^17",true,536879865]],["^15",[794,"^;","~u649cfe0d-4efa-4aee-b6b8-ee632879e161",536879865]],["^15",[795,"^Q","Selection\nWhilst Range selects a given range, it doesn't show anything visually. However ``Selection`` Objects can show selections visually on the page in the [[Browser]], they can be obtained with either ``document.getSelection()`` or ``window.getSelection()``.\nIn firefox, multiple separate regions can be selected with ``Ctrl+click`` like so\n![image.png](../assets/image_1688011215800_0.png)\n\nbut in other browsers there can only be a single selection at any time.\nThis Object has these properties\n![image.png](../assets/image_1688011308957_0.png)\n\nSimilarly, there are many methods too [here](https://javascript.info/selection-range#selection-methods).\n* [[Browser Event]] \n``selectstart`` and ``selectionchange`` are triggered if an element is selected or if the selection changes.\n\n* Both select and range have much more comprehensive utility and interactions with other elements such as with Form [[HTML Element]], given [here](https://javascript.info/selection-range).",536880510]],["^15",[795,"^O","^16",536880191]],["^15",[795,"^@",false,536880191]],["^15",[795,"^F",794,536880191]],["^15",[795,"^X",114,536880191]],["^15",[795,"^V",114,536880191]],["^15",[795,"^U",33,536880489]],["^15",[795,"^U",73,536880489]],["^15",[795,"^U",114,536880489]],["^15",[795,"^U",120,536880489]],["^15",[795,"^?",["^ "],536880510]],["^15",[795,"^H",33,536880510]],["^15",[795,"^H",73,536880510]],["^15",[795,"^H",120,536880510]],["^15",[795,"^17",true,536880191]],["^15",[795,"^;","~u649d004f-8766-47d7-b7ee-8b084cd536e7",536880191]],["^15",[796,"^12",2,536880514]],["^15",[797,"^12",2,536880519]],["^15",[798,"^12",2,536880540]],["^15",[799,"^12",2,536880543]],["^15",[800,"^12",2,536880571]],["^15",[801,"^K",1688095210797,536880572]],["^15",[801,"^O","^16",536880572]],["^15",[801,"^N",20230630,536880572]],["^15",[801,"^@",true,536880572]],["^15",[801,"^Y","jun 30th, 2023",536880572]],["^15",[801,"^11","Jun 30th, 2023",536880572]],["^15",[801,"^B",1688095210797,536880572]],["^15",[801,"^;","~u649e49ea-f901-493f-aec6-4277b7255ed3",536880572]],["^15",[802,"^Q","",536880573]],["^15",[802,"^O","^16",536880573]],["^15",[802,"^N",20230630,536880573]],["^15",[802,"^@",true,536880573]],["^15",[802,"^F",801,536880573]],["^15",[802,"^X",801,536880573]],["^15",[802,"^V",801,536880573]],["^15",[802,"^U",801,536880574]],["^15",[802,"^?",["^ "],536880573]],["^15",[802,"^17",true,536880573]],["^15",[802,"^;","~u649e49ea-51dc-44d5-8fd6-a3d8ea8ddf5a",536880573]],["^15",[803,"^Q","Popup\n``window.open(\"<url>\", \"<name>\", <params Object>)`` uses [[window]] Object to do so. \nThe params Object can take properties like window's position, height, width etc. Check [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) for specs. \n\n* They are blocked automatically by the browser if they are not called from a user-initiated event's handler.\n\n* The method returns a [[window]] Object, this refers to the window Object of the opened popup and we can access its [[DOM]] through here, but this access is only possible for [[Same Origin]] windows. \n\n* Similarly, it is possible for the popup site to access its popup opener window using ``window.opener`` which returns a reference to the window Object of the opener, given [[Same Origin]].\n\n* In the popup window or the opener we can close the popup window with ``<popup window Object>.close()``. This method is available otherwise as well to [[window]] but browsers ignore it unless the popup window is being closed.\n\n* There are other methods of the window Object that work (sometimes only) on popups, moving and resizing the popup window using popup window's Object works only for popups\nThere's ``.moveTo/By(x,y)``, ``.resizeTo/By(x,y)`` and even the ``resize`` [[Browser Event]] on the window Object to track these.  \n\nScrolling works on any [[window]] Object\nThere's the ``.scrollTo/by(x,y)``, ``scrollIntoView(<optional Boolean shouldbetop>)`` and even a ``scroll`` Event on the window. \n\n* The focus and blur [[Browser Event]]s work on the window Object too, and we can do ``<popup window Object>.focus()`` and ``.blur()`` to manually do so as well. Though browsers may ignore these calls to prevent focus loop.",536881376]],["^15",[803,"^O","^16",536880578]],["^15",[803,"^@",false,536880578]],["^15",[803,"^F",210,536880578]],["^15",[803,"^X",210,536880578]],["^15",[803,"^V",210,536880578]],["^15",[803,"^U",73,536881257]],["^15",[803,"^U",114,536881257]],["^15",[803,"^U",209,536881257]],["^15",[803,"^U",210,536881257]],["^15",[803,"^U",807,536881257]],["^15",[803,"^?",["^ "],536881376]],["^15",[803,"^H",73,536881376]],["^15",[803,"^H",114,536881376]],["^15",[803,"^H",209,536881376]],["^15",[803,"^H",807,536881376]],["^15",[803,"^17",true,536880578]],["^15",[803,"^;","~u649e4a6d-4cf1-45d5-a027-ee3d3bb38123",536880578]],["^15",[804,"^3","- Popup\n  ``window.open(\"<url>\", \"<name>\", <params Object>)`` uses [[window]] Object to do so. \n  The params Object can take properties like window's position, height, width etc. Check [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) for specs. \n  \n  * They are blocked automatically by the browser if they are not called from a user-initiated event's handler.\n  \n  * The method returns a [[window]] Object, this refers to the window Object of the opened popup and we can access its [[DOM]] through here, but this access is only possible for [[Same Origin]] windows. \n  \n  * Similarly, it is possible for the popup site to access its popup opener window using ``window.opener`` which returns a reference to the window Object of the opener, given [[Same Origin]].\n  \n  * In the popup window or the opener we can close the popup window with ``<popup window Object>.close()``. This method is available otherwise as well to [[window]] but browsers ignore it unless the popup window is being closed.\n  \n  * There are other methods of the window Object that work (sometimes only) on popups, moving and resizing the popup window using popup window's Object works only for popups\n  There's ``.moveTo/By(x,y)``, ``.resizeTo/By(x,y)`` and even the ``resize`` [[Browser Event]] on the window Object to track these.  \n  \n  Scrolling works on any [[window]] Object\n  There's the ``.scrollTo/by(x,y)``, ``scrollIntoView(<optional Boolean shouldbetop>)`` and even a ``scroll`` Event on the window. \n  \n  * The focus and blur [[Browser Event]]s work on the window Object too, and we can do ``<popup window Object>.focus()`` and ``.blur()`` to manually do so as well. Though browsers may ignore these calls to prevent focus loop.\n- Cross-Window Messaging\n  The sender window sends a message using ``postMessage(<data Object>, \"<target url>\")`` method ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)). The data Object is serialized but for compatibility with IE, it must be a string.\n  \n  Then if the target url matches a window, the window receives a ``message`` [[Browser Event]] event which has 3 properties \n  ``data``, ``origin`` and ``source``.\n-\n-",536882378]],["^15",[804,"^19","~m1688102776238",536882377]],["^15",[804,"^Z","pages/Brower.md",536880581]],["^15",[805,"^Q","",536880787]],["^15",[805,"^O","^16",536880787]],["^15",[805,"^@",false,536880787]],["^15",[805,"^F",821,536882229]],["^15",[805,"^X",210,536880787]],["^15",[805,"^V",210,536880787]],["^15",[805,"^U",210,536880788]],["^15",[805,"^?",["^ "],536880787]],["^15",[805,"^17",true,536880787]],["^15",[805,"^;","~u649e4d77-2031-4e69-b5c7-a28d38b9b750",536880787]],["^15",[806,"^Q","Cross-Window Messaging\nThe sender window sends a message using ``postMessage(<data Object>, \"<target url>\")`` method ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)). The data Object is serialized but for compatibility with IE, it must be a string.\n\nThen if the target url matches a window, the window receives a ``message`` [[Browser Event]] event which has 3 properties \n``data``, ``origin`` and ``source``.",536882376]],["^15",[806,"^O","^16",536880931]],["^15",[806,"^@",false,536880931]],["^15",[806,"^F",803,536880931]],["^15",[806,"^X",210,536880931]],["^15",[806,"^V",210,536882357]],["^15",[806,"^U",73,536882373]],["^15",[806,"^U",210,536882373]],["^15",[806,"^?",["^ "],536882376]],["^15",[806,"^H",73,536882376]],["^15",[806,"^17",true,536880931]],["^15",[806,"^;","~u649e4e43-234d-4976-ae58-87fc43542a04",536880931]],["^15",[807,"^5",809,536881264]],["^15",[807,"^K",1688099087153,536881256]],["^15",[807,"^[",811,536881268]],["^15",[807,"^O","^16",536881260]],["^15",[807,"^@",false,536881256]],["^15",[807,"^Y","same origin",536881256]],["^15",[807,"^11","Same Origin",536881256]],["^15",[807,"^?",["^ ","^1:",["^1;",["Same Site Policy"]]],536881264]],["^15",[807,"^4",["^ ","^1:","Same Site Policy"],536881264]],["^15",[807,"^B",1688100114147,536881913]],["^15",[807,"^;","~u649e590f-8a5a-4a6e-bf73-09f4cfe57e28",536881256]],["^15",[808,"^Q","alias:: Same Site Policy",536881264]],["^15",[808,"^O","^16",536881261]],["^15",[808,"^1>",["^1;",[]],536881264]],["^15",[808,"^@",false,536881261]],["^15",[808,"^F",807,536881261]],["^15",[808,"^X",807,536881261]],["^15",[808,"^V",807,536881261]],["^15",[808,"^U",807,536881265]],["^15",[808,"^U",809,536881265]],["^15",[808,"^:",true,536881264]],["^15",[808,"^?",["^ ","^1:",["^1;",["Same Site Policy"]]],536881264]],["^15",[808,"^J",["^14",["^1:"]],536881264]],["^15",[808,"^4",["^ ","^1:","Same Site Policy"],536881264]],["^15",[808,"^H",809,536881264]],["^15",[808,"^17",true,536881261]],["^15",[808,"^;","~u649e5910-7607-4d21-abd5-9d36164ba535",536881261]],["^15",[809,"^K",1688099107251,536881264]],["^15",[809,"^@",false,536881264]],["^15",[809,"^Y","same site policy",536881264]],["^15",[809,"^11","Same Site Policy",536881264]],["^15",[809,"^B",1688099107251,536881264]],["^15",[810,"^Q","This policy is enforced by the [[Brower]]s to protect users from having data of one window/frame  being stolen by other windows/frames. \nBrowsers enforce this by only allowing windows/frames from same origin to be able to access other windows/frames. \nSame origin requires 2 windows to have the same\n``protocol://domain:port``\n\n* The only exception is when a popup is opened or [[iframe]] is created, the popup/iframe's  ``<window>.location`` property on the [[window]] can be set to another Object, this Object has a ``.href`` property which can be set to another ``\"<url>\"``, it can only be set not read. This effectively redirects the popup window or the iframe.\n\n* If 2 sites have the same Second-Level-[[Domain]] then they may bypass Same Origin.\nFor ex.:\n``x.site.com`` and ``y.site.com`` have the same SLDs, but by default Same Origin policy still restricts it, \nTo bypass it\n``document.domain=site.com`` on both the windows will lift this restriction.\n\nThis [[DOM Class Property]] on the ``document`` is going to be deprecated soon.",536881913]],["^15",[810,"^O","^16",536881266]],["^15",[810,"^@",false,536881266]],["^15",[810,"^F",808,536881266]],["^15",[810,"^X",807,536881266]],["^15",[810,"^V",807,536881266]],["^15",[810,"^U",209,536881901]],["^15",[810,"^U",210,536881901]],["^15",[810,"^U",211,536881901]],["^15",[810,"^U",807,536881901]],["^15",[810,"^U",814,536881901]],["^15",[810,"^U",818,536881901]],["^15",[810,"^?",["^ "],536881913]],["^15",[810,"^H",209,536881913]],["^15",[810,"^H",210,536881913]],["^15",[810,"^H",211,536881913]],["^15",[810,"^H",814,536881913]],["^15",[810,"^H",818,536881913]],["^15",[810,"^17",true,536881266]],["^15",[810,"^;","~u649e5923-68e1-4567-b106-7f0a2a3d58b6",536881266]],["^15",[811,"^3","alias:: Same Site Policy\n\n- This policy is enforced by the [[Brower]]s to protect users from having data of one window/frame  being stolen by other windows/frames. \n  Browsers enforce this by only allowing windows/frames from same origin to be able to access other windows/frames. \n  Same origin requires 2 windows to have the same\n  ``protocol://domain:port``\n  \n  * The only exception is when a popup is opened or [[iframe]] is created, the popup/iframe's  ``<window>.location`` property on the [[window]] can be set to another Object, this Object has a ``.href`` property which can be set to another ``\"<url>\"``, it can only be set not read. This effectively redirects the popup window or the iframe.\n  \n  * If 2 sites have the same Second-Level-[[Domain]] then they may bypass Same Origin.\n  For ex.:\n  ``x.site.com`` and ``y.site.com`` have the same SLDs, but by default Same Origin policy still restricts it, \n  To bypass it\n  ``document.domain=site.com`` on both the windows will lift this restriction.\n  \n  This [[DOM Class Property]] on the ``document`` is going to be deprecated soon.\n-\n-\n-\n-",536881917]],["^15",[811,"^19","~m1688100114881",536881918]],["^15",[811,"^Z","pages/Same Origin.md",536881268]],["^15",[812,"^Q","",536881389]],["^15",[812,"^O","^16",536881389]],["^15",[812,"^@",false,536881389]],["^15",[812,"^F",813,536881444]],["^15",[812,"^X",807,536881389]],["^15",[812,"^V",807,536881389]],["^15",[812,"^U",807,536881390]],["^15",[812,"^?",["^ "],536881389]],["^15",[812,"^17",true,536881389]],["^15",[812,"^;","~u649e59df-08fd-4657-9547-0da9c844871e",536881389]],["^15",[813,"^Q","",536881444]],["^15",[813,"^O","^16",536881444]],["^15",[813,"^@",false,536881444]],["^15",[813,"^F",819,536881878]],["^15",[813,"^X",807,536881444]],["^15",[813,"^V",807,536881444]],["^15",[813,"^U",807,536881445]],["^15",[813,"^?",["^ "],536881444]],["^15",[813,"^17",true,536881444]],["^15",[813,"^;","~u649e5a2e-2c86-4571-b0d6-3f7d72934360",536881444]],["^15",[814,"^K",1688099424711,536881454]],["^15",[814,"^[",816,536881511]],["^15",[814,"^O","^16",536881505]],["^15",[814,"^@",false,536881454]],["^15",[814,"^Y","iframe",536881454]],["^15",[814,"^11","iframe",536881454]],["^15",[814,"^B",1688101382192,536882152]],["^15",[814,"^;","~u649e5a60-8cd8-40e4-bf74-6fb6b0335eb9",536881454]],["^15",[815,"^Q","This [[HTML Element]] is a special element as it allows embedding other [[HTML]] Documents in a Document.\n\nFor ex.:\n```html\n<iframe src=\"https://example.com\" id=\"iframe\"></iframe>\n\n<script>\n  iframe.onload = function() { //has the load event\n    let iframeWindow = iframe.contentWindow; // to get the iframe's window Object\n    try {\n      let doc = iframe.contentDocument; //shorthand for .contentWindow.document, to get the iframe's html Document, this may give error if Same Origin is not followed\n    } catch(e) {\n      alert(e); // Security Error (another origin)\n    }\n\n    \n    try {\n      let href = iframe.contentWindow.location.href; // can be set not read if not Same Origin\n    } catch(e) {\n      alert(e); // Security Error\n    }\n\n    iframe.contentWindow.location = '/'; //works\n\n    iframe.onload = null; // clear the handler, not to run it after the location change\n  };\n</script>\n```\nThere's the ``load`` [[Browser Event]] just like popup window does and just like the popup window or normal [[window]] we can directly set the handler on ``iframe.contentWindow.load`` too but this is inaccessible if the iframe is not of same origin. The [[Same Origin]] policy is also followed by iframes.\n\n* iframe Documents are not loaded right away, the initial document is different from the final one, however the final one is there when the ``load`` event is triggered.\n\n* Navigation\nThe iframe opener [[window]] can access its iframes directly with ``<window Object>.iframes`` which is a named and ordered collection. \nThe iframe can access its parent window with ``<iframe's window Object>.parent`` or ``<iframe's window Object>.top`` to get the topmost parent window directly. \n\n* The ``sandbox`` attribute\nThe attribute, if provided without any values, applies the strictest restrictions on the iframe such as not being able to have executable [[<script>]]s, forms etc.\nWe can provide a space separated list of allowed properties as given on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) such as ``sandbox=\"allow-scripts allow-forms\"`` and so on.",536882152]],["^15",[815,"^O","^16",536881506]],["^15",[815,"^@",false,536881506]],["^15",[815,"^F",814,536881506]],["^15",[815,"^X",814,536881506]],["^15",[815,"^V",814,536881506]],["^15",[815,"^U",29,536882092]],["^15",[815,"^U",30,536882092]],["^15",[815,"^U",73,536882092]],["^15",[815,"^U",120,536882092]],["^15",[815,"^U",209,536882092]],["^15",[815,"^U",807,536882092]],["^15",[815,"^U",814,536882092]],["^15",[815,"^?",["^ "],536882152]],["^15",[815,"^H",29,536882152]],["^15",[815,"^H",30,536882152]],["^15",[815,"^H",73,536882152]],["^15",[815,"^H",120,536882152]],["^15",[815,"^H",209,536882152]],["^15",[815,"^H",807,536882152]],["^15",[815,"^17",true,536881506]],["^15",[815,"^;","~u649e5a95-8b96-42e0-8814-d40dcf884c0e",536881506]],["^15",[816,"^3","- This [[HTML Element]] is a special element as it allows embedding other [[HTML]] Documents in a Document.\n  \n  For ex.:\n  ```html\n  <iframe src=\"https://example.com\" id=\"iframe\"></iframe>\n  \n  <script>\n    iframe.onload = function() { //has the load event\n      let iframeWindow = iframe.contentWindow; // to get the iframe's window Object\n      try {\n        let doc = iframe.contentDocument; //shorthand for .contentWindow.document, to get the iframe's html Document, this may give error if Same Origin is not followed\n      } catch(e) {\n        alert(e); // Security Error (another origin)\n      }\n  \n      \n      try {\n        let href = iframe.contentWindow.location.href; // can be set not read if not Same Origin\n      } catch(e) {\n        alert(e); // Security Error\n      }\n  \n      iframe.contentWindow.location = '/'; //works\n  \n      iframe.onload = null; // clear the handler, not to run it after the location change\n    };\n  </script>\n  ```\n  There's the ``load`` [[Browser Event]] just like popup window does and just like the popup window or normal [[window]] we can directly set the handler on ``iframe.contentWindow.load`` too but this is inaccessible if the iframe is not of same origin. The [[Same Origin]] policy is also followed by iframes.\n  \n  * iframe Documents are not loaded right away, the initial document is different from the final one, however the final one is there when the ``load`` event is triggered.\n  \n  * Navigation\n  The iframe opener [[window]] can access its iframes directly with ``<window Object>.iframes`` which is a named and ordered collection. \n  The iframe can access its parent window with ``<iframe's window Object>.parent`` or ``<iframe's window Object>.top`` to get the topmost parent window directly. \n  \n  * The ``sandbox`` attribute\n  The attribute, if provided without any values, applies the strictest restrictions on the iframe such as not being able to have executable [[<script>]]s, forms etc.\n  We can provide a space separated list of allowed properties as given on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) such as ``sandbox=\"allow-scripts allow-forms\"`` and so on.\n-",536882154]],["^15",[816,"^19","~m1688101382988",536882153]],["^15",[816,"^Z","pages/iframe.md",536881511]],["^15",[817,"^Q","",536881689]],["^15",[817,"^O","^16",536881689]],["^15",[817,"^@",false,536881689]],["^15",[817,"^F",815,536881689]],["^15",[817,"^X",814,536881689]],["^15",[817,"^V",814,536881689]],["^15",[817,"^U",814,536881690]],["^15",[817,"^?",["^ "],536881689]],["^15",[817,"^17",true,536881689]],["^15",[817,"^;","~u649e5be0-08c0-418f-88f1-41f81715998e",536881689]],["^15",[818,"^K",1688099969390,536881778]],["^15",[818,"^@",false,536881778]],["^15",[818,"^Y","domain",536881778]],["^15",[818,"^11","Domain",536881778]],["^15",[818,"^B",1688099969390,536881778]],["^15",[818,"^;","~u649e5c81-643b-40b6-b8c9-627ffd322522",536881778]],["^15",[819,"^Q","",536881878]],["^15",[819,"^O","^16",536881878]],["^15",[819,"^@",false,536881878]],["^15",[819,"^F",820,536881914]],["^15",[819,"^X",807,536881878]],["^15",[819,"^V",807,536881878]],["^15",[819,"^U",807,536881879]],["^15",[819,"^?",["^ "],536881878]],["^15",[819,"^17",true,536881878]],["^15",[819,"^;","~u649e5ce4-05a9-4c79-97a5-51fa12e868ff",536881878]],["^15",[820,"^Q","",536881914]],["^15",[820,"^O","^16",536881914]],["^15",[820,"^@",false,536881914]],["^15",[820,"^F",810,536881914]],["^15",[820,"^X",807,536881914]],["^15",[820,"^V",807,536881914]],["^15",[820,"^U",807,536881915]],["^15",[820,"^?",["^ "],536881914]],["^15",[820,"^17",true,536881914]],["^15",[820,"^;","~u649e5d12-6c8a-464b-8bcd-669e193f5770",536881914]],["^15",[821,"^Q","",536882229]],["^15",[821,"^O","^16",536882229]],["^15",[821,"^@",false,536882229]],["^15",[821,"^F",806,536882357]],["^15",[821,"^X",210,536882229]],["^15",[821,"^V",210,536882229]],["^15",[821,"^U",210,536882230]],["^15",[821,"^?",["^ "],536882229]],["^15",[821,"^17",true,536882229]],["^15",[821,"^;","~u649e66a6-f042-498a-be20-9bf471fa8254",536882229]],["^15",[822,"^Q","[[ArrayBuffer]]",536882384]],["^15",[822,"^O","^16",536882380]],["^15",[822,"^F",301,536882380]],["^15",[822,"^X",24,536882380]],["^15",[822,"^V",24,536882380]],["^15",[822,"^U",24,536882385]],["^15",[822,"^U",823,536882385]],["^15",[822,"^H",823,536885544]],["^15",[822,"^17",true,536882380]],["^15",[822,"^;","~u649e6816-c3c1-4f69-833d-2f4238a1ee1c",536882380]],["^15",[823,"^K",1688102939407,536882384]],["^15",[823,"^[",825,536882396]],["^15",[823,"^O","^16",536882391]],["^15",[823,"^@",false,536882384]],["^15",[823,"^Y","arraybuffer",536882384]],["^15",[823,"^11","ArrayBuffer",536882384]],["^15",[823,"^B",1688104583417,536883378]],["^15",[823,"^;","~u662fc702-e620-444c-86f6-1a68abe5c336",536885544]],["^15",[824,"^Q","This [[Class]] provides access to a fixed contiguous <given length bytes> area in the memory for storing raw binary data directly. It has nothing to do with [[Array]]. \n\nTo create an ArrayBuffer, we can use ``new ArrayBuffer(<size>)``, this reserves a fixed given no. of bytes in the memory and fills the region with 0s.",536882879]],["^15",[824,"^O","^16",536882392]],["^15",[824,"^@",false,536882392]],["^15",[824,"^F",823,536882392]],["^15",[824,"^X",823,536882392]],["^15",[824,"^V",823,536882392]],["^15",[824,"^U",47,536882449]],["^15",[824,"^U",75,536882449]],["^15",[824,"^U",823,536882449]],["^15",[824,"^?",["^ "],536882879]],["^15",[824,"^H",47,536882879]],["^15",[824,"^H",75,536882879]],["^15",[824,"^17",true,536882392]],["^15",[824,"^;","~u649e6825-e703-4f9c-9c47-c5d8a4584a27",536882392]],["^15",[825,"^3","- This [[Class]] provides access to a fixed contiguous <given length bytes> area in the memory for storing raw binary data directly. It has nothing to do with [[Array]]. \n  \n  To create an ArrayBuffer, we can use ``new ArrayBuffer(<size>)``, this reserves a fixed given no. of bytes in the memory and fills the region with 0s.\n- To modify data in an ArrayBuffer, we need to define how to parse the given byte array\n  \n  ![image.png](../assets/image_1688103104914_0.png)\n  These classes are called ``View`` Classes or ``TypedArray``s ([spec](https://tc39.github.io/ecma262/#sec-typedarray-objects)).\n  \n  These are the classes that can get/set the Arraybuffer's contents, like ``UInt8Array`` reads each byte individually as a [[Number]] (the name says, read 8 bits as an unsigned int).\n  \n  Each index in the ArrayBuffer is a byte, so the possible values are $$2^8$$ as a byte has 8 bits, so 0 to 255. If we assign any value greater than the allowed value for an index, it wraps around.\n  \n  For ex.:\n  \n  ```js\n  let buffer= new ArrayBuffer(16);\n  let view= new UInt8Array(buffer);\n  console.log(view.length); //prints 16, for 16 locations to store stuff\n  console.log(view.byteLength); //the total size in bytes\n  view[0]=2;\n  \n  for(let num of view){\n   console.log(num); //prints 2 then prints 0, 15 times\n  }\n  ```\n  * These are the TypedArrays\n  ``Uint8Array``, ``Uint16Array``, ``Uint32Array`` \n  ``Uint8ClampedArray`` : Doesn't wrap around but clamps, i.e., if value >255, it stores 255, similarly any value <0 stores 0.\n  ``Int8Array``, ``Int16Array``, ``Int32Array``\n  ``Float32Array``, ``Float64Array``\n  \n  \n  * There's 5 variants of the TypedArray's arguments\n  ```js\n  new TypedArray(buffer, [byteOffset], [length]); //where \"TypedArray\" can be any of Int8Array,UInt8Array etc.\n  new TypedArray(object); //the object can be an Array too like new Int8Array([0,1,2,5]);\n  new TypedArray(typedArray);\n  new TypedArray(length);\n  new TypedArray();\n  ```\n  There's no class called TypedArray, this is just a term for the View classes.\n  This is also to say, a TypedArray can create a buffer if it doesn't already exist and then provide access over it.\n  \n  * TypedArrays are just views over the ArrayBuffer, they can't delete a region or add new memory (nor can ArrayBuffer) etc.\n  They can do other things like map, reduce, find etc.\n  \n  * DataView\n  This is a bit more flexible View over the ArrayBuffer, hence called an ``Untyped view``.\n  We can create an Object with ``new DataView(buffer, [byteOffset], [byteLength])`` where the buffer has to be created and assigned explicitly.\n  \n  For ex.:\n  ```js\n  \n  let buffer = new Uint8Array([255, 255, 255, 255]).buffer;\n  \n  let dataView = new DataView(buffer);\n  \n  console.log( dataView.getUint8(0) ); // 255\n  \n  console.log( dataView.getUint16(0) ); // 65535 (biggest 16-bit unsigned int)\n  ```\n-\n-",536883380]],["^15",[825,"^19","~m1688104583585",536883379]],["^15",[825,"^Z","pages/ArrayBuffer.md",536882396]],["^15",[827,"^Q","To modify data in an ArrayBuffer, we need to define how to parse the given byte array\n\n![image.png](../assets/image_1688103104914_0.png)\nThese classes are called ``View`` Classes or ``TypedArray``s ([spec](https://tc39.github.io/ecma262/#sec-typedarray-objects)).\n\nThese are the classes that can get/set the Arraybuffer's contents, like ``UInt8Array`` reads each byte individually as a [[Number]] (the name says, read 8 bits as an unsigned int).\n\nEach index in the ArrayBuffer is a byte, so the possible values are $$2^8$$ as a byte has 8 bits, so 0 to 255. If we assign any value greater than the allowed value for an index, it wraps around.\n\nFor ex.:\n\n```js\nlet buffer= new ArrayBuffer(16);\nlet view= new UInt8Array(buffer);\nconsole.log(view.length); //prints 16, for 16 locations to store stuff\nconsole.log(view.byteLength); //the total size in bytes\nview[0]=2;\n\nfor(let num of view){\n console.log(num); //prints 2 then prints 0, 15 times\n}\n```\n* These are the TypedArrays\n``Uint8Array``, ``Uint16Array``, ``Uint32Array`` \n``Uint8ClampedArray`` : Doesn't wrap around but clamps, i.e., if value >255, it stores 255, similarly any value <0 stores 0.\n``Int8Array``, ``Int16Array``, ``Int32Array``\n``Float32Array``, ``Float64Array``\n\n\n* There's 5 variants of the TypedArray's arguments\n```js\nnew TypedArray(buffer, [byteOffset], [length]); //where \"TypedArray\" can be any of Int8Array,UInt8Array etc.\nnew TypedArray(object); //the object can be an Array too like new Int8Array([0,1,2,5]);\nnew TypedArray(typedArray);\nnew TypedArray(length);\nnew TypedArray();\n```\nThere's no class called TypedArray, this is just a term for the View classes.\nThis is also to say, a TypedArray can create a buffer if it doesn't already exist and then provide access over it.\n\n* TypedArrays are just views over the ArrayBuffer, they can't delete a region or add new memory (nor can ArrayBuffer) etc.\nThey can do other things like map, reduce, find etc.\n\n* DataView\nThis is a bit more flexible View over the ArrayBuffer, hence called an ``Untyped view``.\nWe can create an Object with ``new DataView(buffer, [byteOffset], [byteLength])`` where the buffer has to be created and assigned explicitly.\n\nFor ex.:\n```js\n\nlet buffer = new Uint8Array([255, 255, 255, 255]).buffer;\n\nlet dataView = new DataView(buffer);\n\nconsole.log( dataView.getUint8(0) ); // 255\n\nconsole.log( dataView.getUint16(0) ); // 65535 (biggest 16-bit unsigned int)\n```",536883378]],["^15",[827,"^O","^16",536882519]],["^15",[827,"^@",false,536882519]],["^15",[827,"^F",824,536882519]],["^15",[827,"^X",823,536882519]],["^15",[827,"^V",823,536882519]],["^15",[827,"^U",100,536882629]],["^15",[827,"^U",823,536882629]],["^15",[827,"^?",["^ "],536883378]],["^15",[827,"^H",100,536883378]],["^15",[827,"^17",true,536882519]],["^15",[827,"^;","~u649e68a4-3c6f-4048-8c61-6f381465c314",536882519]],["^15",[828,"^Q","",536882675]],["^15",[828,"^O","^16",536882675]],["^15",[828,"^@",false,536882675]],["^15",[828,"^F",829,536883173]],["^15",[828,"^X",823,536882675]],["^15",[828,"^V",823,536882675]],["^15",[828,"^U",823,536882676]],["^15",[828,"^?",["^ "],536882675]],["^15",[828,"^17",true,536882675]],["^15",[828,"^;","~u649e6937-c5d9-4a68-af4e-98bb392b1955",536882675]],["^15",[829,"^Q","",536883173]],["^15",[829,"^O","^16",536883173]],["^15",[829,"^@",false,536883173]],["^15",[829,"^F",827,536883173]],["^15",[829,"^X",823,536883173]],["^15",[829,"^V",823,536883173]],["^15",[829,"^U",823,536883174]],["^15",[829,"^?",["^ "],536883173]],["^15",[829,"^17",true,536883173]],["^15",[829,"^;","~u649e6c4d-a7e5-4154-b0ce-019280dd3256",536883173]],["^15",[830,"^12",2,536883382]],["^15",[831,"^12",2,536883384]],["^15",[832,"^K",1688260745652,536883385]],["^15",[832,"^O","^16",536883385]],["^15",[832,"^N",20230702,536883385]],["^15",[832,"^@",true,536883385]],["^15",[832,"^Y","jul 2nd, 2023",536883385]],["^15",[832,"^11","Jul 2nd, 2023",536883385]],["^15",[832,"^B",1688260745652,536883385]],["^15",[832,"^;","~u64a0d089-7144-40e3-80cc-21292b8ac185",536883385]],["^15",[833,"^Q","",536883386]],["^15",[833,"^O","^16",536883386]],["^15",[833,"^N",20230702,536883386]],["^15",[833,"^@",true,536883386]],["^15",[833,"^F",832,536883386]],["^15",[833,"^X",832,536883386]],["^15",[833,"^V",832,536883386]],["^15",[833,"^U",832,536883387]],["^15",[833,"^?",["^ "],536883386]],["^15",[833,"^17",true,536883386]],["^15",[833,"^;","~u64a0d089-d5f5-45b1-8564-d454667ec51e",536883386]],["^15",[834,"^12",2,536883389]],["^15",[835,"^K",1688484757112,536883390]],["^15",[835,"^O","^16",536883390]],["^15",[835,"^N",20230704,536883390]],["^15",[835,"^@",true,536883390]],["^15",[835,"^Y","jul 4th, 2023",536883390]],["^15",[835,"^11","Jul 4th, 2023",536883390]],["^15",[835,"^B",1688484757112,536883390]],["^15",[835,"^;","~u64a43b95-5a10-49b6-a822-67a463693cc5",536883390]],["^15",[836,"^Q","",536883391]],["^15",[836,"^O","^16",536883391]],["^15",[836,"^N",20230704,536883391]],["^15",[836,"^@",true,536883391]],["^15",[836,"^F",835,536883391]],["^15",[836,"^X",835,536883391]],["^15",[836,"^V",835,536883391]],["^15",[836,"^U",835,536883392]],["^15",[836,"^?",["^ "],536883391]],["^15",[836,"^17",true,536883391]],["^15",[836,"^;","~u64a43b95-4fc0-430a-aee3-b8700dedcec7",536883391]],["^15",[837,"^12",2,536883395]],["^15",[838,"^K",1688556461308,536883396]],["^15",[838,"^O","^16",536883396]],["^15",[838,"^N",20230705,536883396]],["^15",[838,"^@",true,536883396]],["^15",[838,"^Y","jul 5th, 2023",536883396]],["^15",[838,"^11","Jul 5th, 2023",536883396]],["^15",[838,"^B",1688556461308,536883396]],["^15",[838,"^;","~u64a553ad-87bb-447b-9cf6-b0ea4667f02e",536883396]],["^15",[839,"^Q","",536883397]],["^15",[839,"^O","^16",536883397]],["^15",[839,"^N",20230705,536883397]],["^15",[839,"^@",true,536883397]],["^15",[839,"^F",838,536883397]],["^15",[839,"^X",838,536883397]],["^15",[839,"^V",838,536883397]],["^15",[839,"^U",838,536883398]],["^15",[839,"^?",["^ "],536883397]],["^15",[839,"^17",true,536883397]],["^15",[839,"^;","~u64a553ad-33cf-439f-8e29-e474af41f8d8",536883397]],["^15",[840,"^12",2,536883400]],["^15",[841,"^K",1688630257256,536883401]],["^15",[841,"^O","^16",536883401]],["^15",[841,"^N",20230706,536883401]],["^15",[841,"^@",true,536883401]],["^15",[841,"^Y","jul 6th, 2023",536883401]],["^15",[841,"^11","Jul 6th, 2023",536883401]],["^15",[841,"^B",1688630257256,536883401]],["^15",[841,"^;","~u64a673f1-0c7e-4f8b-93a6-d2c2e11713b9",536883401]],["^15",[842,"^Q","",536883402]],["^15",[842,"^O","^16",536883402]],["^15",[842,"^N",20230706,536883402]],["^15",[842,"^@",true,536883402]],["^15",[842,"^F",841,536883402]],["^15",[842,"^X",841,536883402]],["^15",[842,"^V",841,536883402]],["^15",[842,"^U",841,536883403]],["^15",[842,"^?",["^ "],536883402]],["^15",[842,"^17",true,536883402]],["^15",[842,"^;","~u64a673f1-a04c-418c-80d9-b2ece15b8322",536883402]],["^15",[843,"^Q","Monitor Events\nWe can monitor events fired on any element using ``monitorEvents(<node>)`` [[Function]]. It returns an [[Object]] with every event triggered on the node with the event details, it basically returns the event Object itself like an observer on every event triggered on it.\n\nIf we use it in the Chrome [[Debugging]] Console, it will print the event Object on a node each time the node receives an event.\nFor ex.:\n```js\nmonitorEvents($0)\n```\nin the debug console would work as expected.",536883585]],["^15",[843,"^O","^16",536883406]],["^15",[843,"^@",false,536883406]],["^15",[843,"^F",758,536883406]],["^15",[843,"^X",73,536883406]],["^15",[843,"^V",73,536883406]],["^15",[843,"^U",39,536883516]],["^15",[843,"^U",44,536883516]],["^15",[843,"^U",73,536883516]],["^15",[843,"^U",255,536883516]],["^15",[843,"^?",["^ "],536883585]],["^15",[843,"^H",39,536883585]],["^15",[843,"^H",44,536883585]],["^15",[843,"^H",255,536883585]],["^15",[843,"^17",true,536883406]],["^15",[843,"^;","~u64a6740d-6fb6-42e4-aa79-d780009ac14a",536883406]],["^15",[844,"^Q","",536883585]],["^15",[844,"^O","^16",536883585]],["^15",[844,"^@",false,536883585]],["^15",[844,"^F",843,536883585]],["^15",[844,"^X",73,536883585]],["^15",[844,"^V",73,536883585]],["^15",[844,"^U",73,536883586]],["^15",[844,"^?",["^ "],536883585]],["^15",[844,"^17",true,536883585]],["^15",[844,"^;","~u64a674f1-979c-43ea-9a99-d3b58b4fd612",536883585]],["^15",[845,"^12",2,536883590]],["^15",[846,"^K",1688742518640,536883591]],["^15",[846,"^O","^16",536883591]],["^15",[846,"^N",20230707,536883591]],["^15",[846,"^@",true,536883591]],["^15",[846,"^Y","jul 7th, 2023",536883591]],["^15",[846,"^11","Jul 7th, 2023",536883591]],["^15",[846,"^B",1688742518640,536883591]],["^15",[846,"^;","~u64a82a76-86f5-4faa-8ef2-2db75c9c13ca",536883591]],["^15",[847,"^Q","",536883592]],["^15",[847,"^O","^16",536883592]],["^15",[847,"^N",20230707,536883592]],["^15",[847,"^@",true,536883592]],["^15",[847,"^F",846,536883592]],["^15",[847,"^X",846,536883592]],["^15",[847,"^V",846,536883592]],["^15",[847,"^U",846,536883593]],["^15",[847,"^?",["^ "],536883592]],["^15",[847,"^17",true,536883592]],["^15",[847,"^;","~u64a82a76-27e6-49c4-b082-e2b34a8bd018",536883592]],["^15",[848,"^12",2,536883595]],["^15",[849,"^K",1688829079171,536883596]],["^15",[849,"^O","^16",536883596]],["^15",[849,"^N",20230708,536883596]],["^15",[849,"^@",true,536883596]],["^15",[849,"^Y","jul 8th, 2023",536883596]],["^15",[849,"^11","Jul 8th, 2023",536883596]],["^15",[849,"^B",1688829079171,536883596]],["^15",[849,"^;","~u64a97c97-d3ce-410c-a104-9efbd65113ba",536883596]],["^15",[850,"^Q","",536883597]],["^15",[850,"^O","^16",536883597]],["^15",[850,"^N",20230708,536883597]],["^15",[850,"^@",true,536883597]],["^15",[850,"^F",849,536883597]],["^15",[850,"^X",849,536883597]],["^15",[850,"^V",849,536883597]],["^15",[850,"^U",849,536883598]],["^15",[850,"^?",["^ "],536883597]],["^15",[850,"^17",true,536883597]],["^15",[850,"^;","~u64a97c97-ddcb-41be-8d8d-4299ee5f9354",536883597]],["^15",[851,"^12",2,536883601]],["^15",[852,"^K",1688996950253,536883602]],["^15",[852,"^O","^16",536883602]],["^15",[852,"^N",20230710,536883602]],["^15",[852,"^@",true,536883602]],["^15",[852,"^Y","jul 10th, 2023",536883602]],["^15",[852,"^11","Jul 10th, 2023",536883602]],["^15",[852,"^B",1688996950253,536883602]],["^15",[852,"^;","~u64ac0c56-8d50-4388-8ffc-7e384f5f2330",536883602]],["^15",[853,"^Q","",536883603]],["^15",[853,"^O","^16",536883603]],["^15",[853,"^N",20230710,536883603]],["^15",[853,"^@",true,536883603]],["^15",[853,"^F",852,536883603]],["^15",[853,"^X",852,536883603]],["^15",[853,"^V",852,536883603]],["^15",[853,"^U",852,536883604]],["^15",[853,"^?",["^ "],536883603]],["^15",[853,"^17",true,536883603]],["^15",[853,"^;","~u64ac0c56-260f-469e-9acd-527a1c4de555",536883603]],["^15",[854,"^12",2,536883609]],["^15",[855,"^K",1689027835519,536883610]],["^15",[855,"^O","^16",536883610]],["^15",[855,"^N",20230711,536883610]],["^15",[855,"^@",true,536883610]],["^15",[855,"^Y","jul 11th, 2023",536883610]],["^15",[855,"^11","Jul 11th, 2023",536883610]],["^15",[855,"^B",1689027835519,536883610]],["^15",[855,"^;","~u64ac84fb-a629-4223-8f9b-51d6d680d0f2",536883610]],["^15",[856,"^Q","",536883611]],["^15",[856,"^O","^16",536883611]],["^15",[856,"^N",20230711,536883611]],["^15",[856,"^@",true,536883611]],["^15",[856,"^F",855,536883611]],["^15",[856,"^X",855,536883611]],["^15",[856,"^V",855,536883611]],["^15",[856,"^U",855,536883612]],["^15",[856,"^?",["^ "],536883611]],["^15",[856,"^17",true,536883611]],["^15",[856,"^;","~u64ac84fb-95f3-4f6e-b864-19b76181a427",536883611]],["^15",[857,"^12",2,536883615]],["^15",[858,"^12",2,536883617]],["^15",[859,"^K",1692114262541,536883618]],["^15",[859,"^O","^16",536883618]],["^15",[859,"^N",20230815,536883618]],["^15",[859,"^@",true,536883618]],["^15",[859,"^Y","aug 15th, 2023",536883618]],["^15",[859,"^11","Aug 15th, 2023",536883618]],["^15",[859,"^B",1692114262541,536883618]],["^15",[859,"^;","~u64db9d56-2b9b-4912-98a0-c7c9cc87c58f",536883618]],["^15",[860,"^Q","",536883619]],["^15",[860,"^O","^16",536883619]],["^15",[860,"^N",20230815,536883619]],["^15",[860,"^@",true,536883619]],["^15",[860,"^F",859,536883619]],["^15",[860,"^X",859,536883619]],["^15",[860,"^V",859,536883619]],["^15",[860,"^U",859,536883620]],["^15",[860,"^?",["^ "],536883619]],["^15",[860,"^;","~u64db9d56-9452-4e51-8f9a-04405667525b",536883619]],["^15",[862,"^12",2,536883704]],["^15",[863,"^K",1692199748208,536883705]],["^15",[863,"^O","^16",536883705]],["^15",[863,"^N",20230816,536883705]],["^15",[863,"^@",true,536883705]],["^15",[863,"^Y","aug 16th, 2023",536883705]],["^15",[863,"^11","Aug 16th, 2023",536883705]],["^15",[863,"^B",1692199748208,536883705]],["^15",[863,"^;","~u64dceb44-8615-457c-8ece-0d9a9dd0ec2b",536883705]],["^15",[864,"^Q","",536883706]],["^15",[864,"^O","^16",536883706]],["^15",[864,"^N",20230816,536883706]],["^15",[864,"^@",true,536883706]],["^15",[864,"^F",863,536883706]],["^15",[864,"^X",863,536883706]],["^15",[864,"^V",863,536883706]],["^15",[864,"^U",863,536883707]],["^15",[864,"^?",["^ "],536883706]],["^15",[864,"^;","~u64dceb44-c840-43ad-9c29-199f60b3ef94",536883706]],["^15",[865,"^12",2,536883709]],["^15",[866,"^K",1692596223490,536883710]],["^15",[866,"^O","^16",536883710]],["^15",[866,"^N",20230821,536883710]],["^15",[866,"^@",true,536883710]],["^15",[866,"^Y","aug 21st, 2023",536883710]],["^15",[866,"^11","Aug 21st, 2023",536883710]],["^15",[866,"^B",1692596223490,536883710]],["^15",[866,"^;","~u64e2f7ff-f519-4f54-976c-12ae2e021a42",536883710]],["^15",[867,"^Q","",536883711]],["^15",[867,"^O","^16",536883711]],["^15",[867,"^N",20230821,536883711]],["^15",[867,"^@",true,536883711]],["^15",[867,"^F",866,536883711]],["^15",[867,"^X",866,536883711]],["^15",[867,"^V",866,536883711]],["^15",[867,"^U",866,536883712]],["^15",[867,"^?",["^ "],536883711]],["^15",[867,"^;","~u64e2f7ff-0aef-44ee-8b71-dcf61119345c",536883711]],["^15",[868,"^Q","FlexBox\n[Reference](https://www.theodinproject.com/lessons/foundations-growing-and-shrinking)\n\nA relatively new way of arranging [[HTML Element]]s.\nBy having the value ``flex`` for the ``display`` css property, we make an HTML element a *Flex Container*. And it's children are called *Flex Item*s. FlexBox is a way of defining both these.\nThis is a container element, meaning this HTML element can have multiple direct children.\n\nThis is an incredibly flexible container that can automatically resize itself based on its children, then it automatically resizes its children to fit with each other and it can also adjust the children's children.\n\nFor ex.:\nFor this HTML\n```html\n<div class=\"flex-container\">\n  <div class=\"one\"></div>\n  <div class=\"two\"></div>\n  <div class=\"three\"></div>\n</div>\n```\nIf we style the elements like so\n```css\n.flex-container {\n   display: flex; \n}\n\n/* this selector selects all divs inside of .flex-container */\n.flex-container div {\n  background: peachpuff;\n  border: 4px solid brown;\n  height: 100px;\n   flex: 1; \n}\n```\nThen we get this\n![image.png](../assets/image_1692600346035_0.png)\n\nAnd if we remove the ``display:flex`` we would get\n![image.png](../assets/image_1692600380882_0.png)\nwhere it's using the whole space of the viewport to lay out the elements.\n\n\n* The Flex Container: The element that uses the ``flex`` property is called a Flex Container, and its children are called flex items.\n![image.png](../assets/image_1692600501827_0.png)\n\nThe children theirselves can be flex containers and the parent flex container and adjust their flex items too.\n![image.png](../assets/image_1692600535073_0.png)\n\nBy just using FlexBox, we can create all sorts of layouts.\n![image.png](../assets/image_1692600562264_0.png)\n\n\n* ``flex`` Property: \nThis is a shorthand CSS property for ``flex-grow``, ``flex-shrink`` and ``flex-basis`` respectively. These are defined on flex items to adjust them.\n\n``flex-grow``: This defines the growth, or in other words in the size of an item in proportion to other flex items.\nBy default the ``flex-grow`` is 1. So if an item gets a ``flex-grow`` of 2, it will be larger than the other items. \nFor ex.:\n![image.png](../assets/image_1692601081462_0.png)\n\n``flex-shrink``: This defines the shrinkness factor, which is also 1 by default. It is applied to the flex items when the size of the flex container is smaller than the sum of sizes of the flex items. Higher values of ``flex-shrink`` shrink a flex item more than the others.\n\n``flex-basis``: Default is 0%. Defines the percentage of the flex items' ``width`` property to be added to the grow or shrink factor. That is, if the basis is ``0%`` then the flex items' width is ignored and the flex item grows or shrinks at the same rate as the other flex items, but if it is say ``5%``, then ``5%`` of the item's ``width`` is added to the shrinkness or growth factor and hence it grows or shrinks faster than other flex elements. There's another value, ``auto`` for it.\n\n\nThe ``flex`` shorthand property can be given some values to get predefined values for all 3. \n``flex: auto``: is equivalent to ``flex: 1 1 auto``\n``flex: 1``: is equivalent to ``flex: 1 1 0``\n\n* ``flex-direction``: Can be ``row`` or ``column``, default is ``row``. Defined for the flex container.\nThis defines the direction the flex items in the container are laid out, be it horizontal or vertical. If they are laid out horizontally, which is default, their width is used for the other flex item properties, for vertical their height is used.\nThe direction defined here becomes the *main axis*, whilst the other direction becomes the *cross axis* inside the container. These axes are used by normal [[HTML Element]]s and other CSS properties too.\n\n* ``gap``: Numerical unit. Defined on the flex container, it defines the spacing between the flex items. across the *main axis*.",536884970]],["^15",[868,"^O","^16",536883733]],["^15",[868,"^@",false,536883733]],["^15",[868,"^F",126,536883733]],["^15",[868,"^X",119,536883733]],["^15",[868,"^V",119,536883733]],["^15",[868,"^U",119,536883756]],["^15",[868,"^U",120,536883756]],["^15",[868,"^?",["^ "],536884970]],["^15",[868,"^H",120,536884970]],["^15",[868,"^;","~u64e306ac-5cc3-4b27-b59c-edbdb3c7372a",536883733]],["^15",[869,"^Q","Shorthand\nSome CSS Properties are shorthand for accessing multiple properties.\nFor ex.: \n``padding`` is a shorthand for ``padding-top``, ``padding-right``, ``padding-bottom`` and ``padding-left``. \nSo a value like ``padding: 20px 30px 50px 40px`` assigns value to all 4 of these properties.",536884269]],["^15",[869,"^O","^16",536884143]],["^15",[869,"^F",121,536884143]],["^15",[869,"^X",119,536884143]],["^15",[869,"^V",119,536884143]],["^15",[869,"^U",119,536884144]],["^15",[869,"^;","~u64e3094a-1463-455e-9fee-db9ca27b49b9",536884143]],["^15",[870,"^K",1692642602275,536884770]],["^15",[870,"^O","^16",536884770]],["^15",[870,"^N",20230822,536884770]],["^15",[870,"^@",true,536884770]],["^15",[870,"^Y","aug 22nd, 2023",536884770]],["^15",[870,"^11","Aug 22nd, 2023",536884770]],["^15",[870,"^B",1692642602275,536884770]],["^15",[870,"^;","~u64e3ad2a-2f20-427d-92e9-be324f2371fa",536884770]],["^15",[871,"^Q","",536884771]],["^15",[871,"^O","^16",536884771]],["^15",[871,"^N",20230822,536884771]],["^15",[871,"^@",true,536884771]],["^15",[871,"^F",870,536884771]],["^15",[871,"^X",870,536884771]],["^15",[871,"^V",870,536884771]],["^15",[871,"^U",870,536884772]],["^15",[871,"^?",["^ "],536884771]],["^15",[871,"^;","~u64e3ad2a-bdba-4dd1-83e7-08af58c2feb0",536884771]],["^15",[872,"^12",2,536884774]],["^15",[873,"^12",2,536884776]],["^15",[874,"^K",1692779368459,536884777]],["^15",[874,"^O","^16",536884777]],["^15",[874,"^N",20230823,536884777]],["^15",[874,"^@",true,536884777]],["^15",[874,"^Y","aug 23rd, 2023",536884777]],["^15",[874,"^11","Aug 23rd, 2023",536884777]],["^15",[874,"^B",1692779368459,536884777]],["^15",[874,"^;","~u64e5c368-45e4-46e6-badd-b17c7f305d9b",536884777]],["^15",[875,"^Q","",536884778]],["^15",[875,"^O","^16",536884778]],["^15",[875,"^N",20230823,536884778]],["^15",[875,"^@",true,536884778]],["^15",[875,"^F",874,536884778]],["^15",[875,"^X",874,536884778]],["^15",[875,"^V",874,536884778]],["^15",[875,"^U",874,536884779]],["^15",[875,"^?",["^ "],536884778]],["^15",[875,"^;","~u64e5c368-6b50-4408-8e15-bf25cea60250",536884778]],["^15",[876,"^Q","~``justify-content`` and ``align-items``\nThe former, aligns the children of an [[HTML Element]] across its *main axis* whilst the latter aligns them across the *cross axis*. Values are some predefined strings, check intellisense.\n\nFor ex.:\n``align-items: center`` would align the items to the center of the cross axis. \nIf the main axis is horizontal, then this is the result\n![image.png](../assets/image_1692869633645_0.png)",536884967]],["^15",[876,"^O","^16",536884781]],["^15",[876,"^F",868,536884781]],["^15",[876,"^X",119,536884781]],["^15",[876,"^V",119,536884781]],["^15",[876,"^U",119,536884805]],["^15",[876,"^U",120,536884805]],["^15",[876,"^?",["^ "],536884967]],["^15",[876,"^H",120,536884967]],["^15",[876,"^;","~u64e5c36a-0fc2-419b-a3a5-16e13521a963",536884781]],["^15",[877,"^12",2,536884784]],["^15",[878,"^K",1692869400401,536884785]],["^15",[878,"^O","^16",536884785]],["^15",[878,"^N",20230824,536884785]],["^15",[878,"^@",true,536884785]],["^15",[878,"^Y","aug 24th, 2023",536884785]],["^15",[878,"^11","Aug 24th, 2023",536884785]],["^15",[878,"^B",1692869400401,536884785]],["^15",[878,"^;","~u64e72318-f388-4a92-b722-91db50bf355d",536884785]],["^15",[879,"^Q","",536884786]],["^15",[879,"^O","^16",536884786]],["^15",[879,"^N",20230824,536884786]],["^15",[879,"^@",true,536884786]],["^15",[879,"^F",878,536884786]],["^15",[879,"^X",878,536884786]],["^15",[879,"^V",878,536884786]],["^15",[879,"^U",878,536884787]],["^15",[879,"^?",["^ "],536884786]],["^15",[879,"^;","~u64e72318-5bca-4084-987c-63508fd41721",536884786]],["^15",[880,"^12",2,536884974]],["^15",[881,"^K",1693118991019,536884975]],["^15",[881,"^O","^16",536884975]],["^15",[881,"^N",20230827,536884975]],["^15",[881,"^@",true,536884975]],["^15",[881,"^Y","aug 27th, 2023",536884975]],["^15",[881,"^11","Aug 27th, 2023",536884975]],["^15",[881,"^B",1693118991019,536884975]],["^15",[881,"^;","~u64eaf20f-8768-4d86-99af-361faaae532a",536884975]],["^15",[882,"^Q","",536884976]],["^15",[882,"^O","^16",536884976]],["^15",[882,"^N",20230827,536884976]],["^15",[882,"^@",true,536884976]],["^15",[882,"^F",881,536884976]],["^15",[882,"^X",881,536884976]],["^15",[882,"^V",881,536884976]],["^15",[882,"^U",881,536884977]],["^15",[882,"^?",["^ "],536884976]],["^15",[882,"^;","~u64eaf20f-faff-4eb6-b25f-7be2ee442bc7",536884976]],["^15",[883,"^12",2,536884979]],["^15",[884,"^K",1694620771773,536884980]],["^15",[884,"^O","^16",536884980]],["^15",[884,"^N",20230913,536884980]],["^15",[884,"^@",true,536884980]],["^15",[884,"^Y","sep 13th, 2023",536884980]],["^15",[884,"^11","Sep 13th, 2023",536884980]],["^15",[884,"^B",1694620771773,536884980]],["^15",[884,"^;","~u6501dc63-1138-4bc9-9a59-59333e3a4c48",536884980]],["^15",[885,"^Q","",536884981]],["^15",[885,"^O","^16",536884981]],["^15",[885,"^N",20230913,536884981]],["^15",[885,"^@",true,536884981]],["^15",[885,"^F",884,536884981]],["^15",[885,"^X",884,536884981]],["^15",[885,"^V",884,536884981]],["^15",[885,"^U",884,536884982]],["^15",[885,"^?",["^ "],536884981]],["^15",[885,"^;","~u6501dc63-9579-432a-9ca4-ff21f2430622",536884981]],["^15",[886,"^12",2,536884984]],["^15",[887,"^K",1694666163109,536884985]],["^15",[887,"^O","^16",536884985]],["^15",[887,"^N",20230914,536884985]],["^15",[887,"^@",true,536884985]],["^15",[887,"^Y","sep 14th, 2023",536884985]],["^15",[887,"^11","Sep 14th, 2023",536884985]],["^15",[887,"^B",1694666163109,536884985]],["^15",[887,"^;","~u65028db3-fbb2-4582-9a57-ef5c24cbcf18",536884985]],["^15",[888,"^Q","",536884986]],["^15",[888,"^O","^16",536884986]],["^15",[888,"^N",20230914,536884986]],["^15",[888,"^@",true,536884986]],["^15",[888,"^F",887,536884986]],["^15",[888,"^X",887,536884986]],["^15",[888,"^V",887,536884986]],["^15",[888,"^U",887,536884987]],["^15",[888,"^?",["^ "],536884986]],["^15",[888,"^;","~u65028db3-6b56-417f-ac5b-3d560e3a332d",536884986]],["^15",[889,"^12",2,536884989]],["^15",[890,"^K",1696613951430,536884990]],["^15",[890,"^O","^16",536884990]],["^15",[890,"^N",20231006,536884990]],["^15",[890,"^@",true,536884990]],["^15",[890,"^Y","oct 6th, 2023",536884990]],["^15",[890,"^11","Oct 6th, 2023",536884990]],["^15",[890,"^B",1696613951430,536884990]],["^15",[890,"^;","~u6520463f-d87e-46d1-aadc-69d258eb91ad",536884990]],["^15",[891,"^Q","",536884991]],["^15",[891,"^O","^16",536884991]],["^15",[891,"^N",20231006,536884991]],["^15",[891,"^@",true,536884991]],["^15",[891,"^F",890,536884991]],["^15",[891,"^X",890,536884991]],["^15",[891,"^V",890,536884991]],["^15",[891,"^U",890,536884992]],["^15",[891,"^?",["^ "],536884991]],["^15",[891,"^;","~u6520463f-2e68-4281-86dc-61ba9f46faa7",536884991]],["^15",[892,"^12",2,536884994]],["^15",[893,"^K",1696677169839,536884995]],["^15",[893,"^O","^16",536884995]],["^15",[893,"^N",20231007,536884995]],["^15",[893,"^@",true,536884995]],["^15",[893,"^Y","oct 7th, 2023",536884995]],["^15",[893,"^11","Oct 7th, 2023",536884995]],["^15",[893,"^B",1696677169839,536884995]],["^15",[893,"^;","~u65213d31-b340-446e-a556-7ad0f6986470",536884995]],["^15",[894,"^Q","",536884996]],["^15",[894,"^O","^16",536884996]],["^15",[894,"^N",20231007,536884996]],["^15",[894,"^@",true,536884996]],["^15",[894,"^F",893,536884996]],["^15",[894,"^X",893,536884996]],["^15",[894,"^V",893,536884996]],["^15",[894,"^U",893,536884997]],["^15",[894,"^?",["^ "],536884996]],["^15",[894,"^;","~u65213d31-05f1-4308-aa05-7b9750d3d340",536884996]],["^15",[895,"^12",2,536885000]],["^15",[896,"^K",1697902286153,536885001]],["^15",[896,"^O","^16",536885001]],["^15",[896,"^N",20231021,536885001]],["^15",[896,"^@",true,536885001]],["^15",[896,"^Y","oct 21st, 2023",536885001]],["^15",[896,"^11","Oct 21st, 2023",536885001]],["^15",[896,"^B",1697902286153,536885001]],["^15",[896,"^;","~u6533eece-46f2-45f5-aa79-4df79980ba64",536885001]],["^15",[897,"^Q","",536885002]],["^15",[897,"^O","^16",536885002]],["^15",[897,"^N",20231021,536885002]],["^15",[897,"^@",true,536885002]],["^15",[897,"^F",896,536885002]],["^15",[897,"^X",896,536885002]],["^15",[897,"^V",896,536885002]],["^15",[897,"^U",896,536885003]],["^15",[897,"^?",["^ "],536885002]],["^15",[897,"^;","~u6533eece-b52c-479f-9bb1-3a6e7bcff187",536885002]],["^15",[898,"^Q","Programs in [[JavaScript]] are called \"[[<script>]]s\", they can be written directly in webpages and almost all modern web browsers can execute them. All that is required to run [[JavaScript]] code is a JavaScript Engine, which is [V8](https://v8.dev/) in Chrome/Opera/Edge and Spidermonkey in Firefox.\n\nIn browsers, the “script” is parsed then compiled into machine code and executed. It is\nheavily optimized.\n\nIt is a pretty *safe* language, as it doesn’t have low-level access. Still, its capabilities vary depending on the environment executing it, for browsers JS can manipulate the webpage, interact with web servers, get set cookies, remember *user data* etc. On servers (like in Node.js), it can do other things like File I/O etc.\nThat said, JS on the browser has many limitations imposed to enforce security, such as not being\nable to see contents of another tab in the browser, no access to OS, strict browser managed access to peripherals, not being able to connect to other domains unless explicitly allowed by both domains, etc. These are not present in JS outside the scripts in webpages.\n\nGenerally both Web browsers and Node.JS use V8, node simply provides a large runtime library that allows the V8 to do a lot of stuff on the server side.",536885449]],["^15",[898,"^O","^16",536885005]],["^15",[898,"^F",320,536885005]],["^15",[898,"^X",24,536885005]],["^15",[898,"^V",24,536885005]],["^15",[898,"^U",24,536885005]],["^15",[898,"^U",29,536885005]],["^15",[898,"^U",294,536885005]],["^15",[898,"^H",29,536885544]],["^15",[898,"^H",294,536885544]],["^15",[898,"^;","~u6533eed0-6fbe-4f47-b9d8-763d6980b69b",536885005]],["^15",[899,"^K",1697913017465,536885008]],["^15",[899,"^O","^16",536885008]],["^15",[899,"^N",20231022,536885008]],["^15",[899,"^@",true,536885008]],["^15",[899,"^Y","oct 22nd, 2023",536885008]],["^15",[899,"^11","Oct 22nd, 2023",536885008]],["^15",[899,"^B",1697913017465,536885008]],["^15",[899,"^;","~u653418b9-1c78-4290-8a47-1f760012a702",536885008]],["^15",[900,"^Q","",536885009]],["^15",[900,"^O","^16",536885009]],["^15",[900,"^N",20231022,536885009]],["^15",[900,"^@",true,536885009]],["^15",[900,"^F",899,536885009]],["^15",[900,"^X",899,536885009]],["^15",[900,"^V",899,536885009]],["^15",[900,"^U",899,536885010]],["^15",[900,"^?",["^ "],536885009]],["^15",[900,"^;","~u653418b9-130f-46ce-812b-87bdc99e9fa1",536885009]],["^15",[901,"^12",2,536885012]],["^15",[902,"^K",1698047193869,536885013]],["^15",[902,"^O","^16",536885013]],["^15",[902,"^N",20231023,536885013]],["^15",[902,"^@",true,536885013]],["^15",[902,"^Y","oct 23rd, 2023",536885013]],["^15",[902,"^11","Oct 23rd, 2023",536885013]],["^15",[902,"^B",1698047193869,536885013]],["^15",[902,"^;","~u653624d9-7bf3-4eb3-a0a0-8d8c8fd101ce",536885013]],["^15",[903,"^Q","",536885014]],["^15",[903,"^O","^16",536885014]],["^15",[903,"^N",20231023,536885014]],["^15",[903,"^@",true,536885014]],["^15",[903,"^F",902,536885014]],["^15",[903,"^X",902,536885014]],["^15",[903,"^V",902,536885014]],["^15",[903,"^U",902,536885015]],["^15",[903,"^?",["^ "],536885014]],["^15",[903,"^;","~u653624d9-b91c-4b53-8517-9170952024ba",536885014]],["^15",[904,"^12",2,536885017]],["^15",[905,"^K",1698233379825,536885018]],["^15",[905,"^O","^16",536885018]],["^15",[905,"^N",20231025,536885018]],["^15",[905,"^@",true,536885018]],["^15",[905,"^Y","oct 25th, 2023",536885018]],["^15",[905,"^11","Oct 25th, 2023",536885018]],["^15",[905,"^B",1698233379825,536885018]],["^15",[905,"^;","~u6538fc23-f182-4f21-917b-63fe168d7004",536885018]],["^15",[906,"^Q","",536885019]],["^15",[906,"^O","^16",536885019]],["^15",[906,"^N",20231025,536885019]],["^15",[906,"^@",true,536885019]],["^15",[906,"^F",905,536885019]],["^15",[906,"^X",905,536885019]],["^15",[906,"^V",905,536885019]],["^15",[906,"^U",905,536885020]],["^15",[906,"^?",["^ "],536885019]],["^15",[906,"^;","~u6538fc23-0fde-4456-b78e-fc1ad8219885",536885019]],["^15",[907,"^K",1698258602326,536885022]],["^15",[907,"^O","^16",536885022]],["^15",[907,"^N",20231026,536885022]],["^15",[907,"^@",true,536885022]],["^15",[907,"^Y","oct 26th, 2023",536885022]],["^15",[907,"^11","Oct 26th, 2023",536885022]],["^15",[907,"^B",1698258602326,536885022]],["^15",[907,"^;","~u65395eaa-ecd6-4e65-ac82-15453ce43c5a",536885022]],["^15",[908,"^Q","",536885023]],["^15",[908,"^O","^16",536885023]],["^15",[908,"^N",20231026,536885023]],["^15",[908,"^@",true,536885023]],["^15",[908,"^F",907,536885023]],["^15",[908,"^X",907,536885023]],["^15",[908,"^V",907,536885023]],["^15",[908,"^U",907,536885024]],["^15",[908,"^?",["^ "],536885023]],["^15",[908,"^;","~u65395eaa-0a1a-4a70-b514-2b7d0bda8b17",536885023]],["^15",[909,"^12",2,536885026]],["^15",[910,"^K",1698413498787,536885027]],["^15",[910,"^O","^16",536885027]],["^15",[910,"^N",20231027,536885027]],["^15",[910,"^@",true,536885027]],["^15",[910,"^Y","oct 27th, 2023",536885027]],["^15",[910,"^11","Oct 27th, 2023",536885027]],["^15",[910,"^B",1698413498787,536885027]],["^15",[910,"^;","~u653bbbba-2a62-4361-8301-fa3b138892ec",536885027]],["^15",[911,"^Q","",536885028]],["^15",[911,"^O","^16",536885028]],["^15",[911,"^N",20231027,536885028]],["^15",[911,"^@",true,536885028]],["^15",[911,"^F",910,536885028]],["^15",[911,"^X",910,536885028]],["^15",[911,"^V",910,536885028]],["^15",[911,"^U",910,536885029]],["^15",[911,"^?",["^ "],536885028]],["^15",[911,"^;","~u653bbbba-cfa8-4dca-9f12-7e1988691900",536885028]],["^15",[912,"^12",2,536885031]],["^15",[913,"^K",1698431435441,536885033]],["^15",[913,"^O","^16",536885033]],["^15",[913,"^N",20231028,536885033]],["^15",[913,"^@",true,536885033]],["^15",[913,"^Y","oct 28th, 2023",536885033]],["^15",[913,"^11","Oct 28th, 2023",536885033]],["^15",[913,"^B",1698431435441,536885033]],["^15",[913,"^;","~u653c01cb-75f4-40fa-b4ed-eb2451e0328b",536885033]],["^15",[914,"^Q","",536885034]],["^15",[914,"^O","^16",536885034]],["^15",[914,"^N",20231028,536885034]],["^15",[914,"^@",true,536885034]],["^15",[914,"^F",913,536885034]],["^15",[914,"^X",913,536885034]],["^15",[914,"^V",913,536885034]],["^15",[914,"^U",913,536885035]],["^15",[914,"^?",["^ "],536885034]],["^15",[914,"^;","~u653c01cb-8441-4147-a06e-429fe15c1d56",536885034]],["^15",[915,"^12",2,536885037]],["^15",[916,"^Q","",536885045]],["^15",[916,"^O","^16",536885045]],["^15",[916,"^@",false,536885045]],["^15",[916,"^F",285,536885045]],["^15",[916,"^X",285,536885045]],["^15",[916,"^V",285,536885045]],["^15",[916,"^U",285,536885046]],["^15",[916,"^?",["^ "],536885045]],["^15",[916,"^;","~u653cf463-fab7-4997-b58d-d6e228dee75b",536885045]],["^15",[917,"^K",1698518292557,536885049]],["^15",[917,"^O","^16",536885049]],["^15",[917,"^N",20231029,536885049]],["^15",[917,"^@",true,536885049]],["^15",[917,"^Y","oct 29th, 2023",536885049]],["^15",[917,"^11","Oct 29th, 2023",536885049]],["^15",[917,"^B",1698518292557,536885049]],["^15",[917,"^;","~u653d5514-96f3-41a4-9b82-e88573901421",536885049]],["^15",[918,"^Q","",536885050]],["^15",[918,"^O","^16",536885050]],["^15",[918,"^N",20231029,536885050]],["^15",[918,"^@",true,536885050]],["^15",[918,"^F",917,536885050]],["^15",[918,"^X",917,536885050]],["^15",[918,"^V",917,536885050]],["^15",[918,"^U",917,536885051]],["^15",[918,"^?",["^ "],536885050]],["^15",[918,"^;","~u653d5514-bc4d-4db9-81a2-8dd4bcfc2e6e",536885050]],["^15",[919,"^12",2,536885053]],["^15",[920,"^K",1698836644758,536885054]],["^15",[920,"^O","^16",536885054]],["^15",[920,"^N",20231101,536885054]],["^15",[920,"^@",true,536885054]],["^15",[920,"^Y","nov 1st, 2023",536885054]],["^15",[920,"^11","Nov 1st, 2023",536885054]],["^15",[920,"^B",1698836644758,536885054]],["^15",[920,"^;","~u654230a4-b8e0-4edf-b9c9-5785449e696a",536885054]],["^15",[921,"^Q","",536885055]],["^15",[921,"^O","^16",536885055]],["^15",[921,"^N",20231101,536885055]],["^15",[921,"^@",true,536885055]],["^15",[921,"^F",920,536885055]],["^15",[921,"^X",920,536885055]],["^15",[921,"^V",920,536885055]],["^15",[921,"^U",920,536885056]],["^15",[921,"^?",["^ "],536885055]],["^15",[921,"^;","~u654230a4-c57f-42aa-b8d9-91c2302fe5c3",536885055]],["^15",[922,"^12",2,536885060]],["^15",[923,"^K",1705298950415,536885061]],["^15",[923,"^O","^16",536885061]],["^15",[923,"^N",20240115,536885061]],["^15",[923,"^@",true,536885061]],["^15",[923,"^Y","jan 15th, 2024",536885061]],["^15",[923,"^11","Jan 15th, 2024",536885061]],["^15",[923,"^B",1705298950415,536885061]],["^15",[923,"^;","~u65a4cc06-613a-4953-944f-6c93094bd896",536885061]],["^15",[924,"^Q","",536885062]],["^15",[924,"^O","^16",536885062]],["^15",[924,"^N",20240115,536885062]],["^15",[924,"^@",true,536885062]],["^15",[924,"^F",923,536885062]],["^15",[924,"^X",923,536885062]],["^15",[924,"^V",923,536885062]],["^15",[924,"^U",923,536885063]],["^15",[924,"^?",["^ "],536885062]],["^15",[924,"^;","~u65a4cc06-726d-47e8-846a-df48c5c75432",536885062]],["^15",[925,"^Q","In JS, much like ``classes`` in [[C++]], an [[Object]] can inherit another Object. This is done using an inbuilt Object property known as ``[[Prototype]]`` of an Object by the spec. In Implementation, this property can be accessed using the getter/setter ``__proto__``. This is not the same as directly accessing the ``[[Prototype]]`` property. This getter/setter is historical, modern JS recommends using ``Object.getPrototypeOf(<obj>)`` and ``Object.setPrototypeOf(<obj>, <prototype object>)`` instead. We can also use ``Object.create(<prototype object>, <descriptor object>)`` to create an Object with a prototype set.\n\nThis property can have either the value of [[null]] or another Object.  \n![image.png](../assets/image_1686622520624_0.png)\n\nIf set, it acts like inheritance. So if we access a property and it is not present in the ``child`` Object, it is looked for in the ``parent`` Object. And if it is in both then the child Object's property has the parent's property [[Shadowed]].\n\nFor ex.:\n```js\nlet x= {\n  run: true,\n  cow: \"noo\"\n};\n\nlet y= {\n  cow: \"nyaa\"\n};\ny.__proto__ = x;\nconsole.log(y.run); //prints true\nconsole.log(y.cow); //prints nyaa\nconsole.log(y.__proto__ == x); //true\n```\n\nWe can directly use ``__proto__`` in an Object too.\n```js\nlet x ={};\nlet y = {\n __proto__: x, //works\n};\n```\nbut all these ways of getting/setting/initializing the `` [[Prototype]]`` have their modern equivalents\n```js\nlet y ={}\nlet x = Object.create(y, {\n yo: {value: 2}\n});\nconsole.log(Object.getPrototypeOf(x) == y); //true\nlet z ={};\nObject.setPrototypeOf(x,z);\nconsole.log(Object.getPrototypeOf(x) == z); //true\n```\n\nHowever, it is unrecommended to get/set ``[[Prototype]]`` often, it is acceptable for one time but not anymore as each operation is slow. The JS engine has many optimizations on Objects and they break if we modify``[[Prototype]]`` hence leading to performance loss.",536885065]],["^15",[925,"^O","^16",536885065]],["^15",[925,"^F",687,536885065]],["^15",[925,"^X",542,536885065]],["^15",[925,"^V",542,536885065]],["^15",[925,"^U",39,536885065]],["^15",[925,"^U",42,536885065]],["^15",[925,"^U",147,536885065]],["^15",[925,"^U",173,536885065]],["^15",[925,"^U",542,536885065]],["^15",[925,"^H",39,536885065]],["^15",[925,"^H",42,536885065]],["^15",[925,"^H",147,536885065]],["^15",[925,"^H",173,536885065]],["^15",[925,"^;","~u65a4cc08-0eb9-45fe-9c93-30573b074020",536885065]],["^15",[926,"^Q","",536885068]],["^15",[926,"^O","^16",536885068]],["^15",[926,"^F",567,536885068]],["^15",[926,"^X",39,536885068]],["^15",[926,"^V",39,536885068]],["^15",[926,"^U",39,536885068]],["^15",[926,"^;","~u65a4cc08-7bf2-4563-b2d0-69a0900248fb",536885068]],["^15",[928,"^Q","The ',' (comma) operator has a precedency of 1. This operator only returns the value of its right operand.\nFor ex.:\n```js\nlet x= (2+3,4+5); //returns 9\n```\n\\+ has a higher precedence than ',' so it is solved first and 2+3 becomes 5, 4+5 becomes 9. Then the comma operator returns the right operand, 9.",536885513]],["^15",[928,"^O","^16",536885071]],["^15",[928,"^F",583,536885071]],["^15",[928,"^X",76,536885071]],["^15",[928,"^V",76,536885071]],["^15",[928,"^U",76,536885071]],["^15",[928,"^?",["^ "],536885513]],["^15",[928,"^;","~u65a4cc08-d5ff-4d07-ace5-1ba80663c187",536885071]],["^15",[929,"^K",1705343417433,536885074]],["^15",[929,"^O","^16",536885074]],["^15",[929,"^N",20240116,536885074]],["^15",[929,"^@",true,536885074]],["^15",[929,"^Y","jan 16th, 2024",536885074]],["^15",[929,"^11","Jan 16th, 2024",536885074]],["^15",[929,"^B",1705343417433,536885074]],["^15",[929,"^;","~u65a579b9-a415-4716-bafc-1c3d1375dccd",536885074]],["^15",[930,"^Q","",536885075]],["^15",[930,"^O","^16",536885075]],["^15",[930,"^N",20240116,536885075]],["^15",[930,"^@",true,536885075]],["^15",[930,"^F",929,536885075]],["^15",[930,"^X",929,536885075]],["^15",[930,"^V",929,536885075]],["^15",[930,"^U",929,536885076]],["^15",[930,"^?",["^ "],536885075]],["^15",[930,"^;","~u65a579b9-c04a-483f-bd4d-865ae15883a6",536885075]],["^15",[931,"^12",2,536885078]],["^15",[932,"^K",1707318998921,536885079]],["^15",[932,"^O","^16",536885079]],["^15",[932,"^N",20240207,536885079]],["^15",[932,"^@",true,536885079]],["^15",[932,"^Y","feb 7th, 2024",536885079]],["^15",[932,"^11","Feb 7th, 2024",536885079]],["^15",[932,"^B",1707318998921,536885079]],["^15",[932,"^;","~u65c39ed6-1fde-44e6-bd16-53f531a5d61b",536885079]],["^15",[933,"^Q","",536885080]],["^15",[933,"^O","^16",536885080]],["^15",[933,"^N",20240207,536885080]],["^15",[933,"^@",true,536885080]],["^15",[933,"^F",932,536885080]],["^15",[933,"^X",932,536885080]],["^15",[933,"^V",932,536885080]],["^15",[933,"^U",932,536885081]],["^15",[933,"^?",["^ "],536885080]],["^15",[933,"^;","~u65c39ed6-9fe2-44b0-9b50-8696d059dd48",536885080]],["^15",[934,"^12",2,536885086]],["^15",[935,"^K",1707419487603,536885087]],["^15",[935,"^O","^16",536885087]],["^15",[935,"^N",20240209,536885087]],["^15",[935,"^@",true,536885087]],["^15",[935,"^Y","feb 9th, 2024",536885087]],["^15",[935,"^11","Feb 9th, 2024",536885087]],["^15",[935,"^B",1707419487603,536885087]],["^15",[935,"^;","~u65c5275f-da43-4d52-bfe2-6107938c4dbe",536885087]],["^15",[936,"^Q","",536885088]],["^15",[936,"^O","^16",536885088]],["^15",[936,"^N",20240209,536885088]],["^15",[936,"^@",true,536885088]],["^15",[936,"^F",935,536885088]],["^15",[936,"^X",935,536885088]],["^15",[936,"^V",935,536885088]],["^15",[936,"^U",935,536885089]],["^15",[936,"^?",["^ "],536885088]],["^15",[936,"^;","~u65c5275f-4cfb-4bbd-96e2-e9b86022ab5b",536885088]],["^15",[937,"^12",2,536885091]],["^15",[938,"^K",1708101454271,536885092]],["^15",[938,"^O","^16",536885092]],["^15",[938,"^N",20240216,536885092]],["^15",[938,"^@",true,536885092]],["^15",[938,"^Y","feb 16th, 2024",536885092]],["^15",[938,"^11","Feb 16th, 2024",536885092]],["^15",[938,"^B",1708101454271,536885092]],["^15",[938,"^;","~u65cf8f4e-9af9-4239-ba16-b4cc789341e4",536885092]],["^15",[939,"^Q","",536885093]],["^15",[939,"^O","^16",536885093]],["^15",[939,"^N",20240216,536885093]],["^15",[939,"^@",true,536885093]],["^15",[939,"^F",938,536885093]],["^15",[939,"^X",938,536885093]],["^15",[939,"^V",938,536885093]],["^15",[939,"^U",938,536885094]],["^15",[939,"^?",["^ "],536885093]],["^15",[939,"^;","~u65cf8f4e-591d-4c24-8047-9cd1619657ab",536885093]],["^15",[940,"^K",1708108204242,536885096]],["^15",[940,"^O","^16",536885096]],["^15",[940,"^N",20240217,536885096]],["^15",[940,"^@",true,536885096]],["^15",[940,"^Y","feb 17th, 2024",536885096]],["^15",[940,"^11","Feb 17th, 2024",536885096]],["^15",[940,"^B",1708108204242,536885096]],["^15",[940,"^;","~u65cfa9ac-2c01-4ede-a065-fa803db75742",536885096]],["^15",[941,"^Q","",536885097]],["^15",[941,"^O","^16",536885097]],["^15",[941,"^N",20240217,536885097]],["^15",[941,"^@",true,536885097]],["^15",[941,"^F",940,536885097]],["^15",[941,"^X",940,536885097]],["^15",[941,"^V",940,536885097]],["^15",[941,"^U",940,536885098]],["^15",[941,"^?",["^ "],536885097]],["^15",[941,"^;","~u65cfa9ac-de3a-45f1-aa4c-4f709e66dd5a",536885097]],["^15",[942,"^12",2,536885100]],["^15",[943,"^K",1708950060556,536885101]],["^15",[943,"^O","^16",536885101]],["^15",[943,"^N",20240226,536885101]],["^15",[943,"^@",true,536885101]],["^15",[943,"^Y","feb 26th, 2024",536885101]],["^15",[943,"^11","Feb 26th, 2024",536885101]],["^15",[943,"^B",1708950060556,536885101]],["^15",[943,"^;","~u65dc822c-0df9-4674-af7e-3ae68a444a8b",536885101]],["^15",[944,"^Q","",536885102]],["^15",[944,"^O","^16",536885102]],["^15",[944,"^N",20240226,536885102]],["^15",[944,"^@",true,536885102]],["^15",[944,"^F",943,536885102]],["^15",[944,"^X",943,536885102]],["^15",[944,"^V",943,536885102]],["^15",[944,"^U",943,536885103]],["^15",[944,"^?",["^ "],536885102]],["^15",[944,"^;","~u65dc822c-c17f-4033-a6e7-e09f8368a73e",536885102]],["^15",[945,"^12",2,536885106]],["^15",[946,"^K",1709811389214,536885107]],["^15",[946,"^O","^16",536885107]],["^15",[946,"^N",20240307,536885107]],["^15",[946,"^@",true,536885107]],["^15",[946,"^Y","mar 7th, 2024",536885107]],["^15",[946,"^11","Mar 7th, 2024",536885107]],["^15",[946,"^B",1709811389214,536885107]],["^15",[946,"^;","~u65e9a6bd-4d14-4fb4-9858-f4de66666835",536885107]],["^15",[947,"^Q","",536885108]],["^15",[947,"^O","^16",536885108]],["^15",[947,"^N",20240307,536885108]],["^15",[947,"^@",true,536885108]],["^15",[947,"^F",946,536885108]],["^15",[947,"^X",946,536885108]],["^15",[947,"^V",946,536885108]],["^15",[947,"^U",946,536885109]],["^15",[947,"^?",["^ "],536885108]],["^15",[947,"^;","~u65e9a6bd-260c-4bb3-a1f2-61a7aefe0b08",536885108]],["^15",[948,"^12",2,536885111]],["^15",[949,"^K",1710431690294,536885112]],["^15",[949,"^O","^16",536885112]],["^15",[949,"^N",20240314,536885112]],["^15",[949,"^@",true,536885112]],["^15",[949,"^Y","mar 14th, 2024",536885112]],["^15",[949,"^11","Mar 14th, 2024",536885112]],["^15",[949,"^B",1710431690294,536885112]],["^15",[949,"^;","~u65f31dca-d4b8-4e85-bb93-ed368d0ec4af",536885112]],["^15",[950,"^Q","",536885113]],["^15",[950,"^O","^16",536885113]],["^15",[950,"^N",20240314,536885113]],["^15",[950,"^@",true,536885113]],["^15",[950,"^F",949,536885113]],["^15",[950,"^X",949,536885113]],["^15",[950,"^V",949,536885113]],["^15",[950,"^U",949,536885114]],["^15",[950,"^?",["^ "],536885113]],["^15",[950,"^;","~u65f31dca-da51-41fe-a037-4f03bd839788",536885113]],["^15",[951,"^12",2,536885119]],["^15",[952,"^K",1712759865318,536885120]],["^15",[952,"^O","^16",536885120]],["^15",[952,"^N",20240410,536885120]],["^15",[952,"^@",true,536885120]],["^15",[952,"^Y","apr 10th, 2024",536885120]],["^15",[952,"^11","Apr 10th, 2024",536885120]],["^15",[952,"^B",1712759865318,536885120]],["^15",[952,"^;","~u6616a439-e654-4003-a157-360432639a70",536885120]],["^15",[953,"^Q","",536885121]],["^15",[953,"^O","^16",536885121]],["^15",[953,"^N",20240410,536885121]],["^15",[953,"^@",true,536885121]],["^15",[953,"^F",952,536885121]],["^15",[953,"^X",952,536885121]],["^15",[953,"^V",952,536885121]],["^15",[953,"^U",952,536885122]],["^15",[953,"^?",["^ "],536885121]],["^15",[953,"^;","~u6616a439-e137-471d-8402-509a4cfa2282",536885121]],["^15",[954,"^Q","Ctor functions should be PascalCase by convention. \nnew keyword here creates a new empty Object and passes it to Yo(), which then uses ``this`` to modify it. Then the value of ``this`` is returned implicitly.\n\nArrow Functions can't be used with Ctor Fns.",536885130]],["^15",[954,"^O","^16",536885130]],["^15",[954,"^F",386,536885130]],["^15",[954,"^X",44,536885130]],["^15",[954,"^V",44,536885130]],["^15",[954,"^U",44,536885130]],["^15",[954,"^;","~u6616a43b-71ce-4367-917a-4a8b0e984146",536885130]],["^15",[955,"^Q","",536885130]],["^15",[955,"^O","^16",536885130]],["^15",[955,"^F",399,536885130]],["^15",[955,"^X",44,536885130]],["^15",[955,"^V",44,536885130]],["^15",[955,"^U",44,536885130]],["^15",[955,"^;","~u6616a43b-cb64-4920-a279-cf48947d6254",536885130]],["^15",[956,"^Q","",536885136]],["^15",[956,"^O","^16",536885136]],["^15",[956,"^F",563,536885136]],["^15",[956,"^X",39,536885136]],["^15",[956,"^V",39,536885136]],["^15",[956,"^U",39,536885136]],["^15",[956,"^;","~u6616a43c-7d92-45c9-a4f3-1185c9303ef6",536885136]],["^15",[957,"^Q","Computed Properties\nProperty names inside ``[ ]`` are computed, and the computed values are then assigned the values.\nThese properties can accept variables too.\nFor ex.:\n\n```js\n'use strict';\n\nfunction yo(){\n    let x=\"aye\";\n\n    let obj= {\n        x:\"yoo\",\n        [x]:4,\n    };\n\n    let obj2 = {\n        x: 2,\n        [x]:3,\n      \t[x+\"X\"]: 34,\n    };\n\n    console.log(obj.x);\t //prints yoo\n    console.log(obj[\"aye\"]); //prints 4\n  \n    console.log(obj2.x); //prints 2\n    console.log(obj2[\"aye\"]); //prints 3\n  \tconsole.log(obj2.aye);\t//prints 3\n\tconsole.log(obj2[\"ayeX\"]); //prints 34\n  \tconsole.log(obj2.ayeX); //prints 34\n}\n\nyo();\n\n```",536885136]],["^15",[957,"^O","^16",536885136]],["^15",[957,"^F",558,536885136]],["^15",[957,"^X",39,536885136]],["^15",[957,"^V",39,536885136]],["^15",[957,"^U",39,536885136]],["^15",[957,"^;","~u6616a43c-e144-4a36-9bb4-2d044efca009",536885136]],["^15",[958,"^Q","There are various other Symbols, that can be used to fine-tune [[Object]]s.\nThey are known as [System Symbols](https://tc39.es/ecma262/#sec-well-known-symbols).",536885143]],["^15",[958,"^O","^16",536885143]],["^15",[958,"^F",656,536885143]],["^15",[958,"^X",43,536885143]],["^15",[958,"^V",43,536885143]],["^15",[958,"^U",39,536885143]],["^15",[958,"^U",43,536885143]],["^15",[958,"^H",39,536885143]],["^15",[958,"^;","~u6616a43c-a2cf-4f8e-bdd3-2f4950c86395",536885143]],["^15",[961,"^?",["^ ","~:logseq.macro-name","cards","~:logseq.macro-arguments",[]],536885165]],["^15",[961,"^W","macro",536885165]],["^15",[961,"^T","cards ",536885165]],["^15",[964,"^3","{0 {2.5 3.58}}",536885226]],["^15",[964,"^18",1712760231113,536885226]],["^15",[964,"^19","~m1712760229039",536885227]],["^15",[964,"^Z","logseq/srs-of-matrix.edn",536885226]],["^15",[965,"^Q","",536885229]],["^15",[965,"^O","^16",536885229]],["^15",[965,"^@",false,536885229]],["^15",[965,"^F",2,536885229]],["^15",[965,"^X",2,536885229]],["^15",[965,"^V",2,536885229]],["^15",[965,"^U",2,536885230]],["^15",[965,"^?",["^ "],536885229]],["^15",[965,"^;","~u6616a5ab-ec9c-43b1-9e3b-540e5ac60000",536885229]],["^15",[984,"^Q","JS files are saved with the extension ``.js``",536885474]],["^15",[984,"^O","^16",536885470]],["^15",[984,"^F",898,536885470]],["^15",[984,"^X",24,536885470]],["^15",[984,"^V",24,536885470]],["^15",[984,"^U",24,536885471]],["^15",[984,"^;","~u6616a6a6-5435-4e12-a75e-e7e4db27ec60",536885470]],["^15",[985,"^K",1712773840494,536885486]],["^15",[985,"^O","^16",536885486]],["^15",[985,"^N",20240411,536885486]],["^15",[985,"^@",true,536885486]],["^15",[985,"^Y","apr 11th, 2024",536885486]],["^15",[985,"^11","Apr 11th, 2024",536885486]],["^15",[985,"^B",1712773840494,536885486]],["^15",[985,"^;","~u6616dad0-45b5-4c76-93c2-f5ff377ab681",536885486]],["^15",[986,"^Q","",536885487]],["^15",[986,"^O","^16",536885487]],["^15",[986,"^N",20240411,536885487]],["^15",[986,"^@",true,536885487]],["^15",[986,"^F",985,536885487]],["^15",[986,"^X",985,536885487]],["^15",[986,"^V",985,536885487]],["^15",[986,"^U",985,536885488]],["^15",[986,"^?",["^ "],536885487]],["^15",[986,"^;","~u6616dad0-656e-4ec8-8668-06f1cbe54b5e",536885487]],["^15",[987,"^K",1712860240412,536885489]],["^15",[987,"^O","^16",536885489]],["^15",[987,"^N",20240412,536885489]],["^15",[987,"^@",true,536885489]],["^15",[987,"^Y","apr 12th, 2024",536885489]],["^15",[987,"^11","Apr 12th, 2024",536885489]],["^15",[987,"^B",1712860240412,536885489]],["^15",[987,"^;","~u66182c50-e713-4a0e-98ee-da6e8202a565",536885489]],["^15",[988,"^Q","",536885490]],["^15",[988,"^O","^16",536885490]],["^15",[988,"^N",20240412,536885490]],["^15",[988,"^@",true,536885490]],["^15",[988,"^F",987,536885490]],["^15",[988,"^X",987,536885490]],["^15",[988,"^V",987,536885490]],["^15",[988,"^U",987,536885491]],["^15",[988,"^?",["^ "],536885490]],["^15",[988,"^;","~u66182c50-becc-4772-a215-d0f9735e46f4",536885490]],["^15",[989,"^K",1712946640441,536885492]],["^15",[989,"^O","^16",536885492]],["^15",[989,"^N",20240413,536885492]],["^15",[989,"^@",true,536885492]],["^15",[989,"^Y","apr 13th, 2024",536885492]],["^15",[989,"^11","Apr 13th, 2024",536885492]],["^15",[989,"^B",1712946640441,536885492]],["^15",[989,"^;","~u66197dd0-2109-4022-933d-cfdab1bc17e8",536885492]],["^15",[990,"^Q","",536885493]],["^15",[990,"^O","^16",536885493]],["^15",[990,"^N",20240413,536885493]],["^15",[990,"^@",true,536885493]],["^15",[990,"^F",989,536885493]],["^15",[990,"^X",989,536885493]],["^15",[990,"^V",989,536885493]],["^15",[990,"^U",989,536885494]],["^15",[990,"^?",["^ "],536885493]],["^15",[990,"^;","~u66197dd0-e67e-455b-906a-97b59ee22044",536885493]],["^15",[991,"^K",1713033040424,536885495]],["^15",[991,"^O","^16",536885495]],["^15",[991,"^N",20240414,536885495]],["^15",[991,"^@",true,536885495]],["^15",[991,"^Y","apr 14th, 2024",536885495]],["^15",[991,"^11","Apr 14th, 2024",536885495]],["^15",[991,"^B",1713033040424,536885495]],["^15",[991,"^;","~u661acf50-9638-41f0-b239-2931d918217b",536885495]],["^15",[992,"^Q","",536885496]],["^15",[992,"^O","^16",536885496]],["^15",[992,"^N",20240414,536885496]],["^15",[992,"^@",true,536885496]],["^15",[992,"^F",991,536885496]],["^15",[992,"^X",991,536885496]],["^15",[992,"^V",991,536885496]],["^15",[992,"^U",991,536885497]],["^15",[992,"^?",["^ "],536885496]],["^15",[992,"^;","~u661acf50-60e5-46f5-95a7-f48ad0db88d4",536885496]],["^15",[993,"^12",2,536885499]],["^15",[994,"^K",1713377825804,536885500]],["^15",[994,"^O","^16",536885500]],["^15",[994,"^N",20240417,536885500]],["^15",[994,"^@",true,536885500]],["^15",[994,"^Y","apr 17th, 2024",536885500]],["^15",[994,"^11","Apr 17th, 2024",536885500]],["^15",[994,"^B",1713377825804,536885500]],["^15",[994,"^;","~u66201221-e75d-4448-8281-e162d515523b",536885500]],["^15",[995,"^Q","",536885501]],["^15",[995,"^O","^16",536885501]],["^15",[995,"^N",20240417,536885501]],["^15",[995,"^@",true,536885501]],["^15",[995,"^F",994,536885501]],["^15",[995,"^X",994,536885501]],["^15",[995,"^V",994,536885501]],["^15",[995,"^U",994,536885502]],["^15",[995,"^?",["^ "],536885501]],["^15",[995,"^;","~u66201221-81fe-405e-b093-f6ff025a9a7a",536885501]],["^15",[996,"^K",1713378606407,536885507]],["^15",[996,"^O","^16",536885507]],["^15",[996,"^N",20240418,536885507]],["^15",[996,"^@",true,536885507]],["^15",[996,"^Y","apr 18th, 2024",536885507]],["^15",[996,"^11","Apr 18th, 2024",536885507]],["^15",[996,"^B",1713378606407,536885507]],["^15",[996,"^;","~u6620152e-bac2-4c74-9e73-de9ef0ef6c20",536885507]],["^15",[997,"^Q","",536885508]],["^15",[997,"^O","^16",536885508]],["^15",[997,"^N",20240418,536885508]],["^15",[997,"^@",true,536885508]],["^15",[997,"^F",996,536885508]],["^15",[997,"^X",996,536885508]],["^15",[997,"^V",996,536885508]],["^15",[997,"^U",996,536885509]],["^15",[997,"^?",["^ "],536885508]],["^15",[997,"^;","~u6620152e-2ee6-4eea-8a08-11333b3d5f8d",536885508]],["^15",[998,"^12",2,536885533]],["^15",[999,"^K",1714239916693,536885534]],["^15",[999,"^O","^16",536885534]],["^15",[999,"^N",20240427,536885534]],["^15",[999,"^@",true,536885534]],["^15",[999,"^Y","apr 27th, 2024",536885534]],["^15",[999,"^11","Apr 27th, 2024",536885534]],["^15",[999,"^B",1714239916693,536885534]],["^15",[999,"^;","~u662d39ac-dd7a-4114-88d8-ae1b4a133d18",536885534]],["^15",[1000,"^Q","",536885535]],["^15",[1000,"^O","^16",536885535]],["^15",[1000,"^N",20240427,536885535]],["^15",[1000,"^@",true,536885535]],["^15",[1000,"^F",999,536885535]],["^15",[1000,"^X",999,536885535]],["^15",[1000,"^V",999,536885535]],["^15",[1000,"^U",999,536885536]],["^15",[1000,"^?",["^ "],536885535]],["^15",[1000,"^;","~u662d39ac-170e-4977-94f9-5d4fa1165744",536885535]],["^15",[1001,"^12",2,536885539]],["^15",[1002,"^K",1714407168469,536885540]],["^15",[1002,"^O","^16",536885540]],["^15",[1002,"^N",20240429,536885540]],["^15",[1002,"^@",true,536885540]],["^15",[1002,"^Y","apr 29th, 2024",536885540]],["^15",[1002,"^11","Apr 29th, 2024",536885540]],["^15",[1002,"^B",1714407168469,536885540]],["^15",[1002,"^;","~u662fc700-ef6a-462a-98c9-2407aa9f2773",536885540]],["^15",[1003,"^Q","",536885541]],["^15",[1003,"^O","^16",536885541]],["^15",[1003,"^N",20240429,536885541]],["^15",[1003,"^@",true,536885541]],["^15",[1003,"^F",1002,536885541]],["^15",[1003,"^X",1002,536885541]],["^15",[1003,"^V",1002,536885541]],["^15",[1003,"^U",1002,536885542]],["^15",[1003,"^?",["^ "],536885541]],["^15",[1003,"^;","~u662fc700-3754-4900-a0d7-b7612ed0321f",536885541]],["^15",[1004,"^Q","",536885544]],["^15",[1004,"^O","^16",536885544]],["^15",[1004,"^F",822,536885544]],["^15",[1004,"^X",24,536885544]],["^15",[1004,"^V",24,536885544]],["^15",[1004,"^U",24,536885544]],["^15",[1004,"^;","~u662fc702-9edc-4e76-92ac-a4d64a6b31e4",536885544]],["^15",[1005,"^12",2,536885547]]]]]]